
STM32F429I-DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011178  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016d8  08011328  08011328  00012328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000001a6  08012a00  08012a00  00013a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  08012ba8  08012ba8  00013ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 0000000e  08012bc0  08012bc0  00013bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 ExtFlashSection 000d1b60  08012bd0  08012bd0  00013bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  080e4730  080e4730  000e60f8  2**0
                  CONTENTS
  8 .ARM          00000008  080e4730  080e4730  000e5730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  080e4738  080e4738  000e60f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000014  080e4738  080e4738  000e5738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  080e474c  080e474c  000e574c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         000000f8  20000000  080e4754  000e6000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          00012700  200000f8  080e484c  000e60f8  2**2
                  ALLOC
 14 ._user_heap_stack 00001400  200127f8  080e484c  000e67f8  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  000e60f8  2**0
                  CONTENTS, READONLY
 16 TouchGFX_Framebuffer 00070800  d0000000  d0000000  000e7000  2**2
                  ALLOC
 17 .debug_line   0004abaf  00000000  00000000  000e6128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000079  00000000  00000000  00130cd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_info   0009c57a  00000000  00000000  00130d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 00013031  00000000  00000000  001cd2ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 00002dd8  00000000  00000000  001e0300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0011a8df  00000000  00000000  001e30d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_rnglists 00003105  00000000  00000000  002fd9b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_loclists 000192c8  00000000  00000000  00300abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_macro  00030efa  00000000  00000000  00319d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .comment      000000c2  00000000  00000000  0034ac7e  2**0
                  CONTENTS, READONLY
 27 .debug_frame  00007ff0  00000000  00000000  0034ad40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000f8 	.word	0x200000f8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08011310 	.word	0x08011310

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000fc 	.word	0x200000fc
 80001ec:	08011310 	.word	0x08011310

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80005bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005f4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80005c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80005c2:	e003      	b.n	80005cc <LoopCopyDataInit>

080005c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80005c4:	4b0c      	ldr	r3, [pc, #48]	@ (80005f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80005c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80005c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80005ca:	3104      	adds	r1, #4

080005cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005cc:	480b      	ldr	r0, [pc, #44]	@ (80005fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80005ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80005d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80005d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80005d4:	d3f6      	bcc.n	80005c4 <CopyDataInit>
  ldr  r2, =_sbss
 80005d6:	4a0b      	ldr	r2, [pc, #44]	@ (8000604 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80005d8:	e002      	b.n	80005e0 <LoopFillZerobss>

080005da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80005da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80005dc:	f842 3b04 	str.w	r3, [r2], #4

080005e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80005e0:	4b09      	ldr	r3, [pc, #36]	@ (8000608 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80005e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80005e4:	d3f9      	bcc.n	80005da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005e6:	f003 fa27 	bl	8003a38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ea:	f010 f923 	bl	8010834 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005ee:	f000 fed3 	bl	8001398 <main>
  bx  lr    
 80005f2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80005f4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80005f8:	080e4754 	.word	0x080e4754
  ldr  r0, =_sdata
 80005fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000600:	200000f8 	.word	0x200000f8
  ldr  r2, =_sbss
 8000604:	200000f8 	.word	0x200000f8
  ldr  r3, = _ebss
 8000608:	200127f8 	.word	0x200127f8

0800060c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800060c:	e7fe      	b.n	800060c <ADC_IRQHandler>

0800060e <MX_TouchGFX_Init>:
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 800060e:	f000 bcbd 	b.w	8000f8c <touchgfx_init>

08000612 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8000612:	f000 bd2b 	b.w	800106c <touchgfx_taskEntry>

08000616 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8000616:	4770      	bx	lr

08000618 <_ZN20STM32TouchControllerD0Ev>:
 8000618:	b510      	push	{r4, lr}
 800061a:	2104      	movs	r1, #4
 800061c:	4604      	mov	r4, r0
 800061e:	f00f fe2b 	bl	8010278 <_ZdlPvj>
 8000622:	4620      	mov	r0, r4
 8000624:	bd10      	pop	{r4, pc}
	...

08000628 <_Z11BSP_TS_Inittt>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8000628:	b538      	push	{r3, r4, r5, lr}
    uint8_t ret = TS_ERROR;

    /* Initialize x and y positions boundaries */
    TsXBoundary = XSize;
 800062a:	4b0c      	ldr	r3, [pc, #48]	@ (800065c <_Z11BSP_TS_Inittt+0x34>)
    TsYBoundary = YSize;

    /* Read ID and verify if the IO expander is ready */
    if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 800062c:	4c0c      	ldr	r4, [pc, #48]	@ (8000660 <_Z11BSP_TS_Inittt+0x38>)
    TsXBoundary = XSize;
 800062e:	8018      	strh	r0, [r3, #0]
    TsYBoundary = YSize;
 8000630:	4b0c      	ldr	r3, [pc, #48]	@ (8000664 <_Z11BSP_TS_Inittt+0x3c>)
    if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8000632:	2082      	movs	r0, #130	@ 0x82
    TsYBoundary = YSize;
 8000634:	8019      	strh	r1, [r3, #0]
    if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8000636:	6863      	ldr	r3, [r4, #4]
 8000638:	4798      	blx	r3
 800063a:	f640 0311 	movw	r3, #2065	@ 0x811
 800063e:	4298      	cmp	r0, r3
 8000640:	d10a      	bne.n	8000658 <_Z11BSP_TS_Inittt+0x30>
    {
        /* Initialize the TS driver structure */
        TsDrv = &stmpe811_ts_drv;
 8000642:	4d09      	ldr	r5, [pc, #36]	@ (8000668 <_Z11BSP_TS_Inittt+0x40>)
    }

    if (ret == TS_OK)
    {
        /* Initialize the LL TS Driver */
        TsDrv->Init(TS_I2C_ADDRESS);
 8000644:	6823      	ldr	r3, [r4, #0]
        TsDrv = &stmpe811_ts_drv;
 8000646:	602c      	str	r4, [r5, #0]
        TsDrv->Init(TS_I2C_ADDRESS);
 8000648:	2082      	movs	r0, #130	@ 0x82
 800064a:	4798      	blx	r3
        TsDrv->Start(TS_I2C_ADDRESS);
 800064c:	682b      	ldr	r3, [r5, #0]
 800064e:	2082      	movs	r0, #130	@ 0x82
 8000650:	68db      	ldr	r3, [r3, #12]
 8000652:	4798      	blx	r3
 8000654:	2000      	movs	r0, #0
    }

    return ret;
}
 8000656:	bd38      	pop	{r3, r4, r5, pc}
    uint8_t ret = TS_ERROR;
 8000658:	2001      	movs	r0, #1
 800065a:	e7fc      	b.n	8000656 <_Z11BSP_TS_Inittt+0x2e>
 800065c:	2000011e 	.word	0x2000011e
 8000660:	20000054 	.word	0x20000054
 8000664:	2000011c 	.word	0x2000011c
 8000668:	20000120 	.word	0x20000120

0800066c <_ZN20STM32TouchController4initEv>:
    BSP_TS_Init(240, 320);
 800066c:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8000670:	20f0      	movs	r0, #240	@ 0xf0
 8000672:	f7ff bfd9 	b.w	8000628 <_Z11BSP_TS_Inittt>
	...

08000678 <_Z15BSP_TS_GetStateP15TS_StateTypeDef>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8000678:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    static uint32_t _x = 0, _y = 0;
    uint16_t xDiff, yDiff, x, y, xr, yr;

    TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 800067a:	4d35      	ldr	r5, [pc, #212]	@ (8000750 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xd8>)
 800067c:	682b      	ldr	r3, [r5, #0]
{
 800067e:	4604      	mov	r4, r0
    TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8000680:	691b      	ldr	r3, [r3, #16]
 8000682:	2082      	movs	r0, #130	@ 0x82
 8000684:	4798      	blx	r3
 8000686:	8020      	strh	r0, [r4, #0]

    if (TsState->TouchDetected)
 8000688:	2800      	cmp	r0, #0
 800068a:	d04b      	beq.n	8000724 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xac>
    {
        TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 800068c:	682b      	ldr	r3, [r5, #0]
 800068e:	f10d 0206 	add.w	r2, sp, #6
 8000692:	695b      	ldr	r3, [r3, #20]
 8000694:	a901      	add	r1, sp, #4
 8000696:	2082      	movs	r0, #130	@ 0x82
 8000698:	4798      	blx	r3

        //Ensures the coordinates is within the screen
        if (y > 3700)
 800069a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800069e:	f640 6274 	movw	r2, #3700	@ 0xe74
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d940      	bls.n	8000728 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xb0>
        {
            y = 3700;
 80006a6:	f8ad 2006 	strh.w	r2, [sp, #6]

        /* Y value first correction */
        y -= 180;

        /* Y value second correction */
        y = 3520 - y;
 80006aa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80006ae:	1ad2      	subs	r2, r2, r3
 80006b0:	b292      	uxth	r2, r2

        /* Y value third correction */
        yr = y / 11;

        /* Return y position value */
        if (yr <= 0)
 80006b2:	2a0a      	cmp	r2, #10
 80006b4:	d93e      	bls.n	8000734 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xbc>
        yr = y / 11;
 80006b6:	230b      	movs	r3, #11
 80006b8:	fbb2 f2f3 	udiv	r2, r2, r3
        {
            yr = 0;
        }
        else if (yr > TsYBoundary)
 80006bc:	4b25      	ldr	r3, [pc, #148]	@ (8000754 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xdc>)
 80006be:	881b      	ldrh	r3, [r3, #0]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d901      	bls.n	80006c8 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x50>
        {
            yr = TsYBoundary - 1;
 80006c4:	3b01      	subs	r3, #1
 80006c6:	b29a      	uxth	r2, r3
        {
        }
        y = yr;

        /* X value first correction */
        if (x <= 3000)
 80006c8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80006cc:	4822      	ldr	r0, [pc, #136]	@ (8000758 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xe0>)
 80006ce:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80006d2:	428b      	cmp	r3, r1
 80006d4:	d830      	bhi.n	8000738 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xc0>
        {
            x = 3870 - x;
 80006d6:	f5c3 6371 	rsb	r3, r3, #3856	@ 0xf10
 80006da:	330e      	adds	r3, #14
        else
        {
        }

        x = xr;
        xDiff = x > _x ? (x - _x) : (_x - x);
 80006dc:	6801      	ldr	r1, [r0, #0]
            x = 3870 - x;
 80006de:	b29b      	uxth	r3, r3
        xr = x / 15;
 80006e0:	250f      	movs	r5, #15
 80006e2:	fbb3 f3f5 	udiv	r3, r3, r5
        else if (xr > TsXBoundary)
 80006e6:	4d1d      	ldr	r5, [pc, #116]	@ (800075c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xe4>)
 80006e8:	882d      	ldrh	r5, [r5, #0]
 80006ea:	42ab      	cmp	r3, r5
            xr = TsXBoundary - 1;
 80006ec:	bf84      	itt	hi
 80006ee:	f105 35ff 	addhi.w	r5, r5, #4294967295
 80006f2:	b2ab      	uxthhi	r3, r5
        xDiff = x > _x ? (x - _x) : (_x - x);
 80006f4:	428b      	cmp	r3, r1
 80006f6:	461d      	mov	r5, r3
 80006f8:	b28e      	uxth	r6, r1
 80006fa:	d926      	bls.n	800074a <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xd2>
 80006fc:	1b9b      	subs	r3, r3, r6
 80006fe:	b299      	uxth	r1, r3
        yDiff = y > _y ? (y - _y) : (_y - y);
 8000700:	4e17      	ldr	r6, [pc, #92]	@ (8000760 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xe8>)
 8000702:	6837      	ldr	r7, [r6, #0]
 8000704:	b2bb      	uxth	r3, r7
 8000706:	42ba      	cmp	r2, r7
 8000708:	bf8c      	ite	hi
 800070a:	1ad3      	subhi	r3, r2, r3
 800070c:	1a9b      	subls	r3, r3, r2
 800070e:	b29b      	uxth	r3, r3

        if (xDiff + yDiff > 5)
 8000710:	4419      	add	r1, r3
 8000712:	2905      	cmp	r1, #5
        {
            _x = x;
 8000714:	bfc8      	it	gt
 8000716:	6005      	strgt	r5, [r0, #0]
            _y = y;
        }

        /* Update the X position */
        TsState->X = _x;
 8000718:	6803      	ldr	r3, [r0, #0]
            _y = y;
 800071a:	bfc8      	it	gt
 800071c:	6032      	strgt	r2, [r6, #0]
        TsState->X = _x;
 800071e:	8063      	strh	r3, [r4, #2]

        /* Update the Y position */
        TsState->Y = _y;
 8000720:	6833      	ldr	r3, [r6, #0]
 8000722:	80a3      	strh	r3, [r4, #4]
    }
}
 8000724:	b003      	add	sp, #12
 8000726:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if (y < 180)
 8000728:	2bb3      	cmp	r3, #179	@ 0xb3
            y = 180;
 800072a:	bf9c      	itt	ls
 800072c:	23b4      	movls	r3, #180	@ 0xb4
 800072e:	f8ad 3006 	strhls.w	r3, [sp, #6]
 8000732:	e7ba      	b.n	80006aa <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x32>
            yr = 0;
 8000734:	2200      	movs	r2, #0
 8000736:	e7c7      	b.n	80006c8 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x50>
            x = 3800 - x;
 8000738:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 800073c:	3308      	adds	r3, #8
 800073e:	b29b      	uxth	r3, r3
        if (xr <= 0)
 8000740:	2b0e      	cmp	r3, #14
        xDiff = x > _x ? (x - _x) : (_x - x);
 8000742:	6801      	ldr	r1, [r0, #0]
        if (xr <= 0)
 8000744:	d8cc      	bhi.n	80006e0 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x68>
        xDiff = x > _x ? (x - _x) : (_x - x);
 8000746:	2500      	movs	r5, #0
            xr = 0;
 8000748:	462b      	mov	r3, r5
        xDiff = x > _x ? (x - _x) : (_x - x);
 800074a:	1ac9      	subs	r1, r1, r3
 800074c:	b289      	uxth	r1, r1
 800074e:	e7d7      	b.n	8000700 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x88>
 8000750:	20000120 	.word	0x20000120
 8000754:	2000011c 	.word	0x2000011c
 8000758:	20000118 	.word	0x20000118
 800075c:	2000011e 	.word	0x2000011e
 8000760:	20000114 	.word	0x20000114

08000764 <_ZN20STM32TouchController11sampleTouchERlS0_>:
{
 8000764:	b537      	push	{r0, r1, r2, r4, r5, lr}
    BSP_TS_GetState(&state);
 8000766:	4668      	mov	r0, sp
{
 8000768:	460d      	mov	r5, r1
 800076a:	4614      	mov	r4, r2
    BSP_TS_GetState(&state);
 800076c:	f7ff ff84 	bl	8000678 <_Z15BSP_TS_GetStateP15TS_StateTypeDef>
    if (state.TouchDetected)
 8000770:	f8bd 0000 	ldrh.w	r0, [sp]
 8000774:	b130      	cbz	r0, 8000784 <_ZN20STM32TouchController11sampleTouchERlS0_+0x20>
        x = state.X;
 8000776:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800077a:	602b      	str	r3, [r5, #0]
        y = state.Y;
 800077c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8000780:	6023      	str	r3, [r4, #0]
        return true;
 8000782:	2001      	movs	r0, #1
}
 8000784:	b003      	add	sp, #12
 8000786:	bd30      	pop	{r4, r5, pc}

08000788 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8000788:	2803      	cmp	r0, #3
 800078a:	d821      	bhi.n	80007d0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x48>
 800078c:	e8df f000 	tbb	[pc, r0]
 8000790:	19120b02 	.word	0x19120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8000794:	4b0f      	ldr	r3, [pc, #60]	@ (80007d4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	fab2 f282 	clz	r2, r2
 800079c:	0952      	lsrs	r2, r2, #5
 800079e:	2104      	movs	r1, #4
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 80007a0:	480d      	ldr	r0, [pc, #52]	@ (80007d8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 80007a2:	f003 bdf5 	b.w	8004390 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 80007a6:	4b0b      	ldr	r3, [pc, #44]	@ (80007d4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 80007a8:	685a      	ldr	r2, [r3, #4]
 80007aa:	fab2 f282 	clz	r2, r2
 80007ae:	0952      	lsrs	r2, r2, #5
 80007b0:	2108      	movs	r1, #8
 80007b2:	e7f5      	b.n	80007a0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 80007b4:	4b07      	ldr	r3, [pc, #28]	@ (80007d4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 80007b6:	689a      	ldr	r2, [r3, #8]
 80007b8:	fab2 f282 	clz	r2, r2
 80007bc:	0952      	lsrs	r2, r2, #5
 80007be:	2110      	movs	r1, #16
 80007c0:	e7ee      	b.n	80007a0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 80007c2:	4b04      	ldr	r3, [pc, #16]	@ (80007d4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 80007c4:	68da      	ldr	r2, [r3, #12]
 80007c6:	fab2 f282 	clz	r2, r2
 80007ca:	0952      	lsrs	r2, r2, #5
 80007cc:	2120      	movs	r1, #32
 80007ce:	e7e7      	b.n	80007a0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
#endif
        break;
    }
}
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	20000124 	.word	0x20000124
 80007d8:	40021000 	.word	0x40021000

080007dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 80007dc:	2803      	cmp	r0, #3
 80007de:	d821      	bhi.n	8000824 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x48>
 80007e0:	e8df f000 	tbb	[pc, r0]
 80007e4:	19120b02 	.word	0x19120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 80007e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	3a00      	subs	r2, #0
 80007ee:	bf18      	it	ne
 80007f0:	2201      	movne	r2, #1
 80007f2:	2104      	movs	r1, #4
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80007f4:	480d      	ldr	r0, [pc, #52]	@ (800082c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 80007f6:	f003 bdcb 	b.w	8004390 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 80007fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000828 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 80007fc:	685a      	ldr	r2, [r3, #4]
 80007fe:	3a00      	subs	r2, #0
 8000800:	bf18      	it	ne
 8000802:	2201      	movne	r2, #1
 8000804:	2108      	movs	r1, #8
 8000806:	e7f5      	b.n	80007f4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8000808:	4b07      	ldr	r3, [pc, #28]	@ (8000828 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 800080a:	689a      	ldr	r2, [r3, #8]
 800080c:	3a00      	subs	r2, #0
 800080e:	bf18      	it	ne
 8000810:	2201      	movne	r2, #1
 8000812:	2110      	movs	r1, #16
 8000814:	e7ee      	b.n	80007f4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8000816:	4b04      	ldr	r3, [pc, #16]	@ (8000828 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 8000818:	68da      	ldr	r2, [r3, #12]
 800081a:	3a00      	subs	r2, #0
 800081c:	bf18      	it	ne
 800081e:	2201      	movne	r2, #1
 8000820:	2120      	movs	r1, #32
 8000822:	e7e7      	b.n	80007f4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
#endif
        break;
    }
}
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	20000124 	.word	0x20000124
 800082c:	40021000 	.word	0x40021000

08000830 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8000830:	2803      	cmp	r0, #3
 8000832:	d80d      	bhi.n	8000850 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x20>
 8000834:	e8df f000 	tbb	[pc, r0]
 8000838:	0a080602 	.word	0x0a080602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 800083c:	2104      	movs	r1, #4
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800083e:	4805      	ldr	r0, [pc, #20]	@ (8000854 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x24>)
 8000840:	f003 bdab 	b.w	800439a <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000844:	2108      	movs	r1, #8
 8000846:	e7fa      	b.n	800083e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8000848:	2110      	movs	r1, #16
 800084a:	e7f8      	b.n	800083e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800084c:	2120      	movs	r1, #32
 800084e:	e7f6      	b.n	800083e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
#endif
        break;
    }
}
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	40021000 	.word	0x40021000

08000858 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8000858:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 800085a:	2803      	cmp	r0, #3
 800085c:	d811      	bhi.n	8000882 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x2a>
 800085e:	e8df f000 	tbb	[pc, r0]
 8000862:	0a02      	.short	0x0a02
 8000864:	0e0c      	.short	0x0e0c
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8000866:	2104      	movs	r1, #4
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000868:	4807      	ldr	r0, [pc, #28]	@ (8000888 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x30>)
 800086a:	f003 fd8b 	bl	8004384 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 800086e:	1e43      	subs	r3, r0, #1
 8000870:	4258      	negs	r0, r3
 8000872:	4158      	adcs	r0, r3
 8000874:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000876:	2108      	movs	r1, #8
 8000878:	e7f6      	b.n	8000868 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 800087a:	2110      	movs	r1, #16
 800087c:	e7f4      	b.n	8000868 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800087e:	2120      	movs	r1, #32
 8000880:	e7f2      	b.n	8000868 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
    switch (id)
 8000882:	2000      	movs	r0, #0
 8000884:	e7f3      	b.n	800086e <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8000886:	bf00      	nop
 8000888:	40021000 	.word	0x40021000

0800088c <_ZN8touchgfx4GPIO4initEv>:
{
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	4d08      	ldr	r5, [pc, #32]	@ (80008b0 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8000890:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8000892:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8000894:	b2e0      	uxtb	r0, r4
 8000896:	f7ff ffdf 	bl	8000858 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 800089a:	b118      	cbz	r0, 80008a4 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 800089c:	682b      	ldr	r3, [r5, #0]
 800089e:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 80008a0:	bf18      	it	ne
 80008a2:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 80008a4:	3401      	adds	r4, #1
 80008a6:	2c05      	cmp	r4, #5
 80008a8:	f105 0504 	add.w	r5, r5, #4
 80008ac:	d1f2      	bne.n	8000894 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 80008ae:	bd70      	pop	{r4, r5, r6, pc}
 80008b0:	20000124 	.word	0x20000124

080008b4 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 80008b4:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 80008b6:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 80008ba:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 80008be:	4770      	bx	lr

080008c0 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 80008c0:	2000      	movs	r0, #0
 80008c2:	4770      	bx	lr

080008c4 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80008c4:	4b03      	ldr	r3, [pc, #12]	@ (80008d4 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80008c6:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80008c8:	3900      	subs	r1, #0
 80008ca:	bf18      	it	ne
 80008cc:	2101      	movne	r1, #1
 80008ce:	7019      	strb	r1, [r3, #0]
    }
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	20012483 	.word	0x20012483

080008d8 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 80008d8:	2000      	movs	r0, #0
 80008da:	4770      	bx	lr

080008dc <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 80008dc:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80008de:	b10b      	cbz	r3, 80008e4 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 80008e0:	4608      	mov	r0, r1
 80008e2:	4718      	bx	r3
        }
    }
 80008e4:	4770      	bx	lr

080008e6 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 80008e6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80008ea:	4770      	bx	lr

080008ec <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 80008ec:	6840      	ldr	r0, [r0, #4]
 80008ee:	6803      	ldr	r3, [r0, #0]
 80008f0:	699b      	ldr	r3, [r3, #24]
 80008f2:	4718      	bx	r3

080008f4 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
    {
    }
 80008f4:	4770      	bx	lr

080008f6 <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
    {
    }
 80008f6:	4770      	bx	lr

080008f8 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80008f8:	4770      	bx	lr
	...

080008fc <_ZN11TouchGFXHAL10initializeEv>:

LOCATION_PRAGMA("TouchGFX_Framebuffer")
uint32_t animationStorage[(240 * 320 * 2 + 3) / 4] LOCATION_ATTRIBUTE("TouchGFX_Framebuffer");

void TouchGFXHAL::initialize()
{
 80008fc:	b570      	push	{r4, r5, r6, lr}
 80008fe:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8000900:	f000 fc54 	bl	80011ac <_ZN20TouchGFXGeneratedHAL10initializeEv>

    // existing frame buffers are re-used. just add animation storage
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationStorage);
 8000904:	6823      	ldr	r3, [r4, #0]
 8000906:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 800090a:	4b04      	ldr	r3, [pc, #16]	@ (800091c <_ZN11TouchGFXHAL10initializeEv+0x20>)
 800090c:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	@ 0x3c
 8000910:	4620      	mov	r0, r4
 8000912:	46ac      	mov	ip, r5
}
 8000914:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationStorage);
 8000918:	4760      	bx	ip
 800091a:	bf00      	nop
 800091c:	d0000000 	.word	0xd0000000

08000920 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 8000920:	b508      	push	{r3, lr}
    enableLCDControllerInterrupt();
 8000922:	6803      	ldr	r3, [r0, #0]
{
 8000924:	4604      	mov	r4, r0
    enableLCDControllerInterrupt();
 8000926:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800092a:	4798      	blx	r3
    enableInterrupts();
 800092c:	6823      	ldr	r3, [r4, #0]
 800092e:	4620      	mov	r0, r4
 8000930:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8000932:	4798      	blx	r3

    OSWrappers::waitForVSync();
 8000934:	f000 f8ec 	bl	8000b10 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8000938:	6823      	ldr	r3, [r4, #0]
 800093a:	4620      	mov	r0, r4
 800093c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800093e:	4798      	blx	r3

    LCD_IO_WriteReg(0x29);
 8000940:	2029      	movs	r0, #41	@ 0x29
 8000942:	f000 ffc5 	bl	80018d0 <LCD_IO_WriteReg>

    for (;;)
    {
        OSWrappers::waitForVSync();
 8000946:	f000 f8e3 	bl	8000b10 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 800094a:	6823      	ldr	r3, [r4, #0]
 800094c:	4620      	mov	r0, r4
 800094e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000950:	4798      	blx	r3
    for (;;)
 8000952:	e7f8      	b.n	8000946 <_ZN11TouchGFXHAL9taskEntryEv+0x26>

08000954 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8000954:	b510      	push	{r4, lr}
 8000956:	4604      	mov	r4, r0
        swapFrameBuffers();
 8000958:	f008 fe26 	bl	80095a8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800095c:	6823      	ldr	r3, [r4, #0]
 800095e:	4620      	mov	r0, r4
 8000960:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
    }
 8000964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8000968:	4718      	bx	r3

0800096a <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 800096a:	f000 bc11 	b.w	8001190 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

0800096e <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800096e:	f000 bc15 	b.w	800119c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08000972 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8000972:	f000 bc41 	b.w	80011f8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08000976 <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8000976:	f000 bbe7 	b.w	8001148 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

0800097a <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800097a:	f000 bc41 	b.w	8001200 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

0800097e <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 800097e:	f000 bc49 	b.w	8001214 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

08000982 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8000982:	f000 bbeb 	b.w	800115c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

08000986 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8000986:	f008 b86f 	b.w	8008a68 <_ZN8touchgfx3HAL16flushFrameBufferEv>

0800098a <_ZN11TouchGFXHALD0Ev>:
 800098a:	b510      	push	{r4, lr}
 800098c:	217c      	movs	r1, #124	@ 0x7c
 800098e:	4604      	mov	r4, r0
 8000990:	f00f fc72 	bl	8010278 <_ZdlPvj>
 8000994:	4620      	mov	r0, r4
 8000996:	bd10      	pop	{r4, pc}

08000998 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void performDisplayOrientationChange()
 8000998:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 800099a:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
 800099e:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 80009a2:	4b0c      	ldr	r3, [pc, #48]	@ (80009d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
        if (requestedOrientation != nativeDisplayOrientation)
 80009a4:	428c      	cmp	r4, r1
            if (DISPLAY_ROTATION == rotate0)
 80009a6:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 80009a8:	d009      	beq.n	80009be <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 80009aa:	b93a      	cbnz	r2, 80009bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80009ac:	4a0a      	ldr	r2, [pc, #40]	@ (80009d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 80009ae:	490b      	ldr	r1, [pc, #44]	@ (80009dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80009b0:	8814      	ldrh	r4, [r2, #0]
                const uint16_t tmp = DISPLAY_HEIGHT;
 80009b2:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_WIDTH = tmp;
 80009b4:	8010      	strh	r0, [r2, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80009b6:	800c      	strh	r4, [r1, #0]
                DISPLAY_ROTATION = rotate90;
 80009b8:	2201      	movs	r2, #1
            DISPLAY_ROTATION = rotate0;
 80009ba:	701a      	strb	r2, [r3, #0]
    }
 80009bc:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 80009be:	2a00      	cmp	r2, #0
 80009c0:	d0fc      	beq.n	80009bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80009c2:	4a05      	ldr	r2, [pc, #20]	@ (80009d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 80009c4:	4905      	ldr	r1, [pc, #20]	@ (80009dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80009c6:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 80009c8:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_WIDTH = tmp;
 80009ca:	8010      	strh	r0, [r2, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80009cc:	800c      	strh	r4, [r1, #0]
            DISPLAY_ROTATION = rotate0;
 80009ce:	2200      	movs	r2, #0
 80009d0:	e7f3      	b.n	80009ba <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 80009d2:	bf00      	nop
 80009d4:	2001247c 	.word	0x2001247c
 80009d8:	20012478 	.word	0x20012478
 80009dc:	2001247a 	.word	0x2001247a

080009e0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80009e0:	b570      	push	{r4, r5, r6, lr}
 80009e2:	460d      	mov	r5, r1
 80009e4:	4619      	mov	r1, r3
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80009e6:	b935      	cbnz	r5, 80009f6 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x16>
 80009e8:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 80009ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000a14 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 80009ec:	480a      	ldr	r0, [pc, #40]	@ (8000a18 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 80009ee:	f240 21d2 	movw	r1, #722	@ 0x2d2
 80009f2:	f00f fc6f 	bl	80102d4 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80009f6:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80009fa:	4b08      	ldr	r3, [pc, #32]	@ (8000a1c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 80009fc:	3a00      	subs	r2, #0
 80009fe:	bf18      	it	ne
 8000a00:	2201      	movne	r2, #1
 8000a02:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8000a04:	6803      	ldr	r3, [r0, #0]
    }
 8000a06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setAnimationStorage(animationStorage);
 8000a0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a0e:	4718      	bx	r3
 8000a10:	08011380 	.word	0x08011380
 8000a14:	080113b8 	.word	0x080113b8
 8000a18:	08011406 	.word	0x08011406
 8000a1c:	20012482 	.word	0x20012482

08000a20 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8000a20:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8000a22:	4b09      	ldr	r3, [pc, #36]	@ (8000a48 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8000a24:	881b      	ldrh	r3, [r3, #0]
 8000a26:	428b      	cmp	r3, r1
 8000a28:	d803      	bhi.n	8000a32 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8000a2a:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8000a2c:	881b      	ldrh	r3, [r3, #0]
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d905      	bls.n	8000a3e <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8000a32:	4b07      	ldr	r3, [pc, #28]	@ (8000a50 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8000a34:	4a07      	ldr	r2, [pc, #28]	@ (8000a54 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8000a36:	4808      	ldr	r0, [pc, #32]	@ (8000a58 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8000a38:	219e      	movs	r1, #158	@ 0x9e
 8000a3a:	f00f fc4b 	bl	80102d4 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8000a3e:	4b07      	ldr	r3, [pc, #28]	@ (8000a5c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8000a40:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8000a42:	4b07      	ldr	r3, [pc, #28]	@ (8000a60 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8000a44:	801a      	strh	r2, [r3, #0]
    }
 8000a46:	bd08      	pop	{r3, pc}
 8000a48:	20012478 	.word	0x20012478
 8000a4c:	2001247a 	.word	0x2001247a
 8000a50:	0801144b 	.word	0x0801144b
 8000a54:	080114ae 	.word	0x080114ae
 8000a58:	08011406 	.word	0x08011406
 8000a5c:	2001247e 	.word	0x2001247e
 8000a60:	20012480 	.word	0x20012480

08000a64 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8000a64:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 8000a66:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 8000a6a:	b118      	cbz	r0, 8000a74 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 8000a6c:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 8000a6e:	6803      	ldr	r3, [r0, #0]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4718      	bx	r3
    }
 8000a74:	4770      	bx	lr
	...

08000a78 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8000a78:	2101      	movs	r1, #1
{
 8000a7a:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	4608      	mov	r0, r1
 8000a80:	f005 fcbc 	bl	80063fc <osSemaphoreNew>
 8000a84:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab0 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8000a86:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8000a88:	b928      	cbnz	r0, 8000a96 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8000a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab4 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8000a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab8 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8000a8e:	2128      	movs	r1, #40	@ 0x28

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8000a90:	480a      	ldr	r0, [pc, #40]	@ (8000abc <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8000a92:	f00f fc1f 	bl	80102d4 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2104      	movs	r1, #4
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f005 fd56 	bl	800654c <osMessageQueueNew>
 8000aa0:	4b07      	ldr	r3, [pc, #28]	@ (8000ac0 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8000aa2:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8000aa4:	b918      	cbnz	r0, 8000aae <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8000aa6:	4b07      	ldr	r3, [pc, #28]	@ (8000ac4 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8000aa8:	4a03      	ldr	r2, [pc, #12]	@ (8000ab8 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8000aaa:	212c      	movs	r1, #44	@ 0x2c
 8000aac:	e7f0      	b.n	8000a90 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8000aae:	bd08      	pop	{r3, pc}
 8000ab0:	20000138 	.word	0x20000138
 8000ab4:	080114f1 	.word	0x080114f1
 8000ab8:	0801153a 	.word	0x0801153a
 8000abc:	08011569 	.word	0x08011569
 8000ac0:	20000134 	.word	0x20000134
 8000ac4:	080115c9 	.word	0x080115c9

08000ac8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8000ac8:	4b02      	ldr	r3, [pc, #8]	@ (8000ad4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8000aca:	f04f 31ff 	mov.w	r1, #4294967295
 8000ace:	6818      	ldr	r0, [r3, #0]
 8000ad0:	f005 bcde 	b.w	8006490 <osSemaphoreAcquire>
 8000ad4:	20000138 	.word	0x20000138

08000ad8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8000ad8:	4b01      	ldr	r3, [pc, #4]	@ (8000ae0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8000ada:	6818      	ldr	r0, [r3, #0]
 8000adc:	f005 bd04 	b.w	80064e8 <osSemaphoreRelease>
 8000ae0:	20000138 	.word	0x20000138

08000ae4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8000ae4:	4b02      	ldr	r3, [pc, #8]	@ (8000af0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	6818      	ldr	r0, [r3, #0]
 8000aea:	f005 bcd1 	b.w	8006490 <osSemaphoreAcquire>
 8000aee:	bf00      	nop
 8000af0:	20000138 	.word	0x20000138

08000af4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 8000af4:	f7ff bff0 	b.w	8000ad8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08000af8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8000af8:	4803      	ldr	r0, [pc, #12]	@ (8000b08 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8000afa:	4904      	ldr	r1, [pc, #16]	@ (8000b0c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8000afc:	6800      	ldr	r0, [r0, #0]
 8000afe:	2300      	movs	r3, #0
 8000b00:	461a      	mov	r2, r3
 8000b02:	f005 bd5e 	b.w	80065c2 <osMessageQueuePut>
 8000b06:	bf00      	nop
 8000b08:	20000134 	.word	0x20000134
 8000b0c:	20000004 	.word	0x20000004

08000b10 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8000b10:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8000b12:	4c08      	ldr	r4, [pc, #32]	@ (8000b34 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8000b14:	2300      	movs	r3, #0
 8000b16:	461a      	mov	r2, r3
 8000b18:	a901      	add	r1, sp, #4
 8000b1a:	6820      	ldr	r0, [r4, #0]
 8000b1c:	f005 fd82 	bl	8006624 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8000b20:	6820      	ldr	r0, [r4, #0]
 8000b22:	f04f 33ff 	mov.w	r3, #4294967295
 8000b26:	2200      	movs	r2, #0
 8000b28:	a901      	add	r1, sp, #4
 8000b2a:	f005 fd7b 	bl	8006624 <osMessageQueueGet>
}
 8000b2e:	b002      	add	sp, #8
 8000b30:	bd10      	pop	{r4, pc}
 8000b32:	bf00      	nop
 8000b34:	20000134 	.word	0x20000134

08000b38 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8000b38:	6803      	ldr	r3, [r0, #0]
 8000b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b3c:	4718      	bx	r3

08000b3e <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8000b3e:	2001      	movs	r0, #1
 8000b40:	4770      	bx	lr

08000b42 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8000b42:	6803      	ldr	r3, [r0, #0]
 8000b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b46:	4718      	bx	r3

08000b48 <_ZN8STM32DMA10initializeEv>:
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}

void STM32DMA::initialize()
{
 8000b48:	b082      	sub	sp, #8
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	9301      	str	r3, [sp, #4]
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b84 <_ZN8STM32DMA10initializeEv+0x3c>)
 8000b50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b52:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000b56:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b5a:	f402 0200 	and.w	r2, r2, #8388608	@ 0x800000
 8000b5e:	9201      	str	r2, [sp, #4]
 8000b60:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8000b62:	691a      	ldr	r2, [r3, #16]
 8000b64:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000b68:	611a      	str	r2, [r3, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8000b6a:	691a      	ldr	r2, [r3, #16]
 8000b6c:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8000b70:	611a      	str	r2, [r3, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8000b72:	4b05      	ldr	r3, [pc, #20]	@ (8000b88 <_ZN8STM32DMA10initializeEv+0x40>)
 8000b74:	4a05      	ldr	r2, [pc, #20]	@ (8000b8c <_ZN8STM32DMA10initializeEv+0x44>)
 8000b76:	611a      	str	r2, [r3, #16]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b78:	4b05      	ldr	r3, [pc, #20]	@ (8000b90 <_ZN8STM32DMA10initializeEv+0x48>)
 8000b7a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000b7e:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 8000b80:	b002      	add	sp, #8
 8000b82:	4770      	bx	lr
 8000b84:	40023800 	.word	0x40023800
 8000b88:	200015d0 	.word	0x200015d0
 8000b8c:	08000e21 	.word	0x08000e21
 8000b90:	e000e100 	.word	0xe000e100

08000b94 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8000b94:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8000b98:	4770      	bx	lr
	...

08000b9c <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8000b9c:	4b05      	ldr	r3, [pc, #20]	@ (8000bb4 <_ZN8STM32DMAD1Ev+0x18>)
 8000b9e:	6003      	str	r3, [r0, #0]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ba0:	4b05      	ldr	r3, [pc, #20]	@ (8000bb8 <_ZN8STM32DMAD1Ev+0x1c>)
 8000ba2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000ba6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000baa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000bae:	f3bf 8f6f 	isb	sy
}
 8000bb2:	4770      	bx	lr
 8000bb4:	08011f84 	.word	0x08011f84
 8000bb8:	e000e100 	.word	0xe000e100

08000bbc <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8000bbc:	b510      	push	{r4, lr}
 8000bbe:	4604      	mov	r4, r0
}
 8000bc0:	f44f 615a 	mov.w	r1, #3488	@ 0xda0
 8000bc4:	f7ff ffea 	bl	8000b9c <_ZN8STM32DMAD1Ev>
 8000bc8:	4620      	mov	r0, r4
 8000bca:	f00f fb55 	bl	8010278 <_ZdlPvj>
 8000bce:	4620      	mov	r0, r4
 8000bd0:	bd10      	pop	{r4, pc}
	...

08000bd4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8000bd4:	b508      	push	{r3, lr}
    switch (format)
 8000bd6:	280a      	cmp	r0, #10
 8000bd8:	d809      	bhi.n	8000bee <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8000bda:	e8df f000 	tbb	[pc, r0]
 8000bde:	1006      	.short	0x1006
 8000be0:	0808080e 	.word	0x0808080e
 8000be4:	10101008 	.word	0x10101008
 8000be8:	10          	.byte	0x10
 8000be9:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8000bea:	2002      	movs	r0, #2
}
 8000bec:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8000bee:	4b05      	ldr	r3, [pc, #20]	@ (8000c04 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8000bf0:	4a05      	ldr	r2, [pc, #20]	@ (8000c08 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8000bf2:	4806      	ldr	r0, [pc, #24]	@ (8000c0c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8000bf4:	2187      	movs	r1, #135	@ 0x87
 8000bf6:	f00f fb6d 	bl	80102d4 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	e7f6      	b.n	8000bec <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8000bfe:	2001      	movs	r0, #1
    return dma2dColorMode;
 8000c00:	e7f4      	b.n	8000bec <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8000c02:	bf00      	nop
 8000c04:	0801160b 	.word	0x0801160b
 8000c08:	08011626 	.word	0x08011626
 8000c0c:	08011671 	.word	0x08011671

08000c10 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8000c10:	b538      	push	{r3, r4, r5, lr}
 8000c12:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000c14:	7f88      	ldrb	r0, [r1, #30]
 8000c16:	f7ff ffdd 	bl	8000bd4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000c1a:	8aa5      	ldrh	r5, [r4, #20]
 8000c1c:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8000c1e:	4b16      	ldr	r3, [pc, #88]	@ (8000c78 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x68>)

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000c20:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8000c22:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000c24:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8000c28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000c2a:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000c2c:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000c2e:	1b52      	subs	r2, r2, r5
 8000c30:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8000c32:	6825      	ldr	r5, [r4, #0]
 8000c34:	2d08      	cmp	r5, #8
 8000c36:	d10e      	bne.n	8000c56 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000c38:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000c3a:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000c3c:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8000c3e:	7f20      	ldrb	r0, [r4, #28]
 8000c40:	4a0e      	ldr	r2, [pc, #56]	@ (8000c7c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x6c>)
 8000c42:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8000c46:	61da      	str	r2, [r3, #28]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 8000c48:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000c4a:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8000c4c:	4a0c      	ldr	r2, [pc, #48]	@ (8000c80 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x70>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000c4e:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000c50:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8000c52:	601a      	str	r2, [r3, #0]
    }
}
 8000c54:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8000c56:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8000c58:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8000c5a:	611a      	str	r2, [r3, #16]
 8000c5c:	68e1      	ldr	r1, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8000c5e:	0a0a      	lsrs	r2, r1, #8
 8000c60:	0948      	lsrs	r0, r1, #5
 8000c62:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 8000c66:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8000c6a:	4302      	orrs	r2, r0
 8000c6c:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8000c70:	430a      	orrs	r2, r1
 8000c72:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8000c74:	4a03      	ldr	r2, [pc, #12]	@ (8000c84 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x74>)
 8000c76:	e7ec      	b.n	8000c52 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8000c78:	4002b000 	.word	0x4002b000
 8000c7c:	00010009 	.word	0x00010009
 8000c80:	00020201 	.word	0x00020201
 8000c84:	00030201 	.word	0x00030201

08000c88 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8000c88:	b508      	push	{r3, lr}
    switch (format)
 8000c8a:	280b      	cmp	r0, #11
 8000c8c:	d80b      	bhi.n	8000ca6 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 8000c8e:	e8df f000 	tbb	[pc, r0]
 8000c92:	1206      	.short	0x1206
 8000c94:	0a0a0a10 	.word	0x0a0a0a10
 8000c98:	0808080a 	.word	0x0808080a
 8000c9c:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8000c9e:	2002      	movs	r0, #2
}
 8000ca0:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8000ca2:	2005      	movs	r0, #5
        break;
 8000ca4:	e7fc      	b.n	8000ca0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 8000ca6:	4b05      	ldr	r3, [pc, #20]	@ (8000cbc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8000ca8:	4a05      	ldr	r2, [pc, #20]	@ (8000cc0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8000caa:	4806      	ldr	r0, [pc, #24]	@ (8000cc4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8000cac:	2166      	movs	r1, #102	@ 0x66
 8000cae:	f00f fb11 	bl	80102d4 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	e7f4      	b.n	8000ca0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8000cb6:	2001      	movs	r0, #1
    return dma2dColorMode;
 8000cb8:	e7f2      	b.n	8000ca0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8000cba:	bf00      	nop
 8000cbc:	0801160b 	.word	0x0801160b
 8000cc0:	080116cf 	.word	0x080116cf
 8000cc4:	08011671 	.word	0x08011671

08000cc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8000cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8000ccc:	f891 801d 	ldrb.w	r8, [r1, #29]
{
 8000cd0:	460c      	mov	r4, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8000cd2:	4640      	mov	r0, r8
 8000cd4:	f7ff ffd8 	bl	8000c88 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000cd8:	7fa7      	ldrb	r7, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8000cda:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000cdc:	4638      	mov	r0, r7
 8000cde:	f7ff ffd3 	bl	8000c88 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 8000ce2:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000ce4:	4638      	mov	r0, r7
 8000ce6:	f7ff ff75 	bl	8000bd4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000cea:	8aa1      	ldrh	r1, [r4, #20]
 8000cec:	8b62      	ldrh	r2, [r4, #26]
 8000cee:	4b44      	ldr	r3, [pc, #272]	@ (8000e00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8000cf0:	1a52      	subs	r2, r2, r1
 8000cf2:	641a      	str	r2, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000cf4:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8000cf6:	8b22      	ldrh	r2, [r4, #24]
 8000cf8:	1a52      	subs	r2, r2, r1
 8000cfa:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000cfc:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8000cfe:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000d00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d04:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000d06:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8000d08:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000d0a:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8000d0c:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8000d0e:	6820      	ldr	r0, [r4, #0]
 8000d10:	2880      	cmp	r0, #128	@ 0x80
 8000d12:	d028      	beq.n	8000d66 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 8000d14:	7f22      	ldrb	r2, [r4, #28]
 8000d16:	d80f      	bhi.n	8000d38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x70>
 8000d18:	2820      	cmp	r0, #32
 8000d1a:	d067      	beq.n	8000dec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x124>
 8000d1c:	2840      	cmp	r0, #64	@ 0x40
 8000d1e:	d065      	beq.n	8000dec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x124>
 8000d20:	2804      	cmp	r0, #4
 8000d22:	d01a      	beq.n	8000d5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d24:	4b36      	ldr	r3, [pc, #216]	@ (8000e00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8000d26:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 8000d2a:	f445 3500 	orr.w	r5, r5, #131072	@ 0x20000
        if (blitOp.srcFormat != blitOp.dstFormat)
 8000d2e:	45b8      	cmp	r8, r7
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d30:	61dd      	str	r5, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8000d32:	d061      	beq.n	8000df8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x130>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8000d34:	4a33      	ldr	r2, [pc, #204]	@ (8000e04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 8000d36:	e044      	b.n	8000dc2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfa>
    switch (blitOp.operation)
 8000d38:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8000d3c:	d004      	beq.n	8000d48 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 8000d3e:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8000d42:	d1ef      	bne.n	8000d24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d44:	4830      	ldr	r0, [pc, #192]	@ (8000e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 8000d46:	e000      	b.n	8000d4a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x82>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d48:	4830      	ldr	r0, [pc, #192]	@ (8000e0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d4a:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 8000d4e:	61da      	str	r2, [r3, #28]
 8000d50:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000d52:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000d54:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000d56:	6159      	str	r1, [r3, #20]
 8000d58:	e032      	b.n	8000dc0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf8>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d5a:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
 8000d5e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d62:	61da      	str	r2, [r3, #28]
 8000d64:	e7f6      	b.n	8000d54 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8000d66:	68a0      	ldr	r0, [r4, #8]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8000d68:	1d02      	adds	r2, r0, #4
 8000d6a:	62da      	str	r2, [r3, #44]	@ 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d6c:	7f22      	ldrb	r2, [r4, #28]
 8000d6e:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 8000d72:	f445 3500 	orr.w	r5, r5, #131072	@ 0x20000
 8000d76:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000d78:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000d7a:	6159      	str	r1, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
 8000d7c:	7801      	ldrb	r1, [r0, #0]
 8000d7e:	b141      	cbz	r1, 8000d92 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xca>
 8000d80:	2901      	cmp	r1, #1
 8000d82:	d021      	beq.n	8000dc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
                assert(0 && "Unsupported format");
 8000d84:	4b22      	ldr	r3, [pc, #136]	@ (8000e10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8000d86:	4a23      	ldr	r2, [pc, #140]	@ (8000e14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 8000d88:	4823      	ldr	r0, [pc, #140]	@ (8000e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
 8000d8a:	f240 1111 	movw	r1, #273	@ 0x111
 8000d8e:	f00f faa1 	bl	80102d4 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8000d92:	69da      	ldr	r2, [r3, #28]
 8000d94:	8841      	ldrh	r1, [r0, #2]
 8000d96:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8000d9a:	3901      	subs	r1, #1
 8000d9c:	f022 0210 	bic.w	r2, r2, #16
 8000da0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000da4:	61da      	str	r2, [r3, #28]
            bool blend = true;
 8000da6:	2101      	movs	r1, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8000da8:	4b15      	ldr	r3, [pc, #84]	@ (8000e00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8000daa:	69da      	ldr	r2, [r3, #28]
 8000dac:	f042 0220 	orr.w	r2, r2, #32
 8000db0:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8000db2:	69da      	ldr	r2, [r3, #28]
 8000db4:	0692      	lsls	r2, r2, #26
 8000db6:	d4fc      	bmi.n	8000db2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xea>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8000db8:	2210      	movs	r2, #16
 8000dba:	609a      	str	r2, [r3, #8]
            if (blend)
 8000dbc:	2900      	cmp	r1, #0
 8000dbe:	d0b9      	beq.n	8000d34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000dc0:	4a16      	ldr	r2, [pc, #88]	@ (8000e1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8000dc2:	601a      	str	r2, [r3, #0]
}
 8000dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if (blitOp.alpha == 255)
 8000dc8:	f1b2 01ff 	subs.w	r1, r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8000dcc:	69da      	ldr	r2, [r3, #28]
 8000dce:	8840      	ldrh	r0, [r0, #2]
 8000dd0:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8000dd4:	f100 30ff 	add.w	r0, r0, #4294967295
 8000dd8:	f022 0210 	bic.w	r2, r2, #16
 8000ddc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8000de0:	f042 0210 	orr.w	r2, r2, #16
                if (blitOp.alpha == 255)
 8000de4:	bf18      	it	ne
 8000de6:	2101      	movne	r1, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8000de8:	61da      	str	r2, [r3, #28]
                break;
 8000dea:	e7dd      	b.n	8000da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000dec:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
 8000df0:	4b03      	ldr	r3, [pc, #12]	@ (8000e00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8000df2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000df6:	e7b4      	b.n	8000d62 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9a>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8000df8:	f240 2201 	movw	r2, #513	@ 0x201
 8000dfc:	e7e1      	b.n	8000dc2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfa>
 8000dfe:	bf00      	nop
 8000e00:	4002b000 	.word	0x4002b000
 8000e04:	00010201 	.word	0x00010201
 8000e08:	00020009 	.word	0x00020009
 8000e0c:	0002000a 	.word	0x0002000a
 8000e10:	08011719 	.word	0x08011719
 8000e14:	08011733 	.word	0x08011733
 8000e18:	08011671 	.word	0x08011671
 8000e1c:	00020201 	.word	0x00020201

08000e20 <DMA2D_XferCpltCallback>:
        return instance;
 8000e20:	4b02      	ldr	r3, [pc, #8]	@ (8000e2c <DMA2D_XferCpltCallback+0xc>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8000e26:	6803      	ldr	r3, [r0, #0]
 8000e28:	695b      	ldr	r3, [r3, #20]
 8000e2a:	4718      	bx	r3
 8000e2c:	20012484 	.word	0x20012484

08000e30 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8000e30:	b570      	push	{r4, r5, r6, lr}
 8000e32:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8000e34:	4625      	mov	r5, r4
 8000e36:	4b0a      	ldr	r3, [pc, #40]	@ (8000e60 <_ZN8STM32DMAC1Ev+0x30>)
 8000e38:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	6060      	str	r0, [r4, #4]
 8000e3e:	7226      	strb	r6, [r4, #8]
 8000e40:	7266      	strb	r6, [r4, #9]
 8000e42:	f845 3b20 	str.w	r3, [r5], #32
 8000e46:	2260      	movs	r2, #96	@ 0x60
 8000e48:	4629      	mov	r1, r5
 8000e4a:	f008 fceb 	bl	8009824 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8000e4e:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 8000e52:	60ee      	str	r6, [r5, #12]
 8000e54:	3524      	adds	r5, #36	@ 0x24
 8000e56:	429d      	cmp	r5, r3
 8000e58:	d1fb      	bne.n	8000e52 <_ZN8STM32DMAC1Ev+0x22>
}
 8000e5a:	4620      	mov	r0, r4
 8000e5c:	bd70      	pop	{r4, r5, r6, pc}
 8000e5e:	bf00      	nop
 8000e60:	08011f84 	.word	0x08011f84

08000e64 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8000e64:	2001      	movs	r0, #1
 8000e66:	4770      	bx	lr

08000e68 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8000e68:	2038      	movs	r0, #56	@ 0x38
 8000e6a:	4770      	bx	lr

08000e6c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8000e6c:	2338      	movs	r3, #56	@ 0x38
 8000e6e:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8000e72:	3008      	adds	r0, #8
 8000e74:	4770      	bx	lr

08000e76 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8000e76:	2338      	movs	r3, #56	@ 0x38
 8000e78:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8000e7c:	3008      	adds	r0, #8
 8000e7e:	4770      	bx	lr

08000e80 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8000e80:	2001      	movs	r0, #1
 8000e82:	4770      	bx	lr

08000e84 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8000e84:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8000e88:	4770      	bx	lr

08000e8a <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000e8a:	f44f 7307 	mov.w	r3, #540	@ 0x21c
 8000e8e:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8000e92:	3008      	adds	r0, #8
 8000e94:	4770      	bx	lr

08000e96 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000e96:	f44f 7307 	mov.w	r3, #540	@ 0x21c
 8000e9a:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8000e9e:	3008      	adds	r0, #8
 8000ea0:	4770      	bx	lr

08000ea2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	4770      	bx	lr

08000ea6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8000ea6:	2010      	movs	r0, #16
 8000ea8:	4770      	bx	lr

08000eaa <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000eaa:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8000eae:	3008      	adds	r0, #8
 8000eb0:	4770      	bx	lr

08000eb2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000eb2:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8000eb6:	3008      	adds	r0, #8
 8000eb8:	4770      	bx	lr

08000eba <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 8000eba:	4608      	mov	r0, r1
 8000ebc:	f001 bccc 	b.w	8002858 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

08000ec0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8000ec0:	b510      	push	{r4, lr}
 8000ec2:	4b03      	ldr	r3, [pc, #12]	@ (8000ed0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x10>)
 8000ec4:	6003      	str	r3, [r0, #0]
 8000ec6:	4604      	mov	r4, r0
 8000ec8:	f007 fb25 	bl	8008516 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	bd10      	pop	{r4, pc}
 8000ed0:	0801203c 	.word	0x0801203c

08000ed4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 8000ed4:	b510      	push	{r4, lr}
 8000ed6:	4604      	mov	r4, r0
 8000ed8:	f7ff fff2 	bl	8000ec0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8000edc:	4620      	mov	r0, r4
 8000ede:	2140      	movs	r1, #64	@ 0x40
 8000ee0:	f00f f9ca 	bl	8010278 <_ZdlPvj>
 8000ee4:	4620      	mov	r0, r4
 8000ee6:	bd10      	pop	{r4, pc}

08000ee8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8000ee8:	b510      	push	{r4, lr}
 8000eea:	4b03      	ldr	r3, [pc, #12]	@ (8000ef8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8000eec:	6003      	str	r3, [r0, #0]
 8000eee:	4604      	mov	r4, r0
 8000ef0:	f007 fb11 	bl	8008516 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	bd10      	pop	{r4, pc}
 8000ef8:	08012008 	.word	0x08012008

08000efc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8000efc:	b510      	push	{r4, lr}
 8000efe:	4604      	mov	r4, r0
 8000f00:	f7ff fff2 	bl	8000ee8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8000f04:	4620      	mov	r0, r4
 8000f06:	f44f 7109 	mov.w	r1, #548	@ 0x224
 8000f0a:	f00f f9b5 	bl	8010278 <_ZdlPvj>
 8000f0e:	4620      	mov	r0, r4
 8000f10:	bd10      	pop	{r4, pc}
	...

08000f14 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8000f14:	b510      	push	{r4, lr}
 8000f16:	4b03      	ldr	r3, [pc, #12]	@ (8000f24 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8000f18:	6003      	str	r3, [r0, #0]
 8000f1a:	4604      	mov	r4, r0
 8000f1c:	f007 fafb 	bl	8008516 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8000f20:	4620      	mov	r0, r4
 8000f22:	bd10      	pop	{r4, pc}
 8000f24:	08011fd4 	.word	0x08011fd4

08000f28 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8000f28:	b510      	push	{r4, lr}
 8000f2a:	4604      	mov	r4, r0
 8000f2c:	f7ff fff2 	bl	8000f14 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8000f30:	4620      	mov	r0, r4
 8000f32:	2118      	movs	r1, #24
 8000f34:	f00f f9a0 	bl	8010278 <_ZdlPvj>
 8000f38:	4620      	mov	r0, r4
 8000f3a:	bd10      	pop	{r4, pc}

08000f3c <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8000f3c:	b510      	push	{r4, lr}
 8000f3e:	4b08      	ldr	r3, [pc, #32]	@ (8000f60 <_ZN12FrontendHeapD1Ev+0x24>)
 8000f40:	6003      	str	r3, [r0, #0]
 8000f42:	4604      	mov	r4, r0
 8000f44:	f500 7014 	add.w	r0, r0, #592	@ 0x250
 8000f48:	f7ff ffba 	bl	8000ec0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8000f4c:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8000f50:	f7ff ffca 	bl	8000ee8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8000f54:	f104 0014 	add.w	r0, r4, #20
 8000f58:	f7ff ffdc 	bl	8000f14 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	bd10      	pop	{r4, pc}
 8000f60:	08012070 	.word	0x08012070

08000f64 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8000f64:	b508      	push	{r3, lr}
 8000f66:	4802      	ldr	r0, [pc, #8]	@ (8000f70 <__tcf_0+0xc>)
 8000f68:	f7ff ffe8 	bl	8000f3c <_ZN12FrontendHeapD1Ev>
 8000f6c:	bd08      	pop	{r3, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000ff0 	.word	0x20000ff0

08000f74 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8000f74:	b510      	push	{r4, lr}
 8000f76:	4604      	mov	r4, r0
 8000f78:	f7ff ffe0 	bl	8000f3c <_ZN12FrontendHeapD1Ev>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	f44f 717e 	mov.w	r1, #1016	@ 0x3f8
 8000f82:	f00f f979 	bl	8010278 <_ZdlPvj>
 8000f86:	4620      	mov	r0, r4
 8000f88:	bd10      	pop	{r4, pc}
	...

08000f8c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 320);

void touchgfx_init()
{
 8000f8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8000f90:	f001 f80c 	bl	8001fac <_ZN14BitmapDatabase11getInstanceEv>
 8000f94:	4605      	mov	r5, r0
 8000f96:	f001 f80d 	bl	8001fb4 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8000f9a:	2400      	movs	r4, #0
 8000f9c:	4601      	mov	r1, r0
 8000f9e:	4623      	mov	r3, r4
 8000fa0:	4628      	mov	r0, r5
 8000fa2:	4622      	mov	r2, r4
 8000fa4:	9400      	str	r4, [sp, #0]
 8000fa6:	f00c fad5 	bl	800d554 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8000faa:	4b25      	ldr	r3, [pc, #148]	@ (8001040 <touchgfx_init+0xb4>)
 8000fac:	4a25      	ldr	r2, [pc, #148]	@ (8001044 <touchgfx_init+0xb8>)
        static FrontendHeap instance;
 8000fae:	4d26      	ldr	r5, [pc, #152]	@ (8001048 <touchgfx_init+0xbc>)
 8000fb0:	601a      	str	r2, [r3, #0]
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8000fb2:	4620      	mov	r0, r4
 8000fb4:	f002 f8da 	bl	800316c <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8000fb8:	4824      	ldr	r0, [pc, #144]	@ (800104c <touchgfx_init+0xc0>)
 8000fba:	f00c fa33 	bl	800d424 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8000fbe:	682b      	ldr	r3, [r5, #0]
 8000fc0:	f3bf 8f5b 	dmb	ish
 8000fc4:	07db      	lsls	r3, r3, #31
 8000fc6:	d435      	bmi.n	8001034 <touchgfx_init+0xa8>
 8000fc8:	4628      	mov	r0, r5
 8000fca:	f00f f957 	bl	801027c <__cxa_guard_acquire>
 8000fce:	b388      	cbz	r0, 8001034 <touchgfx_init+0xa8>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 8000fd0:	4c1f      	ldr	r4, [pc, #124]	@ (8001050 <touchgfx_init+0xc4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8000fd2:	4b20      	ldr	r3, [pc, #128]	@ (8001054 <touchgfx_init+0xc8>)
 8000fd4:	6023      	str	r3, [r4, #0]
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8000fd6:	f504 7627 	add.w	r6, r4, #668	@ 0x29c
        : presenterStorage(pres),
 8000fda:	f104 0014 	add.w	r0, r4, #20
          screenStorage(scr),
 8000fde:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
          transitionStorage(tra),
 8000fe2:	f504 7714 	add.w	r7, r4, #592	@ 0x250
        : presenterStorage(pres),
 8000fe6:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 8000fe8:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 8000fec:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 8000fee:	6126      	str	r6, [r4, #16]
 8000ff0:	f007 fa92 	bl	8008518 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8000ff4:	4b18      	ldr	r3, [pc, #96]	@ (8001058 <touchgfx_init+0xcc>)
 8000ff6:	6163      	str	r3, [r4, #20]
 8000ff8:	4640      	mov	r0, r8
 8000ffa:	f007 fa8d 	bl	8008518 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8000ffe:	4b17      	ldr	r3, [pc, #92]	@ (800105c <touchgfx_init+0xd0>)
 8001000:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001002:	4638      	mov	r0, r7
 8001004:	f007 fa88 	bl	8008518 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001008:	4b15      	ldr	r3, [pc, #84]	@ (8001060 <touchgfx_init+0xd4>)
 800100a:	f8c4 3250 	str.w	r3, [r4, #592]	@ 0x250
 800100e:	f504 7024 	add.w	r0, r4, #656	@ 0x290
 8001012:	f002 f919 	bl	8003248 <_ZN5ModelC1Ev>
 8001016:	4622      	mov	r2, r4
 8001018:	f504 7124 	add.w	r1, r4, #656	@ 0x290
 800101c:	4630      	mov	r0, r6
 800101e:	f002 f909 	bl	8003234 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8001022:	4630      	mov	r0, r6
 8001024:	f001 fc18 	bl	8002858 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 8001028:	480e      	ldr	r0, [pc, #56]	@ (8001064 <touchgfx_init+0xd8>)
 800102a:	f00f f971 	bl	8010310 <atexit>
 800102e:	4628      	mov	r0, r5
 8001030:	f00f f930 	bl	8010294 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8001034:	480c      	ldr	r0, [pc, #48]	@ (8001068 <touchgfx_init+0xdc>)
}
 8001036:	b002      	add	sp, #8
 8001038:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 800103c:	f7ff bc5e 	b.w	80008fc <_ZN11TouchGFXHAL10initializeEv>
 8001040:	200124e0 	.word	0x200124e0
 8001044:	200001b8 	.word	0x200001b8
 8001048:	20000fec 	.word	0x20000fec
 800104c:	20000008 	.word	0x20000008
 8001050:	20000ff0 	.word	0x20000ff0
 8001054:	08012070 	.word	0x08012070
 8001058:	08011fd4 	.word	0x08011fd4
 800105c:	08012008 	.word	0x08012008
 8001060:	0801203c 	.word	0x0801203c
 8001064:	08000f65 	.word	0x08000f65
 8001068:	2000013c 	.word	0x2000013c

0800106c <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 800106c:	4801      	ldr	r0, [pc, #4]	@ (8001074 <touchgfx_taskEntry+0x8>)
 800106e:	f7ff bc57 	b.w	8000920 <_ZN11TouchGFXHAL9taskEntryEv>
 8001072:	bf00      	nop
 8001074:	2000013c 	.word	0x2000013c

08001078 <_GLOBAL__sub_I_touchgfx_init>:
}
 8001078:	b570      	push	{r4, r5, r6, lr}
static STM32DMA dma;
 800107a:	4e22      	ldr	r6, [pc, #136]	@ (8001104 <_GLOBAL__sub_I_touchgfx_init+0x8c>)
{
public:

    STM32TouchController() {}
 800107c:	4c22      	ldr	r4, [pc, #136]	@ (8001108 <_GLOBAL__sub_I_touchgfx_init+0x90>)
static LCD16bpp display;
 800107e:	4d23      	ldr	r5, [pc, #140]	@ (800110c <_GLOBAL__sub_I_touchgfx_init+0x94>)
 8001080:	4b23      	ldr	r3, [pc, #140]	@ (8001110 <_GLOBAL__sub_I_touchgfx_init+0x98>)
 8001082:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
 8001084:	4630      	mov	r0, r6
 8001086:	f7ff fed3 	bl	8000e30 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 800108a:	4628      	mov	r0, r5
 800108c:	f00d f8c2 	bl	800e214 <_ZN8touchgfx8LCD16bppC1Ev>
        : dma(dmaInterface),
 8001090:	4b20      	ldr	r3, [pc, #128]	@ (8001114 <_GLOBAL__sub_I_touchgfx_init+0x9c>)
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001092:	4821      	ldr	r0, [pc, #132]	@ (8001118 <_GLOBAL__sub_I_touchgfx_init+0xa0>)
          touchController(touchCtrl),
 8001094:	60dc      	str	r4, [r3, #12]
          mcuInstrumentation(0),
 8001096:	2200      	movs	r2, #0
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8001098:	f44f 7180 	mov.w	r1, #256	@ 0x100
          auxiliaryLCD(0),
 800109c:	e9c3 1212 	strd	r1, r2, [r3, #72]	@ 0x48
          touchSampleRate(1),
 80010a0:	491e      	ldr	r1, [pc, #120]	@ (800111c <_GLOBAL__sub_I_touchgfx_init+0xa4>)
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 80010a2:	861a      	strh	r2, [r3, #48]	@ 0x30
          vSyncCompensationEnabled(false),
 80010a4:	e9c3 121a 	strd	r1, r2, [r3, #104]	@ 0x68
          requestedOrientation(ORIENTATION_LANDSCAPE),
 80010a8:	491d      	ldr	r1, [pc, #116]	@ (8001120 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
 80010aa:	6799      	str	r1, [r3, #120]	@ 0x78
        instance = this;
 80010ac:	491d      	ldr	r1, [pc, #116]	@ (8001124 <_GLOBAL__sub_I_touchgfx_init+0xac>)
          useAuxiliaryLCD(false),
 80010ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        instance = this;
 80010b2:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80010b4:	21f0      	movs	r1, #240	@ 0xf0
 80010b6:	8001      	strh	r1, [r0, #0]
 80010b8:	481b      	ldr	r0, [pc, #108]	@ (8001128 <_GLOBAL__sub_I_touchgfx_init+0xb0>)
          lastY(0),
 80010ba:	665a      	str	r2, [r3, #100]	@ 0x64
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80010bc:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80010be:	481b      	ldr	r0, [pc, #108]	@ (800112c <_GLOBAL__sub_I_touchgfx_init+0xb4>)
          updateMCULoad(0),
 80010c0:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80010c4:	f44f 71a0 	mov.w	r1, #320	@ 0x140
          buttonController(0),
 80010c8:	e9c3 2204 	strd	r2, r2, [r3, #16]
 80010cc:	e9c3 2206 	strd	r2, r2, [r3, #24]
 80010d0:	e9c3 2208 	strd	r2, r2, [r3, #32]
 80010d4:	e9c3 220a 	strd	r2, r2, [r3, #40]	@ 0x28
          frameBuffer0(0),
 80010d8:	e9c3 220e 	strd	r2, r2, [r3, #56]	@ 0x38
          frameBuffer2(0),
 80010dc:	e9c3 2210 	strd	r2, r2, [r3, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 80010e0:	e9c3 2214 	strd	r2, r2, [r3, #80]	@ 0x50
          lastX(0),
 80010e4:	e9c3 2217 	strd	r2, r2, [r3, #92]	@ 0x5c
          cc_begin(0),
 80010e8:	675a      	str	r2, [r3, #116]	@ 0x74
          lcdRef(display),
 80010ea:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80010ee:	8001      	strh	r1, [r0, #0]
 80010f0:	480f      	ldr	r0, [pc, #60]	@ (8001130 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
 80010f2:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 80010f4:	490f      	ldr	r1, [pc, #60]	@ (8001134 <_GLOBAL__sub_I_touchgfx_init+0xbc>)
 80010f6:	700a      	strb	r2, [r1, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80010f8:	2201      	movs	r2, #1
 80010fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80010fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001138 <_GLOBAL__sub_I_touchgfx_init+0xc0>)
 8001100:	601a      	str	r2, [r3, #0]
}
 8001102:	bd70      	pop	{r4, r5, r6, pc}
 8001104:	20000248 	.word	0x20000248
 8001108:	20000fe8 	.word	0x20000fe8
 800110c:	200001bc 	.word	0x200001bc
 8001110:	08011370 	.word	0x08011370
 8001114:	2000013c 	.word	0x2000013c
 8001118:	20012478 	.word	0x20012478
 800111c:	01000001 	.word	0x01000001
 8001120:	01010000 	.word	0x01010000
 8001124:	20012484 	.word	0x20012484
 8001128:	2001247e 	.word	0x2001247e
 800112c:	2001247a 	.word	0x2001247a
 8001130:	20012480 	.word	0x20012480
 8001134:	2001247c 	.word	0x2001247c
 8001138:	08011eac 	.word	0x08011eac

0800113c <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 800113c:	4801      	ldr	r0, [pc, #4]	@ (8001144 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 800113e:	f7ff bd2d 	b.w	8000b9c <_ZN8STM32DMAD1Ev>
 8001142:	bf00      	nop
 8001144:	20000248 	.word	0x20000248

08001148 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001148:	4b03      	ldr	r3, [pc, #12]	@ (8001158 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 800114a:	2290      	movs	r2, #144	@ 0x90
 800114c:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
 8001150:	f883 2358 	strb.w	r2, [r3, #856]	@ 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000e100 	.word	0xe000e100

0800115c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 800115c:	4a09      	ldr	r2, [pc, #36]	@ (8001184 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 800115e:	490a      	ldr	r1, [pc, #40]	@ (8001188 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 8001160:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8001162:	480a      	ldr	r0, [pc, #40]	@ (800118c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8001164:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001168:	3b01      	subs	r3, #1
 800116a:	b29b      	uxth	r3, r3
 800116c:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800116e:	6911      	ldr	r1, [r2, #16]
 8001170:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8001174:	3901      	subs	r1, #1
 8001176:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8001178:	6413      	str	r3, [r2, #64]	@ 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 800117a:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8001182:	4770      	bx	lr
 8001184:	40016800 	.word	0x40016800
 8001188:	200013ea 	.word	0x200013ea
 800118c:	200013e8 	.word	0x200013e8

08001190 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    HAL::endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8001190:	4b01      	ldr	r3, [pc, #4]	@ (8001198 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 8001192:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
}
 8001196:	4770      	bx	lr
 8001198:	40016800 	.word	0x40016800

0800119c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800119c:	4b02      	ldr	r3, [pc, #8]	@ (80011a8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 800119e:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80011a0:	f8c3 10ac 	str.w	r1, [r3, #172]	@ 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80011a4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80011a6:	4770      	bx	lr
 80011a8:	40016800 	.word	0x40016800

080011ac <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 80011ac:	b570      	push	{r4, r5, r6, lr}
 80011ae:	4604      	mov	r4, r0
    HAL::initialize();
 80011b0:	f007 fcaf 	bl	8008b12 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80011b4:	6823      	ldr	r3, [r4, #0]
 80011b6:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 80011b8:	f009 fd0a 	bl	800abd0 <_ZN8touchgfx11Application11getInstanceEv>
 80011bc:	4601      	mov	r1, r0
 80011be:	4620      	mov	r0, r4
 80011c0:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 80011c2:	6823      	ldr	r3, [r4, #0]
 80011c4:	4a05      	ldr	r2, [pc, #20]	@ (80011dc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x30>)
 80011c6:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 80011ca:	4620      	mov	r0, r4
 80011cc:	46ac      	mov	ip, r5
 80011ce:	2300      	movs	r3, #0
}
 80011d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 80011d4:	f5a2 3116 	sub.w	r1, r2, #153600	@ 0x25800
 80011d8:	4760      	bx	ip
 80011da:	bf00      	nop
 80011dc:	d004b000 	.word	0xd004b000

080011e0 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
 80011e0:	f007 bc7e 	b.w	8008ae0 <_ZN8touchgfx3HAL10beginFrameEv>

080011e4 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    if (frameBufferUpdatedThisFrame)
 80011e4:	f890 304b 	ldrb.w	r3, [r0, #75]	@ 0x4b
 80011e8:	b113      	cbz	r3, 80011f0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xc>
        refreshRequested = true;
 80011ea:	4b02      	ldr	r3, [pc, #8]	@ (80011f4 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x10>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	701a      	strb	r2, [r3, #0]
    HAL::endFrame();
 80011f0:	f007 bc82 	b.w	8008af8 <_ZN8touchgfx3HAL8endFrameEv>
 80011f4:	200013ec 	.word	0x200013ec

080011f8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 80011f8:	f007 bc3c 	b.w	8008a74 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

080011fc <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 80011fc:	f007 bd9d 	b.w	8008d3a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

08001200 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001200:	4b03      	ldr	r3, [pc, #12]	@ (8001210 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 8001202:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800120c:	609a      	str	r2, [r3, #8]
}
 800120e:	4770      	bx	lr
 8001210:	e000e100 	.word	0xe000e100

08001214 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001214:	4b08      	ldr	r3, [pc, #32]	@ (8001238 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 8001216:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800121a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800121e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001222:	f3bf 8f6f 	isb	sy
 8001226:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800122a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800122e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001232:	f3bf 8f6f 	isb	sy
}
 8001236:	4770      	bx	lr
 8001238:	e000e100 	.word	0xe000e100

0800123c <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 800123c:	b510      	push	{r4, lr}
        return instance;
 800123e:	4c14      	ldr	r4, [pc, #80]	@ (8001290 <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
 8001240:	6823      	ldr	r3, [r4, #0]
 8001242:	b323      	cbz	r3, 800128e <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8001244:	4b13      	ldr	r3, [pc, #76]	@ (8001294 <HAL_LTDC_LineEventCallback+0x58>)
 8001246:	4a14      	ldr	r2, [pc, #80]	@ (8001298 <HAL_LTDC_LineEventCallback+0x5c>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124a:	8811      	ldrh	r1, [r2, #0]
 800124c:	428b      	cmp	r3, r1
 800124e:	d113      	bne.n	8001278 <HAL_LTDC_LineEventCallback+0x3c>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8001250:	4b12      	ldr	r3, [pc, #72]	@ (800129c <HAL_LTDC_LineEventCallback+0x60>)
 8001252:	8819      	ldrh	r1, [r3, #0]
 8001254:	f003 fe8e 	bl	8004f74 <HAL_LTDC_ProgramLineEvent>
 8001258:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 800125a:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800125e:	3301      	adds	r3, #1
 8001260:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 8001264:	f7ff fc48 	bl	8000af8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8001268:	6820      	ldr	r0, [r4, #0]
 800126a:	f008 f99d 	bl	80095a8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 800126e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 8001272:	2000      	movs	r0, #0
 8001274:	f7ff ba88 	b.w	8000788 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8001278:	f003 fe7c 	bl	8004f74 <HAL_LTDC_ProgramLineEvent>
        return instance;
 800127c:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 800127e:	6803      	ldr	r3, [r0, #0]
 8001280:	6a1b      	ldr	r3, [r3, #32]
 8001282:	4798      	blx	r3
    }
 8001284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001288:	2000      	movs	r0, #0
 800128a:	f7ff baa7 	b.w	80007dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
    }
 800128e:	bd10      	pop	{r4, pc}
 8001290:	20012484 	.word	0x20012484
 8001294:	40016800 	.word	0x40016800
 8001298:	200013ea 	.word	0x200013ea
 800129c:	200013e8 	.word	0x200013e8

080012a0 <SPI5_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI5_Write(uint16_t Value)
{
 80012a0:	b507      	push	{r0, r1, r2, lr}
  HAL_StatusTypeDef status = HAL_OK;

  status = HAL_SPI_Transmit(&hspi5, (uint8_t*) &Value, 1, Spi5Timeout);
 80012a2:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <SPI5_Write+0x1c>)
{
 80012a4:	f8ad 0006 	strh.w	r0, [sp, #6]
  status = HAL_SPI_Transmit(&hspi5, (uint8_t*) &Value, 1, Spi5Timeout);
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4805      	ldr	r0, [pc, #20]	@ (80012c0 <SPI5_Write+0x20>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	f10d 0106 	add.w	r1, sp, #6
 80012b2:	f004 fbe7 	bl	8005a84 <HAL_SPI_Transmit>
  if(status != HAL_OK)
  {
    /* Re-Initialize the BUS */
    SPI5_Error();
  }
}
 80012b6:	b003      	add	sp, #12
 80012b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80012bc:	2000000c 	.word	0x2000000c
 80012c0:	2000147c 	.word	0x2000147c

080012c4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80012c4:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_Start(&hadc1);
 80012c6:	4c0c      	ldr	r4, [pc, #48]	@ (80012f8 <StartDefaultTask+0x34>)
	  HAL_ADC_PollForConversion(&hadc1, 10);
	  int16_t joystickX = HAL_ADC_GetValue(&hadc1);
	  osMessageQueuePut(Queue1Handle, &joystickX, 0, 10);
 80012c8:	4d0c      	ldr	r5, [pc, #48]	@ (80012fc <StartDefaultTask+0x38>)
	  HAL_ADC_Start(&hadc1);
 80012ca:	4620      	mov	r0, r4
 80012cc:	f002 fcaa 	bl	8003c24 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 80012d0:	210a      	movs	r1, #10
 80012d2:	4620      	mov	r0, r4
 80012d4:	f002 fd24 	bl	8003d20 <HAL_ADC_PollForConversion>
	  int16_t joystickX = HAL_ADC_GetValue(&hadc1);
 80012d8:	4620      	mov	r0, r4
 80012da:	f002 fd74 	bl	8003dc6 <HAL_ADC_GetValue>
	  osMessageQueuePut(Queue1Handle, &joystickX, 0, 10);
 80012de:	230a      	movs	r3, #10
	  int16_t joystickX = HAL_ADC_GetValue(&hadc1);
 80012e0:	f8ad 0006 	strh.w	r0, [sp, #6]
	  osMessageQueuePut(Queue1Handle, &joystickX, 0, 10);
 80012e4:	2200      	movs	r2, #0
 80012e6:	6828      	ldr	r0, [r5, #0]
 80012e8:	f10d 0106 	add.w	r1, sp, #6
 80012ec:	f005 f969 	bl	80065c2 <osMessageQueuePut>
	  osDelay(100);
 80012f0:	2064      	movs	r0, #100	@ 0x64
 80012f2:	f005 f877 	bl	80063e4 <osDelay>
  for(;;)
 80012f6:	e7e8      	b.n	80012ca <StartDefaultTask+0x6>
 80012f8:	20001400 	.word	0x20001400
 80012fc:	200013f4 	.word	0x200013f4

08001300 <SystemClock_Config>:
{
 8001300:	b530      	push	{r4, r5, lr}
 8001302:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001304:	2210      	movs	r2, #16
 8001306:	2100      	movs	r1, #0
 8001308:	a80a      	add	r0, sp, #40	@ 0x28
 800130a:	f00f f9ea 	bl	80106e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800130e:	2100      	movs	r1, #0
 8001310:	2214      	movs	r2, #20
 8001312:	a803      	add	r0, sp, #12
 8001314:	f00f f9e5 	bl	80106e2 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8001318:	2400      	movs	r4, #0
 800131a:	4b1d      	ldr	r3, [pc, #116]	@ (8001390 <SystemClock_Config+0x90>)
 800131c:	9401      	str	r4, [sp, #4]
 800131e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001320:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001324:	641a      	str	r2, [r3, #64]	@ 0x40
 8001326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001328:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800132c:	9301      	str	r3, [sp, #4]
 800132e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001330:	4b18      	ldr	r3, [pc, #96]	@ (8001394 <SystemClock_Config+0x94>)
 8001332:	9402      	str	r4, [sp, #8]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001342:	9302      	str	r3, [sp, #8]
 8001344:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001346:	2201      	movs	r2, #1
 8001348:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800134c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001350:	2502      	movs	r5, #2
 8001352:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001356:	22b4      	movs	r2, #180	@ 0xb4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001358:	e9cd 530e 	strd	r5, r3, [sp, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800135c:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLN = 180;
 800135e:	2304      	movs	r3, #4
 8001360:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001364:	e9cd 5312 	strd	r5, r3, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001368:	f003 fe5c 	bl	8005024 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800136c:	f003 fe20 	bl	8004fb0 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001370:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001372:	e9cd 3503 	strd	r3, r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001376:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 800137a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800137e:	e9cd 1306 	strd	r1, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001382:	a803      	add	r0, sp, #12
 8001384:	2105      	movs	r1, #5
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001386:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001388:	f004 f828 	bl	80053dc <HAL_RCC_ClockConfig>
}
 800138c:	b015      	add	sp, #84	@ 0x54
 800138e:	bd30      	pop	{r4, r5, pc}
 8001390:	40023800 	.word	0x40023800
 8001394:	40007000 	.word	0x40007000

08001398 <main>:
{
 8001398:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800139c:	b09d      	sub	sp, #116	@ 0x74
  HAL_Init();
 800139e:	f002 fb59 	bl	8003a54 <HAL_Init>
  SystemClock_Config();
 80013a2:	f7ff ffad 	bl	8001300 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a6:	2214      	movs	r2, #20
 80013a8:	2100      	movs	r1, #0
 80013aa:	a80f      	add	r0, sp, #60	@ 0x3c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ac:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ae:	f00f f998 	bl	80106e2 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013b2:	4bc1      	ldr	r3, [pc, #772]	@ (80016b8 <main+0x320>)
 80013b4:	9401      	str	r4, [sp, #4]
 80013b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOE, VSYNC_FREQ_Pin|RENDER_TIME_Pin|FRAME_RATE_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 80013b8:	48c0      	ldr	r0, [pc, #768]	@ (80016bc <main+0x324>)
  hadc1.Instance = ADC1;
 80013ba:	4ec1      	ldr	r6, [pc, #772]	@ (80016c0 <main+0x328>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013bc:	f042 0210 	orr.w	r2, r2, #16
 80013c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80013c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013c4:	f002 0210 	and.w	r2, r2, #16
 80013c8:	9201      	str	r2, [sp, #4]
 80013ca:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013cc:	9402      	str	r4, [sp, #8]
 80013ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013d0:	f042 0220 	orr.w	r2, r2, #32
 80013d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80013d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013d8:	f002 0220 	and.w	r2, r2, #32
 80013dc:	9202      	str	r2, [sp, #8]
 80013de:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013e0:	9403      	str	r4, [sp, #12]
 80013e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013e4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80013e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80013ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013ec:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80013f0:	9203      	str	r2, [sp, #12]
 80013f2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f4:	9404      	str	r4, [sp, #16]
 80013f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013f8:	f042 0204 	orr.w	r2, r2, #4
 80013fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80013fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001400:	f002 0204 	and.w	r2, r2, #4
 8001404:	9204      	str	r2, [sp, #16]
 8001406:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001408:	9405      	str	r4, [sp, #20]
 800140a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800140c:	f042 0201 	orr.w	r2, r2, #1
 8001410:	631a      	str	r2, [r3, #48]	@ 0x30
 8001412:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001414:	f002 0201 	and.w	r2, r2, #1
 8001418:	9205      	str	r2, [sp, #20]
 800141a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800141c:	9406      	str	r4, [sp, #24]
 800141e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001420:	f042 0202 	orr.w	r2, r2, #2
 8001424:	631a      	str	r2, [r3, #48]	@ 0x30
 8001426:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001428:	f002 0202 	and.w	r2, r2, #2
 800142c:	9206      	str	r2, [sp, #24]
 800142e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001430:	9407      	str	r4, [sp, #28]
 8001432:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001434:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001438:	631a      	str	r2, [r3, #48]	@ 0x30
 800143a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800143c:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8001440:	9207      	str	r2, [sp, #28]
 8001442:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001444:	9408      	str	r4, [sp, #32]
 8001446:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001448:	f042 0208 	orr.w	r2, r2, #8
 800144c:	631a      	str	r2, [r3, #48]	@ 0x30
 800144e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001450:	f002 0208 	and.w	r2, r2, #8
 8001454:	9208      	str	r2, [sp, #32]
 8001456:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_ADC1_CLK_ENABLE();
 8001458:	9409      	str	r4, [sp, #36]	@ 0x24
 800145a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800145c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001460:	645a      	str	r2, [r3, #68]	@ 0x44
 8001462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001464:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001468:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_WritePin(GPIOE, VSYNC_FREQ_Pin|RENDER_TIME_Pin|FRAME_RATE_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 800146a:	4622      	mov	r2, r4
 800146c:	213c      	movs	r1, #60	@ 0x3c
  __HAL_RCC_ADC1_CLK_ENABLE();
 800146e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  HAL_GPIO_WritePin(GPIOE, VSYNC_FREQ_Pin|RENDER_TIME_Pin|FRAME_RATE_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8001470:	f002 ff8e 	bl	8004390 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001474:	4893      	ldr	r0, [pc, #588]	@ (80016c4 <main+0x32c>)
 8001476:	4622      	mov	r2, r4
 8001478:	2104      	movs	r1, #4
 800147a:	f002 ff89 	bl	8004390 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800147e:	4622      	mov	r2, r4
 8001480:	4891      	ldr	r0, [pc, #580]	@ (80016c8 <main+0x330>)
 8001482:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001486:	f002 ff83 	bl	8004390 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148a:	233c      	movs	r3, #60	@ 0x3c
 800148c:	2501      	movs	r5, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148e:	f04f 0903 	mov.w	r9, #3
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001492:	eb0d 0103 	add.w	r1, sp, r3
 8001496:	4889      	ldr	r0, [pc, #548]	@ (80016bc <main+0x324>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001498:	f8cd 9048 	str.w	r9, [sp, #72]	@ 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800149c:	2702      	movs	r7, #2
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800149e:	f04f 0b04 	mov.w	fp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a2:	e9cd 350f 	strd	r3, r5, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	9411      	str	r4, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014a8:	f002 fe88 	bl	80041bc <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ac:	4885      	ldr	r0, [pc, #532]	@ (80016c4 <main+0x32c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	9411      	str	r4, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b0:	a90f      	add	r1, sp, #60	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b2:	e9cd b50f 	strd	fp, r5, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014b6:	9712      	str	r7, [sp, #72]	@ 0x48
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b8:	f002 fe80 	bl	80041bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80014bc:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014c0:	4881      	ldr	r0, [pc, #516]	@ (80016c8 <main+0x330>)
 80014c2:	a90f      	add	r1, sp, #60	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c4:	e9cd 350f 	strd	r3, r5, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014c8:	e9cd 4711 	strd	r4, r7, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014cc:	f002 fe76 	bl	80041bc <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d0:	487e      	ldr	r0, [pc, #504]	@ (80016cc <main+0x334>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	9411      	str	r4, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d4:	a90f      	add	r1, sp, #60	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d6:	e9cd 540f 	strd	r5, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014da:	f002 fe6f 	bl	80041bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 80014de:	230c      	movs	r3, #12
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014e0:	487b      	ldr	r0, [pc, #492]	@ (80016d0 <main+0x338>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014e2:	9511      	str	r5, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014e4:	a90f      	add	r1, sp, #60	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e6:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014ea:	f002 fe67 	bl	80041bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 80014ee:	2330      	movs	r3, #48	@ 0x30
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014f0:	4877      	ldr	r0, [pc, #476]	@ (80016d0 <main+0x338>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014f2:	9511      	str	r5, [sp, #68]	@ 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014f4:	a90f      	add	r1, sp, #60	@ 0x3c
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014f6:	f04f 0808 	mov.w	r8, #8
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014fa:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
  ADC_ChannelConfTypeDef sConfig = {0};
 80014fe:	f04f 0a10 	mov.w	sl, #16
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001502:	f002 fe5b 	bl	80041bc <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001506:	486f      	ldr	r0, [pc, #444]	@ (80016c4 <main+0x32c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	9411      	str	r4, [sp, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800150a:	a90f      	add	r1, sp, #60	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800150c:	e9cd 890f 	strd	r8, r9, [sp, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001510:	f002 fe54 	bl	80041bc <HAL_GPIO_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001514:	4652      	mov	r2, sl
 8001516:	4621      	mov	r1, r4
 8001518:	a80f      	add	r0, sp, #60	@ 0x3c
 800151a:	f00f f8e2 	bl	80106e2 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800151e:	4a6d      	ldr	r2, [pc, #436]	@ (80016d4 <main+0x33c>)
  hadc1.Init.ScanConvMode = DISABLE;
 8001520:	6134      	str	r4, [r6, #16]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001522:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001526:	e9c6 2300 	strd	r2, r3, [r6]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800152a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800152e:	60b3      	str	r3, [r6, #8]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001530:	4630      	mov	r0, r6
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001532:	4b69      	ldr	r3, [pc, #420]	@ (80016d8 <main+0x340>)
 8001534:	62b3      	str	r3, [r6, #40]	@ 0x28
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001536:	7634      	strb	r4, [r6, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001538:	f886 4020 	strb.w	r4, [r6, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800153c:	62f4      	str	r4, [r6, #44]	@ 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800153e:	60f4      	str	r4, [r6, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001540:	61f5      	str	r5, [r6, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001542:	f886 4030 	strb.w	r4, [r6, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001546:	6175      	str	r5, [r6, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001548:	f002 fac6 	bl	8003ad8 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_13;
 800154c:	230d      	movs	r3, #13
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800154e:	a90f      	add	r1, sp, #60	@ 0x3c
 8001550:	4630      	mov	r0, r6
  sConfig.Rank = 1;
 8001552:	e9cd 350f 	strd	r3, r5, [sp, #60]	@ 0x3c
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001556:	9411      	str	r4, [sp, #68]	@ 0x44
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001558:	f002 fc38 	bl	8003dcc <HAL_ADC_ConfigChannel>
  hcrc.Instance = CRC;
 800155c:	485f      	ldr	r0, [pc, #380]	@ (80016dc <main+0x344>)
 800155e:	4b60      	ldr	r3, [pc, #384]	@ (80016e0 <main+0x348>)
  hi2c3.Instance = I2C3;
 8001560:	4e60      	ldr	r6, [pc, #384]	@ (80016e4 <main+0x34c>)
  hcrc.Instance = CRC;
 8001562:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001564:	f002 fd20 	bl	8003fa8 <HAL_CRC_Init>
  hi2c3.Init.ClockSpeed = 100000;
 8001568:	495f      	ldr	r1, [pc, #380]	@ (80016e8 <main+0x350>)
 800156a:	4b60      	ldr	r3, [pc, #384]	@ (80016ec <main+0x354>)
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800156c:	6234      	str	r4, [r6, #32]
  hi2c3.Init.ClockSpeed = 100000;
 800156e:	e9c6 1300 	strd	r1, r3, [r6]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001572:	4630      	mov	r0, r6
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001574:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001578:	e9c6 3404 	strd	r3, r4, [r6, #16]
  hi2c3.Init.OwnAddress1 = 0;
 800157c:	e9c6 4402 	strd	r4, r4, [r6, #8]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001580:	e9c6 4406 	strd	r4, r4, [r6, #24]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001584:	f003 f904 	bl	8004790 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8001588:	4651      	mov	r1, sl
 800158a:	4630      	mov	r0, r6
 800158c:	f003 fb40 	bl	8004c10 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001590:	4621      	mov	r1, r4
 8001592:	4630      	mov	r0, r6
 8001594:	f003 fb5b 	bl	8004c4e <HAL_I2CEx_ConfigDigitalFilter>
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001598:	4e55      	ldr	r6, [pc, #340]	@ (80016f0 <main+0x358>)
  hspi5.Instance = SPI5;
 800159a:	4856      	ldr	r0, [pc, #344]	@ (80016f4 <main+0x35c>)
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800159c:	f44f 7382 	mov.w	r3, #260	@ 0x104
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80015a0:	f44f 7c00 	mov.w	ip, #512	@ 0x200
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80015a4:	e9c0 6300 	strd	r6, r3, [r0]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80015a8:	2318      	movs	r3, #24
 80015aa:	e9c0 c306 	strd	ip, r3, [r0, #24]
  hspi5.Init.CRCPolynomial = 10;
 80015ae:	230a      	movs	r3, #10
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80015b0:	4e51      	ldr	r6, [pc, #324]	@ (80016f8 <main+0x360>)
  hspi5.Init.CRCPolynomial = 10;
 80015b2:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80015b4:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015b8:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80015bc:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015c0:	6284      	str	r4, [r0, #40]	@ 0x28
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80015c2:	f004 fa03 	bl	80059cc <HAL_SPI_Init>
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80015c6:	4b4d      	ldr	r3, [pc, #308]	@ (80016fc <main+0x364>)
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80015c8:	f8c6 a010 	str.w	sl, [r6, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80015cc:	f04f 0e40 	mov.w	lr, #64	@ 0x40
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80015d0:	e9c6 3500 	strd	r3, r5, [r6]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80015d4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80015d8:	e9c6 e305 	strd	lr, r3, [r6, #20]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80015dc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80015e0:	e9c6 3408 	strd	r3, r4, [r6, #32]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80015e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015e8:	62b3      	str	r3, [r6, #40]	@ 0x28
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80015ea:	a90f      	add	r1, sp, #60	@ 0x3c
  SdramTiming.ExitSelfRefreshDelay = 7;
 80015ec:	2307      	movs	r3, #7
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80015ee:	4630      	mov	r0, r6
  SdramTiming.SelfRefreshTime = 4;
 80015f0:	e9cd 3b10 	strd	r3, fp, [sp, #64]	@ 0x40
  SdramTiming.WriteRecoveryTime = 3;
 80015f4:	e9cd 3912 	strd	r3, r9, [sp, #72]	@ 0x48
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80015f8:	e9c6 4b02 	strd	r4, fp, [r6, #8]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80015fc:	61f4      	str	r4, [r6, #28]
  SdramTiming.RCDDelay = 2;
 80015fe:	e9cd 7714 	strd	r7, r7, [sp, #80]	@ 0x50
  SdramTiming.LoadToActiveDelay = 2;
 8001602:	970f      	str	r7, [sp, #60]	@ 0x3c
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001604:	f004 f8de 	bl	80057c4 <HAL_SDRAM_Init>
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001608:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800160c:	a90b      	add	r1, sp, #44	@ 0x2c
 800160e:	4630      	mov	r0, r6
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001610:	e9cd 580b 	strd	r5, r8, [sp, #44]	@ 0x2c
  Command->ModeRegisterDefinition  = 0;
 8001614:	e9cd 540d 	strd	r5, r4, [sp, #52]	@ 0x34
 __IO uint32_t tmpmrd =0;
 8001618:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800161a:	f004 f8f3 	bl	8005804 <HAL_SDRAM_SendCommand>
  HAL_Delay(1);
 800161e:	4628      	mov	r0, r5
 8001620:	f002 fa44 	bl	8003aac <HAL_Delay>
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001624:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001628:	a90b      	add	r1, sp, #44	@ 0x2c
 800162a:	4630      	mov	r0, r6
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800162c:	e9cd 780b 	strd	r7, r8, [sp, #44]	@ 0x2c
  Command->ModeRegisterDefinition  = 0;
 8001630:	e9cd 540d 	strd	r5, r4, [sp, #52]	@ 0x34
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001634:	f004 f8e6 	bl	8005804 <HAL_SDRAM_SendCommand>
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001638:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800163c:	a90b      	add	r1, sp, #44	@ 0x2c
 800163e:	4630      	mov	r0, r6
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001640:	e9cd 980b 	strd	r9, r8, [sp, #44]	@ 0x2c
  Command->ModeRegisterDefinition  = 0;
 8001644:	e9cd b40d 	strd	fp, r4, [sp, #52]	@ 0x34
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001648:	f004 f8dc 	bl	8005804 <HAL_SDRAM_SendCommand>
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800164c:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8001650:	930a      	str	r3, [sp, #40]	@ 0x28
  Command->ModeRegisterDefinition  = tmpmrd;
 8001652:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8001654:	930e      	str	r3, [sp, #56]	@ 0x38
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001656:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800165a:	a90b      	add	r1, sp, #44	@ 0x2c
 800165c:	4630      	mov	r0, r6
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800165e:	e9cd b80b 	strd	fp, r8, [sp, #44]	@ 0x2c
  Command->AutoRefreshNumber       = 1;
 8001662:	950d      	str	r5, [sp, #52]	@ 0x34
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001664:	f004 f8ce 	bl	8005804 <HAL_SDRAM_SendCommand>
  HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 8001668:	f240 516a 	movw	r1, #1386	@ 0x56a
 800166c:	4630      	mov	r0, r6
 800166e:	f004 f8e7 	bl	8005840 <HAL_SDRAM_ProgramRefreshRate>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001672:	2234      	movs	r2, #52	@ 0x34
 8001674:	4621      	mov	r1, r4
 8001676:	a80f      	add	r0, sp, #60	@ 0x3c
 8001678:	f00f f833 	bl	80106e2 <memset>
  hltdc.Instance = LTDC;
 800167c:	4e20      	ldr	r6, [pc, #128]	@ (8001700 <main+0x368>)
 800167e:	4b21      	ldr	r3, [pc, #132]	@ (8001704 <main+0x36c>)
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001680:	6134      	str	r4, [r6, #16]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001682:	e9c6 3400 	strd	r3, r4, [r6]
  hltdc.Init.HorizontalSync = 9;
 8001686:	2309      	movs	r3, #9
  hltdc.Init.VerticalSync = 1;
 8001688:	e9c6 3505 	strd	r3, r5, [r6, #20]
  hltdc.Init.AccumulatedHBP = 29;
 800168c:	231d      	movs	r3, #29
  hltdc.Init.AccumulatedVBP = 3;
 800168e:	e9c6 3907 	strd	r3, r9, [r6, #28]
  hltdc.Init.AccumulatedActiveH = 323;
 8001692:	f240 1343 	movw	r3, #323	@ 0x143
 8001696:	f240 190d 	movw	r9, #269	@ 0x10d
 800169a:	e9c6 9309 	strd	r9, r3, [r6, #36]	@ 0x24
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800169e:	4630      	mov	r0, r6
  hltdc.Init.TotalHeigh = 327;
 80016a0:	f240 1347 	movw	r3, #327	@ 0x147
 80016a4:	f240 1a17 	movw	sl, #279	@ 0x117
 80016a8:	e9c6 a30b 	strd	sl, r3, [r6, #44]	@ 0x2c
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80016ac:	e9c6 4402 	strd	r4, r4, [r6, #8]
  hltdc.Init.Backcolor.Blue = 0;
 80016b0:	86b4      	strh	r4, [r6, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 80016b2:	f886 4036 	strb.w	r4, [r6, #54]	@ 0x36
 80016b6:	e027      	b.n	8001708 <main+0x370>
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40021000 	.word	0x40021000
 80016c0:	20001400 	.word	0x20001400
 80016c4:	40020800 	.word	0x40020800
 80016c8:	40020c00 	.word	0x40020c00
 80016cc:	40020000 	.word	0x40020000
 80016d0:	40021800 	.word	0x40021800
 80016d4:	40012000 	.word	0x40012000
 80016d8:	0f000001 	.word	0x0f000001
 80016dc:	20001610 	.word	0x20001610
 80016e0:	40023000 	.word	0x40023000
 80016e4:	2000157c 	.word	0x2000157c
 80016e8:	40005c00 	.word	0x40005c00
 80016ec:	000186a0 	.word	0x000186a0
 80016f0:	40015000 	.word	0x40015000
 80016f4:	2000147c 	.word	0x2000147c
 80016f8:	20001448 	.word	0x20001448
 80016fc:	a0000140 	.word	0xa0000140
 8001700:	200014d4 	.word	0x200014d4
 8001704:	40016800 	.word	0x40016800
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001708:	f003 fb3c 	bl	8004d84 <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 800170c:	21ff      	movs	r1, #255	@ 0xff
  pLayerCfg.WindowX1 = 240;
 800170e:	22f0      	movs	r2, #240	@ 0xf0
  pLayerCfg.Alpha0 = 0;
 8001710:	e9cd 1414 	strd	r1, r4, [sp, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001714:	f44f 6b80 	mov.w	fp, #1024	@ 0x400
 8001718:	2105      	movs	r1, #5
  pLayerCfg.WindowY1 = 320;
 800171a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
  pLayerCfg.WindowY0 = 0;
 800171e:	e9cd 2410 	strd	r2, r4, [sp, #64]	@ 0x40
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001722:	e9cd b116 	strd	fp, r1, [sp, #88]	@ 0x58
  pLayerCfg.ImageWidth = 240;
 8001726:	e9cd 4218 	strd	r4, r2, [sp, #96]	@ 0x60
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800172a:	a90f      	add	r1, sp, #60	@ 0x3c
 800172c:	4622      	mov	r2, r4
 800172e:	4630      	mov	r0, r6
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001730:	e9cd 3712 	strd	r3, r7, [sp, #72]	@ 0x48
  LcdDrv = &ili9341_drv;
 8001734:	4e1e      	ldr	r6, [pc, #120]	@ (80017b0 <main+0x418>)
  pLayerCfg.ImageHeight = 320;
 8001736:	931a      	str	r3, [sp, #104]	@ 0x68
  pLayerCfg.WindowX0 = 0;
 8001738:	940f      	str	r4, [sp, #60]	@ 0x3c
  pLayerCfg.Backcolor.Blue = 0;
 800173a:	f8ad 406c 	strh.w	r4, [sp, #108]	@ 0x6c
  pLayerCfg.Backcolor.Red = 0;
 800173e:	f88d 406e 	strb.w	r4, [sp, #110]	@ 0x6e
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001742:	f003 fbea 	bl	8004f1a <HAL_LTDC_ConfigLayer>
  LcdDrv = &ili9341_drv;
 8001746:	4b1b      	ldr	r3, [pc, #108]	@ (80017b4 <main+0x41c>)
 8001748:	6033      	str	r3, [r6, #0]
  LcdDrv->Init();
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4798      	blx	r3
  LcdDrv->DisplayOff();
 800174e:	6833      	ldr	r3, [r6, #0]
  hdma2d.Instance = DMA2D;
 8001750:	4e19      	ldr	r6, [pc, #100]	@ (80017b8 <main+0x420>)
  LcdDrv->DisplayOff();
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	4798      	blx	r3
  hdma2d.Instance = DMA2D;
 8001756:	4b19      	ldr	r3, [pc, #100]	@ (80017bc <main+0x424>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001758:	4630      	mov	r0, r6
  hdma2d.Init.Mode = DMA2D_M2M;
 800175a:	e9c6 3400 	strd	r3, r4, [r6]
  hdma2d.Init.OutputOffset = 0;
 800175e:	e9c6 7402 	strd	r7, r4, [r6, #8]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8001762:	e9c6 470a 	strd	r4, r7, [r6, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001766:	e9c6 440c 	strd	r4, r4, [r6, #48]	@ 0x30
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800176a:	f002 fc2d 	bl	8003fc8 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800176e:	4629      	mov	r1, r5
 8001770:	4630      	mov	r0, r6
 8001772:	f002 fcdf 	bl	8004134 <HAL_DMA2D_ConfigLayer>
  MX_TouchGFX_Init();
 8001776:	f7fe ff4a 	bl	800060e <MX_TouchGFX_Init>
  osKernelInitialize();
 800177a:	f004 fdc3 	bl	8006304 <osKernelInitialize>
  Queue1Handle = osMessageQueueNew (8, sizeof(uint8_t), &Queue1_attributes);
 800177e:	4a10      	ldr	r2, [pc, #64]	@ (80017c0 <main+0x428>)
 8001780:	4629      	mov	r1, r5
 8001782:	4640      	mov	r0, r8
 8001784:	f004 fee2 	bl	800654c <osMessageQueueNew>
 8001788:	4b0e      	ldr	r3, [pc, #56]	@ (80017c4 <main+0x42c>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800178a:	4a0f      	ldr	r2, [pc, #60]	@ (80017c8 <main+0x430>)
  Queue1Handle = osMessageQueueNew (8, sizeof(uint8_t), &Queue1_attributes);
 800178c:	6018      	str	r0, [r3, #0]
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800178e:	4621      	mov	r1, r4
 8001790:	480e      	ldr	r0, [pc, #56]	@ (80017cc <main+0x434>)
 8001792:	f004 fde3 	bl	800635c <osThreadNew>
 8001796:	4b0e      	ldr	r3, [pc, #56]	@ (80017d0 <main+0x438>)
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 8001798:	4a0e      	ldr	r2, [pc, #56]	@ (80017d4 <main+0x43c>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800179a:	6018      	str	r0, [r3, #0]
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 800179c:	4621      	mov	r1, r4
 800179e:	480e      	ldr	r0, [pc, #56]	@ (80017d8 <main+0x440>)
 80017a0:	f004 fddc 	bl	800635c <osThreadNew>
 80017a4:	4b0d      	ldr	r3, [pc, #52]	@ (80017dc <main+0x444>)
 80017a6:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80017a8:	f004 fdbe 	bl	8006328 <osKernelStart>
  while (1)
 80017ac:	e7fe      	b.n	80017ac <main+0x414>
 80017ae:	bf00      	nop
 80017b0:	200013f0 	.word	0x200013f0
 80017b4:	2000001c 	.word	0x2000001c
 80017b8:	200015d0 	.word	0x200015d0
 80017bc:	4002b000 	.word	0x4002b000
 80017c0:	0801207c 	.word	0x0801207c
 80017c4:	200013f4 	.word	0x200013f4
 80017c8:	080120b8 	.word	0x080120b8
 80017cc:	080012c5 	.word	0x080012c5
 80017d0:	200013fc 	.word	0x200013fc
 80017d4:	08012094 	.word	0x08012094
 80017d8:	08000613 	.word	0x08000613
 80017dc:	200013f8 	.word	0x200013f8

080017e0 <IOE_Init>:
void IOE_Init(void)
 80017e0:	4770      	bx	lr

080017e2 <IOE_ITConfig>:
void IOE_ITConfig(void)
 80017e2:	4770      	bx	lr

080017e4 <IOE_Write>:
{
 80017e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  status = HAL_I2C_Mem_Write(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2c3Timeout);
 80017e6:	4b09      	ldr	r3, [pc, #36]	@ (800180c <IOE_Write+0x28>)
 80017e8:	f88d 2017 	strb.w	r2, [sp, #23]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	9302      	str	r3, [sp, #8]
 80017f0:	f10d 0217 	add.w	r2, sp, #23
 80017f4:	2301      	movs	r3, #1
 80017f6:	9200      	str	r2, [sp, #0]
 80017f8:	9301      	str	r3, [sp, #4]
 80017fa:	460a      	mov	r2, r1
 80017fc:	4601      	mov	r1, r0
 80017fe:	4804      	ldr	r0, [pc, #16]	@ (8001810 <IOE_Write+0x2c>)
 8001800:	f003 f86e 	bl	80048e0 <HAL_I2C_Mem_Write>
}
 8001804:	b007      	add	sp, #28
 8001806:	f85d fb04 	ldr.w	pc, [sp], #4
 800180a:	bf00      	nop
 800180c:	20000010 	.word	0x20000010
 8001810:	2000157c 	.word	0x2000157c

08001814 <IOE_Read>:
{
 8001814:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t value = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2c3Timeout);
 800181c:	4b08      	ldr	r3, [pc, #32]	@ (8001840 <IOE_Read+0x2c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	9302      	str	r3, [sp, #8]
{
 8001822:	460a      	mov	r2, r1
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2c3Timeout);
 8001824:	2301      	movs	r3, #1
 8001826:	f10d 0117 	add.w	r1, sp, #23
 800182a:	9100      	str	r1, [sp, #0]
 800182c:	9301      	str	r3, [sp, #4]
 800182e:	4601      	mov	r1, r0
 8001830:	4804      	ldr	r0, [pc, #16]	@ (8001844 <IOE_Read+0x30>)
 8001832:	f003 f8e5 	bl	8004a00 <HAL_I2C_Mem_Read>
}
 8001836:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800183a:	b007      	add	sp, #28
 800183c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001840:	20000010 	.word	0x20000010
 8001844:	2000157c 	.word	0x2000157c

08001848 <IOE_ReadMultiple>:
{
 8001848:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2c3Timeout);
 800184a:	4c08      	ldr	r4, [pc, #32]	@ (800186c <IOE_ReadMultiple+0x24>)
 800184c:	6824      	ldr	r4, [r4, #0]
 800184e:	9200      	str	r2, [sp, #0]
 8001850:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001854:	460a      	mov	r2, r1
 8001856:	2301      	movs	r3, #1
 8001858:	4601      	mov	r1, r0
 800185a:	4805      	ldr	r0, [pc, #20]	@ (8001870 <IOE_ReadMultiple+0x28>)
 800185c:	f003 f8d0 	bl	8004a00 <HAL_I2C_Mem_Read>
}
 8001860:	3800      	subs	r0, #0
 8001862:	bf18      	it	ne
 8001864:	2001      	movne	r0, #1
 8001866:	b004      	add	sp, #16
 8001868:	bd10      	pop	{r4, pc}
 800186a:	bf00      	nop
 800186c:	20000010 	.word	0x20000010
 8001870:	2000157c 	.word	0x2000157c

08001874 <IOE_Delay>:
void IOE_Delay(uint32_t Delay)
 8001874:	f002 b91a 	b.w	8003aac <HAL_Delay>

08001878 <LCD_IO_Init>:
{
 8001878:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800187a:	4c06      	ldr	r4, [pc, #24]	@ (8001894 <LCD_IO_Init+0x1c>)
 800187c:	2200      	movs	r2, #0
 800187e:	4620      	mov	r0, r4
 8001880:	2104      	movs	r1, #4
 8001882:	f002 fd85 	bl	8004390 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001886:	4620      	mov	r0, r4
 8001888:	2201      	movs	r2, #1
}
 800188a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800188e:	2104      	movs	r1, #4
 8001890:	f002 bd7e 	b.w	8004390 <HAL_GPIO_WritePin>
 8001894:	40020800 	.word	0x40020800

08001898 <LCD_IO_WriteData>:
{
 8001898:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800189a:	4d0b      	ldr	r5, [pc, #44]	@ (80018c8 <LCD_IO_WriteData+0x30>)
{
 800189c:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800189e:	2201      	movs	r2, #1
 80018a0:	480a      	ldr	r0, [pc, #40]	@ (80018cc <LCD_IO_WriteData+0x34>)
 80018a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018a6:	f002 fd73 	bl	8004390 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80018aa:	2200      	movs	r2, #0
 80018ac:	2104      	movs	r1, #4
 80018ae:	4628      	mov	r0, r5
 80018b0:	f002 fd6e 	bl	8004390 <HAL_GPIO_WritePin>
  SPI5_Write(RegValue);
 80018b4:	4620      	mov	r0, r4
 80018b6:	f7ff fcf3 	bl	80012a0 <SPI5_Write>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80018ba:	4628      	mov	r0, r5
 80018bc:	2201      	movs	r2, #1
}
 80018be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80018c2:	2104      	movs	r1, #4
 80018c4:	f002 bd64 	b.w	8004390 <HAL_GPIO_WritePin>
 80018c8:	40020800 	.word	0x40020800
 80018cc:	40020c00 	.word	0x40020c00

080018d0 <LCD_IO_WriteReg>:
{
 80018d0:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80018d2:	4d0b      	ldr	r5, [pc, #44]	@ (8001900 <LCD_IO_WriteReg+0x30>)
{
 80018d4:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80018d6:	2200      	movs	r2, #0
 80018d8:	480a      	ldr	r0, [pc, #40]	@ (8001904 <LCD_IO_WriteReg+0x34>)
 80018da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018de:	f002 fd57 	bl	8004390 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80018e2:	2200      	movs	r2, #0
 80018e4:	2104      	movs	r1, #4
 80018e6:	4628      	mov	r0, r5
 80018e8:	f002 fd52 	bl	8004390 <HAL_GPIO_WritePin>
  SPI5_Write(Reg);
 80018ec:	4620      	mov	r0, r4
 80018ee:	f7ff fcd7 	bl	80012a0 <SPI5_Write>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80018f2:	4628      	mov	r0, r5
 80018f4:	2201      	movs	r2, #1
}
 80018f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80018fa:	2104      	movs	r1, #4
 80018fc:	f002 bd48 	b.w	8004390 <HAL_GPIO_WritePin>
 8001900:	40020800 	.word	0x40020800
 8001904:	40020c00 	.word	0x40020c00

08001908 <LCD_IO_ReadData>:
{
 8001908:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800190a:	4e14      	ldr	r6, [pc, #80]	@ (800195c <LCD_IO_ReadData+0x54>)
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800190c:	4f14      	ldr	r7, [pc, #80]	@ (8001960 <LCD_IO_ReadData+0x58>)
{
 800190e:	4605      	mov	r5, r0
 8001910:	460c      	mov	r4, r1
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001912:	4630      	mov	r0, r6
 8001914:	2200      	movs	r2, #0
 8001916:	2104      	movs	r1, #4
 8001918:	f002 fd3a 	bl	8004390 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800191c:	2200      	movs	r2, #0
 800191e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001922:	4638      	mov	r0, r7
 8001924:	f002 fd34 	bl	8004390 <HAL_GPIO_WritePin>
  SPI5_Write(RegValue);
 8001928:	4628      	mov	r0, r5
 800192a:	f7ff fcb9 	bl	80012a0 <SPI5_Write>
  status = HAL_SPI_Receive(&hspi5, (uint8_t*) &readvalue, ReadSize, Spi5Timeout);
 800192e:	4b0d      	ldr	r3, [pc, #52]	@ (8001964 <LCD_IO_ReadData+0x5c>)
 8001930:	480d      	ldr	r0, [pc, #52]	@ (8001968 <LCD_IO_ReadData+0x60>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4622      	mov	r2, r4
 8001936:	a901      	add	r1, sp, #4
 8001938:	f004 fa41 	bl	8005dbe <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800193c:	4638      	mov	r0, r7
 800193e:	2201      	movs	r2, #1
 8001940:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  return readvalue;
 8001944:	9c01      	ldr	r4, [sp, #4]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001946:	f002 fd23 	bl	8004390 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800194a:	4630      	mov	r0, r6
 800194c:	2201      	movs	r2, #1
 800194e:	2104      	movs	r1, #4
 8001950:	f002 fd1e 	bl	8004390 <HAL_GPIO_WritePin>
}
 8001954:	4620      	mov	r0, r4
 8001956:	b003      	add	sp, #12
 8001958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800195a:	bf00      	nop
 800195c:	40020800 	.word	0x40020800
 8001960:	40020c00 	.word	0x40020c00
 8001964:	2000000c 	.word	0x2000000c
 8001968:	2000147c 	.word	0x2000147c

0800196c <LCD_Delay>:
  HAL_Delay(Delay);
 800196c:	f002 b89e 	b.w	8003aac <HAL_Delay>

08001970 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001970:	6802      	ldr	r2, [r0, #0]
 8001972:	4b03      	ldr	r3, [pc, #12]	@ (8001980 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001974:	429a      	cmp	r2, r3
 8001976:	d101      	bne.n	800197c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001978:	f002 b886 	b.w	8003a88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40001000 	.word	0x40001000

08001984 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001984:	4770      	bx	lr
	...

08001988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001988:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198a:	4b0e      	ldr	r3, [pc, #56]	@ (80019c4 <HAL_MspInit+0x3c>)
 800198c:	2200      	movs	r2, #0
 800198e:	9200      	str	r2, [sp, #0]
 8001990:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001992:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8001996:	6459      	str	r1, [r3, #68]	@ 0x44
 8001998:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800199a:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 800199e:	9100      	str	r1, [sp, #0]
 80019a0:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a2:	9201      	str	r2, [sp, #4]
 80019a4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80019a6:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80019aa:	6419      	str	r1, [r3, #64]	@ 0x40
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019b2:	9301      	str	r3, [sp, #4]
 80019b4:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019b6:	210f      	movs	r1, #15
 80019b8:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019bc:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019be:	f002 bab3 	b.w	8003f28 <HAL_NVIC_SetPriority>
 80019c2:	bf00      	nop
 80019c4:	40023800 	.word	0x40023800

080019c8 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80019c8:	6802      	ldr	r2, [r0, #0]
 80019ca:	4b09      	ldr	r3, [pc, #36]	@ (80019f0 <HAL_CRC_MspInit+0x28>)
 80019cc:	429a      	cmp	r2, r3
{
 80019ce:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80019d0:	d10b      	bne.n	80019ea <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	9301      	str	r3, [sp, #4]
 80019d6:	4b07      	ldr	r3, [pc, #28]	@ (80019f4 <HAL_CRC_MspInit+0x2c>)
 80019d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019da:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80019de:	631a      	str	r2, [r3, #48]	@ 0x30
 80019e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019e6:	9301      	str	r3, [sp, #4]
 80019e8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80019ea:	b002      	add	sp, #8
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40023000 	.word	0x40023000
 80019f4:	40023800 	.word	0x40023800

080019f8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80019f8:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 80019fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001a38 <HAL_DMA2D_MspInit+0x40>)
 80019fc:	6802      	ldr	r2, [r0, #0]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d116      	bne.n	8001a30 <HAL_DMA2D_MspInit+0x38>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001a02:	2200      	movs	r2, #0
 8001a04:	f5a3 43f0 	sub.w	r3, r3, #30720	@ 0x7800
 8001a08:	9201      	str	r2, [sp, #4]
 8001a0a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a0c:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8001a10:	6319      	str	r1, [r3, #48]	@ 0x30
 8001a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001a18:	9301      	str	r3, [sp, #4]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001a1a:	2105      	movs	r1, #5
 8001a1c:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001a1e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001a20:	f002 fa82 	bl	8003f28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001a24:	205a      	movs	r0, #90	@ 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001a26:	b003      	add	sp, #12
 8001a28:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001a2c:	f002 baae 	b.w	8003f8c <HAL_NVIC_EnableIRQ>
}
 8001a30:	b003      	add	sp, #12
 8001a32:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a36:	bf00      	nop
 8001a38:	4002b000 	.word	0x4002b000

08001a3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a40:	4604      	mov	r4, r0
 8001a42:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a44:	2214      	movs	r2, #20
 8001a46:	2100      	movs	r1, #0
 8001a48:	a803      	add	r0, sp, #12
 8001a4a:	f00e fe4a 	bl	80106e2 <memset>
  if(hi2c->Instance==I2C3)
 8001a4e:	6822      	ldr	r2, [r4, #0]
 8001a50:	4b24      	ldr	r3, [pc, #144]	@ (8001ae4 <HAL_I2C_MspInit+0xa8>)
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d143      	bne.n	8001ade <HAL_I2C_MspInit+0xa2>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a56:	4c24      	ldr	r4, [pc, #144]	@ (8001ae8 <HAL_I2C_MspInit+0xac>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a58:	4824      	ldr	r0, [pc, #144]	@ (8001aec <HAL_I2C_MspInit+0xb0>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a5a:	2500      	movs	r5, #0
 8001a5c:	9500      	str	r5, [sp, #0]
 8001a5e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001a60:	f043 0304 	orr.w	r3, r3, #4
 8001a64:	6323      	str	r3, [r4, #48]	@ 0x30
 8001a66:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a70:	9501      	str	r5, [sp, #4]
 8001a72:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6323      	str	r3, [r4, #48]	@ 0x30
 8001a7a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	9301      	str	r3, [sp, #4]
 8001a82:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a84:	f04f 0912 	mov.w	r9, #18
 8001a88:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8c:	f04f 0801 	mov.w	r8, #1
 8001a90:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a92:	2604      	movs	r6, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a94:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a96:	e9cd 3903 	strd	r3, r9, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9a:	e9cd 8705 	strd	r8, r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a9e:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aa0:	f002 fb8c 	bl	80041bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001aa4:	f44f 7380 	mov.w	r3, #256	@ 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa8:	4811      	ldr	r0, [pc, #68]	@ (8001af0 <HAL_I2C_MspInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001aaa:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aac:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aae:	e9cd 3903 	strd	r3, r9, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab2:	e9cd 8705 	strd	r8, r7, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab6:	f002 fb81 	bl	80041bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001aba:	9502      	str	r5, [sp, #8]
 8001abc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001abe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ac2:	6423      	str	r3, [r4, #64]	@ 0x40
 8001ac4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001ac6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001aca:	9302      	str	r3, [sp, #8]
 8001acc:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */
  /* Force the I2C Peripheral Clock Reset */  
    __HAL_RCC_I2C3_FORCE_RESET();
 8001ace:	6a23      	ldr	r3, [r4, #32]
 8001ad0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ad4:	6223      	str	r3, [r4, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    __HAL_RCC_I2C3_RELEASE_RESET(); 
 8001ad6:	6a23      	ldr	r3, [r4, #32]
 8001ad8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001adc:	6223      	str	r3, [r4, #32]
  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001ade:	b009      	add	sp, #36	@ 0x24
 8001ae0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ae4:	40005c00 	.word	0x40005c00
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	40020800 	.word	0x40020800
 8001af0:	40020000 	.word	0x40020000

08001af4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001af6:	b099      	sub	sp, #100	@ 0x64
 8001af8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afa:	2214      	movs	r2, #20
 8001afc:	2100      	movs	r1, #0
 8001afe:	a807      	add	r0, sp, #28
 8001b00:	f00e fdef 	bl	80106e2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b04:	2230      	movs	r2, #48	@ 0x30
 8001b06:	eb0d 0002 	add.w	r0, sp, r2
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	f00e fde9 	bl	80106e2 <memset>
  if(hltdc->Instance==LTDC)
 8001b10:	6822      	ldr	r2, [r4, #0]
 8001b12:	4b5e      	ldr	r3, [pc, #376]	@ (8001c8c <HAL_LTDC_MspInit+0x198>)
 8001b14:	429a      	cmp	r2, r3
 8001b16:	f040 80b7 	bne.w	8001c88 <HAL_LTDC_MspInit+0x194>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001b1a:	2308      	movs	r3, #8
 8001b1c:	930c      	str	r3, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001b1e:	23c0      	movs	r3, #192	@ 0xc0
 8001b20:	9310      	str	r3, [sp, #64]	@ 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001b22:	2304      	movs	r3, #4
 8001b24:	9312      	str	r3, [sp, #72]	@ 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b26:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001b28:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b2c:	9315      	str	r3, [sp, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b2e:	f003 fd1d 	bl	800556c <HAL_RCCEx_PeriphCLKConfig>
 8001b32:	b108      	cbz	r0, 8001b38 <HAL_LTDC_MspInit+0x44>
    {
      Error_Handler();
 8001b34:	f7ff ff26 	bl	8001984 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001b38:	4b55      	ldr	r3, [pc, #340]	@ (8001c90 <HAL_LTDC_MspInit+0x19c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b3a:	4856      	ldr	r0, [pc, #344]	@ (8001c94 <HAL_LTDC_MspInit+0x1a0>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001b3c:	2400      	movs	r4, #0
 8001b3e:	9400      	str	r4, [sp, #0]
 8001b40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001b42:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001b46:	645a      	str	r2, [r3, #68]	@ 0x44
 8001b48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001b4a:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
 8001b4e:	9200      	str	r2, [sp, #0]
 8001b50:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b52:	9401      	str	r4, [sp, #4]
 8001b54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b56:	f042 0220 	orr.w	r2, r2, #32
 8001b5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b5e:	f002 0220 	and.w	r2, r2, #32
 8001b62:	9201      	str	r2, [sp, #4]
 8001b64:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b66:	9402      	str	r4, [sp, #8]
 8001b68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b6a:	f042 0201 	orr.w	r2, r2, #1
 8001b6e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b72:	f002 0201 	and.w	r2, r2, #1
 8001b76:	9202      	str	r2, [sp, #8]
 8001b78:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7a:	9403      	str	r4, [sp, #12]
 8001b7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b7e:	f042 0202 	orr.w	r2, r2, #2
 8001b82:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b86:	f002 0202 	and.w	r2, r2, #2
 8001b8a:	9203      	str	r2, [sp, #12]
 8001b8c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b8e:	9404      	str	r4, [sp, #16]
 8001b90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b92:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b96:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b9a:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8001b9e:	9204      	str	r2, [sp, #16]
 8001ba0:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba2:	9405      	str	r4, [sp, #20]
 8001ba4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ba6:	f042 0204 	orr.w	r2, r2, #4
 8001baa:	631a      	str	r2, [r3, #48]	@ 0x30
 8001bac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001bae:	f002 0204 	and.w	r2, r2, #4
 8001bb2:	9205      	str	r2, [sp, #20]
 8001bb4:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bb6:	9406      	str	r4, [sp, #24]
 8001bb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001bba:	f042 0208 	orr.w	r2, r2, #8
 8001bbe:	631a      	str	r2, [r3, #48]	@ 0x30
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc2:	f003 0308 	and.w	r3, r3, #8
 8001bc6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc8:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001bca:	260e      	movs	r6, #14
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bcc:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001bce:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bd4:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd6:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bda:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bde:	f002 faed 	bl	80041bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 8001be2:	f641 0358 	movw	r3, #6232	@ 0x1858
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be6:	482c      	ldr	r0, [pc, #176]	@ (8001c98 <HAL_LTDC_MspInit+0x1a4>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001be8:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bea:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bec:	e9cd 3507 	strd	r3, r5, [sp, #28]

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001bf0:	2709      	movs	r7, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bf2:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf6:	f002 fae1 	bl	80041bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bfa:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bfc:	4827      	ldr	r0, [pc, #156]	@ (8001c9c <HAL_LTDC_MspInit+0x1a8>)
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001bfe:	970b      	str	r7, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c00:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c02:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c06:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c0a:	f002 fad7 	bl	80041bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8001c0e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c12:	4822      	ldr	r0, [pc, #136]	@ (8001c9c <HAL_LTDC_MspInit+0x1a8>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c14:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c16:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c18:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c1c:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c20:	f002 facc 	bl	80041bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8001c24:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c28:	481d      	ldr	r0, [pc, #116]	@ (8001ca0 <HAL_LTDC_MspInit+0x1ac>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c2a:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c2c:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c32:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c36:	f002 fac1 	bl	80041bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c3a:	23c0      	movs	r3, #192	@ 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c3c:	4819      	ldr	r0, [pc, #100]	@ (8001ca4 <HAL_LTDC_MspInit+0x1b0>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c3e:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c40:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c42:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c46:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c4a:	f002 fab7 	bl	80041bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c4e:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c50:	4815      	ldr	r0, [pc, #84]	@ (8001ca8 <HAL_LTDC_MspInit+0x1b4>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c52:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c54:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c56:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c5a:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c5e:	f002 faad 	bl	80041bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001c62:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c66:	480e      	ldr	r0, [pc, #56]	@ (8001ca0 <HAL_LTDC_MspInit+0x1ac>)
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001c68:	970b      	str	r7, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c6a:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6c:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c70:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c74:	f002 faa2 	bl	80041bc <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001c78:	2058      	movs	r0, #88	@ 0x58
 8001c7a:	4622      	mov	r2, r4
 8001c7c:	2105      	movs	r1, #5
 8001c7e:	f002 f953 	bl	8003f28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001c82:	2058      	movs	r0, #88	@ 0x58
 8001c84:	f002 f982 	bl	8003f8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001c88:	b019      	add	sp, #100	@ 0x64
 8001c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c8c:	40016800 	.word	0x40016800
 8001c90:	40023800 	.word	0x40023800
 8001c94:	40021400 	.word	0x40021400
 8001c98:	40020000 	.word	0x40020000
 8001c9c:	40020400 	.word	0x40020400
 8001ca0:	40021800 	.word	0x40021800
 8001ca4:	40020800 	.word	0x40020800
 8001ca8:	40020c00 	.word	0x40020c00

08001cac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cac:	b510      	push	{r4, lr}
 8001cae:	4604      	mov	r4, r0
 8001cb0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb2:	2214      	movs	r2, #20
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	a803      	add	r0, sp, #12
 8001cb8:	f00e fd13 	bl	80106e2 <memset>
  if(hspi->Instance==SPI5)
 8001cbc:	6822      	ldr	r2, [r4, #0]
 8001cbe:	4b14      	ldr	r3, [pc, #80]	@ (8001d10 <HAL_SPI_MspInit+0x64>)
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d123      	bne.n	8001d0c <HAL_SPI_MspInit+0x60>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001cc4:	f503 4368 	add.w	r3, r3, #59392	@ 0xe800
 8001cc8:	2100      	movs	r1, #0
 8001cca:	9101      	str	r1, [sp, #4]
 8001ccc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cce:	4811      	ldr	r0, [pc, #68]	@ (8001d14 <HAL_SPI_MspInit+0x68>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001cd0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001cd4:	645a      	str	r2, [r3, #68]	@ 0x44
 8001cd6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001cd8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001cdc:	9201      	str	r2, [sp, #4]
 8001cde:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ce0:	9102      	str	r1, [sp, #8]
 8001ce2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ce4:	f042 0220 	orr.w	r2, r2, #32
 8001ce8:	631a      	str	r2, [r3, #48]	@ 0x30
 8001cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cec:	f003 0320 	and.w	r3, r3, #32
 8001cf0:	9302      	str	r3, [sp, #8]
 8001cf2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf4:	f44f 7260 	mov.w	r2, #896	@ 0x380
 8001cf8:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001cfa:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfc:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001d00:	2305      	movs	r3, #5
 8001d02:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d06:	a903      	add	r1, sp, #12
 8001d08:	f002 fa58 	bl	80041bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001d0c:	b008      	add	sp, #32
 8001d0e:	bd10      	pop	{r4, pc}
 8001d10:	40015000 	.word	0x40015000
 8001d14:	40021400 	.word	0x40021400

08001d18 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d1c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001d1e:	2300      	movs	r3, #0
 8001d20:	9303      	str	r3, [sp, #12]
  if (FMC_Initialized) {
 8001d22:	4b2b      	ldr	r3, [pc, #172]	@ (8001dd0 <HAL_SDRAM_MspInit+0xb8>)
 8001d24:	681c      	ldr	r4, [r3, #0]
 8001d26:	2c00      	cmp	r4, #0
 8001d28:	d14f      	bne.n	8001dca <HAL_SDRAM_MspInit+0xb2>
  FMC_Initialized = 1;
 8001d2a:	f04f 0801 	mov.w	r8, #1
 8001d2e:	f8c3 8000 	str.w	r8, [r3]
  __HAL_RCC_FMC_CLK_ENABLE();
 8001d32:	4b28      	ldr	r3, [pc, #160]	@ (8001dd4 <HAL_SDRAM_MspInit+0xbc>)
 8001d34:	9400      	str	r4, [sp, #0]
 8001d36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d38:	4827      	ldr	r0, [pc, #156]	@ (8001dd8 <HAL_SDRAM_MspInit+0xc0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001d3a:	ea42 0208 	orr.w	r2, r2, r8
 8001d3e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d42:	ea03 0308 	and.w	r3, r3, r8
 8001d46:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d48:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d4a:	2603      	movs	r6, #3
 8001d4c:	250c      	movs	r5, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8001d4e:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d50:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d52:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001d56:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d5a:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d5e:	f002 fa2d 	bl	80041bc <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d62:	481e      	ldr	r0, [pc, #120]	@ (8001ddc <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d64:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d66:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d68:	e9cd 8701 	strd	r8, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6c:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d70:	f002 fa24 	bl	80041bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8001d74:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d78:	4819      	ldr	r0, [pc, #100]	@ (8001de0 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d7a:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d7c:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d82:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d86:	f002 fa19 	bl	80041bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001d8a:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d8e:	4815      	ldr	r0, [pc, #84]	@ (8001de4 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d90:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d92:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d94:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d98:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d9c:	f002 fa0e 	bl	80041bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001da0:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001da4:	4810      	ldr	r0, [pc, #64]	@ (8001de8 <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001da6:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001da8:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001daa:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dae:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001db2:	f002 fa03 	bl	80041bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001db6:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db8:	480c      	ldr	r0, [pc, #48]	@ (8001dec <HAL_SDRAM_MspInit+0xd4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001dba:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dbc:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbe:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc2:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc6:	f002 f9f9 	bl	80041bc <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001dca:	b006      	add	sp, #24
 8001dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001dd0:	20001618 	.word	0x20001618
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40021400 	.word	0x40021400
 8001ddc:	40020800 	.word	0x40020800
 8001de0:	40021800 	.word	0x40021800
 8001de4:	40021000 	.word	0x40021000
 8001de8:	40020c00 	.word	0x40020c00
 8001dec:	40020400 	.word	0x40020400

08001df0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df0:	b530      	push	{r4, r5, lr}
 8001df2:	4601      	mov	r1, r0
 8001df4:	b089      	sub	sp, #36	@ 0x24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001df6:	2200      	movs	r2, #0
 8001df8:	2036      	movs	r0, #54	@ 0x36
 8001dfa:	f002 f895 	bl	8003f28 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001dfe:	2036      	movs	r0, #54	@ 0x36
 8001e00:	f002 f8c4 	bl	8003f8c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001e04:	2500      	movs	r5, #0
 8001e06:	4b15      	ldr	r3, [pc, #84]	@ (8001e5c <HAL_InitTick+0x6c>)
 8001e08:	9502      	str	r5, [sp, #8]
 8001e0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001e0c:	4c14      	ldr	r4, [pc, #80]	@ (8001e60 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001e0e:	f042 0210 	orr.w	r2, r2, #16
 8001e12:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e16:	f003 0310 	and.w	r3, r3, #16
 8001e1a:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e1c:	a901      	add	r1, sp, #4
 8001e1e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001e20:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e22:	f003 fb85 	bl	8005530 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001e26:	f003 fb73 	bl	8005510 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8001e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e64 <HAL_InitTick+0x74>)
 8001e2c:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001e2e:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001e32:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001e34:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e36:	4b0c      	ldr	r3, [pc, #48]	@ (8001e68 <HAL_InitTick+0x78>)
 8001e38:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e3c:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 8001e3e:	6060      	str	r0, [r4, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001e40:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8001e42:	6125      	str	r5, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e44:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001e46:	f004 f989 	bl	800615c <HAL_TIM_Base_Init>
 8001e4a:	b920      	cbnz	r0, 8001e56 <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001e4c:	4620      	mov	r0, r4
 8001e4e:	f004 f855 	bl	8005efc <HAL_TIM_Base_Start_IT>
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001e52:	b009      	add	sp, #36	@ 0x24
 8001e54:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8001e56:	2001      	movs	r0, #1
 8001e58:	e7fb      	b.n	8001e52 <HAL_InitTick+0x62>
 8001e5a:	bf00      	nop
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	2000161c 	.word	0x2000161c
 8001e64:	40001000 	.word	0x40001000
 8001e68:	000f4240 	.word	0x000f4240

08001e6c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e6c:	4770      	bx	lr

08001e6e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e6e:	e7fe      	b.n	8001e6e <HardFault_Handler>

08001e70 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e70:	e7fe      	b.n	8001e70 <MemManage_Handler>

08001e72 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e72:	e7fe      	b.n	8001e72 <BusFault_Handler>

08001e74 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e74:	e7fe      	b.n	8001e74 <UsageFault_Handler>

08001e76 <DebugMon_Handler>:
}

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001e76:	4770      	bx	lr

08001e78 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e78:	4801      	ldr	r0, [pc, #4]	@ (8001e80 <TIM6_DAC_IRQHandler+0x8>)
 8001e7a:	f004 b87d 	b.w	8005f78 <HAL_TIM_IRQHandler>
 8001e7e:	bf00      	nop
 8001e80:	2000161c 	.word	0x2000161c

08001e84 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001e84:	4801      	ldr	r0, [pc, #4]	@ (8001e8c <LTDC_IRQHandler+0x8>)
 8001e86:	f002 bfeb 	b.w	8004e60 <HAL_LTDC_IRQHandler>
 8001e8a:	bf00      	nop
 8001e8c:	200014d4 	.word	0x200014d4

08001e90 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001e90:	4801      	ldr	r0, [pc, #4]	@ (8001e98 <DMA2D_IRQHandler+0x8>)
 8001e92:	f002 b8c5 	b.w	8004020 <HAL_DMA2D_IRQHandler>
 8001e96:	bf00      	nop
 8001e98:	200015d0 	.word	0x200015d0

08001e9c <EXTI0_IRQHandler>:
  /* USER CODE END DMA2D_IRQn 1 */
}

/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void)
{
 8001e9c:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	uint32_t count = osMessageQueueGetCount(Queue1Handle);
 8001e9e:	4c0b      	ldr	r4, [pc, #44]	@ (8001ecc <EXTI0_IRQHandler+0x30>)
 8001ea0:	6820      	ldr	r0, [r4, #0]
 8001ea2:	f004 fbef 	bl	8006684 <osMessageQueueGetCount>
	if (count < 2)
 8001ea6:	2801      	cmp	r0, #1
 8001ea8:	d809      	bhi.n	8001ebe <EXTI0_IRQHandler+0x22>
	{
		uint8_t x = 'A';
 8001eaa:	2341      	movs	r3, #65	@ 0x41
 8001eac:	f88d 3007 	strb.w	r3, [sp, #7]
		osMessageQueuePut(Queue1Handle, &x, 0, 200);
 8001eb0:	6820      	ldr	r0, [r4, #0]
 8001eb2:	23c8      	movs	r3, #200	@ 0xc8
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f10d 0107 	add.w	r1, sp, #7
 8001eba:	f004 fb82 	bl	80065c2 <osMessageQueuePut>
	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001ebe:	2001      	movs	r0, #1
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  /* USER CODE END EXTI0_IRQn 1 */
}
 8001ec0:	b002      	add	sp, #8
 8001ec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001ec6:	f002 ba73 	b.w	80043b0 <HAL_GPIO_EXTI_IRQHandler>
 8001eca:	bf00      	nop
 8001ecc:	200013f4 	.word	0x200013f4

08001ed0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	4770      	bx	lr

08001ed4 <_kill>:

int _kill(int pid, int sig)
{
 8001ed4:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001ed6:	f00e fca7 	bl	8010828 <__errno>
 8001eda:	2316      	movs	r3, #22
 8001edc:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001ede:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee2:	bd08      	pop	{r3, pc}

08001ee4 <_exit>:

void _exit (int status)
{
 8001ee4:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001ee6:	f00e fc9f 	bl	8010828 <__errno>
 8001eea:	2316      	movs	r3, #22
 8001eec:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001eee:	e7fe      	b.n	8001eee <_exit+0xa>

08001ef0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ef0:	b570      	push	{r4, r5, r6, lr}
 8001ef2:	460d      	mov	r5, r1
 8001ef4:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef6:	460e      	mov	r6, r1
 8001ef8:	1b73      	subs	r3, r6, r5
 8001efa:	429c      	cmp	r4, r3
 8001efc:	dc01      	bgt.n	8001f02 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001efe:	4620      	mov	r0, r4
 8001f00:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001f02:	f3af 8000 	nop.w
 8001f06:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f0a:	e7f5      	b.n	8001ef8 <_read+0x8>

08001f0c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f0c:	b570      	push	{r4, r5, r6, lr}
 8001f0e:	460d      	mov	r5, r1
 8001f10:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f12:	460e      	mov	r6, r1
 8001f14:	1b73      	subs	r3, r6, r5
 8001f16:	429c      	cmp	r4, r3
 8001f18:	dc01      	bgt.n	8001f1e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001f1a:	4620      	mov	r0, r4
 8001f1c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001f1e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001f22:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f26:	e7f5      	b.n	8001f14 <_write+0x8>

08001f28 <_close>:

int _close(int file)
{
	return -1;
}
 8001f28:	f04f 30ff 	mov.w	r0, #4294967295
 8001f2c:	4770      	bx	lr

08001f2e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001f2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f32:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001f34:	2000      	movs	r0, #0
 8001f36:	4770      	bx	lr

08001f38 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001f38:	2001      	movs	r0, #1
 8001f3a:	4770      	bx	lr

08001f3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	4770      	bx	lr

08001f40 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001f40:	4a0a      	ldr	r2, [pc, #40]	@ (8001f6c <_sbrk+0x2c>)
 8001f42:	6811      	ldr	r1, [r2, #0]
{
 8001f44:	b508      	push	{r3, lr}
 8001f46:	4603      	mov	r3, r0
	if (heap_end == 0)
 8001f48:	b909      	cbnz	r1, 8001f4e <_sbrk+0xe>
		heap_end = &end;
 8001f4a:	4909      	ldr	r1, [pc, #36]	@ (8001f70 <_sbrk+0x30>)
 8001f4c:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 8001f4e:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8001f50:	4669      	mov	r1, sp
 8001f52:	4403      	add	r3, r0
 8001f54:	428b      	cmp	r3, r1
 8001f56:	d906      	bls.n	8001f66 <_sbrk+0x26>
	{
		errno = ENOMEM;
 8001f58:	f00e fc66 	bl	8010828 <__errno>
 8001f5c:	230c      	movs	r3, #12
 8001f5e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001f60:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8001f64:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8001f66:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8001f68:	e7fc      	b.n	8001f64 <_sbrk+0x24>
 8001f6a:	bf00      	nop
 8001f6c:	20001664 	.word	0x20001664
 8001f70:	200127f8 	.word	0x200127f8

08001f74 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8001f74:	4770      	bx	lr

08001f76 <_ZN23ApplicationFontProviderD0Ev>:
 8001f76:	b510      	push	{r4, lr}
 8001f78:	2104      	movs	r1, #4
 8001f7a:	4604      	mov	r4, r0
 8001f7c:	f00e f97c 	bl	8010278 <_ZdlPvj>
 8001f80:	4620      	mov	r0, r4
 8001f82:	bd10      	pop	{r4, pc}

08001f84 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 8001f84:	2901      	cmp	r1, #1
{
 8001f86:	b508      	push	{r3, lr}
    switch (typography)
 8001f88:	d006      	beq.n	8001f98 <_ZN23ApplicationFontProvider7getFontEt+0x14>
 8001f8a:	2902      	cmp	r1, #2
 8001f8c:	d008      	beq.n	8001fa0 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 8001f8e:	b959      	cbnz	r1, 8001fa8 <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8001f90:	f001 f92a 	bl	80031e8 <_ZN17TypedTextDatabase8getFontsEv>
 8001f94:	6800      	ldr	r0, [r0, #0]
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 8001f96:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8001f98:	f001 f926 	bl	80031e8 <_ZN17TypedTextDatabase8getFontsEv>
 8001f9c:	6840      	ldr	r0, [r0, #4]
 8001f9e:	e7fa      	b.n	8001f96 <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8001fa0:	f001 f922 	bl	80031e8 <_ZN17TypedTextDatabase8getFontsEv>
 8001fa4:	6880      	ldr	r0, [r0, #8]
 8001fa6:	e7f6      	b.n	8001f96 <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 8001fa8:	2000      	movs	r0, #0
 8001faa:	e7f4      	b.n	8001f96 <_ZN23ApplicationFontProvider7getFontEt+0x12>

08001fac <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8001fac:	4800      	ldr	r0, [pc, #0]	@ (8001fb0 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8001fae:	4770      	bx	lr
 8001fb0:	080120f0 	.word	0x080120f0

08001fb4 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8001fb4:	2009      	movs	r0, #9
 8001fb6:	4770      	bx	lr

08001fb8 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8001fb8:	b513      	push	{r0, r1, r4, lr}
 8001fba:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8001fbc:	b151      	cbz	r1, 8001fd4 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8001fbe:	6803      	ldr	r3, [r0, #0]
        const uint8_t* dummyPixelDataPointer = 0;
 8001fc0:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8001fc2:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8001fc6:	aa01      	add	r2, sp, #4
 8001fc8:	689c      	ldr	r4, [r3, #8]
 8001fca:	f10d 0303 	add.w	r3, sp, #3
 8001fce:	47a0      	blx	r4
        return glyph;
    }
 8001fd0:	b002      	add	sp, #8
 8001fd2:	bd10      	pop	{r4, pc}
            return 0;
 8001fd4:	4608      	mov	r0, r1
 8001fd6:	e7fb      	b.n	8001fd0 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08001fd8 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8001fd8:	89c0      	ldrh	r0, [r0, #14]
 8001fda:	4770      	bx	lr

08001fdc <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8001fdc:	8a00      	ldrh	r0, [r0, #16]
 8001fde:	4770      	bx	lr

08001fe0 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8001fe0:	88c0      	ldrh	r0, [r0, #6]
 8001fe2:	4770      	bx	lr

08001fe4 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8001fe4:	8880      	ldrh	r0, [r0, #4]
 8001fe6:	4770      	bx	lr

08001fe8 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8001fe8:	7a80      	ldrb	r0, [r0, #10]
    }
 8001fea:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8001fee:	4770      	bx	lr

08001ff0 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8001ff0:	7a80      	ldrb	r0, [r0, #10]
    }
 8001ff2:	09c0      	lsrs	r0, r0, #7
 8001ff4:	4770      	bx	lr

08001ff6 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	4770      	bx	lr
	...

08001ffc <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 8001ffc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8002004 <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	00000000 	.word	0x00000000

08002008 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8002008:	2000      	movs	r0, #0
 800200a:	4770      	bx	lr

0800200c <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 800200c:	8081      	strh	r1, [r0, #4]
    }
 800200e:	4770      	bx	lr

08002010 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8002010:	80c1      	strh	r1, [r0, #6]
    }
 8002012:	4770      	bx	lr

08002014 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8002014:	8101      	strh	r1, [r0, #8]
    }
 8002016:	4770      	bx	lr

08002018 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8002018:	8141      	strh	r1, [r0, #10]
    }
 800201a:	4770      	bx	lr

0800201c <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 800201c:	4770      	bx	lr

0800201e <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 800201e:	4770      	bx	lr

08002020 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8002020:	4770      	bx	lr

08002022 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8002022:	4770      	bx	lr

08002024 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8002024:	4770      	bx	lr

08002026 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8002026:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8002028:	88c4      	ldrh	r4, [r0, #6]
 800202a:	6803      	ldr	r3, [r0, #0]
 800202c:	1b12      	subs	r2, r2, r4
 800202e:	8884      	ldrh	r4, [r0, #4]
 8002030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002032:	1b09      	subs	r1, r1, r4
 8002034:	b212      	sxth	r2, r2
    }
 8002036:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 800203a:	b209      	sxth	r1, r1
 800203c:	4718      	bx	r3

0800203e <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800203e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002042:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8002044:	f04f 33ff 	mov.w	r3, #4294967295
 8002048:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 800204a:	6813      	ldr	r3, [r2, #0]
 800204c:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 800204e:	6010      	str	r0, [r2, #0]
    }
 8002050:	4770      	bx	lr

08002052 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8002052:	4770      	bx	lr

08002054 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8002054:	4770      	bx	lr

08002056 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8002056:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 800205a:	6808      	ldr	r0, [r1, #0]
 800205c:	6849      	ldr	r1, [r1, #4]
 800205e:	c303      	stmia	r3!, {r0, r1}
    }
 8002060:	4770      	bx	lr

08002062 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8002062:	4770      	bx	lr

08002064 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8002064:	4770      	bx	lr

08002066 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8002066:	6041      	str	r1, [r0, #4]
    }
 8002068:	4770      	bx	lr

0800206a <_ZNK8touchgfx10Transition13FullSolidRect12getSolidRectEv>:
     * A Widget that reports solid and but does not draw anything.
     */
    class FullSolidRect : public Widget
    {
    public:
        virtual Rect getSolidRect() const
 800206a:	b510      	push	{r4, lr}
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800206c:	2200      	movs	r2, #0
        {
            return Rect(0, 0, rect.width, rect.height);
 800206e:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8002072:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8002076:	8002      	strh	r2, [r0, #0]
 8002078:	8042      	strh	r2, [r0, #2]
 800207a:	8084      	strh	r4, [r0, #4]
 800207c:	80c1      	strh	r1, [r0, #6]
        }
 800207e:	bd10      	pop	{r4, pc}

08002080 <_ZNK8touchgfx10Transition13FullSolidRect4drawERKNS_4RectE>:

        virtual void draw(const Rect& area) const
        {
        }
 8002080:	4770      	bx	lr

08002082 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002082:	4770      	bx	lr

08002084 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8002084:	4770      	bx	lr
	...

08002088 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 8002088:	4b06      	ldr	r3, [pc, #24]	@ (80020a4 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 800208a:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 800208e:	2300      	movs	r3, #0
 8002090:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8002094:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8002098:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 800209c:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	08002349 	.word	0x08002349

080020a8 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 80020a8:	2301      	movs	r3, #1
 80020aa:	7203      	strb	r3, [r0, #8]
    }
 80020ac:	4770      	bx	lr

080020ae <_ZN8touchgfx10Transition13FullSolidRectD1Ev>:
    class FullSolidRect : public Widget
 80020ae:	4770      	bx	lr

080020b0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED1Ev>:
 * the given direction.  This transition only draws the pixels in the
 * framebuffer once, and never moves any pixels. It is therefore very
 * useful on MCUs with limited performance.
 */
template <Direction templateDirection>
class WipeTransition : public Transition
 80020b0:	4770      	bx	lr

080020b2 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>:
{
/**
 * A Transition that slides the new screen over the previous \e from the given direction.
 */
template <Direction templateDirection>
class CoverTransition : public Transition
 80020b2:	4770      	bx	lr

080020b4 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 80020b4:	4770      	bx	lr

080020b6 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE8tearDownEv>:
            // Synchronize framebuffers
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
        }
    }

    virtual void tearDown()
 80020b6:	4601      	mov	r1, r0
    {
        screenContainer->remove(solid);
 80020b8:	6840      	ldr	r0, [r0, #4]
 80020ba:	6803      	ldr	r3, [r0, #0]
 80020bc:	3110      	adds	r1, #16
 80020be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80020c0:	4718      	bx	r3

080020c2 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE4initEv>:
    }

    virtual void init()
 80020c2:	4601      	mov	r1, r0
    {
        Transition::init();
        // Add the solid (and not-drawing-anything) widget on top to cover the other widgets
        screenContainer->add(solid);
 80020c4:	6840      	ldr	r0, [r0, #4]
 80020c6:	6803      	ldr	r3, [r0, #0]
 80020c8:	3110      	adds	r1, #16
 80020ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020cc:	4718      	bx	r3

080020ce <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE10invalidateEv>:
     * Wipe transition does not require an invalidation. Invalidation
     * is handled by the class. Do no invalidation initially.
     */
    virtual void invalidate()
    {
    }
 80020ce:	4770      	bx	lr

080020d0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE8tearDownEv>:

            d = d->getNextSibling();
        }
    }

    virtual void tearDown()
 80020d0:	4601      	mov	r1, r0
    {
        screenContainer->remove(solid);
 80020d2:	6840      	ldr	r0, [r0, #4]
 80020d4:	6803      	ldr	r3, [r0, #0]
 80020d6:	3110      	adds	r1, #16
 80020d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80020da:	4718      	bx	r3

080020dc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv>:
    }

    virtual void init()
 80020dc:	b570      	push	{r4, r5, r6, lr}
 80020de:	4605      	mov	r5, r0
    {
        Transition::init();

        // Move snapshot and its children with delta value for X or Y
        Drawable* d = screenContainer->getFirstChild();
 80020e0:	6840      	ldr	r0, [r0, #4]
 80020e2:	6803      	ldr	r3, [r0, #0]
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	4798      	blx	r3
 80020e8:	4604      	mov	r4, r0
        while (d)
 80020ea:	b93c      	cbnz	r4, 80020fc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0x20>
            }

            d = d->getNextSibling();
        }

        screenContainer->add(solid);
 80020ec:	6868      	ldr	r0, [r5, #4]
 80020ee:	6803      	ldr	r3, [r0, #0]
 80020f0:	f105 0110 	add.w	r1, r5, #16
 80020f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
    }
 80020f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        screenContainer->add(solid);
 80020fa:	4718      	bx	r3
                d->setX(d->getX() - targetValue);
 80020fc:	88a1      	ldrh	r1, [r4, #4]
 80020fe:	89ab      	ldrh	r3, [r5, #12]
 8002100:	1ac9      	subs	r1, r1, r3
 8002102:	6823      	ldr	r3, [r4, #0]
 8002104:	4620      	mov	r0, r4
 8002106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002108:	b209      	sxth	r1, r1
 800210a:	4798      	blx	r3
        return nextSibling;
 800210c:	69a4      	ldr	r4, [r4, #24]
 800210e:	e7ec      	b.n	80020ea <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0xe>

08002110 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE10invalidateEv>:
     * Cover transition does not require an invalidation. Invalidation
     * is handled by the class. Do no invalidation initially.
     */
    virtual void invalidate()
    {
    }
 8002110:	4770      	bx	lr

08002112 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8002112:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8002114:	68c2      	ldr	r2, [r0, #12]
 8002116:	6841      	ldr	r1, [r0, #4]
 8002118:	1054      	asrs	r4, r2, #1
    virtual void execute()
 800211a:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 800211c:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8002120:	07d2      	lsls	r2, r2, #31
 8002122:	bf48      	it	mi
 8002124:	590a      	ldrmi	r2, [r1, r4]
 8002126:	689b      	ldr	r3, [r3, #8]
    }
 8002128:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 800212c:	bf48      	it	mi
 800212e:	58d3      	ldrmi	r3, [r2, r3]
 8002130:	4718      	bx	r3

08002132 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8002132:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 8002134:	6840      	ldr	r0, [r0, #4]
 8002136:	b130      	cbz	r0, 8002146 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	b91a      	cbnz	r2, 8002144 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 800213c:	68d8      	ldr	r0, [r3, #12]
 800213e:	f000 0001 	and.w	r0, r0, #1
 8002142:	4770      	bx	lr
 8002144:	2001      	movs	r0, #1
    }
 8002146:	4770      	bx	lr

08002148 <_ZN8touchgfx12NoTransitionD0Ev>:
 8002148:	b510      	push	{r4, lr}
 800214a:	210c      	movs	r1, #12
 800214c:	4604      	mov	r4, r0
 800214e:	f00e f893 	bl	8010278 <_ZdlPvj>
 8002152:	4620      	mov	r0, r4
 8002154:	bd10      	pop	{r4, pc}

08002156 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002156:	b510      	push	{r4, lr}
 8002158:	2110      	movs	r1, #16
 800215a:	4604      	mov	r4, r0
 800215c:	f00e f88c 	bl	8010278 <_ZdlPvj>
 8002160:	4620      	mov	r0, r4
 8002162:	bd10      	pop	{r4, pc}

08002164 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8002164:	b510      	push	{r4, lr}
 8002166:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800216a:	4604      	mov	r4, r0
 800216c:	f00e f884 	bl	8010278 <_ZdlPvj>
 8002170:	4620      	mov	r0, r4
 8002172:	bd10      	pop	{r4, pc}

08002174 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED0Ev>:
class WipeTransition : public Transition
 8002174:	b510      	push	{r4, lr}
 8002176:	2138      	movs	r1, #56	@ 0x38
 8002178:	4604      	mov	r4, r0
 800217a:	f00e f87d 	bl	8010278 <_ZdlPvj>
 800217e:	4620      	mov	r0, r4
 8002180:	bd10      	pop	{r4, pc}

08002182 <_ZN8touchgfx10Transition13FullSolidRectD0Ev>:
 8002182:	b510      	push	{r4, lr}
 8002184:	2128      	movs	r1, #40	@ 0x28
 8002186:	4604      	mov	r4, r0
 8002188:	f00e f876 	bl	8010278 <_ZdlPvj>
 800218c:	4620      	mov	r0, r4
 800218e:	bd10      	pop	{r4, pc}

08002190 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED0Ev>:
class CoverTransition : public Transition
 8002190:	b510      	push	{r4, lr}
 8002192:	2138      	movs	r1, #56	@ 0x38
 8002194:	4604      	mov	r4, r0
 8002196:	f00e f86f 	bl	8010278 <_ZdlPvj>
 800219a:	4620      	mov	r0, r4
 800219c:	bd10      	pop	{r4, pc}

0800219e <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 800219e:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 80021a0:	f008 fd16 	bl	800abd0 <_ZN8touchgfx11Application11getInstanceEv>
 80021a4:	6803      	ldr	r3, [r0, #0]
    }
 80021a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 80021aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ac:	4718      	bx	r3
	...

080021b0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 80021b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80021b2:	4605      	mov	r5, r0
        animationCounter++;
 80021b4:	7a80      	ldrb	r0, [r0, #10]
        if (animationCounter > animationSteps)
 80021b6:	7a6b      	ldrb	r3, [r5, #9]
        animationCounter++;
 80021b8:	3001      	adds	r0, #1
 80021ba:	b2c0      	uxtb	r0, r0
        if (animationCounter > animationSteps)
 80021bc:	4298      	cmp	r0, r3
        animationCounter++;
 80021be:	72a8      	strb	r0, [r5, #10]
        if (animationCounter > animationSteps)
 80021c0:	d905      	bls.n	80021ce <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 80021c2:	2301      	movs	r3, #1
 80021c4:	722b      	strb	r3, [r5, #8]
            animationCounter = 0;
 80021c6:	2300      	movs	r3, #0
 80021c8:	72ab      	strb	r3, [r5, #10]
    }
 80021ca:	b003      	add	sp, #12
 80021cc:	bd30      	pop	{r4, r5, pc}
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80021ce:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
        const int16_t oldValue = calculatedValue;
 80021d2:	f9b5 400e 	ldrsh.w	r4, [r5, #14]
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80021d6:	2100      	movs	r1, #0
 80021d8:	f00a f9f2 	bl	800c5c0 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
        if ((calculatedValue % 2) != 0)
 80021dc:	07c3      	lsls	r3, r0, #31
 80021de:	d507      	bpl.n	80021f0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x40>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 80021e0:	2800      	cmp	r0, #0
 80021e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021e6:	bfc8      	it	gt
 80021e8:	2301      	movgt	r3, #1
 80021ea:	fa13 f080 	uxtah	r0, r3, r0
 80021ee:	b200      	sxth	r0, r0
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 80021f0:	7aab      	ldrb	r3, [r5, #10]
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80021f2:	81e8      	strh	r0, [r5, #14]
        const int16_t relativeValue = calculatedValue - oldValue;
 80021f4:	1b04      	subs	r4, r0, r4
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 80021f6:	2b01      	cmp	r3, #1
        const int16_t relativeValue = calculatedValue - oldValue;
 80021f8:	b2a4      	uxth	r4, r4
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 80021fa:	d106      	bne.n	800220a <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x5a>
 80021fc:	4b17      	ldr	r3, [pc, #92]	@ (800225c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xac>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	b11b      	cbz	r3, 800220a <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x5a>
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 8002202:	f008 fce5 	bl	800abd0 <_ZN8touchgfx11Application11getInstanceEv>
 8002206:	f008 fce9 	bl	800abdc <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
            rect.x = HAL::DISPLAY_WIDTH + calculatedValue;
 800220a:	4a15      	ldr	r2, [pc, #84]	@ (8002260 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb0>)
        : x(0), y(0), width(0), height(0)
 800220c:	2300      	movs	r3, #0
 800220e:	8812      	ldrh	r2, [r2, #0]
 8002210:	f8ad 3002 	strh.w	r3, [sp, #2]
 8002214:	89eb      	ldrh	r3, [r5, #14]
 8002216:	441a      	add	r2, r3
            rect.width = -calculatedValue;
 8002218:	425b      	negs	r3, r3
 800221a:	f8ad 3004 	strh.w	r3, [sp, #4]
            rect.height = HAL::DISPLAY_HEIGHT;
 800221e:	4b11      	ldr	r3, [pc, #68]	@ (8002264 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb4>)
            rect.x = HAL::DISPLAY_WIDTH + calculatedValue;
 8002220:	f8ad 2000 	strh.w	r2, [sp]
            rect.height = HAL::DISPLAY_HEIGHT;
 8002224:	881b      	ldrh	r3, [r3, #0]
 8002226:	f8ad 3006 	strh.w	r3, [sp, #6]
        Application::getInstance()->invalidateArea(rect);
 800222a:	f008 fcd1 	bl	800abd0 <_ZN8touchgfx11Application11getInstanceEv>
 800222e:	6803      	ldr	r3, [r0, #0]
 8002230:	aa02      	add	r2, sp, #8
 8002232:	e912 0006 	ldmdb	r2, {r1, r2}
 8002236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002238:	4798      	blx	r3
        Drawable* d = screenContainer->getFirstChild();
 800223a:	6868      	ldr	r0, [r5, #4]
 800223c:	6803      	ldr	r3, [r0, #0]
 800223e:	69db      	ldr	r3, [r3, #28]
 8002240:	4798      	blx	r3
 8002242:	4605      	mov	r5, r0
        while (d)
 8002244:	2d00      	cmp	r5, #0
 8002246:	d0c0      	beq.n	80021ca <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a>
                d->setX(d->getX() + relativeValue);
 8002248:	88a9      	ldrh	r1, [r5, #4]
 800224a:	682b      	ldr	r3, [r5, #0]
 800224c:	4421      	add	r1, r4
 800224e:	4628      	mov	r0, r5
 8002250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002252:	b209      	sxth	r1, r1
 8002254:	4798      	blx	r3
 8002256:	69ad      	ldr	r5, [r5, #24]
 8002258:	e7f4      	b.n	8002244 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>
 800225a:	bf00      	nop
 800225c:	20012482 	.word	0x20012482
 8002260:	20012478 	.word	0x20012478
 8002264:	2001247a 	.word	0x2001247a

08002268 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 8002268:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800226c:	b112      	cbz	r2, 8002274 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 800226e:	6803      	ldr	r3, [r0, #0]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	4718      	bx	r3
    }
 8002274:	4770      	bx	lr
	...

08002278 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8002278:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800227a:	4604      	mov	r4, r0
        animationCounter++;
 800227c:	7a80      	ldrb	r0, [r0, #10]
        if (animationCounter > animationSteps)
 800227e:	7a63      	ldrb	r3, [r4, #9]
        animationCounter++;
 8002280:	3001      	adds	r0, #1
 8002282:	b2c0      	uxtb	r0, r0
        if (animationCounter > animationSteps)
 8002284:	4298      	cmp	r0, r3
        animationCounter++;
 8002286:	72a0      	strb	r0, [r4, #10]
        if (animationCounter > animationSteps)
 8002288:	d905      	bls.n	8002296 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 800228a:	2301      	movs	r3, #1
 800228c:	7223      	strb	r3, [r4, #8]
            animationCounter = 0;
 800228e:	2300      	movs	r3, #0
 8002290:	72a3      	strb	r3, [r4, #10]
    }
 8002292:	b003      	add	sp, #12
 8002294:	bd30      	pop	{r4, r5, pc}
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8002296:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800229a:	2100      	movs	r1, #0
 800229c:	f00a f990 	bl	800c5c0 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
        if ((calculatedValue % 2) != 0)
 80022a0:	07c3      	lsls	r3, r0, #31
 80022a2:	d507      	bpl.n	80022b4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x3c>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 80022a4:	2800      	cmp	r0, #0
 80022a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80022aa:	bfc8      	it	gt
 80022ac:	2301      	movgt	r3, #1
 80022ae:	fa13 f080 	uxtah	r0, r3, r0
 80022b2:	b200      	sxth	r0, r0
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 80022b4:	4b14      	ldr	r3, [pc, #80]	@ (8002308 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x90>)
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 80022b6:	81e0      	strh	r0, [r4, #14]
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 80022b8:	8819      	ldrh	r1, [r3, #0]
                const uint16_t prevSolidWidth = solid.getWidth();
 80022ba:	8b25      	ldrh	r5, [r4, #24]
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 80022bc:	b283      	uxth	r3, r0
                Rect r(solid.getWidth(), 0, delta, HAL::DISPLAY_HEIGHT);
 80022be:	4813      	ldr	r0, [pc, #76]	@ (800230c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>)
 80022c0:	f9b0 0000 	ldrsh.w	r0, [r0]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80022c4:	f8ad 0006 	strh.w	r0, [sp, #6]
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 80022c8:	1aca      	subs	r2, r1, r3
                screenContainer->invalidateRect(r);
 80022ca:	6860      	ldr	r0, [r4, #4]
                const uint16_t delta = prevSolidWidth - solid.getWidth();
 80022cc:	442b      	add	r3, r5
 80022ce:	1a5b      	subs	r3, r3, r1
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 80022d0:	b212      	sxth	r2, r2
 80022d2:	f8ad 3004 	strh.w	r3, [sp, #4]
                screenContainer->invalidateRect(r);
 80022d6:	6803      	ldr	r3, [r0, #0]
        rect.width = width;
 80022d8:	8322      	strh	r2, [r4, #24]
 80022da:	f8ad 2000 	strh.w	r2, [sp]
 80022de:	2200      	movs	r2, #0
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	f8ad 2002 	strh.w	r2, [sp, #2]
 80022e6:	4669      	mov	r1, sp
 80022e8:	4798      	blx	r3
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 80022ea:	7aa3      	ldrb	r3, [r4, #10]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d1d0      	bne.n	8002292 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a>
 80022f0:	4b07      	ldr	r3, [pc, #28]	@ (8002310 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x98>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0cc      	beq.n	8002292 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a>
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 80022f8:	f008 fc6a 	bl	800abd0 <_ZN8touchgfx11Application11getInstanceEv>
    }
 80022fc:	b003      	add	sp, #12
 80022fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 8002302:	f008 bc6b 	b.w	800abdc <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
 8002306:	bf00      	nop
 8002308:	20012478 	.word	0x20012478
 800230c:	2001247a 	.word	0x2001247a
 8002310:	20012482 	.word	0x20012482

08002314 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8002314:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8002318:	b11a      	cbz	r2, 8002322 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 800231a:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 800231e:	b102      	cbz	r2, 8002322 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8002320:	6018      	str	r0, [r3, #0]
        }
    }
 8002322:	4770      	bx	lr

08002324 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8002324:	b510      	push	{r4, lr}
 8002326:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8002328:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 800232c:	b158      	cbz	r0, 8002346 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 800232e:	6803      	ldr	r3, [r0, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	4798      	blx	r3
 8002334:	b138      	cbz	r0, 8002346 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8002336:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 800233a:	6803      	ldr	r3, [r0, #0]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8002340:	2300      	movs	r3, #0
 8002342:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 8002346:	bd10      	pop	{r4, pc}

08002348 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8002348:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800234c:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8002350:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002352:	68b0      	ldr	r0, [r6, #8]
 8002354:	6803      	ldr	r3, [r0, #0]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	4798      	blx	r3
 800235a:	28b3      	cmp	r0, #179	@ 0xb3
 800235c:	d805      	bhi.n	800236a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x22>
 800235e:	4b44      	ldr	r3, [pc, #272]	@ (8002470 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x128>)
 8002360:	4a44      	ldr	r2, [pc, #272]	@ (8002474 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 8002362:	21a3      	movs	r1, #163	@ 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8002364:	4844      	ldr	r0, [pc, #272]	@ (8002478 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8002366:	f00d ffb5 	bl	80102d4 <__assert_func>
 800236a:	6870      	ldr	r0, [r6, #4]
 800236c:	6803      	ldr	r3, [r0, #0]
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	4798      	blx	r3
 8002372:	280f      	cmp	r0, #15
 8002374:	d803      	bhi.n	800237e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x36>
 8002376:	4b41      	ldr	r3, [pc, #260]	@ (800247c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 8002378:	4a3e      	ldr	r2, [pc, #248]	@ (8002474 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 800237a:	21a4      	movs	r1, #164	@ 0xa4
 800237c:	e7f2      	b.n	8002364 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1c>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800237e:	68f0      	ldr	r0, [r6, #12]
 8002380:	6803      	ldr	r3, [r0, #0]
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	4798      	blx	r3
 8002386:	280b      	cmp	r0, #11
 8002388:	d803      	bhi.n	8002392 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4a>
 800238a:	4b3d      	ldr	r3, [pc, #244]	@ (8002480 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 800238c:	4a39      	ldr	r2, [pc, #228]	@ (8002474 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 800238e:	21a5      	movs	r1, #165	@ 0xa5
 8002390:	e7e8      	b.n	8002364 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1c>
    Application::getInstance()->clearAllTimerWidgets();
 8002392:	f008 fc1d 	bl	800abd0 <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 8002396:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 8002488 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 800239a:	3004      	adds	r0, #4
 800239c:	f008 fc65 	bl	800ac6a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80023a0:	f8d9 0000 	ldr.w	r0, [r9]
 80023a4:	b110      	cbz	r0, 80023ac <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x64>
        (*currentTrans)->tearDown();
 80023a6:	6803      	ldr	r3, [r0, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	4798      	blx	r3
    if (*currentTrans)
 80023ac:	f8d9 0000 	ldr.w	r0, [r9]
 80023b0:	b110      	cbz	r0, 80023b8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x70>
        (*currentTrans)->~Transition();
 80023b2:	6803      	ldr	r3, [r0, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4798      	blx	r3
    if (*currentScreen)
 80023b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 800248c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>
 80023bc:	f8d8 0000 	ldr.w	r0, [r8]
 80023c0:	b110      	cbz	r0, 80023c8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x80>
        (*currentScreen)->tearDownScreen();
 80023c2:	6803      	ldr	r3, [r0, #0]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	4798      	blx	r3
    if (*currentPresenter)
 80023c8:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80023cc:	b110      	cbz	r0, 80023d4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8c>
        (*currentPresenter)->deactivate();
 80023ce:	6803      	ldr	r3, [r0, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	4798      	blx	r3
    if (*currentScreen)
 80023d4:	f8d8 0000 	ldr.w	r0, [r8]
 80023d8:	b110      	cbz	r0, 80023e0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x98>
        (*currentScreen)->~Screen();
 80023da:	6803      	ldr	r3, [r0, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4798      	blx	r3
    if (*currentPresenter)
 80023e0:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80023e4:	b110      	cbz	r0, 80023ec <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa4>
        (*currentPresenter)->~Presenter();
 80023e6:	6803      	ldr	r3, [r0, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80023ec:	68f0      	ldr	r0, [r6, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 80023ee:	6803      	ldr	r3, [r0, #0]
 80023f0:	2100      	movs	r1, #0
 80023f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f4:	4798      	blx	r3
        : screenContainer(0), done(false)
 80023f6:	f04f 0b00 	mov.w	fp, #0
 80023fa:	4b22      	ldr	r3, [pc, #136]	@ (8002484 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 80023fc:	f8c0 b004 	str.w	fp, [r0, #4]
 8002400:	4604      	mov	r4, r0
 8002402:	f880 b008 	strb.w	fp, [r0, #8]
 8002406:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002408:	68b0      	ldr	r0, [r6, #8]
 800240a:	6803      	ldr	r3, [r0, #0]
 800240c:	4659      	mov	r1, fp
 800240e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002410:	4798      	blx	r3
 8002412:	4605      	mov	r5, r0
 8002414:	f000 ff5c 	bl	80032d0 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8002418:	6870      	ldr	r0, [r6, #4]
 800241a:	6803      	ldr	r3, [r0, #0]
 800241c:	4659      	mov	r1, fp
 800241e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002420:	4798      	blx	r3
 8002422:	4629      	mov	r1, r5
 8002424:	4606      	mov	r6, r0
 8002426:	f000 ff2d 	bl	8003284 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 800242a:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 800242c:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
public:
    Model();
    long modelTickCount = 0;
    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8002430:	f8ca 3008 	str.w	r3, [sl, #8]
    newScreen->setupScreen();
 8002434:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8002436:	f8c6 a008 	str.w	sl, [r6, #8]
 800243a:	4628      	mov	r0, r5
 800243c:	68db      	ldr	r3, [r3, #12]
    *currentTrans = newTransition;
 800243e:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8002442:	f8c8 5000 	str.w	r5, [r8]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8002446:	63ee      	str	r6, [r5, #60]	@ 0x3c
    newScreen->setupScreen();
 8002448:	4798      	blx	r3
    newPresenter->activate();
 800244a:	6833      	ldr	r3, [r6, #0]
 800244c:	4630      	mov	r0, r6
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8002452:	4621      	mov	r1, r4
 8002454:	4628      	mov	r0, r5
 8002456:	f00a f8ad 	bl	800c5b4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800245a:	6823      	ldr	r3, [r4, #0]
 800245c:	4620      	mov	r0, r4
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	4798      	blx	r3
    newTransition->invalidate();
 8002462:	6823      	ldr	r3, [r4, #0]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	4620      	mov	r0, r4
}
 8002468:	b001      	add	sp, #4
 800246a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800246e:	4718      	bx	r3
 8002470:	0801178d 	.word	0x0801178d
 8002474:	0801181b 	.word	0x0801181b
 8002478:	080118ed 	.word	0x080118ed
 800247c:	08011934 	.word	0x08011934
 8002480:	080119d7 	.word	0x080119d7
 8002484:	08012280 	.word	0x08012280
 8002488:	200124c4 	.word	0x200124c4
 800248c:	200124c0 	.word	0x200124c0

08002490 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8002490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002494:	461d      	mov	r5, r3
        setX(x);
 8002496:	6803      	ldr	r3, [r0, #0]
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8002498:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
        setX(x);
 800249c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800249e:	4604      	mov	r4, r0
 80024a0:	4616      	mov	r6, r2
        setX(x);
 80024a2:	4798      	blx	r3
        setY(y);
 80024a4:	6823      	ldr	r3, [r4, #0]
 80024a6:	4631      	mov	r1, r6
 80024a8:	4620      	mov	r0, r4
 80024aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024ac:	4798      	blx	r3
        setWidth(width);
 80024ae:	6823      	ldr	r3, [r4, #0]
 80024b0:	4629      	mov	r1, r5
 80024b2:	4620      	mov	r0, r4
 80024b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024b6:	4798      	blx	r3
        setHeight(height);
 80024b8:	6823      	ldr	r3, [r4, #0]
 80024ba:	4639      	mov	r1, r7
 80024bc:	4620      	mov	r0, r4
 80024be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
 80024c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        setHeight(height);
 80024c4:	4718      	bx	r3
	...

080024c8 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv>:
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenWipeTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreen1ScreenWipeTransitionEastImpl()
{
 80024c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::WipeTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80024cc:	e9d0 ba55 	ldrd	fp, sl, [r0, #340]	@ 0x154
{
 80024d0:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80024d2:	f8db 0008 	ldr.w	r0, [fp, #8]
 80024d6:	6803      	ldr	r3, [r0, #0]
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	4798      	blx	r3
 80024dc:	28b3      	cmp	r0, #179	@ 0xb3
 80024de:	d805      	bhi.n	80024ec <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x24>
 80024e0:	4b54      	ldr	r3, [pc, #336]	@ (8002634 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x16c>)
 80024e2:	4a55      	ldr	r2, [pc, #340]	@ (8002638 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x170>)
 80024e4:	21a3      	movs	r1, #163	@ 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80024e6:	4855      	ldr	r0, [pc, #340]	@ (800263c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x174>)
 80024e8:	f00d fef4 	bl	80102d4 <__assert_func>
 80024ec:	f8db 0004 	ldr.w	r0, [fp, #4]
 80024f0:	6803      	ldr	r3, [r0, #0]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	4798      	blx	r3
 80024f6:	280f      	cmp	r0, #15
 80024f8:	d803      	bhi.n	8002502 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x3a>
 80024fa:	4b51      	ldr	r3, [pc, #324]	@ (8002640 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x178>)
 80024fc:	4a4e      	ldr	r2, [pc, #312]	@ (8002638 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x170>)
 80024fe:	21a4      	movs	r1, #164	@ 0xa4
 8002500:	e7f1      	b.n	80024e6 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002502:	f8db 000c 	ldr.w	r0, [fp, #12]
 8002506:	6803      	ldr	r3, [r0, #0]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	4798      	blx	r3
 800250c:	2837      	cmp	r0, #55	@ 0x37
 800250e:	d803      	bhi.n	8002518 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x50>
 8002510:	4b4c      	ldr	r3, [pc, #304]	@ (8002644 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x17c>)
 8002512:	4a49      	ldr	r2, [pc, #292]	@ (8002638 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x170>)
 8002514:	21a5      	movs	r1, #165	@ 0xa5
 8002516:	e7e6      	b.n	80024e6 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x1e>
    Application::getInstance()->clearAllTimerWidgets();
 8002518:	f008 fb5a 	bl	800abd0 <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 800251c:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 8002658 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x190>
 8002520:	3004      	adds	r0, #4
 8002522:	f008 fba2 	bl	800ac6a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8002526:	f8d9 0000 	ldr.w	r0, [r9]
 800252a:	b110      	cbz	r0, 8002532 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x6a>
        (*currentTrans)->tearDown();
 800252c:	6803      	ldr	r3, [r0, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	4798      	blx	r3
    if (*currentTrans)
 8002532:	f8d9 0000 	ldr.w	r0, [r9]
 8002536:	b110      	cbz	r0, 800253e <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x76>
        (*currentTrans)->~Transition();
 8002538:	6803      	ldr	r3, [r0, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4798      	blx	r3
    if (*currentScreen)
 800253e:	f8df 811c 	ldr.w	r8, [pc, #284]	@ 800265c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x194>
 8002542:	f8d8 0000 	ldr.w	r0, [r8]
 8002546:	b110      	cbz	r0, 800254e <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x86>
        (*currentScreen)->tearDownScreen();
 8002548:	6803      	ldr	r3, [r0, #0]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	4798      	blx	r3
    if (*currentPresenter)
 800254e:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8002552:	b110      	cbz	r0, 800255a <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x92>
        (*currentPresenter)->deactivate();
 8002554:	6803      	ldr	r3, [r0, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	4798      	blx	r3
    if (*currentScreen)
 800255a:	f8d8 0000 	ldr.w	r0, [r8]
 800255e:	b110      	cbz	r0, 8002566 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x9e>
        (*currentScreen)->~Screen();
 8002560:	6803      	ldr	r3, [r0, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4798      	blx	r3
    if (*currentPresenter)
 8002566:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800256a:	b110      	cbz	r0, 8002572 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0xaa>
        (*currentPresenter)->~Presenter();
 800256c:	6803      	ldr	r3, [r0, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002572:	f8db 000c 	ldr.w	r0, [fp, #12]
 8002576:	6803      	ldr	r3, [r0, #0]
 8002578:	2100      	movs	r1, #0
 800257a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257c:	4798      	blx	r3
          solid()
 800257e:	4b32      	ldr	r3, [pc, #200]	@ (8002648 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x180>)
 8002580:	6003      	str	r3, [r0, #0]
 8002582:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002586:	8103      	strh	r3, [r0, #8]
 8002588:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800258c:	6343      	str	r3, [r0, #52]	@ 0x34
    class FullSolidRect : public Widget
 800258e:	4b2f      	ldr	r3, [pc, #188]	@ (800264c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x184>)
 8002590:	6103      	str	r3, [r0, #16]
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8002592:	4a2f      	ldr	r2, [pc, #188]	@ (8002650 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x188>)
            targetValue = HAL::DISPLAY_WIDTH;
 8002594:	4b2f      	ldr	r3, [pc, #188]	@ (8002654 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x18c>)
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8002596:	f9b2 2000 	ldrsh.w	r2, [r2]
            targetValue = HAL::DISPLAY_WIDTH;
 800259a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800259e:	8183      	strh	r3, [r0, #12]
        : screenContainer(0), done(false)
 80025a0:	2500      	movs	r5, #0
 80025a2:	4604      	mov	r4, r0
 80025a4:	6045      	str	r5, [r0, #4]
          animationCounter(0),
 80025a6:	7285      	strb	r5, [r0, #10]
          calculatedValue(0),
 80025a8:	81c5      	strh	r5, [r0, #14]
          solid()
 80025aa:	e9c0 5505 	strd	r5, r5, [r0, #20]
 80025ae:	e9c0 5507 	strd	r5, r5, [r0, #28]
 80025b2:	e9c0 5509 	strd	r5, r5, [r0, #36]	@ 0x24
 80025b6:	e9c0 550b 	strd	r5, r5, [r0, #44]	@ 0x2c
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 80025ba:	4629      	mov	r1, r5
 80025bc:	9200      	str	r2, [sp, #0]
 80025be:	3010      	adds	r0, #16
 80025c0:	462a      	mov	r2, r5
 80025c2:	f7ff ff65 	bl	8002490 <_ZN8touchgfx8Drawable11setPositionEssss>
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80025c6:	f8db 0008 	ldr.w	r0, [fp, #8]
 80025ca:	6803      	ldr	r3, [r0, #0]
 80025cc:	4629      	mov	r1, r5
 80025ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d0:	4798      	blx	r3
 80025d2:	4606      	mov	r6, r0
 80025d4:	f000 fe7c 	bl	80032d0 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80025d8:	f8db 0004 	ldr.w	r0, [fp, #4]
 80025dc:	6803      	ldr	r3, [r0, #0]
 80025de:	4629      	mov	r1, r5
 80025e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e2:	4798      	blx	r3
 80025e4:	4631      	mov	r1, r6
 80025e6:	4605      	mov	r5, r0
 80025e8:	f000 fe4c 	bl	8003284 <_ZN16Screen1PresenterC1ER11Screen1View>
    model->bind(newPresenter);
 80025ec:	1d2b      	adds	r3, r5, #4
    *currentPresenter = newPresenter;
 80025ee:	f8c7 513c 	str.w	r5, [r7, #316]	@ 0x13c
 80025f2:	f8ca 3008 	str.w	r3, [sl, #8]
    newScreen->setupScreen();
 80025f6:	6833      	ldr	r3, [r6, #0]
 80025f8:	f8c5 a008 	str.w	sl, [r5, #8]
 80025fc:	4630      	mov	r0, r6
 80025fe:	68db      	ldr	r3, [r3, #12]
    *currentTrans = newTransition;
 8002600:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8002604:	f8c8 6000 	str.w	r6, [r8]
 8002608:	63f5      	str	r5, [r6, #60]	@ 0x3c
    newScreen->setupScreen();
 800260a:	4798      	blx	r3
    newPresenter->activate();
 800260c:	682b      	ldr	r3, [r5, #0]
 800260e:	4628      	mov	r0, r5
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8002614:	4621      	mov	r1, r4
 8002616:	4630      	mov	r0, r6
 8002618:	f009 ffcc 	bl	800c5b4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800261c:	6823      	ldr	r3, [r4, #0]
 800261e:	4620      	mov	r0, r4
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	4798      	blx	r3
    newTransition->invalidate();
 8002624:	6823      	ldr	r3, [r4, #0]
 8002626:	695b      	ldr	r3, [r3, #20]
 8002628:	4620      	mov	r0, r4
}
 800262a:	b003      	add	sp, #12
 800262c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002630:	4718      	bx	r3
 8002632:	bf00      	nop
 8002634:	0801178d 	.word	0x0801178d
 8002638:	08011a7a 	.word	0x08011a7a
 800263c:	080118ed 	.word	0x080118ed
 8002640:	08011934 	.word	0x08011934
 8002644:	080119d7 	.word	0x080119d7
 8002648:	080122c8 	.word	0x080122c8
 800264c:	080121ac 	.word	0x080121ac
 8002650:	2001247a 	.word	0x2001247a
 8002654:	20012478 	.word	0x20012478
 8002658:	200124c4 	.word	0x200124c4
 800265c:	200124c0 	.word	0x200124c0

08002660 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv>:
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen2ScreenCoverTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreen2ScreenCoverTransitionEastImpl()
{
 8002660:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002664:	e9d0 ba55 	ldrd	fp, sl, [r0, #340]	@ 0x154
{
 8002668:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800266a:	f8db 0008 	ldr.w	r0, [fp, #8]
 800266e:	6803      	ldr	r3, [r0, #0]
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	4798      	blx	r3
 8002674:	f5b0 7f07 	cmp.w	r0, #540	@ 0x21c
 8002678:	d205      	bcs.n	8002686 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x26>
 800267a:	4b55      	ldr	r3, [pc, #340]	@ (80027d0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x170>)
 800267c:	4a55      	ldr	r2, [pc, #340]	@ (80027d4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x174>)
 800267e:	21a3      	movs	r1, #163	@ 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8002680:	4855      	ldr	r0, [pc, #340]	@ (80027d8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x178>)
 8002682:	f00d fe27 	bl	80102d4 <__assert_func>
 8002686:	f8db 0004 	ldr.w	r0, [fp, #4]
 800268a:	6803      	ldr	r3, [r0, #0]
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	4798      	blx	r3
 8002690:	280f      	cmp	r0, #15
 8002692:	d803      	bhi.n	800269c <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x3c>
 8002694:	4b51      	ldr	r3, [pc, #324]	@ (80027dc <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x17c>)
 8002696:	4a4f      	ldr	r2, [pc, #316]	@ (80027d4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x174>)
 8002698:	21a4      	movs	r1, #164	@ 0xa4
 800269a:	e7f1      	b.n	8002680 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800269c:	f8db 000c 	ldr.w	r0, [fp, #12]
 80026a0:	6803      	ldr	r3, [r0, #0]
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	4798      	blx	r3
 80026a6:	2837      	cmp	r0, #55	@ 0x37
 80026a8:	d803      	bhi.n	80026b2 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x52>
 80026aa:	4b4d      	ldr	r3, [pc, #308]	@ (80027e0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x180>)
 80026ac:	4a49      	ldr	r2, [pc, #292]	@ (80027d4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x174>)
 80026ae:	21a5      	movs	r1, #165	@ 0xa5
 80026b0:	e7e6      	b.n	8002680 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x20>
    Application::getInstance()->clearAllTimerWidgets();
 80026b2:	f008 fa8d 	bl	800abd0 <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 80026b6:	f8df 913c 	ldr.w	r9, [pc, #316]	@ 80027f4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x194>
 80026ba:	3004      	adds	r0, #4
 80026bc:	f008 fad5 	bl	800ac6a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80026c0:	f8d9 0000 	ldr.w	r0, [r9]
 80026c4:	b110      	cbz	r0, 80026cc <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x6c>
        (*currentTrans)->tearDown();
 80026c6:	6803      	ldr	r3, [r0, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	4798      	blx	r3
    if (*currentTrans)
 80026cc:	f8d9 0000 	ldr.w	r0, [r9]
 80026d0:	b110      	cbz	r0, 80026d8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x78>
        (*currentTrans)->~Transition();
 80026d2:	6803      	ldr	r3, [r0, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4798      	blx	r3
    if (*currentScreen)
 80026d8:	f8df 811c 	ldr.w	r8, [pc, #284]	@ 80027f8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x198>
 80026dc:	f8d8 0000 	ldr.w	r0, [r8]
 80026e0:	b110      	cbz	r0, 80026e8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x88>
        (*currentScreen)->tearDownScreen();
 80026e2:	6803      	ldr	r3, [r0, #0]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	4798      	blx	r3
    if (*currentPresenter)
 80026e8:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80026ec:	b110      	cbz	r0, 80026f4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x94>
        (*currentPresenter)->deactivate();
 80026ee:	6803      	ldr	r3, [r0, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	4798      	blx	r3
    if (*currentScreen)
 80026f4:	f8d8 0000 	ldr.w	r0, [r8]
 80026f8:	b110      	cbz	r0, 8002700 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0xa0>
        (*currentScreen)->~Screen();
 80026fa:	6803      	ldr	r3, [r0, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4798      	blx	r3
    if (*currentPresenter)
 8002700:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8002704:	b110      	cbz	r0, 800270c <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0xac>
        (*currentPresenter)->~Presenter();
 8002706:	6803      	ldr	r3, [r0, #0]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800270c:	f8db 000c 	ldr.w	r0, [fp, #12]
 8002710:	6803      	ldr	r3, [r0, #0]
 8002712:	2100      	movs	r1, #0
 8002714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002716:	4798      	blx	r3
          solid()
 8002718:	4b32      	ldr	r3, [pc, #200]	@ (80027e4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x184>)
 800271a:	6003      	str	r3, [r0, #0]
 800271c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002720:	8103      	strh	r3, [r0, #8]
 8002722:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002726:	6343      	str	r3, [r0, #52]	@ 0x34
    class FullSolidRect : public Widget
 8002728:	4b2f      	ldr	r3, [pc, #188]	@ (80027e8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x188>)
 800272a:	6103      	str	r3, [r0, #16]
            targetValue = -HAL::DISPLAY_WIDTH;
 800272c:	4b2f      	ldr	r3, [pc, #188]	@ (80027ec <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x18c>)
 800272e:	881b      	ldrh	r3, [r3, #0]
 8002730:	425a      	negs	r2, r3
 8002732:	8182      	strh	r2, [r0, #12]
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8002734:	4a2e      	ldr	r2, [pc, #184]	@ (80027f0 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x190>)
        : screenContainer(0), done(false)
 8002736:	2500      	movs	r5, #0
 8002738:	f9b2 2000 	ldrsh.w	r2, [r2]
 800273c:	6045      	str	r5, [r0, #4]
 800273e:	4604      	mov	r4, r0
          animationCounter(0),
 8002740:	7285      	strb	r5, [r0, #10]
          calculatedValue(0),
 8002742:	81c5      	strh	r5, [r0, #14]
          solid()
 8002744:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8002748:	e9c0 5507 	strd	r5, r5, [r0, #28]
 800274c:	e9c0 5509 	strd	r5, r5, [r0, #36]	@ 0x24
 8002750:	e9c0 550b 	strd	r5, r5, [r0, #44]	@ 0x2c
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8002754:	4629      	mov	r1, r5
 8002756:	9200      	str	r2, [sp, #0]
 8002758:	b21b      	sxth	r3, r3
 800275a:	462a      	mov	r2, r5
 800275c:	3010      	adds	r0, #16
 800275e:	f7ff fe97 	bl	8002490 <_ZN8touchgfx8Drawable11setPositionEssss>
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002762:	f8db 0008 	ldr.w	r0, [fp, #8]
 8002766:	6803      	ldr	r3, [r0, #0]
 8002768:	4629      	mov	r1, r5
 800276a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276c:	4798      	blx	r3
 800276e:	4606      	mov	r6, r0
 8002770:	f000 fdf8 	bl	8003364 <_ZN11Screen2ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8002774:	f8db 0004 	ldr.w	r0, [fp, #4]
 8002778:	6803      	ldr	r3, [r0, #0]
 800277a:	4629      	mov	r1, r5
 800277c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800277e:	4798      	blx	r3
 8002780:	4631      	mov	r1, r6
 8002782:	4605      	mov	r5, r0
 8002784:	f000 fdc2 	bl	800330c <_ZN16Screen2PresenterC1ER11Screen2View>
    model->bind(newPresenter);
 8002788:	1d2b      	adds	r3, r5, #4
    *currentPresenter = newPresenter;
 800278a:	f8c7 513c 	str.w	r5, [r7, #316]	@ 0x13c
 800278e:	f8ca 3008 	str.w	r3, [sl, #8]
    newScreen->setupScreen();
 8002792:	6833      	ldr	r3, [r6, #0]
 8002794:	f8c5 a008 	str.w	sl, [r5, #8]
 8002798:	4630      	mov	r0, r6
 800279a:	68db      	ldr	r3, [r3, #12]
    *currentTrans = newTransition;
 800279c:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 80027a0:	f8c8 6000 	str.w	r6, [r8]
 80027a4:	63f5      	str	r5, [r6, #60]	@ 0x3c
    newScreen->setupScreen();
 80027a6:	4798      	blx	r3
    newPresenter->activate();
 80027a8:	682b      	ldr	r3, [r5, #0]
 80027aa:	4628      	mov	r0, r5
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80027b0:	4621      	mov	r1, r4
 80027b2:	4630      	mov	r0, r6
 80027b4:	f009 fefe 	bl	800c5b4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80027b8:	6823      	ldr	r3, [r4, #0]
 80027ba:	4620      	mov	r0, r4
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	4798      	blx	r3
    newTransition->invalidate();
 80027c0:	6823      	ldr	r3, [r4, #0]
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	4620      	mov	r0, r4
}
 80027c6:	b003      	add	sp, #12
 80027c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027cc:	4718      	bx	r3
 80027ce:	bf00      	nop
 80027d0:	0801178d 	.word	0x0801178d
 80027d4:	08011b5e 	.word	0x08011b5e
 80027d8:	080118ed 	.word	0x080118ed
 80027dc:	08011934 	.word	0x08011934
 80027e0:	080119d7 	.word	0x080119d7
 80027e4:	080122a4 	.word	0x080122a4
 80027e8:	080121ac 	.word	0x080121ac
 80027ec:	20012478 	.word	0x20012478
 80027f0:	2001247a 	.word	0x2001247a
 80027f4:	200124c4 	.word	0x200124c4
 80027f8:	200124c0 	.word	0x200124c0

080027fc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80027fc:	b570      	push	{r4, r5, r6, lr}
 80027fe:	4604      	mov	r4, r0
 8002800:	460d      	mov	r5, r1
 8002802:	4616      	mov	r6, r2
          pendingScreenTransitionCallback(0)
 8002804:	f008 face 	bl	800ada4 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8002808:	4a0f      	ldr	r2, [pc, #60]	@ (8002848 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x4c>)
        : currentPresenter(0),
 800280a:	2300      	movs	r3, #0
      model(m)
 800280c:	e9c4 6555 	strd	r6, r5, [r4, #340]	@ 0x154
        return instance;
 8002810:	4d0e      	ldr	r5, [pc, #56]	@ (800284c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
        instance = this;
 8002812:	6014      	str	r4, [r2, #0]
        : pobject(0), pmemfun(0)
 8002814:	e9c4 3353 	strd	r3, r3, [r4, #332]	@ 0x14c
 8002818:	4a0d      	ldr	r2, [pc, #52]	@ (8002850 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 800281a:	6022      	str	r2, [r4, #0]
 800281c:	6828      	ldr	r0, [r5, #0]
 800281e:	4a0d      	ldr	r2, [pc, #52]	@ (8002854 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
          pendingScreenTransitionCallback(0)
 8002820:	e9c4 334f 	strd	r3, r3, [r4, #316]	@ 0x13c
 8002824:	e9c4 2351 	strd	r2, r3, [r4, #324]	@ 0x144
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 8002828:	6803      	ldr	r3, [r0, #0]
 800282a:	2101      	movs	r1, #1
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	4798      	blx	r3
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8002830:	682b      	ldr	r3, [r5, #0]
 8002832:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8002836:	b10a      	cbz	r2, 800283c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x40>
 8002838:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800283a:	b900      	cbnz	r0, 800283e <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x42>
        return instance->lcdRef;
 800283c:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_L4();
 800283e:	f00c ffcf 	bl	800f7e0 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>
}
 8002842:	4620      	mov	r0, r4
 8002844:	bd70      	pop	{r4, r5, r6, pc}
 8002846:	bf00      	nop
 8002848:	200124d0 	.word	0x200124d0
 800284c:	20012484 	.word	0x20012484
 8002850:	0801222c 	.word	0x0801222c
 8002854:	08012214 	.word	0x08012214

08002858 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002858:	4b06      	ldr	r3, [pc, #24]	@ (8002874 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 800285a:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 800285e:	2300      	movs	r3, #0
 8002860:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8002864:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8002868:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 800286c:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	08002349 	.word	0x08002349

08002878 <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionEastEv>:
 8002878:	4b06      	ldr	r3, [pc, #24]	@ (8002894 <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionEastEv+0x1c>)
 800287a:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 800287e:	2300      	movs	r3, #0
 8002880:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8002884:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8002888:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 800288c:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	080024c9 	.word	0x080024c9

08002898 <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv>:
 8002898:	4b06      	ldr	r3, [pc, #24]	@ (80028b4 <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv+0x1c>)
 800289a:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 800289e:	2300      	movs	r3, #0
 80028a0:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 80028a4:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 80028a8:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 80028ac:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	08002661 	.word	0x08002661

080028b8 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 80028b8:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80028ba:	4770      	bx	lr

080028bc <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 80028bc:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80028be:	4770      	bx	lr

080028c0 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 80028c0:	4770      	bx	lr

080028c2 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 80028c2:	888b      	ldrh	r3, [r1, #4]
 80028c4:	69c0      	ldr	r0, [r0, #28]
 80028c6:	680a      	ldr	r2, [r1, #0]
 80028c8:	0adb      	lsrs	r3, r3, #11
 80028ca:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 80028ce:	4410      	add	r0, r2
 80028d0:	4770      	bx	lr

080028d2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 80028d2:	b510      	push	{r4, lr}
 80028d4:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 80028d6:	b1ba      	cbz	r2, 8002908 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 80028d8:	7b10      	ldrb	r0, [r2, #12]
 80028da:	b168      	cbz	r0, 80028f8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 80028dc:	7b53      	ldrb	r3, [r2, #13]
 80028de:	7ad2      	ldrb	r2, [r2, #11]
 80028e0:	021b      	lsls	r3, r3, #8
 80028e2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80028e6:	431a      	orrs	r2, r3
 80028e8:	6a23      	ldr	r3, [r4, #32]
 80028ea:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 80028ee:	881a      	ldrh	r2, [r3, #0]
 80028f0:	428a      	cmp	r2, r1
 80028f2:	d102      	bne.n	80028fa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 80028f4:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 80028f8:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 80028fa:	d805      	bhi.n	8002908 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80028fc:	3801      	subs	r0, #1
 80028fe:	b280      	uxth	r0, r0
 8002900:	3304      	adds	r3, #4
 8002902:	2800      	cmp	r0, #0
 8002904:	d1f3      	bne.n	80028ee <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8002906:	e7f7      	b.n	80028f8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8002908:	2000      	movs	r0, #0
 800290a:	e7f5      	b.n	80028f8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

0800290c <_ZN8touchgfx13GeneratedFontD0Ev>:
 800290c:	b510      	push	{r4, lr}
 800290e:	212c      	movs	r1, #44	@ 0x2c
 8002910:	4604      	mov	r4, r0
 8002912:	f00d fcb1 	bl	8010278 <_ZdlPvj>
 8002916:	4620      	mov	r0, r4
 8002918:	bd10      	pop	{r4, pc}
	...

0800291c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800291c:	b530      	push	{r4, r5, lr}
 800291e:	b08b      	sub	sp, #44	@ 0x2c
 8002920:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8002922:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 8002926:	9508      	str	r5, [sp, #32]
 8002928:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 800292c:	9507      	str	r5, [sp, #28]
 800292e:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8002932:	9506      	str	r5, [sp, #24]
 8002934:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 8002938:	9505      	str	r5, [sp, #20]
 800293a:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 800293e:	9504      	str	r5, [sp, #16]
 8002940:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8002944:	9503      	str	r5, [sp, #12]
 8002946:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 800294a:	9502      	str	r5, [sp, #8]
 800294c:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 8002950:	9501      	str	r5, [sp, #4]
 8002952:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8002956:	9500      	str	r5, [sp, #0]
 8002958:	f009 fa86 	bl	800be68 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 800295c:	4b06      	ldr	r3, [pc, #24]	@ (8002978 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
 800295e:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 8002960:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8002962:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 8002964:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8002966:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 8002968:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800296a:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 800296c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800296e:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8002970:	4620      	mov	r0, r4
 8002972:	b00b      	add	sp, #44	@ 0x2c
 8002974:	bd30      	pop	{r4, r5, pc}
 8002976:	bf00      	nop
 8002978:	080122ec 	.word	0x080122ec

0800297c <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 800297c:	4770      	bx	lr

0800297e <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 800297e:	4770      	bx	lr

08002980 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8002980:	4770      	bx	lr

08002982 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8002982:	4770      	bx	lr

08002984 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8002984:	4770      	bx	lr

08002986 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8002986:	4770      	bx	lr

08002988 <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
 8002988:	4770      	bx	lr

0800298a <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
 800298a:	4770      	bx	lr

0800298c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800298c:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 800298e:	68c2      	ldr	r2, [r0, #12]
 8002990:	6844      	ldr	r4, [r0, #4]
 8002992:	1055      	asrs	r5, r2, #1
    virtual void execute(T1 t1)
 8002994:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8002996:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800299a:	07d2      	lsls	r2, r2, #31
 800299c:	bf48      	it	mi
 800299e:	5962      	ldrmi	r2, [r4, r5]
 80029a0:	689b      	ldr	r3, [r3, #8]
    }
 80029a2:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 80029a4:	bf48      	it	mi
 80029a6:	58d3      	ldrmi	r3, [r2, r3]
 80029a8:	4718      	bx	r3

080029aa <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80029aa:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 80029ac:	6840      	ldr	r0, [r0, #4]
 80029ae:	b130      	cbz	r0, 80029be <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	b91a      	cbnz	r2, 80029bc <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 80029b4:	68d8      	ldr	r0, [r3, #12]
 80029b6:	f000 0001 	and.w	r0, r0, #1
 80029ba:	4770      	bx	lr
 80029bc:	2001      	movs	r0, #1
    }
 80029be:	4770      	bx	lr

080029c0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80029c0:	b510      	push	{r4, lr}
 80029c2:	2110      	movs	r1, #16
 80029c4:	4604      	mov	r4, r0
 80029c6:	f00d fc57 	bl	8010278 <_ZdlPvj>
 80029ca:	4620      	mov	r0, r4
 80029cc:	bd10      	pop	{r4, pc}

080029ce <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 80029ce:	b510      	push	{r4, lr}
}
 80029d0:	21b0      	movs	r1, #176	@ 0xb0
Screen1ViewBase::~Screen1ViewBase()
 80029d2:	4604      	mov	r4, r0
}
 80029d4:	f00d fc50 	bl	8010278 <_ZdlPvj>
 80029d8:	4620      	mov	r0, r4
 80029da:	bd10      	pop	{r4, pc}

080029dc <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &button1)
 80029dc:	306c      	adds	r0, #108	@ 0x6c
 80029de:	4288      	cmp	r0, r1
{
 80029e0:	b508      	push	{r3, lr}
    if (&src == &button1)
 80029e2:	d105      	bne.n	80029f0 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x14>
    virtual ~Screen1ViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80029e4:	f008 f8f4 	bl	800abd0 <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction2
        //When button1 clicked change screen to Screen2
        //Go to Screen2 with screen transition towards East
        application().gotoScreen2ScreenCoverTransitionEast();
    }
}
 80029e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen2ScreenCoverTransitionEast();
 80029ec:	f7ff bf54 	b.w	8002898 <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv>
}
 80029f0:	bd08      	pop	{r3, pc}

080029f2 <_ZN8touchgfx8Drawable5setXYEss>:
    void setXY(int16_t x, int16_t y)
 80029f2:	b570      	push	{r4, r5, r6, lr}
        setX(x);
 80029f4:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 80029f6:	4604      	mov	r4, r0
        setX(x);
 80029f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setXY(int16_t x, int16_t y)
 80029fa:	4615      	mov	r5, r2
        setX(x);
 80029fc:	4798      	blx	r3
        setY(y);
 80029fe:	6823      	ldr	r3, [r4, #0]
 8002a00:	4629      	mov	r1, r5
 8002a02:	4620      	mov	r0, r4
 8002a04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 8002a06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8002a0a:	4718      	bx	r3

08002a0c <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
 8002a0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a0e:	4604      	mov	r4, r0
        : presenter(0)
 8002a10:	f009 fc24 	bl	800c25c <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8002a14:	4b34      	ldr	r3, [pc, #208]	@ (8002ae8 <_ZN15Screen1ViewBaseC1Ev+0xdc>)
 8002a16:	6023      	str	r3, [r4, #0]
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8002a18:	4b34      	ldr	r3, [pc, #208]	@ (8002aec <_ZN15Screen1ViewBaseC1Ev+0xe0>)
 8002a1a:	2200      	movs	r2, #0
        : x(0), y(0), width(0), height(0)
 8002a1c:	e9c4 3210 	strd	r3, r2, [r4, #64]	@ 0x40
          touchable(false),
 8002a20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a24:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
 8002a28:	23ff      	movs	r3, #255	@ 0xff
 8002a2a:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
        touchable = touch;
 8002a2e:	f240 1301 	movw	r3, #257	@ 0x101
 8002a32:	f8a4 3090 	strh.w	r3, [r4, #144]	@ 0x90
 */
class Button : public AbstractButton
{
public:
    Button()
        : AbstractButton(), up(), down(), alpha(255)
 8002a36:	4b2e      	ldr	r3, [pc, #184]	@ (8002af0 <_ZN15Screen1ViewBaseC1Ev+0xe4>)
 8002a38:	66e3      	str	r3, [r4, #108]	@ 0x6c
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8002a3a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a3e:	f8a4 309a 	strh.w	r3, [r4, #154]	@ 0x9a
 8002a42:	f8a4 309c 	strh.w	r3, [r4, #156]	@ 0x9c
 8002a46:	f884 309e 	strb.w	r3, [r4, #158]	@ 0x9e
        : pobject(pObject), pmemfun(pmemfun_1)
 8002a4a:	4b2a      	ldr	r3, [pc, #168]	@ (8002af4 <_ZN15Screen1ViewBaseC1Ev+0xe8>)
 8002a4c:	63e2      	str	r2, [r4, #60]	@ 0x3c
    __background.setPosition(0, 0, 240, 320);
 8002a4e:	f104 0540 	add.w	r5, r4, #64	@ 0x40
 8002a52:	e9c4 3428 	strd	r3, r4, [r4, #160]	@ 0xa0
 8002a56:	4b28      	ldr	r3, [pc, #160]	@ (8002af8 <_ZN15Screen1ViewBaseC1Ev+0xec>)
          cachedAbsX(0),
 8002a58:	6622      	str	r2, [r4, #96]	@ 0x60
        setXY(x, y);
 8002a5a:	4611      	mov	r1, r2
 8002a5c:	4628      	mov	r0, r5
 8002a5e:	e9c4 2212 	strd	r2, r2, [r4, #72]	@ 0x48
          parent(0),
 8002a62:	e9c4 2214 	strd	r2, r2, [r4, #80]	@ 0x50
          nextDrawChainElement(0),
 8002a66:	e9c4 2216 	strd	r2, r2, [r4, #88]	@ 0x58
 8002a6a:	e9c4 221c 	strd	r2, r2, [r4, #112]	@ 0x70
 8002a6e:	e9c4 221e 	strd	r2, r2, [r4, #120]	@ 0x78
          nextSibling(0),
 8002a72:	e9c4 2220 	strd	r2, r2, [r4, #128]	@ 0x80
          cachedAbsX(0),
 8002a76:	e9c4 2222 	strd	r2, r2, [r4, #136]	@ 0x88
        : color(col)
 8002a7a:	66a2      	str	r2, [r4, #104]	@ 0x68
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
        : Widget(), action(), pressed(false)
 8002a7c:	f8c4 2094 	str.w	r2, [r4, #148]	@ 0x94
 8002a80:	f884 2098 	strb.w	r2, [r4, #152]	@ 0x98
 8002a84:	e9c4 322a 	strd	r3, r2, [r4, #168]	@ 0xa8
        setXY(x, y);
 8002a88:	f7ff ffb3 	bl	80029f2 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8002a8c:	4628      	mov	r0, r5
 8002a8e:	21f0      	movs	r1, #240	@ 0xf0
 8002a90:	f7ff fac0 	bl	8002014 <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 8002a94:	4628      	mov	r0, r5
 8002a96:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8002a9a:	f7ff fabd 	bl	8002018 <_ZN8touchgfx8Drawable9setHeightEs>
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8002a9e:	1d27      	adds	r7, r4, #4
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8002aa0:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8002aa4:	f104 066c 	add.w	r6, r4, #108	@ 0x6c
 8002aa8:	66a3      	str	r3, [r4, #104]	@ 0x68
 8002aaa:	4629      	mov	r1, r5
 8002aac:	4638      	mov	r0, r7
 8002aae:	f005 fd45 	bl	800853c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button1.setXY(20, 199);
 8002ab2:	4630      	mov	r0, r6
 8002ab4:	22c7      	movs	r2, #199	@ 0xc7
 8002ab6:	2114      	movs	r1, #20
 8002ab8:	f7ff ff9b 	bl	80029f2 <_ZN8touchgfx8Drawable5setXYEss>
 8002abc:	2303      	movs	r3, #3
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_START_BUTTON_VECTOR_ID), touchgfx::Bitmap(BITMAP_START_BUTTON_VECTOR_ID));
 8002abe:	aa01      	add	r2, sp, #4
 8002ac0:	4669      	mov	r1, sp
 8002ac2:	4630      	mov	r0, r6
 8002ac4:	f8ad 3000 	strh.w	r3, [sp]
 8002ac8:	f8ad 3004 	strh.w	r3, [sp, #4]
 8002acc:	f006 fefc 	bl	80098c8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 8002ad0:	f104 03a0 	add.w	r3, r4, #160	@ 0xa0
 8002ad4:	4638      	mov	r0, r7
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 8002ad6:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 8002ada:	4631      	mov	r1, r6
 8002adc:	f005 fd2e 	bl	800853c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8002ae0:	4620      	mov	r0, r4
 8002ae2:	b003      	add	sp, #12
 8002ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	0801236c 	.word	0x0801236c
 8002aec:	080126b4 	.word	0x080126b4
 8002af0:	0801271c 	.word	0x0801271c
 8002af4:	08012354 	.word	0x08012354
 8002af8:	080029dd 	.word	0x080029dd

08002afc <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 8002afc:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8002afe:	4770      	bx	lr

08002b00 <_ZN15Screen2ViewBase15ExitFromScreen2Ev>:
     * Virtual Action Handlers
     */
    virtual void ExitFromScreen2()
    {
        // Override and implement this function in Screen2
    }
 8002b00:	4770      	bx	lr

08002b02 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEED1Ev>:
 * The position of the icon can be adjusted with setIconXY.
 *
 * @see AbstractButtonContainer
 */
template <class T>
class IconButtonStyle : public T
 8002b02:	4770      	bx	lr

08002b04 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8002b04:	4770      	bx	lr

08002b06 <_ZN15Screen2ViewBaseD1Ev>:
}

Screen2ViewBase::~Screen2ViewBase()
{

}
 8002b06:	4770      	bx	lr

08002b08 <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{

}
 8002b08:	4770      	bx	lr

08002b0a <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8002b0a:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8002b0c:	68c2      	ldr	r2, [r0, #12]
 8002b0e:	6844      	ldr	r4, [r0, #4]
 8002b10:	1055      	asrs	r5, r2, #1
    virtual void execute(T1 t1)
 8002b12:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8002b14:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8002b18:	07d2      	lsls	r2, r2, #31
 8002b1a:	bf48      	it	mi
 8002b1c:	5962      	ldrmi	r2, [r4, r5]
 8002b1e:	689b      	ldr	r3, [r3, #8]
    }
 8002b20:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8002b22:	bf48      	it	mi
 8002b24:	58d3      	ldrmi	r3, [r2, r3]
 8002b26:	4718      	bx	r3

08002b28 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 8002b28:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 8002b2a:	6840      	ldr	r0, [r0, #4]
 8002b2c:	b130      	cbz	r0, 8002b3c <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x14>
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	b91a      	cbnz	r2, 8002b3a <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x12>
 8002b32:	68d8      	ldr	r0, [r3, #12]
 8002b34:	f000 0001 	and.w	r0, r0, #1
 8002b38:	4770      	bx	lr
 8002b3a:	2001      	movs	r0, #1
    }
 8002b3c:	4770      	bx	lr

08002b3e <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:
     *
     * @note The user code must call invalidate() in order to update the display.
     */
    void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8002b3e:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8002b42:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
    {
        iconImage.setAlpha(T::getAlpha());
        T::handleAlphaUpdated();
    }
 8002b46:	4770      	bx	lr

08002b48 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
    virtual void handlePressedUpdated()
 8002b48:	4601      	mov	r1, r0
        iconImage.setBitmap(T::getPressed() ? iconPressed : iconReleased);
 8002b4a:	3038      	adds	r0, #56	@ 0x38
 8002b4c:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 8002b50:	b113      	cbz	r3, 8002b58 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x10>
 8002b52:	3136      	adds	r1, #54	@ 0x36
 8002b54:	f006 bf85 	b.w	8009a62 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002b58:	3134      	adds	r1, #52	@ 0x34
 8002b5a:	e7fb      	b.n	8002b54 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0xc>

08002b5c <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEED0Ev>:
class IconButtonStyle : public T
 8002b5c:	b510      	push	{r4, lr}
 8002b5e:	2164      	movs	r1, #100	@ 0x64
 8002b60:	4604      	mov	r4, r0
 8002b62:	f00d fb89 	bl	8010278 <_ZdlPvj>
 8002b66:	4620      	mov	r0, r4
 8002b68:	bd10      	pop	{r4, pc}

08002b6a <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8002b6a:	b510      	push	{r4, lr}
 8002b6c:	2110      	movs	r1, #16
 8002b6e:	4604      	mov	r4, r0
 8002b70:	f00d fb82 	bl	8010278 <_ZdlPvj>
 8002b74:	4620      	mov	r0, r4
 8002b76:	bd10      	pop	{r4, pc}

08002b78 <_ZN15Screen2ViewBaseD0Ev>:
Screen2ViewBase::~Screen2ViewBase()
 8002b78:	b510      	push	{r4, lr}
}
 8002b7a:	f44f 7105 	mov.w	r1, #532	@ 0x214
Screen2ViewBase::~Screen2ViewBase()
 8002b7e:	4604      	mov	r4, r0
}
 8002b80:	f00d fb7a 	bl	8010278 <_ZdlPvj>
 8002b84:	4620      	mov	r0, r4
 8002b86:	bd10      	pop	{r4, pc}

08002b88 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv>:
    /**
     * Executes the previously set action.
     *
     * @see setAction
     */
    virtual void executeAction()
 8002b88:	b510      	push	{r4, lr}
 8002b8a:	4604      	mov	r4, r0
    {
        if (action && action->isValid())
 8002b8c:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8002b8e:	b150      	cbz	r0, 8002ba6 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1e>
 8002b90:	6803      	ldr	r3, [r0, #0]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	4798      	blx	r3
 8002b96:	b130      	cbz	r0, 8002ba6 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1e>
        {
            action->execute(*this);
 8002b98:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8002b9a:	6803      	ldr	r3, [r0, #0]
 8002b9c:	4621      	mov	r1, r4
 8002b9e:	689b      	ldr	r3, [r3, #8]
        }
    }
 8002ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            action->execute(*this);
 8002ba4:	4718      	bx	r3
    }
 8002ba6:	bd10      	pop	{r4, pc}

08002ba8 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
    {
        return clickEventType;
 8002ba8:	790b      	ldrb	r3, [r1, #4]
     *
     * @param  event The click event.
     *
     * @see setAction, setPressed, getPressed
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8002baa:	b570      	push	{r4, r5, r6, lr}
        return pressed;
 8002bac:	f890 602c 	ldrb.w	r6, [r0, #44]	@ 0x2c
 8002bb0:	4604      	mov	r4, r0
 8002bb2:	460d      	mov	r5, r1
    {
        bool wasPressed = getPressed();
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8002bb4:	b90b      	cbnz	r3, 8002bba <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x12>
 8002bb6:	b116      	cbz	r6, 8002bbe <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x16>
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
        {
            executeAction();
        }
    }
 8002bb8:	bd70      	pop	{r4, r5, r6, pc}
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8002bba:	2e00      	cmp	r6, #0
 8002bbc:	d0fc      	beq.n	8002bb8 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 8002bbe:	fab3 f383 	clz	r3, r3
 8002bc2:	095b      	lsrs	r3, r3, #5
 8002bc4:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
        handlePressedUpdated();
 8002bc8:	6823      	ldr	r3, [r4, #0]
 8002bca:	4620      	mov	r0, r4
 8002bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bd0:	4798      	blx	r3
            invalidate();
 8002bd2:	6823      	ldr	r3, [r4, #0]
 8002bd4:	4620      	mov	r0, r4
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	4798      	blx	r3
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
 8002bda:	2e00      	cmp	r6, #0
 8002bdc:	d0ec      	beq.n	8002bb8 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
 8002bde:	792b      	ldrb	r3, [r5, #4]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d1e9      	bne.n	8002bb8 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
            executeAction();
 8002be4:	6823      	ldr	r3, [r4, #0]
 8002be6:	4620      	mov	r0, r4
 8002be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
    }
 8002bec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            executeAction();
 8002bf0:	4718      	bx	r3

08002bf2 <_ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void Screen2ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &flexButton1)
 8002bf2:	f500 73ba 	add.w	r3, r0, #372	@ 0x174
 8002bf6:	428b      	cmp	r3, r1
{
 8002bf8:	b510      	push	{r4, lr}
 8002bfa:	4604      	mov	r4, r0
    if (&src == &flexButton1)
 8002bfc:	d109      	bne.n	8002c12 <_ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x20>

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8002bfe:	f007 ffe7 	bl	800abd0 <_ZN8touchgfx11Application11getInstanceEv>
    {
        //Interaction1
        //When flexButton1 clicked change screen to Screen1
        //Go to Screen1 with screen transition towards East
        application().gotoScreen1ScreenWipeTransitionEast();
 8002c02:	f7ff fe39 	bl	8002878 <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionEastEv>
    
        //Interaction2
        //When Interaction1 completed call virtual function
        //Call ExitFromScreen2
        ExitFromScreen2();
 8002c06:	6823      	ldr	r3, [r4, #0]
 8002c08:	4620      	mov	r0, r4
 8002c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    }
}
 8002c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ExitFromScreen2();
 8002c10:	4718      	bx	r3
}
 8002c12:	bd10      	pop	{r4, pc}

08002c14 <_ZN8touchgfx8DrawableC1Ev>:
          visible(true)
 8002c14:	4a07      	ldr	r2, [pc, #28]	@ (8002c34 <_ZN8touchgfx8DrawableC1Ev+0x20>)
 8002c16:	6002      	str	r2, [r0, #0]
        : x(0), y(0), width(0), height(0)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8002c1e:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 8002c22:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 8002c26:	e9c0 2207 	strd	r2, r2, [r0, #28]
          touchable(false),
 8002c2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c2e:	8482      	strh	r2, [r0, #36]	@ 0x24
    }
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	08012850 	.word	0x08012850

08002c38 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE14setIconBitmapsERKNS_6BitmapES5_>:
        iconReleased = newIconReleased;
 8002c38:	880b      	ldrh	r3, [r1, #0]
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 8002c3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        iconReleased = newIconReleased;
 8002c3e:	8683      	strh	r3, [r0, #52]	@ 0x34
        iconPressed = newIconPressed;
 8002c40:	8813      	ldrh	r3, [r2, #0]
        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 8002c42:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
        iconPressed = newIconPressed;
 8002c46:	86c3      	strh	r3, [r0, #54]	@ 0x36
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 8002c48:	4604      	mov	r4, r0
        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 8002c4a:	4610      	mov	r0, r2
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 8002c4c:	4690      	mov	r8, r2
        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 8002c4e:	f00a fc95 	bl	800d57c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8002c52:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8002c56:	4607      	mov	r7, r0
 8002c58:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8002c5c:	4640      	mov	r0, r8
 8002c5e:	f3c3 064f 	ubfx	r6, r3, #1, #16
 8002c62:	f00a fcbf 	bl	800d5e4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8002c66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002c6a:	f3c5 054f 	ubfx	r5, r5, #1, #16
 8002c6e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002c72:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8002c76:	eba6 0260 	sub.w	r2, r6, r0, asr #1
 8002c7a:	eba5 0167 	sub.w	r1, r5, r7, asr #1
 8002c7e:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8002c82:	b212      	sxth	r2, r2
 8002c84:	b209      	sxth	r1, r1
 8002c86:	f7ff feb4 	bl	80029f2 <_ZN8touchgfx8Drawable5setXYEss>
        handlePressedUpdated();
 8002c8a:	6823      	ldr	r3, [r4, #0]
 8002c8c:	4620      	mov	r0, r4
 8002c8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
    }
 8002c92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        handlePressedUpdated();
 8002c96:	4718      	bx	r3

08002c98 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
    Image(const Bitmap& bmp = Bitmap())
 8002c98:	b538      	push	{r3, r4, r5, lr}
        : Widget(), bitmap(bmp), alpha(255)
 8002c9a:	2226      	movs	r2, #38	@ 0x26
    Image(const Bitmap& bmp = Bitmap())
 8002c9c:	4604      	mov	r4, r0
 8002c9e:	460d      	mov	r5, r1
        : Widget(), bitmap(bmp), alpha(255)
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	f00d fd1e 	bl	80106e2 <memset>
class Widget : public Drawable
 8002ca6:	4620      	mov	r0, r4
 8002ca8:	f7ff ffb4 	bl	8002c14 <_ZN8touchgfx8DrawableC1Ev>
 8002cac:	4b06      	ldr	r3, [pc, #24]	@ (8002cc8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
 8002cae:	6023      	str	r3, [r4, #0]
 8002cb0:	882b      	ldrh	r3, [r5, #0]
 8002cb2:	84e3      	strh	r3, [r4, #38]	@ 0x26
 8002cb4:	23ff      	movs	r3, #255	@ 0xff
        Image::setBitmap(bmp);
 8002cb6:	4620      	mov	r0, r4
        : Widget(), bitmap(bmp), alpha(255)
 8002cb8:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
        Image::setBitmap(bmp);
 8002cbc:	4629      	mov	r1, r5
 8002cbe:	f006 fed0 	bl	8009a62 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8002cc2:	4620      	mov	r0, r4
 8002cc4:	bd38      	pop	{r3, r4, r5, pc}
 8002cc6:	bf00      	nop
 8002cc8:	08012790 	.word	0x08012790

08002ccc <_ZN15Screen2ViewBaseC1Ev>:
Screen2ViewBase::Screen2ViewBase() :
 8002ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cd0:	4604      	mov	r4, r0
 8002cd2:	b089      	sub	sp, #36	@ 0x24
    flexButtonCallback(this, &Screen2ViewBase::flexButtonCallbackHandler)
 8002cd4:	4627      	mov	r7, r4
 8002cd6:	2500      	movs	r5, #0
 8002cd8:	f009 fac0 	bl	800c25c <_ZN8touchgfx6ScreenC1Ev>
 8002cdc:	4b92      	ldr	r3, [pc, #584]	@ (8002f28 <_ZN15Screen2ViewBaseC1Ev+0x25c>)
 8002cde:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8002ce0:	f847 3b40 	str.w	r3, [r7], #64
        : Widget(), alpha(255), color(0)
 8002ce4:	2226      	movs	r2, #38	@ 0x26
 8002ce6:	4629      	mov	r1, r5
 8002ce8:	4638      	mov	r0, r7
 8002cea:	f00d fcfa 	bl	80106e2 <memset>
 8002cee:	4638      	mov	r0, r7
 8002cf0:	f7ff ff90 	bl	8002c14 <_ZN8touchgfx8DrawableC1Ev>
 8002cf4:	4b8d      	ldr	r3, [pc, #564]	@ (8002f2c <_ZN15Screen2ViewBaseC1Ev+0x260>)
 8002cf6:	6423      	str	r3, [r4, #64]	@ 0x40
 8002cf8:	f104 0b6c 	add.w	fp, r4, #108	@ 0x6c
 8002cfc:	23ff      	movs	r3, #255	@ 0xff
 8002cfe:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8002d02:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
 8002d06:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
 8002d0a:	a907      	add	r1, sp, #28
        : color(col)
 8002d0c:	66a5      	str	r5, [r4, #104]	@ 0x68
 8002d0e:	4658      	mov	r0, fp
 8002d10:	f8ad 601c 	strh.w	r6, [sp, #28]
 8002d14:	f7ff ffc0 	bl	8002c98 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8002d18:	a907      	add	r1, sp, #28
 8002d1a:	4650      	mov	r0, sl
 8002d1c:	f8ad 601c 	strh.w	r6, [sp, #28]
 8002d20:	f7ff ffba 	bl	8002c98 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8002d24:	f104 03c4 	add.w	r3, r4, #196	@ 0xc4
 8002d28:	a907      	add	r1, sp, #28
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	9302      	str	r3, [sp, #8]
 8002d2e:	f8ad 601c 	strh.w	r6, [sp, #28]
 8002d32:	f7ff ffb1 	bl	8002c98 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8002d36:	f104 03f0 	add.w	r3, r4, #240	@ 0xf0
 8002d3a:	a907      	add	r1, sp, #28
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	9303      	str	r3, [sp, #12]
 8002d40:	f8ad 601c 	strh.w	r6, [sp, #28]
 8002d44:	f7ff ffa8 	bl	8002c98 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8002d48:	f504 738e 	add.w	r3, r4, #284	@ 0x11c
 8002d4c:	a907      	add	r1, sp, #28
 8002d4e:	4618      	mov	r0, r3
 8002d50:	9304      	str	r3, [sp, #16]
 8002d52:	f8ad 601c 	strh.w	r6, [sp, #28]
 8002d56:	f7ff ff9f 	bl	8002c98 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8002d5a:	f504 73a4 	add.w	r3, r4, #328	@ 0x148
 8002d5e:	f504 78ba 	add.w	r8, r4, #372	@ 0x174
 8002d62:	a907      	add	r1, sp, #28
 8002d64:	4618      	mov	r0, r3
 8002d66:	9305      	str	r3, [sp, #20]
 8002d68:	f8ad 601c 	strh.w	r6, [sp, #28]
 8002d6c:	f7ff ff94 	bl	8002c98 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
          firstChild(0)
 8002d70:	4640      	mov	r0, r8
 8002d72:	f7ff ff4f 	bl	8002c14 <_ZN8touchgfx8DrawableC1Ev>
        : pressed(false), alpha(255), action(0)
 8002d76:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8002d7a:	f8a4 31a0 	strh.w	r3, [r4, #416]	@ 0x1a0
        touchable = touch;
 8002d7e:	f04f 0301 	mov.w	r3, #1
 8002d82:	f884 3198 	strb.w	r3, [r4, #408]	@ 0x198
        : T()
 8002d86:	4b6a      	ldr	r3, [pc, #424]	@ (8002f30 <_ZN15Screen2ViewBaseC1Ev+0x264>)
 8002d88:	f8c4 3174 	str.w	r3, [r4, #372]	@ 0x174
 8002d8c:	f504 79d6 	add.w	r9, r4, #428	@ 0x1ac
 8002d90:	f04f 33ff 	mov.w	r3, #4294967295
 8002d94:	f8c4 31a8 	str.w	r3, [r4, #424]	@ 0x1a8
 8002d98:	a907      	add	r1, sp, #28
 8002d9a:	f8c4 519c 	str.w	r5, [r4, #412]	@ 0x19c
 8002d9e:	f8c4 51a4 	str.w	r5, [r4, #420]	@ 0x1a4
 8002da2:	4648      	mov	r0, r9
 8002da4:	f8ad 301c 	strh.w	r3, [sp, #28]
 8002da8:	f7ff ff76 	bl	8002c98 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        T::add(iconImage);
 8002dac:	4649      	mov	r1, r9
 8002dae:	4640      	mov	r0, r8
 8002db0:	f504 79ec 	add.w	r9, r4, #472	@ 0x1d8
 8002db4:	f005 fbc2 	bl	800853c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8002db8:	a907      	add	r1, sp, #28
 8002dba:	4648      	mov	r0, r9
 8002dbc:	f8ad 601c 	strh.w	r6, [sp, #28]
 8002dc0:	f7ff ff6a 	bl	8002c98 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        : pobject(pObject), pmemfun(pmemfun_1)
 8002dc4:	4b5b      	ldr	r3, [pc, #364]	@ (8002f34 <_ZN15Screen2ViewBaseC1Ev+0x268>)
 8002dc6:	e9c4 3481 	strd	r3, r4, [r4, #516]	@ 0x204
 8002dca:	4b5b      	ldr	r3, [pc, #364]	@ (8002f38 <_ZN15Screen2ViewBaseC1Ev+0x26c>)
 8002dcc:	e9c4 3583 	strd	r3, r5, [r4, #524]	@ 0x20c
    __background.setPosition(0, 0, 240, 320);
 8002dd0:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002dd4:	462a      	mov	r2, r5
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	4629      	mov	r1, r5
 8002dda:	4638      	mov	r0, r7
 8002ddc:	23f0      	movs	r3, #240	@ 0xf0
 8002dde:	1d26      	adds	r6, r4, #4
 8002de0:	f7ff fb56 	bl	8002490 <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 8002de4:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8002de8:	66a3      	str	r3, [r4, #104]	@ 0x68
 8002dea:	4639      	mov	r1, r7
 8002dec:	4630      	mov	r0, r6
 8002dee:	f005 fba5 	bl	800853c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    track4.setXY(0, 0);
 8002df2:	462a      	mov	r2, r5
 8002df4:	4629      	mov	r1, r5
 8002df6:	4658      	mov	r0, fp
 8002df8:	f7ff fdfb 	bl	80029f2 <_ZN8touchgfx8Drawable5setXYEss>
 8002dfc:	2308      	movs	r3, #8
    track4.setBitmap(touchgfx::Bitmap(BITMAP_TRACK4_ID));
 8002dfe:	a907      	add	r1, sp, #28
 8002e00:	4658      	mov	r0, fp
 8002e02:	f8ad 301c 	strh.w	r3, [sp, #28]
 8002e06:	f006 fe2c 	bl	8009a62 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002e0a:	4659      	mov	r1, fp
 8002e0c:	4630      	mov	r0, r6
        visible = vis;
 8002e0e:	f884 5091 	strb.w	r5, [r4, #145]	@ 0x91
 8002e12:	f005 fb93 	bl	800853c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    track3.setXY(0, 0);
 8002e16:	462a      	mov	r2, r5
 8002e18:	4629      	mov	r1, r5
 8002e1a:	4650      	mov	r0, sl
 8002e1c:	f7ff fde9 	bl	80029f2 <_ZN8touchgfx8Drawable5setXYEss>
 8002e20:	2307      	movs	r3, #7
    track3.setBitmap(touchgfx::Bitmap(BITMAP_TRACK3_ID));
 8002e22:	a907      	add	r1, sp, #28
 8002e24:	4650      	mov	r0, sl
 8002e26:	f8ad 301c 	strh.w	r3, [sp, #28]
 8002e2a:	f006 fe1a 	bl	8009a62 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002e2e:	4651      	mov	r1, sl
 8002e30:	4630      	mov	r0, r6
 8002e32:	f884 50bd 	strb.w	r5, [r4, #189]	@ 0xbd
 8002e36:	f005 fb81 	bl	800853c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    track2.setXY(0, 0);
 8002e3a:	462a      	mov	r2, r5
 8002e3c:	9802      	ldr	r0, [sp, #8]
 8002e3e:	4629      	mov	r1, r5
 8002e40:	f7ff fdd7 	bl	80029f2 <_ZN8touchgfx8Drawable5setXYEss>
 8002e44:	2306      	movs	r3, #6
    track2.setBitmap(touchgfx::Bitmap(BITMAP_TRACK2_ID));
 8002e46:	9802      	ldr	r0, [sp, #8]
 8002e48:	f8ad 301c 	strh.w	r3, [sp, #28]
 8002e4c:	a907      	add	r1, sp, #28
 8002e4e:	f006 fe08 	bl	8009a62 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002e52:	9902      	ldr	r1, [sp, #8]
 8002e54:	f884 50e9 	strb.w	r5, [r4, #233]	@ 0xe9
 8002e58:	4630      	mov	r0, r6
 8002e5a:	f005 fb6f 	bl	800853c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    track1.setXY(0, 0);
 8002e5e:	462a      	mov	r2, r5
 8002e60:	9803      	ldr	r0, [sp, #12]
 8002e62:	4629      	mov	r1, r5
 8002e64:	f7ff fdc5 	bl	80029f2 <_ZN8touchgfx8Drawable5setXYEss>
 8002e68:	2305      	movs	r3, #5
    track1.setBitmap(touchgfx::Bitmap(BITMAP_TRACK1_ID));
 8002e6a:	9803      	ldr	r0, [sp, #12]
 8002e6c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8002e70:	a907      	add	r1, sp, #28
 8002e72:	f006 fdf6 	bl	8009a62 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002e76:	9903      	ldr	r1, [sp, #12]
 8002e78:	f884 5115 	strb.w	r5, [r4, #277]	@ 0x115
 8002e7c:	4630      	mov	r0, r6
 8002e7e:	f005 fb5d 	bl	800853c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    track0.setXY(0, 0);
 8002e82:	462a      	mov	r2, r5
 8002e84:	9804      	ldr	r0, [sp, #16]
 8002e86:	4629      	mov	r1, r5
 8002e88:	f7ff fdb3 	bl	80029f2 <_ZN8touchgfx8Drawable5setXYEss>
 8002e8c:	2304      	movs	r3, #4
    track0.setBitmap(touchgfx::Bitmap(BITMAP_TRACK0_ID));
 8002e8e:	9804      	ldr	r0, [sp, #16]
 8002e90:	f8ad 301c 	strh.w	r3, [sp, #28]
 8002e94:	a907      	add	r1, sp, #28
 8002e96:	f006 fde4 	bl	8009a62 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002e9a:	9904      	ldr	r1, [sp, #16]
 8002e9c:	f884 5141 	strb.w	r5, [r4, #321]	@ 0x141
 8002ea0:	4630      	mov	r0, r6
 8002ea2:	f005 fb4b 	bl	800853c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(95, 160);
 8002ea6:	22a0      	movs	r2, #160	@ 0xa0
 8002ea8:	9805      	ldr	r0, [sp, #20]
 8002eaa:	215f      	movs	r1, #95	@ 0x5f
 8002eac:	f7ff fda1 	bl	80029f2 <_ZN8touchgfx8Drawable5setXYEss>
 8002eb0:	2302      	movs	r3, #2
    image1.setBitmap(touchgfx::Bitmap(BITMAP_REDCAR_ID));
 8002eb2:	9805      	ldr	r0, [sp, #20]
 8002eb4:	f8ad 301c 	strh.w	r3, [sp, #28]
 8002eb8:	a907      	add	r1, sp, #28
 8002eba:	f006 fdd2 	bl	8009a62 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002ebe:	9905      	ldr	r1, [sp, #20]
 8002ec0:	4630      	mov	r0, r6
 8002ec2:	f005 fb3b 	bl	800853c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    flexButton1.setIconBitmaps(Bitmap(BITMAP_BLUE_ICONS_HOME_32_ID), Bitmap(BITMAP_BLUE_ICONS_HOME_32_ID));
 8002ec6:	aa07      	add	r2, sp, #28
 8002ec8:	a906      	add	r1, sp, #24
 8002eca:	4640      	mov	r0, r8
 8002ecc:	f8ad 5018 	strh.w	r5, [sp, #24]
 8002ed0:	f8ad 501c 	strh.w	r5, [sp, #28]
 8002ed4:	f7ff feb0 	bl	8002c38 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE14setIconBitmapsERKNS_6BitmapES5_>
    flexButton1.setAction(flexButtonCallback);
 8002ed8:	f504 7301 	add.w	r3, r4, #516	@ 0x204
        action = &callback;
 8002edc:	f8c4 31a4 	str.w	r3, [r4, #420]	@ 0x1a4
    flexButton1.setPosition(204, 282, 32, 32);
 8002ee0:	2320      	movs	r3, #32
        rect.x = x;
 8002ee2:	f8c4 51b0 	str.w	r5, [r4, #432]	@ 0x1b0
 8002ee6:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	4640      	mov	r0, r8
 8002eee:	21cc      	movs	r1, #204	@ 0xcc
 8002ef0:	f7ff face 	bl	8002490 <_ZN8touchgfx8Drawable11setPositionEssss>
 8002ef4:	4641      	mov	r1, r8
 8002ef6:	4630      	mov	r0, r6
 8002ef8:	f005 fb20 	bl	800853c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    lamb.setXY(63, 20);
 8002efc:	2214      	movs	r2, #20
 8002efe:	4648      	mov	r0, r9
 8002f00:	213f      	movs	r1, #63	@ 0x3f
 8002f02:	f7ff fd76 	bl	80029f2 <_ZN8touchgfx8Drawable5setXYEss>
 8002f06:	f04f 0301 	mov.w	r3, #1
    lamb.setBitmap(touchgfx::Bitmap(BITMAP_LAMB_ID));
 8002f0a:	a907      	add	r1, sp, #28
 8002f0c:	4648      	mov	r0, r9
 8002f0e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8002f12:	f006 fda6 	bl	8009a62 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002f16:	4630      	mov	r0, r6
 8002f18:	4649      	mov	r1, r9
 8002f1a:	f005 fb0f 	bl	800853c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8002f1e:	4620      	mov	r0, r4
 8002f20:	b009      	add	sp, #36	@ 0x24
 8002f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f26:	bf00      	nop
 8002f28:	08012458 	.word	0x08012458
 8002f2c:	080126b4 	.word	0x080126b4
 8002f30:	080123a0 	.word	0x080123a0
 8002f34:	08012440 	.word	0x08012440
 8002f38:	08002bf3 	.word	0x08002bf3

08002f3c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8002f3c:	4770      	bx	lr
	...

08002f40 <_Z23getFont_verdana_10_4bppv>:
{
 8002f40:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8002f42:	4d16      	ldr	r5, [pc, #88]	@ (8002f9c <_Z23getFont_verdana_10_4bppv+0x5c>)
 8002f44:	682c      	ldr	r4, [r5, #0]
 8002f46:	f014 0401 	ands.w	r4, r4, #1
{
 8002f4a:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8002f4c:	f3bf 8f5b 	dmb	ish
 8002f50:	d120      	bne.n	8002f94 <_Z23getFont_verdana_10_4bppv+0x54>
 8002f52:	4628      	mov	r0, r5
 8002f54:	f00d f992 	bl	801027c <__cxa_guard_acquire>
 8002f58:	b1e0      	cbz	r0, 8002f94 <_Z23getFont_verdana_10_4bppv+0x54>
 8002f5a:	233f      	movs	r3, #63	@ 0x3f
 8002f5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8002f5e:	4b10      	ldr	r3, [pc, #64]	@ (8002fa0 <_Z23getFont_verdana_10_4bppv+0x60>)
 8002f60:	9308      	str	r3, [sp, #32]
 8002f62:	4b10      	ldr	r3, [pc, #64]	@ (8002fa4 <_Z23getFont_verdana_10_4bppv+0x64>)
 8002f64:	4910      	ldr	r1, [pc, #64]	@ (8002fa8 <_Z23getFont_verdana_10_4bppv+0x68>)
 8002f66:	4811      	ldr	r0, [pc, #68]	@ (8002fac <_Z23getFont_verdana_10_4bppv+0x6c>)
 8002f68:	940a      	str	r4, [sp, #40]	@ 0x28
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8002f70:	2304      	movs	r3, #4
 8002f72:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8002f76:	230a      	movs	r3, #10
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8002f7e:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002f82:	9405      	str	r4, [sp, #20]
 8002f84:	f7ff fcca 	bl	800291c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8002f88:	4809      	ldr	r0, [pc, #36]	@ (8002fb0 <_Z23getFont_verdana_10_4bppv+0x70>)
 8002f8a:	f00d f9c1 	bl	8010310 <atexit>
 8002f8e:	4628      	mov	r0, r5
 8002f90:	f00d f980 	bl	8010294 <__cxa_guard_release>
    return verdana_10_4bpp;
}
 8002f94:	4805      	ldr	r0, [pc, #20]	@ (8002fac <_Z23getFont_verdana_10_4bppv+0x6c>)
 8002f96:	b00f      	add	sp, #60	@ 0x3c
 8002f98:	bd30      	pop	{r4, r5, pc}
 8002f9a:	bf00      	nop
 8002f9c:	20001668 	.word	0x20001668
 8002fa0:	08012ba8 	.word	0x08012ba8
 8002fa4:	08012bb4 	.word	0x08012bb4
 8002fa8:	08012b78 	.word	0x08012b78
 8002fac:	2000166c 	.word	0x2000166c
 8002fb0:	08002f3d 	.word	0x08002f3d

08002fb4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8002fb4:	4770      	bx	lr
	...

08002fb8 <_Z23getFont_verdana_20_4bppv>:
{
 8002fb8:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8002fba:	4d16      	ldr	r5, [pc, #88]	@ (8003014 <_Z23getFont_verdana_20_4bppv+0x5c>)
 8002fbc:	682c      	ldr	r4, [r5, #0]
 8002fbe:	f014 0401 	ands.w	r4, r4, #1
{
 8002fc2:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8002fc4:	f3bf 8f5b 	dmb	ish
 8002fc8:	d120      	bne.n	800300c <_Z23getFont_verdana_20_4bppv+0x54>
 8002fca:	4628      	mov	r0, r5
 8002fcc:	f00d f956 	bl	801027c <__cxa_guard_acquire>
 8002fd0:	b1e0      	cbz	r0, 800300c <_Z23getFont_verdana_20_4bppv+0x54>
 8002fd2:	233f      	movs	r3, #63	@ 0x3f
 8002fd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8002fd6:	4b10      	ldr	r3, [pc, #64]	@ (8003018 <_Z23getFont_verdana_20_4bppv+0x60>)
 8002fd8:	9308      	str	r3, [sp, #32]
 8002fda:	4b10      	ldr	r3, [pc, #64]	@ (800301c <_Z23getFont_verdana_20_4bppv+0x64>)
 8002fdc:	4910      	ldr	r1, [pc, #64]	@ (8003020 <_Z23getFont_verdana_20_4bppv+0x68>)
 8002fde:	4811      	ldr	r0, [pc, #68]	@ (8003024 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8002fe0:	940a      	str	r4, [sp, #40]	@ 0x28
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8002fe8:	2304      	movs	r3, #4
 8002fea:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8002fee:	2314      	movs	r3, #20
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8002ff6:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002ffa:	9405      	str	r4, [sp, #20]
 8002ffc:	f7ff fc8e 	bl	800291c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003000:	4809      	ldr	r0, [pc, #36]	@ (8003028 <_Z23getFont_verdana_20_4bppv+0x70>)
 8003002:	f00d f985 	bl	8010310 <atexit>
 8003006:	4628      	mov	r0, r5
 8003008:	f00d f944 	bl	8010294 <__cxa_guard_release>
    return verdana_20_4bpp;
}
 800300c:	4805      	ldr	r0, [pc, #20]	@ (8003024 <_Z23getFont_verdana_20_4bppv+0x6c>)
 800300e:	b00f      	add	sp, #60	@ 0x3c
 8003010:	bd30      	pop	{r4, r5, pc}
 8003012:	bf00      	nop
 8003014:	20001698 	.word	0x20001698
 8003018:	08012bac 	.word	0x08012bac
 800301c:	08012bb8 	.word	0x08012bb8
 8003020:	08012b88 	.word	0x08012b88
 8003024:	2000169c 	.word	0x2000169c
 8003028:	08002fb5 	.word	0x08002fb5

0800302c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800302c:	4770      	bx	lr
	...

08003030 <_Z23getFont_verdana_40_4bppv>:
{
 8003030:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003032:	4d16      	ldr	r5, [pc, #88]	@ (800308c <_Z23getFont_verdana_40_4bppv+0x5c>)
 8003034:	682c      	ldr	r4, [r5, #0]
 8003036:	f014 0401 	ands.w	r4, r4, #1
{
 800303a:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800303c:	f3bf 8f5b 	dmb	ish
 8003040:	d120      	bne.n	8003084 <_Z23getFont_verdana_40_4bppv+0x54>
 8003042:	4628      	mov	r0, r5
 8003044:	f00d f91a 	bl	801027c <__cxa_guard_acquire>
 8003048:	b1e0      	cbz	r0, 8003084 <_Z23getFont_verdana_40_4bppv+0x54>
 800304a:	233f      	movs	r3, #63	@ 0x3f
 800304c:	9309      	str	r3, [sp, #36]	@ 0x24
 800304e:	4b10      	ldr	r3, [pc, #64]	@ (8003090 <_Z23getFont_verdana_40_4bppv+0x60>)
 8003050:	9308      	str	r3, [sp, #32]
 8003052:	4b10      	ldr	r3, [pc, #64]	@ (8003094 <_Z23getFont_verdana_40_4bppv+0x64>)
 8003054:	4910      	ldr	r1, [pc, #64]	@ (8003098 <_Z23getFont_verdana_40_4bppv+0x68>)
 8003056:	4811      	ldr	r0, [pc, #68]	@ (800309c <_Z23getFont_verdana_40_4bppv+0x6c>)
 8003058:	940a      	str	r4, [sp, #40]	@ 0x28
 800305a:	2201      	movs	r2, #1
 800305c:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003060:	2304      	movs	r3, #4
 8003062:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003066:	2328      	movs	r3, #40	@ 0x28
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 800306e:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003072:	9405      	str	r4, [sp, #20]
 8003074:	f7ff fc52 	bl	800291c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003078:	4809      	ldr	r0, [pc, #36]	@ (80030a0 <_Z23getFont_verdana_40_4bppv+0x70>)
 800307a:	f00d f949 	bl	8010310 <atexit>
 800307e:	4628      	mov	r0, r5
 8003080:	f00d f908 	bl	8010294 <__cxa_guard_release>
    return verdana_40_4bpp;
}
 8003084:	4805      	ldr	r0, [pc, #20]	@ (800309c <_Z23getFont_verdana_40_4bppv+0x6c>)
 8003086:	b00f      	add	sp, #60	@ 0x3c
 8003088:	bd30      	pop	{r4, r5, pc}
 800308a:	bf00      	nop
 800308c:	200016c8 	.word	0x200016c8
 8003090:	08012bb0 	.word	0x08012bb0
 8003094:	08012bbc 	.word	0x08012bbc
 8003098:	08012b98 	.word	0x08012b98
 800309c:	200016cc 	.word	0x200016cc
 80030a0:	0800302d 	.word	0x0800302d

080030a4 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 80030a4:	2000      	movs	r0, #0
 80030a6:	4770      	bx	lr

080030a8 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 80030a8:	2000      	movs	r0, #0
 80030aa:	4770      	bx	lr

080030ac <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80030ac:	b40e      	push	{r1, r2, r3}
 80030ae:	b503      	push	{r0, r1, lr}
 80030b0:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80030b2:	2100      	movs	r1, #0
{
 80030b4:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 80030b8:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80030ba:	f008 fcfd 	bl	800bab8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80030be:	b002      	add	sp, #8
 80030c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80030c4:	b003      	add	sp, #12
 80030c6:	4770      	bx	lr

080030c8 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80030c8:	b40c      	push	{r2, r3}
 80030ca:	b507      	push	{r0, r1, r2, lr}
 80030cc:	ab04      	add	r3, sp, #16
 80030ce:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 80030d2:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80030d4:	f008 fcf0 	bl	800bab8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80030d8:	b003      	add	sp, #12
 80030da:	f85d eb04 	ldr.w	lr, [sp], #4
 80030de:	b002      	add	sp, #8
 80030e0:	4770      	bx	lr
	...

080030e4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 80030e4:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 80030e6:	b510      	push	{r4, lr}
 80030e8:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 80030ea:	b373      	cbz	r3, 800314a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 80030ec:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 80030ee:	b92b      	cbnz	r3, 80030fc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 80030f0:	4b18      	ldr	r3, [pc, #96]	@ (8003154 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 80030f2:	4a19      	ldr	r2, [pc, #100]	@ (8003158 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
 80030f4:	21c5      	movs	r1, #197	@ 0xc5
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 80030f6:	4819      	ldr	r0, [pc, #100]	@ (800315c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 80030f8:	f00d f8ec 	bl	80102d4 <__assert_func>
            return buffer[pos];
 80030fc:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 80030fe:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003102:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8003104:	b30b      	cbz	r3, 800314a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8003106:	f009 ff52 	bl	800cfae <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 800310a:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800310c:	2b01      	cmp	r3, #1
 800310e:	d803      	bhi.n	8003118 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8003110:	4b13      	ldr	r3, [pc, #76]	@ (8003160 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8003112:	4a14      	ldr	r2, [pc, #80]	@ (8003164 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8003114:	21cb      	movs	r1, #203	@ 0xcb
 8003116:	e7ee      	b.n	80030f6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8003118:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800311a:	1c53      	adds	r3, r2, #1
 800311c:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 800311e:	2b09      	cmp	r3, #9
 8003120:	4619      	mov	r1, r3
 8003122:	bf88      	it	hi
 8003124:	f1a3 010a 	subhi.w	r1, r3, #10
 8003128:	eb04 0141 	add.w	r1, r4, r1, lsl #1
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800312c:	f640 103f 	movw	r0, #2367	@ 0x93f
 8003130:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 8003132:	4281      	cmp	r1, r0
 8003134:	d109      	bne.n	800314a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8003136:	2b0a      	cmp	r3, #10
 8003138:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800313c:	bf28      	it	cs
 800313e:	2300      	movcs	r3, #0
 8003140:	eb04 0343 	add.w	r3, r4, r3, lsl #1
            return buffer[pos];
 8003144:	8c50      	ldrh	r0, [r2, #34]	@ 0x22
            buffer[index < size ? index : 0] = newChar;
 8003146:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 8003148:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 800314a:	4620      	mov	r0, r4
}
 800314c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8003150:	f009 be30 	b.w	800cdb4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8003154:	08011c43 	.word	0x08011c43
 8003158:	08011c4c 	.word	0x08011c4c
 800315c:	08011cf7 	.word	0x08011cf7
 8003160:	08011d41 	.word	0x08011d41
 8003164:	08011d4f 	.word	0x08011d4f

08003168 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8003168:	f009 bdeb 	b.w	800cd42 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0800316c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800316c:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 800316e:	bb18      	cbnz	r0, 80031b8 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8003170:	4b12      	ldr	r3, [pc, #72]	@ (80031bc <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8003172:	4813      	ldr	r0, [pc, #76]	@ (80031c0 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8003174:	681c      	ldr	r4, [r3, #0]
 8003176:	4913      	ldr	r1, [pc, #76]	@ (80031c4 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8003178:	b1b4      	cbz	r4, 80031a8 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800317a:	6822      	ldr	r2, [r4, #0]
 800317c:	4422      	add	r2, r4
 800317e:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8003180:	6862      	ldr	r2, [r4, #4]
 8003182:	4422      	add	r2, r4
 8003184:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8003186:	68a2      	ldr	r2, [r4, #8]
 8003188:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 800318a:	4b0f      	ldr	r3, [pc, #60]	@ (80031c8 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 800318c:	2200      	movs	r2, #0
 800318e:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8003190:	f000 f82a 	bl	80031e8 <_ZN17TypedTextDatabase8getFontsEv>
 8003194:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8003196:	f000 f825 	bl	80031e4 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 800319a:	4b0c      	ldr	r3, [pc, #48]	@ (80031cc <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 800319c:	601c      	str	r4, [r3, #0]
        fonts = f;
 800319e:	4b0c      	ldr	r3, [pc, #48]	@ (80031d0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 80031a0:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 80031a2:	4b0c      	ldr	r3, [pc, #48]	@ (80031d4 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 80031a4:	8018      	strh	r0, [r3, #0]
    }
}
 80031a6:	e007      	b.n	80031b8 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 80031a8:	4b0b      	ldr	r3, [pc, #44]	@ (80031d8 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 80031aa:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80031ac:	4b0b      	ldr	r3, [pc, #44]	@ (80031dc <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 80031ae:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80031b0:	4b0b      	ldr	r3, [pc, #44]	@ (80031e0 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 80031b2:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 80031b4:	2c00      	cmp	r4, #0
 80031b6:	d1e8      	bne.n	800318a <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 80031b8:	bd38      	pop	{r3, r4, r5, pc}
 80031ba:	bf00      	nop
 80031bc:	20001704 	.word	0x20001704
 80031c0:	200016fc 	.word	0x200016fc
 80031c4:	200016f8 	.word	0x200016f8
 80031c8:	20001700 	.word	0x20001700
 80031cc:	200124d4 	.word	0x200124d4
 80031d0:	200124dc 	.word	0x200124dc
 80031d4:	200124d8 	.word	0x200124d8
 80031d8:	08012bc4 	.word	0x08012bc4
 80031dc:	08012bc0 	.word	0x08012bc0
 80031e0:	08012bc8 	.word	0x08012bc8

080031e4 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return 0;
}
 80031e4:	2000      	movs	r0, #0
 80031e6:	4770      	bx	lr

080031e8 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 80031e8:	4800      	ldr	r0, [pc, #0]	@ (80031ec <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 80031ea:	4770      	bx	lr
 80031ec:	20001708 	.word	0x20001708

080031f0 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80031f0:	b510      	push	{r4, lr}
    &(getFont_verdana_20_4bpp()),
 80031f2:	f7ff fee1 	bl	8002fb8 <_Z23getFont_verdana_20_4bppv>
};
 80031f6:	4c04      	ldr	r4, [pc, #16]	@ (8003208 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
 80031f8:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 80031fa:	f7ff ff19 	bl	8003030 <_Z23getFont_verdana_40_4bppv>
};
 80031fe:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 8003200:	f7ff fe9e 	bl	8002f40 <_Z23getFont_verdana_10_4bppv>
};
 8003204:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 8003206:	bd10      	pop	{r4, pc}
 8003208:	20001708 	.word	0x20001708

0800320c <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800320c:	4770      	bx	lr

0800320e <_ZN19FrontendApplicationD0Ev>:
 800320e:	b510      	push	{r4, lr}
 8003210:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8003214:	4604      	mov	r4, r0
 8003216:	f00d f82f 	bl	8010278 <_ZdlPvj>
 800321a:	4620      	mov	r0, r4
 800321c:	bd10      	pop	{r4, pc}

0800321e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800321e:	b510      	push	{r4, lr}
 8003220:	4604      	mov	r4, r0
    {
        model.tick();
 8003222:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 8003226:	f000 f815 	bl	8003254 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800322a:	4620      	mov	r0, r4
    }
 800322c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8003230:	f007 bd78 	b.w	800ad24 <_ZN8touchgfx11Application15handleTickEventEv>

08003234 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8003234:	b510      	push	{r4, lr}
 8003236:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8003238:	f7ff fae0 	bl	80027fc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800323c:	4b01      	ldr	r3, [pc, #4]	@ (8003244 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
 800323e:	6023      	str	r3, [r4, #0]
{

}
 8003240:	4620      	mov	r0, r4
 8003242:	bd10      	pop	{r4, pc}
 8003244:	08012490 	.word	0x08012490

08003248 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : ImageX(95), modelListener(0)
 8003248:	2200      	movs	r2, #0
 800324a:	215f      	movs	r1, #95	@ 0x5f
 800324c:	6002      	str	r2, [r0, #0]
 800324e:	8081      	strh	r1, [r0, #4]
 8003250:	6082      	str	r2, [r0, #8]
{
	modelTickCount = 0;
}
 8003252:	4770      	bx	lr

08003254 <_ZN5Model4tickEv>:

void Model::tick()
{
	modelTickCount++;
 8003254:	6803      	ldr	r3, [r0, #0]
 8003256:	3301      	adds	r3, #1
 8003258:	6003      	str	r3, [r0, #0]
}
 800325a:	4770      	bx	lr

0800325c <_ZN5Model6updateEs>:

void Model::update(int16_t x)
{
	ImageX = x;
 800325c:	8081      	strh	r1, [r0, #4]
}
 800325e:	4770      	bx	lr

08003260 <_ZN5Model9GetImageXEv>:

int16_t Model::GetImageX()
{
	return ImageX;
}
 8003260:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8003264:	4770      	bx	lr

08003266 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8003266:	4770      	bx	lr

08003268 <_ZThn4_N16Screen1PresenterD1Ev>:
 8003268:	3804      	subs	r0, #4
 800326a:	4770      	bx	lr

0800326c <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 800326c:	4770      	bx	lr

0800326e <_ZN16Screen1PresenterD0Ev>:
 800326e:	b510      	push	{r4, lr}
 8003270:	2110      	movs	r1, #16
 8003272:	4604      	mov	r4, r0
 8003274:	f00d f800 	bl	8010278 <_ZdlPvj>
 8003278:	4620      	mov	r0, r4
 800327a:	bd10      	pop	{r4, pc}

0800327c <_ZThn4_N16Screen1PresenterD0Ev>:
 800327c:	f1a0 0004 	sub.w	r0, r0, #4
 8003280:	e7f5      	b.n	800326e <_ZN16Screen1PresenterD0Ev>
	...

08003284 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8003284:	2200      	movs	r2, #0
 8003286:	6082      	str	r2, [r0, #8]
    : view(v)
 8003288:	4a02      	ldr	r2, [pc, #8]	@ (8003294 <_ZN16Screen1PresenterC1ER11Screen1View+0x10>)
 800328a:	6002      	str	r2, [r0, #0]
 800328c:	3218      	adds	r2, #24
 800328e:	6042      	str	r2, [r0, #4]
 8003290:	60c1      	str	r1, [r0, #12]
}
 8003292:	4770      	bx	lr
 8003294:	080124e4 	.word	0x080124e4

08003298 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 8003298:	4770      	bx	lr

0800329a <_ZN11Screen1View15handleTickEventEv>:

void Screen1View::handleTickEvent()
{
	tickCounter += 1;
 800329a:	f8d0 30b0 	ldr.w	r3, [r0, #176]	@ 0xb0
 800329e:	3301      	adds	r3, #1
 80032a0:	f8c0 30b0 	str.w	r3, [r0, #176]	@ 0xb0

}
 80032a4:	4770      	bx	lr
	...

080032a8 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 80032a8:	b510      	push	{r4, lr}
 80032aa:	4b03      	ldr	r3, [pc, #12]	@ (80032b8 <_ZN11Screen1ViewD1Ev+0x10>)
 80032ac:	6003      	str	r3, [r0, #0]
 80032ae:	4604      	mov	r4, r0
 80032b0:	f7ff fb6a 	bl	8002988 <_ZN15Screen1ViewBaseD1Ev>
 80032b4:	4620      	mov	r0, r4
 80032b6:	bd10      	pop	{r4, pc}
 80032b8:	0801250c 	.word	0x0801250c

080032bc <_ZN11Screen1ViewD0Ev>:
 80032bc:	b510      	push	{r4, lr}
 80032be:	4604      	mov	r4, r0
 80032c0:	f7ff fff2 	bl	80032a8 <_ZN11Screen1ViewD1Ev>
 80032c4:	4620      	mov	r0, r4
 80032c6:	21b4      	movs	r1, #180	@ 0xb4
 80032c8:	f00c ffd6 	bl	8010278 <_ZdlPvj>
 80032cc:	4620      	mov	r0, r4
 80032ce:	bd10      	pop	{r4, pc}

080032d0 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 80032d0:	b510      	push	{r4, lr}
 80032d2:	4604      	mov	r4, r0
 80032d4:	f7ff fb9a 	bl	8002a0c <_ZN15Screen1ViewBaseC1Ev>
 80032d8:	4b03      	ldr	r3, [pc, #12]	@ (80032e8 <_ZN11Screen1ViewC1Ev+0x18>)
 80032da:	6023      	str	r3, [r4, #0]
 80032dc:	2300      	movs	r3, #0
 80032de:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
}
 80032e2:	4620      	mov	r0, r4
 80032e4:	bd10      	pop	{r4, pc}
 80032e6:	bf00      	nop
 80032e8:	0801250c 	.word	0x0801250c

080032ec <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 80032ec:	f7ff bb4d 	b.w	800298a <_ZN15Screen1ViewBase11setupScreenEv>

080032f0 <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 80032f0:	4770      	bx	lr

080032f2 <_ZThn4_N16Screen2PresenterD1Ev>:
 80032f2:	3804      	subs	r0, #4
 80032f4:	4770      	bx	lr

080032f6 <_ZN16Screen2Presenter10deactivateEv>:
}

void Screen2Presenter::activate()
{

}
 80032f6:	4770      	bx	lr

080032f8 <_ZN16Screen2PresenterD0Ev>:
 80032f8:	b510      	push	{r4, lr}
 80032fa:	2110      	movs	r1, #16
 80032fc:	4604      	mov	r4, r0
 80032fe:	f00c ffbb 	bl	8010278 <_ZdlPvj>
 8003302:	4620      	mov	r0, r4
 8003304:	bd10      	pop	{r4, pc}

08003306 <_ZThn4_N16Screen2PresenterD0Ev>:
 8003306:	f1a0 0004 	sub.w	r0, r0, #4
 800330a:	e7f5      	b.n	80032f8 <_ZN16Screen2PresenterD0Ev>

0800330c <_ZN16Screen2PresenterC1ER11Screen2View>:
 800330c:	2200      	movs	r2, #0
 800330e:	6082      	str	r2, [r0, #8]
    : view(v)
 8003310:	4a02      	ldr	r2, [pc, #8]	@ (800331c <_ZN16Screen2PresenterC1ER11Screen2View+0x10>)
 8003312:	6002      	str	r2, [r0, #0]
 8003314:	3218      	adds	r2, #24
 8003316:	6042      	str	r2, [r0, #4]
 8003318:	60c1      	str	r1, [r0, #12]
}
 800331a:	4770      	bx	lr
 800331c:	08012540 	.word	0x08012540

08003320 <_ZN16Screen2Presenter12UpdateImageXEs>:

}

void Screen2Presenter::UpdateImageX(int16_t x)
{
	model->update(x);
 8003320:	6880      	ldr	r0, [r0, #8]
 8003322:	f7ff bf9b 	b.w	800325c <_ZN5Model6updateEs>

08003326 <_ZN16Screen2Presenter9GetImageXEv>:
}

int16_t Screen2Presenter::GetImageX()
{
	return model->GetImageX();
 8003326:	6880      	ldr	r0, [r0, #8]
 8003328:	f7ff bf9a 	b.w	8003260 <_ZN5Model9GetImageXEv>

0800332c <_ZN11Screen2View14tearDownScreenEv>:
}

void Screen2View::tearDownScreen()
{
    Screen2ViewBase::tearDownScreen();
    presenter->UpdateImageX(localImageX);
 800332c:	f9b0 1214 	ldrsh.w	r1, [r0, #532]	@ 0x214
 8003330:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8003332:	f7ff bff5 	b.w	8003320 <_ZN16Screen2Presenter12UpdateImageXEs>
	...

08003338 <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 8003338:	b510      	push	{r4, lr}
 800333a:	4b03      	ldr	r3, [pc, #12]	@ (8003348 <_ZN11Screen2ViewD1Ev+0x10>)
 800333c:	6003      	str	r3, [r0, #0]
 800333e:	4604      	mov	r4, r0
 8003340:	f7ff fbe1 	bl	8002b06 <_ZN15Screen2ViewBaseD1Ev>
 8003344:	4620      	mov	r0, r4
 8003346:	bd10      	pop	{r4, pc}
 8003348:	08012568 	.word	0x08012568

0800334c <_ZN11Screen2ViewD0Ev>:
 800334c:	b510      	push	{r4, lr}
 800334e:	4604      	mov	r4, r0
 8003350:	f7ff fff2 	bl	8003338 <_ZN11Screen2ViewD1Ev>
 8003354:	4620      	mov	r0, r4
 8003356:	f44f 7107 	mov.w	r1, #540	@ 0x21c
 800335a:	f00c ff8d 	bl	8010278 <_ZdlPvj>
 800335e:	4620      	mov	r0, r4
 8003360:	bd10      	pop	{r4, pc}
	...

08003364 <_ZN11Screen2ViewC1Ev>:
Screen2View::Screen2View()
 8003364:	b510      	push	{r4, lr}
 8003366:	4604      	mov	r4, r0
 8003368:	f7ff fcb0 	bl	8002ccc <_ZN15Screen2ViewBaseC1Ev>
 800336c:	4b03      	ldr	r3, [pc, #12]	@ (800337c <_ZN11Screen2ViewC1Ev+0x18>)
 800336e:	6023      	str	r3, [r4, #0]
	tickCount = 0;
 8003370:	2300      	movs	r3, #0
 8003372:	f8c4 3218 	str.w	r3, [r4, #536]	@ 0x218
}
 8003376:	4620      	mov	r0, r4
 8003378:	bd10      	pop	{r4, pc}
 800337a:	bf00      	nop
 800337c:	08012568 	.word	0x08012568

08003380 <_ZN11Screen2View11setupScreenEv>:
{
 8003380:	b510      	push	{r4, lr}
 8003382:	4604      	mov	r4, r0
	localImageX = presenter->GetImageX();
 8003384:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8003386:	f7ff ffce 	bl	8003326 <_ZN16Screen2Presenter9GetImageXEv>
 800338a:	f8a4 0214 	strh.w	r0, [r4, #532]	@ 0x214
    Screen2ViewBase::setupScreen();
 800338e:	4620      	mov	r0, r4
 8003390:	f7ff fbba 	bl	8002b08 <_ZN15Screen2ViewBase11setupScreenEv>
 8003394:	f8b4 3214 	ldrh.w	r3, [r4, #532]	@ 0x214
 8003398:	f8a4 314c 	strh.w	r3, [r4, #332]	@ 0x14c
 800339c:	230e      	movs	r3, #14
 800339e:	f8c4 31dc 	str.w	r3, [r4, #476]	@ 0x1dc
}
 80033a2:	bd10      	pop	{r4, pc}

080033a4 <_ZN11Screen2View15handleTickEventEv>:

void Screen2View::handleTickEvent()
{
	Screen2ViewBase::handleTickEvent();

	tickCount++;
 80033a4:	f8d0 3218 	ldr.w	r3, [r0, #536]	@ 0x218
{
 80033a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	tickCount++;
 80033aa:	3301      	adds	r3, #1
	switch (tickCount % 5)
 80033ac:	2205      	movs	r2, #5
 80033ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80033b2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80033b6:	1a9a      	subs	r2, r3, r2
 80033b8:	3a01      	subs	r2, #1
{
 80033ba:	4604      	mov	r4, r0
	tickCount++;
 80033bc:	f8c0 3218 	str.w	r3, [r0, #536]	@ 0x218
	switch (tickCount % 5)
 80033c0:	2100      	movs	r1, #0
 80033c2:	2001      	movs	r0, #1
 80033c4:	2a03      	cmp	r2, #3
 80033c6:	d803      	bhi.n	80033d0 <_ZN11Screen2View15handleTickEventEv+0x2c>
 80033c8:	e8df f002 	tbb	[pc, r2]
 80033cc:	7f7a7570 	.word	0x7f7a7570
        visible = vis;
 80033d0:	f884 0141 	strb.w	r0, [r4, #321]	@ 0x141
 80033d4:	f884 1091 	strb.w	r1, [r4, #145]	@ 0x91
		break;
	default:
		break;
	}

	lamb.setY(tickCount*2%320);
 80033d8:	005a      	lsls	r2, r3, #1
 80033da:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 80033de:	fbb2 f3f1 	udiv	r3, r2, r1
 80033e2:	fb01 2213 	mls	r2, r1, r3, r2
	lamb.setX(tickCount*2/320%4*60+15);
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
//	int16_t res = 0;
//	if (osMessageQueueGet(Queue1Handle, &res, NULL, 10) == osOK) {
//	    image1.setX(res);
//	}

	updateCounter++;
 80033ee:	4d3c      	ldr	r5, [pc, #240]	@ (80034e0 <_ZN11Screen2View15handleTickEventEv+0x13c>)
	lamb.setY(tickCount*2%320);
 80033f0:	f8a4 21de 	strh.w	r2, [r4, #478]	@ 0x1de
	lamb.setX(tickCount*2/320%4*60+15);
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	330f      	adds	r3, #15
        rect.x = x;
 80033f8:	f8a4 31dc 	strh.w	r3, [r4, #476]	@ 0x1dc
	updateCounter++;
 80033fc:	682b      	ldr	r3, [r5, #0]
 80033fe:	3301      	adds	r3, #1
	if (updateCounter >= 2) { // Chỉ cập nhật mỗi 3 lần tick
 8003400:	2b01      	cmp	r3, #1
	updateCounter++;
 8003402:	602b      	str	r3, [r5, #0]
	if (updateCounter >= 2) { // Chỉ cập nhật mỗi 3 lần tick
 8003404:	dd2f      	ble.n	8003466 <_ZN11Screen2View15handleTickEventEv+0xc2>
	    int16_t res = 0;
	    if (osMessageQueueGet(Queue1Handle, &res, NULL, 10) == osOK) {
 8003406:	4837      	ldr	r0, [pc, #220]	@ (80034e4 <_ZN11Screen2View15handleTickEventEv+0x140>)
	    int16_t res = 0;
 8003408:	2200      	movs	r2, #0
	    if (osMessageQueueGet(Queue1Handle, &res, NULL, 10) == osOK) {
 800340a:	6800      	ldr	r0, [r0, #0]
	    int16_t res = 0;
 800340c:	f8ad 2006 	strh.w	r2, [sp, #6]
	    if (osMessageQueueGet(Queue1Handle, &res, NULL, 10) == osOK) {
 8003410:	230a      	movs	r3, #10
 8003412:	f10d 0106 	add.w	r1, sp, #6
 8003416:	f003 f905 	bl	8006624 <osMessageQueueGet>
 800341a:	bb10      	cbnz	r0, 8003462 <_ZN11Screen2View15handleTickEventEv+0xbe>
	    	if (res < minX) res = minX;
 800341c:	4b32      	ldr	r3, [pc, #200]	@ (80034e8 <_ZN11Screen2View15handleTickEventEv+0x144>)
	    	if (res > maxX) res = maxX;
	    	int16_t mappedX = (res - minX) * (maxPos - minPos) / (maxX - minX) + minPos;
 800341e:	4833      	ldr	r0, [pc, #204]	@ (80034ec <_ZN11Screen2View15handleTickEventEv+0x148>)
	    	if (res < minX) res = minX;
 8003420:	f9b3 1000 	ldrsh.w	r1, [r3]
 8003424:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
	    	int16_t mappedX = (res - minX) * (maxPos - minPos) / (maxX - minX) + minPos;
 8003428:	f9b0 0000 	ldrsh.w	r0, [r0]
	    	if (res < minX) res = minX;
 800342c:	428b      	cmp	r3, r1
	    	if (res > maxX) res = maxX;
 800342e:	4b30      	ldr	r3, [pc, #192]	@ (80034f0 <_ZN11Screen2View15handleTickEventEv+0x14c>)
	    	if (res < minX) res = minX;
 8003430:	bfb8      	it	lt
 8003432:	f8ad 1006 	strhlt.w	r1, [sp, #6]
	    	if (res > maxX) res = maxX;
 8003436:	f9b3 2000 	ldrsh.w	r2, [r3]
 800343a:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 800343e:	4293      	cmp	r3, r2
	    	int16_t mappedX = (res - minX) * (maxPos - minPos) / (maxX - minX) + minPos;
 8003440:	4b2c      	ldr	r3, [pc, #176]	@ (80034f4 <_ZN11Screen2View15handleTickEventEv+0x150>)
	    	if (res > maxX) res = maxX;
 8003442:	bfc8      	it	gt
 8003444:	f8ad 2006 	strhgt.w	r2, [sp, #6]
	    	int16_t mappedX = (res - minX) * (maxPos - minPos) / (maxX - minX) + minPos;
 8003448:	f9b3 6000 	ldrsh.w	r6, [r3]
 800344c:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8003450:	1b80      	subs	r0, r0, r6
 8003452:	1a5b      	subs	r3, r3, r1
 8003454:	4343      	muls	r3, r0
 8003456:	1a52      	subs	r2, r2, r1
 8003458:	fb93 f3f2 	sdiv	r3, r3, r2
 800345c:	4433      	add	r3, r6
 800345e:	f8a4 314c 	strh.w	r3, [r4, #332]	@ 0x14c
	    	image1.setX(mappedX);
	    }
	    updateCounter = 0;
 8003462:	2300      	movs	r3, #0
 8003464:	602b      	str	r3, [r5, #0]
	}
	int image1X = image1.getX();
 8003466:	f9b4 714c 	ldrsh.w	r7, [r4, #332]	@ 0x14c
	int image1Y = image1.getY();
	int image1W = image1.getWidth();
 800346a:	f9b4 0150 	ldrsh.w	r0, [r4, #336]	@ 0x150
	int image1H = image1.getHeight();

	int lambX = lamb.getX();
 800346e:	f9b4 c1dc 	ldrsh.w	ip, [r4, #476]	@ 0x1dc
        return rect.y;
 8003472:	f9b4 514e 	ldrsh.w	r5, [r4, #334]	@ 0x14e
        return rect.height;
 8003476:	f9b4 2152 	ldrsh.w	r2, [r4, #338]	@ 0x152
        return rect.y;
 800347a:	f9b4 61de 	ldrsh.w	r6, [r4, #478]	@ 0x1de
        return rect.width;
 800347e:	f9b4 11e0 	ldrsh.w	r1, [r4, #480]	@ 0x1e0
        return rect.height;
 8003482:	f9b4 31e2 	ldrsh.w	r3, [r4, #482]	@ 0x1e2
	int lambY = lamb.getY();
	int lambW = lamb.getWidth();
	int lambH = lamb.getHeight();

	bool isCollide = !(image1X + image1W < lambX ||
 8003486:	4438      	add	r0, r7
 8003488:	4560      	cmp	r0, ip
 800348a:	db23      	blt.n	80034d4 <_ZN11Screen2View15handleTickEventEv+0x130>
					   image1X > lambX + lambW ||
 800348c:	4461      	add	r1, ip
	bool isCollide = !(image1X + image1W < lambX ||
 800348e:	42b9      	cmp	r1, r7
 8003490:	db20      	blt.n	80034d4 <_ZN11Screen2View15handleTickEventEv+0x130>
					   image1Y + image1H < lambY ||
 8003492:	442a      	add	r2, r5
					   image1X > lambX + lambW ||
 8003494:	42b2      	cmp	r2, r6
 8003496:	db1d      	blt.n	80034d4 <_ZN11Screen2View15handleTickEventEv+0x130>
					   image1Y > lambY + lambH);
 8003498:	4433      	add	r3, r6
	bool isCollide = !(image1X + image1W < lambX ||
 800349a:	42ab      	cmp	r3, r5
 800349c:	db1a      	blt.n	80034d4 <_ZN11Screen2View15handleTickEventEv+0x130>
 800349e:	f007 fb97 	bl	800abd0 <_ZN8touchgfx11Application11getInstanceEv>
		application().gotoScreen1ScreenNoTransition();
		return;
	}

	invalidate();
}
 80034a2:	b003      	add	sp, #12
 80034a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		application().gotoScreen1ScreenNoTransition();
 80034a8:	f7ff b9d6 	b.w	8002858 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        visible = vis;
 80034ac:	f884 0115 	strb.w	r0, [r4, #277]	@ 0x115
 80034b0:	f884 1141 	strb.w	r1, [r4, #321]	@ 0x141
    }
 80034b4:	e790      	b.n	80033d8 <_ZN11Screen2View15handleTickEventEv+0x34>
        visible = vis;
 80034b6:	f884 00e9 	strb.w	r0, [r4, #233]	@ 0xe9
 80034ba:	f884 1115 	strb.w	r1, [r4, #277]	@ 0x115
    }
 80034be:	e78b      	b.n	80033d8 <_ZN11Screen2View15handleTickEventEv+0x34>
        visible = vis;
 80034c0:	f884 00bd 	strb.w	r0, [r4, #189]	@ 0xbd
 80034c4:	f884 10e9 	strb.w	r1, [r4, #233]	@ 0xe9
    }
 80034c8:	e786      	b.n	80033d8 <_ZN11Screen2View15handleTickEventEv+0x34>
        visible = vis;
 80034ca:	f884 0091 	strb.w	r0, [r4, #145]	@ 0x91
 80034ce:	f884 10bd 	strb.w	r1, [r4, #189]	@ 0xbd
    }
 80034d2:	e781      	b.n	80033d8 <_ZN11Screen2View15handleTickEventEv+0x34>
     *
     * @see Container::invalidate
     */
    void invalidate() const
    {
        container.invalidate();
 80034d4:	1d20      	adds	r0, r4, #4
}
 80034d6:	b003      	add	sp, #12
 80034d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80034dc:	f008 bc16 	b.w	800bd0c <_ZNK8touchgfx8Drawable10invalidateEv>
 80034e0:	20001718 	.word	0x20001718
 80034e4:	200013f4 	.word	0x200013f4
 80034e8:	20000018 	.word	0x20000018
 80034ec:	20000014 	.word	0x20000014
 80034f0:	20000016 	.word	0x20000016
 80034f4:	20001714 	.word	0x20001714

080034f8 <ili9341_GetLcdPixelWidth>:
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
}
 80034f8:	20f0      	movs	r0, #240	@ 0xf0
 80034fa:	4770      	bx	lr

080034fc <ili9341_GetLcdPixelHeight>:
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
}
 80034fc:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8003500:	4770      	bx	lr

08003502 <ili9341_DisplayOn>:
  LCD_IO_WriteReg(LCD_Reg);
 8003502:	2029      	movs	r0, #41	@ 0x29
 8003504:	f7fe b9e4 	b.w	80018d0 <LCD_IO_WriteReg>

08003508 <ili9341_DisplayOff>:
 8003508:	2028      	movs	r0, #40	@ 0x28
 800350a:	f7fe b9e1 	b.w	80018d0 <LCD_IO_WriteReg>

0800350e <ili9341_Init>:
{
 800350e:	b508      	push	{r3, lr}
  LCD_IO_Init();
 8003510:	f7fe f9b2 	bl	8001878 <LCD_IO_Init>
  LCD_IO_WriteReg(LCD_Reg);
 8003514:	20ca      	movs	r0, #202	@ 0xca
 8003516:	f7fe f9db 	bl	80018d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800351a:	20c3      	movs	r0, #195	@ 0xc3
 800351c:	f7fe f9bc 	bl	8001898 <LCD_IO_WriteData>
 8003520:	2008      	movs	r0, #8
 8003522:	f7fe f9b9 	bl	8001898 <LCD_IO_WriteData>
 8003526:	2050      	movs	r0, #80	@ 0x50
 8003528:	f7fe f9b6 	bl	8001898 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800352c:	20cf      	movs	r0, #207	@ 0xcf
 800352e:	f7fe f9cf 	bl	80018d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003532:	2000      	movs	r0, #0
 8003534:	f7fe f9b0 	bl	8001898 <LCD_IO_WriteData>
 8003538:	20c1      	movs	r0, #193	@ 0xc1
 800353a:	f7fe f9ad 	bl	8001898 <LCD_IO_WriteData>
 800353e:	2030      	movs	r0, #48	@ 0x30
 8003540:	f7fe f9aa 	bl	8001898 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003544:	20ed      	movs	r0, #237	@ 0xed
 8003546:	f7fe f9c3 	bl	80018d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800354a:	2064      	movs	r0, #100	@ 0x64
 800354c:	f7fe f9a4 	bl	8001898 <LCD_IO_WriteData>
 8003550:	2003      	movs	r0, #3
 8003552:	f7fe f9a1 	bl	8001898 <LCD_IO_WriteData>
 8003556:	2012      	movs	r0, #18
 8003558:	f7fe f99e 	bl	8001898 <LCD_IO_WriteData>
 800355c:	2081      	movs	r0, #129	@ 0x81
 800355e:	f7fe f99b 	bl	8001898 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003562:	20e8      	movs	r0, #232	@ 0xe8
 8003564:	f7fe f9b4 	bl	80018d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003568:	2085      	movs	r0, #133	@ 0x85
 800356a:	f7fe f995 	bl	8001898 <LCD_IO_WriteData>
 800356e:	2000      	movs	r0, #0
 8003570:	f7fe f992 	bl	8001898 <LCD_IO_WriteData>
 8003574:	2078      	movs	r0, #120	@ 0x78
 8003576:	f7fe f98f 	bl	8001898 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800357a:	20cb      	movs	r0, #203	@ 0xcb
 800357c:	f7fe f9a8 	bl	80018d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003580:	2039      	movs	r0, #57	@ 0x39
 8003582:	f7fe f989 	bl	8001898 <LCD_IO_WriteData>
 8003586:	202c      	movs	r0, #44	@ 0x2c
 8003588:	f7fe f986 	bl	8001898 <LCD_IO_WriteData>
 800358c:	2000      	movs	r0, #0
 800358e:	f7fe f983 	bl	8001898 <LCD_IO_WriteData>
 8003592:	2034      	movs	r0, #52	@ 0x34
 8003594:	f7fe f980 	bl	8001898 <LCD_IO_WriteData>
 8003598:	2002      	movs	r0, #2
 800359a:	f7fe f97d 	bl	8001898 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800359e:	20f7      	movs	r0, #247	@ 0xf7
 80035a0:	f7fe f996 	bl	80018d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80035a4:	2020      	movs	r0, #32
 80035a6:	f7fe f977 	bl	8001898 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80035aa:	20ea      	movs	r0, #234	@ 0xea
 80035ac:	f7fe f990 	bl	80018d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80035b0:	2000      	movs	r0, #0
 80035b2:	f7fe f971 	bl	8001898 <LCD_IO_WriteData>
 80035b6:	2000      	movs	r0, #0
 80035b8:	f7fe f96e 	bl	8001898 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80035bc:	20b1      	movs	r0, #177	@ 0xb1
 80035be:	f7fe f987 	bl	80018d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80035c2:	2000      	movs	r0, #0
 80035c4:	f7fe f968 	bl	8001898 <LCD_IO_WriteData>
 80035c8:	201b      	movs	r0, #27
 80035ca:	f7fe f965 	bl	8001898 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80035ce:	20b6      	movs	r0, #182	@ 0xb6
 80035d0:	f7fe f97e 	bl	80018d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80035d4:	200a      	movs	r0, #10
 80035d6:	f7fe f95f 	bl	8001898 <LCD_IO_WriteData>
 80035da:	20a2      	movs	r0, #162	@ 0xa2
 80035dc:	f7fe f95c 	bl	8001898 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80035e0:	20c0      	movs	r0, #192	@ 0xc0
 80035e2:	f7fe f975 	bl	80018d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80035e6:	2010      	movs	r0, #16
 80035e8:	f7fe f956 	bl	8001898 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80035ec:	20c1      	movs	r0, #193	@ 0xc1
 80035ee:	f7fe f96f 	bl	80018d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80035f2:	2010      	movs	r0, #16
 80035f4:	f7fe f950 	bl	8001898 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80035f8:	20c5      	movs	r0, #197	@ 0xc5
 80035fa:	f7fe f969 	bl	80018d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80035fe:	2045      	movs	r0, #69	@ 0x45
 8003600:	f7fe f94a 	bl	8001898 <LCD_IO_WriteData>
 8003604:	2015      	movs	r0, #21
 8003606:	f7fe f947 	bl	8001898 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800360a:	20c7      	movs	r0, #199	@ 0xc7
 800360c:	f7fe f960 	bl	80018d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003610:	2090      	movs	r0, #144	@ 0x90
 8003612:	f7fe f941 	bl	8001898 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003616:	2036      	movs	r0, #54	@ 0x36
 8003618:	f7fe f95a 	bl	80018d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800361c:	20c8      	movs	r0, #200	@ 0xc8
 800361e:	f7fe f93b 	bl	8001898 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003622:	20f2      	movs	r0, #242	@ 0xf2
 8003624:	f7fe f954 	bl	80018d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003628:	2000      	movs	r0, #0
 800362a:	f7fe f935 	bl	8001898 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800362e:	20b0      	movs	r0, #176	@ 0xb0
 8003630:	f7fe f94e 	bl	80018d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003634:	20c2      	movs	r0, #194	@ 0xc2
 8003636:	f7fe f92f 	bl	8001898 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800363a:	20b6      	movs	r0, #182	@ 0xb6
 800363c:	f7fe f948 	bl	80018d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003640:	200a      	movs	r0, #10
 8003642:	f7fe f929 	bl	8001898 <LCD_IO_WriteData>
 8003646:	20a7      	movs	r0, #167	@ 0xa7
 8003648:	f7fe f926 	bl	8001898 <LCD_IO_WriteData>
 800364c:	2027      	movs	r0, #39	@ 0x27
 800364e:	f7fe f923 	bl	8001898 <LCD_IO_WriteData>
 8003652:	2004      	movs	r0, #4
 8003654:	f7fe f920 	bl	8001898 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003658:	202a      	movs	r0, #42	@ 0x2a
 800365a:	f7fe f939 	bl	80018d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800365e:	2000      	movs	r0, #0
 8003660:	f7fe f91a 	bl	8001898 <LCD_IO_WriteData>
 8003664:	2000      	movs	r0, #0
 8003666:	f7fe f917 	bl	8001898 <LCD_IO_WriteData>
 800366a:	2000      	movs	r0, #0
 800366c:	f7fe f914 	bl	8001898 <LCD_IO_WriteData>
 8003670:	20ef      	movs	r0, #239	@ 0xef
 8003672:	f7fe f911 	bl	8001898 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003676:	202b      	movs	r0, #43	@ 0x2b
 8003678:	f7fe f92a 	bl	80018d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800367c:	2000      	movs	r0, #0
 800367e:	f7fe f90b 	bl	8001898 <LCD_IO_WriteData>
 8003682:	2000      	movs	r0, #0
 8003684:	f7fe f908 	bl	8001898 <LCD_IO_WriteData>
 8003688:	2001      	movs	r0, #1
 800368a:	f7fe f905 	bl	8001898 <LCD_IO_WriteData>
 800368e:	203f      	movs	r0, #63	@ 0x3f
 8003690:	f7fe f902 	bl	8001898 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003694:	20f6      	movs	r0, #246	@ 0xf6
 8003696:	f7fe f91b 	bl	80018d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800369a:	2001      	movs	r0, #1
 800369c:	f7fe f8fc 	bl	8001898 <LCD_IO_WriteData>
 80036a0:	2000      	movs	r0, #0
 80036a2:	f7fe f8f9 	bl	8001898 <LCD_IO_WriteData>
 80036a6:	2006      	movs	r0, #6
 80036a8:	f7fe f8f6 	bl	8001898 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80036ac:	202c      	movs	r0, #44	@ 0x2c
 80036ae:	f7fe f90f 	bl	80018d0 <LCD_IO_WriteReg>
  LCD_Delay(200);
 80036b2:	20c8      	movs	r0, #200	@ 0xc8
 80036b4:	f7fe f95a 	bl	800196c <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 80036b8:	2026      	movs	r0, #38	@ 0x26
 80036ba:	f7fe f909 	bl	80018d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80036be:	2001      	movs	r0, #1
 80036c0:	f7fe f8ea 	bl	8001898 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80036c4:	20e0      	movs	r0, #224	@ 0xe0
 80036c6:	f7fe f903 	bl	80018d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80036ca:	200f      	movs	r0, #15
 80036cc:	f7fe f8e4 	bl	8001898 <LCD_IO_WriteData>
 80036d0:	2029      	movs	r0, #41	@ 0x29
 80036d2:	f7fe f8e1 	bl	8001898 <LCD_IO_WriteData>
 80036d6:	2024      	movs	r0, #36	@ 0x24
 80036d8:	f7fe f8de 	bl	8001898 <LCD_IO_WriteData>
 80036dc:	200c      	movs	r0, #12
 80036de:	f7fe f8db 	bl	8001898 <LCD_IO_WriteData>
 80036e2:	200e      	movs	r0, #14
 80036e4:	f7fe f8d8 	bl	8001898 <LCD_IO_WriteData>
 80036e8:	2009      	movs	r0, #9
 80036ea:	f7fe f8d5 	bl	8001898 <LCD_IO_WriteData>
 80036ee:	204e      	movs	r0, #78	@ 0x4e
 80036f0:	f7fe f8d2 	bl	8001898 <LCD_IO_WriteData>
 80036f4:	2078      	movs	r0, #120	@ 0x78
 80036f6:	f7fe f8cf 	bl	8001898 <LCD_IO_WriteData>
 80036fa:	203c      	movs	r0, #60	@ 0x3c
 80036fc:	f7fe f8cc 	bl	8001898 <LCD_IO_WriteData>
 8003700:	2009      	movs	r0, #9
 8003702:	f7fe f8c9 	bl	8001898 <LCD_IO_WriteData>
 8003706:	2013      	movs	r0, #19
 8003708:	f7fe f8c6 	bl	8001898 <LCD_IO_WriteData>
 800370c:	2005      	movs	r0, #5
 800370e:	f7fe f8c3 	bl	8001898 <LCD_IO_WriteData>
 8003712:	2017      	movs	r0, #23
 8003714:	f7fe f8c0 	bl	8001898 <LCD_IO_WriteData>
 8003718:	2011      	movs	r0, #17
 800371a:	f7fe f8bd 	bl	8001898 <LCD_IO_WriteData>
 800371e:	2000      	movs	r0, #0
 8003720:	f7fe f8ba 	bl	8001898 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003724:	20e1      	movs	r0, #225	@ 0xe1
 8003726:	f7fe f8d3 	bl	80018d0 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800372a:	2000      	movs	r0, #0
 800372c:	f7fe f8b4 	bl	8001898 <LCD_IO_WriteData>
 8003730:	2016      	movs	r0, #22
 8003732:	f7fe f8b1 	bl	8001898 <LCD_IO_WriteData>
 8003736:	201b      	movs	r0, #27
 8003738:	f7fe f8ae 	bl	8001898 <LCD_IO_WriteData>
 800373c:	2004      	movs	r0, #4
 800373e:	f7fe f8ab 	bl	8001898 <LCD_IO_WriteData>
 8003742:	2011      	movs	r0, #17
 8003744:	f7fe f8a8 	bl	8001898 <LCD_IO_WriteData>
 8003748:	2007      	movs	r0, #7
 800374a:	f7fe f8a5 	bl	8001898 <LCD_IO_WriteData>
 800374e:	2031      	movs	r0, #49	@ 0x31
 8003750:	f7fe f8a2 	bl	8001898 <LCD_IO_WriteData>
 8003754:	2033      	movs	r0, #51	@ 0x33
 8003756:	f7fe f89f 	bl	8001898 <LCD_IO_WriteData>
 800375a:	2042      	movs	r0, #66	@ 0x42
 800375c:	f7fe f89c 	bl	8001898 <LCD_IO_WriteData>
 8003760:	2005      	movs	r0, #5
 8003762:	f7fe f899 	bl	8001898 <LCD_IO_WriteData>
 8003766:	200c      	movs	r0, #12
 8003768:	f7fe f896 	bl	8001898 <LCD_IO_WriteData>
 800376c:	200a      	movs	r0, #10
 800376e:	f7fe f893 	bl	8001898 <LCD_IO_WriteData>
 8003772:	2028      	movs	r0, #40	@ 0x28
 8003774:	f7fe f890 	bl	8001898 <LCD_IO_WriteData>
 8003778:	202f      	movs	r0, #47	@ 0x2f
 800377a:	f7fe f88d 	bl	8001898 <LCD_IO_WriteData>
 800377e:	200f      	movs	r0, #15
 8003780:	f7fe f88a 	bl	8001898 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003784:	2011      	movs	r0, #17
 8003786:	f7fe f8a3 	bl	80018d0 <LCD_IO_WriteReg>
  LCD_Delay(200);
 800378a:	20c8      	movs	r0, #200	@ 0xc8
 800378c:	f7fe f8ee 	bl	800196c <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 8003790:	2029      	movs	r0, #41	@ 0x29
 8003792:	f7fe f89d 	bl	80018d0 <LCD_IO_WriteReg>
}
 8003796:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LCD_IO_WriteReg(LCD_Reg);
 800379a:	202c      	movs	r0, #44	@ 0x2c
 800379c:	f7fe b898 	b.w	80018d0 <LCD_IO_WriteReg>

080037a0 <ili9341_ReadID>:
{
 80037a0:	b508      	push	{r3, lr}
  LCD_IO_Init();
 80037a2:	f7fe f869 	bl	8001878 <LCD_IO_Init>
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80037a6:	2103      	movs	r1, #3
 80037a8:	20d3      	movs	r0, #211	@ 0xd3
 80037aa:	f7fe f8ad 	bl	8001908 <LCD_IO_ReadData>
}
 80037ae:	b280      	uxth	r0, r0
 80037b0:	bd08      	pop	{r3, pc}

080037b2 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 80037b2:	b510      	push	{r4, lr}
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 80037b4:	b2c4      	uxtb	r4, r0
 80037b6:	2202      	movs	r2, #2
 80037b8:	2103      	movs	r1, #3
 80037ba:	4620      	mov	r0, r4
 80037bc:	f7fe f812 	bl	80017e4 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 80037c0:	200a      	movs	r0, #10
 80037c2:	f7fe f857 	bl	8001874 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 80037c6:	4620      	mov	r0, r4
 80037c8:	2200      	movs	r2, #0
 80037ca:	2103      	movs	r1, #3
 80037cc:	f7fe f80a 	bl	80017e4 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
}
 80037d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Delay(2); 
 80037d4:	2002      	movs	r0, #2
 80037d6:	f7fe b84d 	b.w	8001874 <IOE_Delay>

080037da <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 80037da:	b538      	push	{r3, r4, r5, lr}
 80037dc:	4604      	mov	r4, r0
  /* Initialize IO BUS layer */
  IOE_Init(); 
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80037de:	b2e4      	uxtb	r4, r4
  IOE_Init(); 
 80037e0:	f7fd fffe 	bl	80017e0 <IOE_Init>
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80037e4:	2100      	movs	r1, #0
 80037e6:	4620      	mov	r0, r4
 80037e8:	f7fe f814 	bl	8001814 <IOE_Read>
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 80037ec:	2101      	movs	r1, #1
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80037ee:	4605      	mov	r5, r0
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 80037f0:	4620      	mov	r0, r4
 80037f2:	f7fe f80f 	bl	8001814 <IOE_Read>
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80037f6:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
}
 80037fa:	b280      	uxth	r0, r0
 80037fc:	bd38      	pop	{r3, r4, r5, pc}

080037fe <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 80037fe:	b510      	push	{r4, lr}
  uint8_t state;
  uint8_t ret = 0;
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8003800:	b2c4      	uxtb	r4, r0
 8003802:	2140      	movs	r1, #64	@ 0x40
 8003804:	4620      	mov	r0, r4
 8003806:	f7fe f805 	bl	8001814 <IOE_Read>
  
  if(state > 0)
 800380a:	0603      	lsls	r3, r0, #24
 800380c:	d507      	bpl.n	800381e <stmpe811_TS_DetectTouch+0x20>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 800380e:	214c      	movs	r1, #76	@ 0x4c
 8003810:	4620      	mov	r0, r4
 8003812:	f7fd ffff 	bl	8001814 <IOE_Read>
 8003816:	3800      	subs	r0, #0
 8003818:	bf18      	it	ne
 800381a:	2001      	movne	r0, #1
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
  }
  
  return ret;
}
 800381c:	bd10      	pop	{r4, pc}
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800381e:	2201      	movs	r2, #1
 8003820:	214b      	movs	r1, #75	@ 0x4b
 8003822:	4620      	mov	r0, r4
 8003824:	f7fd ffde 	bl	80017e4 <IOE_Write>
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8003828:	4620      	mov	r0, r4
 800382a:	2200      	movs	r2, #0
 800382c:	214b      	movs	r1, #75	@ 0x4b
 800382e:	f7fd ffd9 	bl	80017e4 <IOE_Write>
  uint8_t ret = 0;
 8003832:	2000      	movs	r0, #0
 8003834:	e7f2      	b.n	800381c <stmpe811_TS_DetectTouch+0x1e>

08003836 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8003836:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8003838:	2304      	movs	r3, #4
 800383a:	b2c4      	uxtb	r4, r0
{
 800383c:	460e      	mov	r6, r1
 800383e:	4615      	mov	r5, r2
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8003840:	21d7      	movs	r1, #215	@ 0xd7
 8003842:	eb0d 0203 	add.w	r2, sp, r3
 8003846:	4620      	mov	r0, r4
 8003848:	f7fd fffe 	bl	8001848 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 800384c:	9b01      	ldr	r3, [sp, #4]
 800384e:	ba1b      	rev	r3, r3
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8003850:	0d1a      	lsrs	r2, r3, #20
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8003852:	f3c3 230b 	ubfx	r3, r3, #8, #12
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8003856:	8032      	strh	r2, [r6, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8003858:	4620      	mov	r0, r4
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 800385a:	802b      	strh	r3, [r5, #0]
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800385c:	2201      	movs	r2, #1
 800385e:	214b      	movs	r1, #75	@ 0x4b
 8003860:	f7fd ffc0 	bl	80017e4 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8003864:	2200      	movs	r2, #0
 8003866:	214b      	movs	r1, #75	@ 0x4b
 8003868:	4620      	mov	r0, r4
 800386a:	f7fd ffbb 	bl	80017e4 <IOE_Write>
}
 800386e:	b002      	add	sp, #8
 8003870:	bd70      	pop	{r4, r5, r6, pc}
	...

08003874 <stmpe811_Init>:
{
 8003874:	b510      	push	{r4, lr}
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
  {
    if(stmpe811[idx] == DeviceAddr)
 8003876:	4a0a      	ldr	r2, [pc, #40]	@ (80038a0 <stmpe811_Init+0x2c>)
 8003878:	7813      	ldrb	r3, [r2, #0]
 800387a:	4298      	cmp	r0, r3
{
 800387c:	4604      	mov	r4, r0
    if(stmpe811[idx] == DeviceAddr)
 800387e:	d00d      	beq.n	800389c <stmpe811_Init+0x28>
 8003880:	7851      	ldrb	r1, [r2, #1]
 8003882:	4288      	cmp	r0, r1
 8003884:	d00a      	beq.n	800389c <stmpe811_Init+0x28>
 8003886:	b10b      	cbz	r3, 800388c <stmpe811_Init+0x18>
 8003888:	b941      	cbnz	r1, 800389c <stmpe811_Init+0x28>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800388a:	2301      	movs	r3, #1
      stmpe811[empty] = DeviceAddr;
 800388c:	54d4      	strb	r4, [r2, r3]
      IOE_Init(); 
 800388e:	f7fd ffa7 	bl	80017e0 <IOE_Init>
      stmpe811_Reset(DeviceAddr);
 8003892:	4620      	mov	r0, r4
}
 8003894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      stmpe811_Reset(DeviceAddr);
 8003898:	f7ff bf8b 	b.w	80037b2 <stmpe811_Reset>
}
 800389c:	bd10      	pop	{r4, pc}
 800389e:	bf00      	nop
 80038a0:	2000171c 	.word	0x2000171c

080038a4 <stmpe811_EnableGlobalIT>:
{
 80038a4:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80038a6:	b2c4      	uxtb	r4, r0
 80038a8:	2109      	movs	r1, #9
 80038aa:	4620      	mov	r0, r4
 80038ac:	f7fd ffb2 	bl	8001814 <IOE_Read>
  tmp |= (uint8_t)STMPE811_GIT_EN;
 80038b0:	f040 0201 	orr.w	r2, r0, #1
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 80038b4:	b2d2      	uxtb	r2, r2
 80038b6:	4620      	mov	r0, r4
 80038b8:	2109      	movs	r1, #9
}
 80038ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 80038be:	f7fd bf91 	b.w	80017e4 <IOE_Write>

080038c2 <stmpe811_DisableGlobalIT>:
{
 80038c2:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80038c4:	b2c4      	uxtb	r4, r0
 80038c6:	2109      	movs	r1, #9
 80038c8:	4620      	mov	r0, r4
 80038ca:	f7fd ffa3 	bl	8001814 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 80038ce:	2109      	movs	r1, #9
 80038d0:	f000 02fe 	and.w	r2, r0, #254	@ 0xfe
 80038d4:	4620      	mov	r0, r4
}
 80038d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 80038da:	f7fd bf83 	b.w	80017e4 <IOE_Write>

080038de <stmpe811_EnableITSource>:
{
 80038de:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80038e0:	b2c4      	uxtb	r4, r0
{
 80038e2:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80038e4:	4620      	mov	r0, r4
 80038e6:	210a      	movs	r1, #10
 80038e8:	f7fd ff94 	bl	8001814 <IOE_Read>
  tmp |= Source; 
 80038ec:	ea40 0205 	orr.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80038f0:	b2d2      	uxtb	r2, r2
 80038f2:	4620      	mov	r0, r4
 80038f4:	210a      	movs	r1, #10
}
 80038f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80038fa:	f7fd bf73 	b.w	80017e4 <IOE_Write>

080038fe <stmpe811_TS_EnableIT>:
{
 80038fe:	b510      	push	{r4, lr}
 8003900:	4604      	mov	r4, r0
  IOE_ITConfig();
 8003902:	f7fd ff6e 	bl	80017e2 <IOE_ITConfig>
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8003906:	4620      	mov	r0, r4
 8003908:	211f      	movs	r1, #31
 800390a:	f7ff ffe8 	bl	80038de <stmpe811_EnableITSource>
  stmpe811_EnableGlobalIT(DeviceAddr);
 800390e:	4620      	mov	r0, r4
}
 8003910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stmpe811_EnableGlobalIT(DeviceAddr);
 8003914:	f7ff bfc6 	b.w	80038a4 <stmpe811_EnableGlobalIT>

08003918 <stmpe811_DisableITSource>:
{
 8003918:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 800391a:	b2c4      	uxtb	r4, r0
{
 800391c:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 800391e:	4620      	mov	r0, r4
 8003920:	210a      	movs	r1, #10
 8003922:	f7fd ff77 	bl	8001814 <IOE_Read>
  tmp &= ~Source; 
 8003926:	ea20 0205 	bic.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 800392a:	b2d2      	uxtb	r2, r2
 800392c:	4620      	mov	r0, r4
 800392e:	210a      	movs	r1, #10
}
 8003930:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8003934:	f7fd bf56 	b.w	80017e4 <IOE_Write>

08003938 <stmpe811_TS_DisableIT>:
{
 8003938:	b510      	push	{r4, lr}
 800393a:	4604      	mov	r4, r0
  stmpe811_DisableGlobalIT(DeviceAddr);
 800393c:	f7ff ffc1 	bl	80038c2 <stmpe811_DisableGlobalIT>
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8003940:	4620      	mov	r0, r4
 8003942:	211f      	movs	r1, #31
}
 8003944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8003948:	f7ff bfe6 	b.w	8003918 <stmpe811_DisableITSource>

0800394c <stmpe811_ReadGITStatus>:
{
 800394c:	b510      	push	{r4, lr}
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 800394e:	b2c0      	uxtb	r0, r0
{
 8003950:	460c      	mov	r4, r1
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8003952:	210b      	movs	r1, #11
 8003954:	f7fd ff5e 	bl	8001814 <IOE_Read>
}
 8003958:	4020      	ands	r0, r4
 800395a:	bd10      	pop	{r4, pc}

0800395c <stmpe811_TS_ITStatus>:
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 800395c:	211f      	movs	r1, #31
 800395e:	f7ff bff5 	b.w	800394c <stmpe811_ReadGITStatus>

08003962 <stmpe811_ClearGlobalIT>:
{
 8003962:	460a      	mov	r2, r1
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8003964:	b2c0      	uxtb	r0, r0
 8003966:	210b      	movs	r1, #11
 8003968:	f7fd bf3c 	b.w	80017e4 <IOE_Write>

0800396c <stmpe811_TS_ClearIT>:
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 800396c:	211f      	movs	r1, #31
 800396e:	f7ff bff8 	b.w	8003962 <stmpe811_ClearGlobalIT>

08003972 <stmpe811_IO_EnableAF>:
{
 8003972:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8003974:	b2c4      	uxtb	r4, r0
{
 8003976:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8003978:	4620      	mov	r0, r4
 800397a:	2117      	movs	r1, #23
 800397c:	f7fd ff4a 	bl	8001814 <IOE_Read>
  tmp &= ~(uint8_t)IO_Pin;   
 8003980:	ea20 0205 	bic.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8003984:	b2d2      	uxtb	r2, r2
 8003986:	4620      	mov	r0, r4
 8003988:	2117      	movs	r1, #23
}
 800398a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 800398e:	f7fd bf29 	b.w	80017e4 <IOE_Write>

08003992 <stmpe811_TS_Start>:
{
 8003992:	b570      	push	{r4, r5, r6, lr}
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8003994:	b2c4      	uxtb	r4, r0
{
 8003996:	4606      	mov	r6, r0
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8003998:	2104      	movs	r1, #4
 800399a:	4620      	mov	r0, r4
 800399c:	f7fd ff3a 	bl	8001814 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80039a0:	2104      	movs	r1, #4
 80039a2:	f000 02fb 	and.w	r2, r0, #251	@ 0xfb
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 80039a6:	4605      	mov	r5, r0
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80039a8:	4620      	mov	r0, r4
 80039aa:	f7fd ff1b 	bl	80017e4 <IOE_Write>
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 80039ae:	4630      	mov	r0, r6
 80039b0:	21f0      	movs	r1, #240	@ 0xf0
 80039b2:	f7ff ffde 	bl	8003972 <stmpe811_IO_EnableAF>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80039b6:	f005 02f8 	and.w	r2, r5, #248	@ 0xf8
 80039ba:	4620      	mov	r0, r4
 80039bc:	2104      	movs	r1, #4
 80039be:	f7fd ff11 	bl	80017e4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 80039c2:	2249      	movs	r2, #73	@ 0x49
 80039c4:	2120      	movs	r1, #32
 80039c6:	4620      	mov	r0, r4
 80039c8:	f7fd ff0c 	bl	80017e4 <IOE_Write>
  IOE_Delay(2); 
 80039cc:	2002      	movs	r0, #2
 80039ce:	f7fd ff51 	bl	8001874 <IOE_Delay>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 80039d2:	4620      	mov	r0, r4
 80039d4:	2201      	movs	r2, #1
 80039d6:	2121      	movs	r1, #33	@ 0x21
 80039d8:	f7fd ff04 	bl	80017e4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 80039dc:	4620      	mov	r0, r4
 80039de:	229a      	movs	r2, #154	@ 0x9a
 80039e0:	2141      	movs	r1, #65	@ 0x41
 80039e2:	f7fd feff 	bl	80017e4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 80039e6:	4620      	mov	r0, r4
 80039e8:	2201      	movs	r2, #1
 80039ea:	214a      	movs	r1, #74	@ 0x4a
 80039ec:	f7fd fefa 	bl	80017e4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80039f0:	4620      	mov	r0, r4
 80039f2:	2201      	movs	r2, #1
 80039f4:	214b      	movs	r1, #75	@ 0x4b
 80039f6:	f7fd fef5 	bl	80017e4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80039fa:	4620      	mov	r0, r4
 80039fc:	2200      	movs	r2, #0
 80039fe:	214b      	movs	r1, #75	@ 0x4b
 8003a00:	f7fd fef0 	bl	80017e4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8003a04:	4620      	mov	r0, r4
 8003a06:	2201      	movs	r2, #1
 8003a08:	2156      	movs	r1, #86	@ 0x56
 8003a0a:	f7fd feeb 	bl	80017e4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8003a0e:	4620      	mov	r0, r4
 8003a10:	2201      	movs	r2, #1
 8003a12:	2158      	movs	r1, #88	@ 0x58
 8003a14:	f7fd fee6 	bl	80017e4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8003a18:	4620      	mov	r0, r4
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	2140      	movs	r1, #64	@ 0x40
 8003a1e:	f7fd fee1 	bl	80017e4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8003a22:	4620      	mov	r0, r4
 8003a24:	22ff      	movs	r2, #255	@ 0xff
 8003a26:	210b      	movs	r1, #11
 8003a28:	f7fd fedc 	bl	80017e4 <IOE_Write>
}
 8003a2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  IOE_Delay(2); 
 8003a30:	2002      	movs	r0, #2
 8003a32:	f7fd bf1f 	b.w	8001874 <IOE_Delay>
	...

08003a38 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a38:	4b05      	ldr	r3, [pc, #20]	@ (8003a50 <SystemInit+0x18>)
 8003a3a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003a3e:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 8003a42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a46:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003a4a:	609a      	str	r2, [r3, #8]
#endif
}
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	e000ed00 	.word	0xe000ed00

08003a54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a54:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a56:	4b0b      	ldr	r3, [pc, #44]	@ (8003a84 <HAL_Init+0x30>)
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a5e:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a66:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a6e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a70:	2003      	movs	r0, #3
 8003a72:	f000 fa47 	bl	8003f04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a76:	2000      	movs	r0, #0
 8003a78:	f7fe f9ba 	bl	8001df0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a7c:	f7fd ff84 	bl	8001988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8003a80:	2000      	movs	r0, #0
 8003a82:	bd08      	pop	{r3, pc}
 8003a84:	40023c00 	.word	0x40023c00

08003a88 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003a88:	4a03      	ldr	r2, [pc, #12]	@ (8003a98 <HAL_IncTick+0x10>)
 8003a8a:	4b04      	ldr	r3, [pc, #16]	@ (8003a9c <HAL_IncTick+0x14>)
 8003a8c:	6811      	ldr	r1, [r2, #0]
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	440b      	add	r3, r1
 8003a92:	6013      	str	r3, [r2, #0]
}
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	20001720 	.word	0x20001720
 8003a9c:	20000080 	.word	0x20000080

08003aa0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003aa0:	4b01      	ldr	r3, [pc, #4]	@ (8003aa8 <HAL_GetTick+0x8>)
 8003aa2:	6818      	ldr	r0, [r3, #0]
}
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	20001720 	.word	0x20001720

08003aac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003aac:	b538      	push	{r3, r4, r5, lr}
 8003aae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003ab0:	f7ff fff6 	bl	8003aa0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ab4:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8003ab6:	bf1c      	itt	ne
 8003ab8:	4b05      	ldrne	r3, [pc, #20]	@ (8003ad0 <HAL_Delay+0x24>)
 8003aba:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8003abc:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8003abe:	bf18      	it	ne
 8003ac0:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ac2:	f7ff ffed 	bl	8003aa0 <HAL_GetTick>
 8003ac6:	1b43      	subs	r3, r0, r5
 8003ac8:	42a3      	cmp	r3, r4
 8003aca:	d3fa      	bcc.n	8003ac2 <HAL_Delay+0x16>
  {
  }
}
 8003acc:	bd38      	pop	{r3, r4, r5, pc}
 8003ace:	bf00      	nop
 8003ad0:	20000080 	.word	0x20000080

08003ad4 <HAL_ADC_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */
}
 8003ad4:	4770      	bx	lr
	...

08003ad8 <HAL_ADC_Init>:
{
 8003ad8:	b538      	push	{r3, r4, r5, lr}
  if (hadc == NULL)
 8003ada:	4604      	mov	r4, r0
 8003adc:	2800      	cmp	r0, #0
 8003ade:	f000 809b 	beq.w	8003c18 <HAL_ADC_Init+0x140>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ae2:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8003ae4:	b925      	cbnz	r5, 8003af0 <HAL_ADC_Init+0x18>
    HAL_ADC_MspInit(hadc);
 8003ae6:	f7ff fff5 	bl	8003ad4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003aea:	6465      	str	r5, [r4, #68]	@ 0x44
    hadc->Lock = HAL_UNLOCKED;
 8003aec:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003af0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003af2:	06db      	lsls	r3, r3, #27
 8003af4:	f100 808e 	bmi.w	8003c14 <HAL_ADC_Init+0x13c>
    ADC_STATE_CLR_SET(hadc->State,
 8003af8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003afa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003afe:	f023 0302 	bic.w	r3, r3, #2
 8003b02:	f043 0302 	orr.w	r3, r3, #2
 8003b06:	6423      	str	r3, [r4, #64]	@ 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003b08:	4b44      	ldr	r3, [pc, #272]	@ (8003c1c <HAL_ADC_Init+0x144>)
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8003b10:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	6861      	ldr	r1, [r4, #4]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003b1a:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003b1c:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003b2c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003b2e:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003b30:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003b32:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003b36:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003b3e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003b40:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003b42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003b48:	689a      	ldr	r2, [r3, #8]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b4e:	4934      	ldr	r1, [pc, #208]	@ (8003c20 <HAL_ADC_Init+0x148>)
 8003b50:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003b52:	428a      	cmp	r2, r1
 8003b54:	d052      	beq.n	8003bfc <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b56:	6899      	ldr	r1, [r3, #8]
 8003b58:	f021 6170 	bic.w	r1, r1, #251658240	@ 0xf000000
 8003b5c:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003b5e:	6899      	ldr	r1, [r3, #8]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b64:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003b66:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b68:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003b6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b72:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003b74:	689a      	ldr	r2, [r3, #8]
 8003b76:	f022 0202 	bic.w	r2, r2, #2
 8003b7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b7c:	689a      	ldr	r2, [r3, #8]
 8003b7e:	7e21      	ldrb	r1, [r4, #24]
 8003b80:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8003b84:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b86:	f894 2020 	ldrb.w	r2, [r4, #32]
 8003b8a:	2a00      	cmp	r2, #0
 8003b8c:	d03e      	beq.n	8003c0c <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b8e:	685a      	ldr	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b90:	6a61      	ldr	r1, [r4, #36]	@ 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b96:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003b9e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003ba0:	685a      	ldr	r2, [r3, #4]
 8003ba2:	3901      	subs	r1, #1
 8003ba4:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003ba8:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003baa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003bac:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003bae:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003bb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003bb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bb6:	3901      	subs	r1, #1
 8003bb8:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8003bbc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003bc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 8003bcc:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8003bd0:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003bd2:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003bd4:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003bd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003bdc:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8003bde:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003be0:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8003be4:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8003be6:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8003be8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003bea:	f023 0303 	bic.w	r3, r3, #3
 8003bee:	f043 0301 	orr.w	r3, r3, #1
 8003bf2:	6423      	str	r3, [r4, #64]	@ 0x40
  __HAL_UNLOCK(hadc);
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003bfa:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003bfc:	689a      	ldr	r2, [r3, #8]
 8003bfe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c02:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c04:	689a      	ldr	r2, [r3, #8]
 8003c06:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003c0a:	e7b2      	b.n	8003b72 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c12:	e7c9      	b.n	8003ba8 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 8003c14:	2001      	movs	r0, #1
 8003c16:	e7ed      	b.n	8003bf4 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8003c18:	2001      	movs	r0, #1
 8003c1a:	e7ee      	b.n	8003bfa <HAL_ADC_Init+0x122>
 8003c1c:	40012300 	.word	0x40012300
 8003c20:	0f000001 	.word	0x0f000001

08003c24 <HAL_ADC_Start>:
{
 8003c24:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8003c2a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d069      	beq.n	8003d06 <HAL_ADC_Start+0xe2>
 8003c32:	2301      	movs	r3, #1
 8003c34:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003c38:	6803      	ldr	r3, [r0, #0]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	07d2      	lsls	r2, r2, #31
 8003c3e:	d50b      	bpl.n	8003c58 <HAL_ADC_Start+0x34>
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003c40:	689a      	ldr	r2, [r3, #8]
 8003c42:	07d1      	lsls	r1, r2, #31
 8003c44:	d41a      	bmi.n	8003c7c <HAL_ADC_Start+0x58>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c46:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003c48:	f043 0310 	orr.w	r3, r3, #16
 8003c4c:	6403      	str	r3, [r0, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c4e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8003c50:	f043 0301 	orr.w	r3, r3, #1
 8003c54:	6443      	str	r3, [r0, #68]	@ 0x44
 8003c56:	e04c      	b.n	8003cf2 <HAL_ADC_Start+0xce>
    __HAL_ADC_ENABLE(hadc);
 8003c58:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003c5a:	492c      	ldr	r1, [pc, #176]	@ (8003d0c <HAL_ADC_Start+0xe8>)
    __HAL_ADC_ENABLE(hadc);
 8003c5c:	f042 0201 	orr.w	r2, r2, #1
 8003c60:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003c62:	4a2b      	ldr	r2, [pc, #172]	@ (8003d10 <HAL_ADC_Start+0xec>)
 8003c64:	6812      	ldr	r2, [r2, #0]
 8003c66:	fbb2 f2f1 	udiv	r2, r2, r1
 8003c6a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 8003c6e:	9201      	str	r2, [sp, #4]
    while (counter != 0U)
 8003c70:	9a01      	ldr	r2, [sp, #4]
 8003c72:	2a00      	cmp	r2, #0
 8003c74:	d0e4      	beq.n	8003c40 <HAL_ADC_Start+0x1c>
      counter--;
 8003c76:	9a01      	ldr	r2, [sp, #4]
 8003c78:	3a01      	subs	r2, #1
 8003c7a:	e7f8      	b.n	8003c6e <HAL_ADC_Start+0x4a>
    ADC_STATE_CLR_SET(hadc->State,
 8003c7c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8003c7e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c82:	f022 0201 	bic.w	r2, r2, #1
 8003c86:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c8a:	6402      	str	r2, [r0, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	0552      	lsls	r2, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003c90:	bf41      	itttt	mi
 8003c92:	6c02      	ldrmi	r2, [r0, #64]	@ 0x40
 8003c94:	f422 5240 	bicmi.w	r2, r2, #12288	@ 0x3000
 8003c98:	f442 5280 	orrmi.w	r2, r2, #4096	@ 0x1000
 8003c9c:	6402      	strmi	r2, [r0, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c9e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8003ca0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003ca4:	bf1c      	itt	ne
 8003ca6:	6c42      	ldrne	r2, [r0, #68]	@ 0x44
 8003ca8:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8003cac:	6442      	str	r2, [r0, #68]	@ 0x44
    __HAL_UNLOCK(hadc);
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003cb4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003cb8:	601a      	str	r2, [r3, #0]
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003cba:	4a16      	ldr	r2, [pc, #88]	@ (8003d14 <HAL_ADC_Start+0xf0>)
 8003cbc:	6851      	ldr	r1, [r2, #4]
 8003cbe:	f011 0f1f 	tst.w	r1, #31
 8003cc2:	4915      	ldr	r1, [pc, #84]	@ (8003d18 <HAL_ADC_Start+0xf4>)
 8003cc4:	d11c      	bne.n	8003d00 <HAL_ADC_Start+0xdc>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003cc6:	428b      	cmp	r3, r1
 8003cc8:	d007      	beq.n	8003cda <HAL_ADC_Start+0xb6>
 8003cca:	f501 7180 	add.w	r1, r1, #256	@ 0x100
 8003cce:	428b      	cmp	r3, r1
 8003cd0:	d10c      	bne.n	8003cec <HAL_ADC_Start+0xc8>
 8003cd2:	6852      	ldr	r2, [r2, #4]
 8003cd4:	f012 0f1f 	tst.w	r2, #31
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003cd8:	d10b      	bne.n	8003cf2 <HAL_ADC_Start+0xce>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8003ce0:	d107      	bne.n	8003cf2 <HAL_ADC_Start+0xce>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003ce8:	609a      	str	r2, [r3, #8]
 8003cea:	e002      	b.n	8003cf2 <HAL_ADC_Start+0xce>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003cec:	490b      	ldr	r1, [pc, #44]	@ (8003d1c <HAL_ADC_Start+0xf8>)
 8003cee:	428b      	cmp	r3, r1
 8003cf0:	d002      	beq.n	8003cf8 <HAL_ADC_Start+0xd4>
  return HAL_OK;
 8003cf2:	2000      	movs	r0, #0
}
 8003cf4:	b002      	add	sp, #8
 8003cf6:	4770      	bx	lr
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003cf8:	6852      	ldr	r2, [r2, #4]
 8003cfa:	f012 0f10 	tst.w	r2, #16
 8003cfe:	e7eb      	b.n	8003cd8 <HAL_ADC_Start+0xb4>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003d00:	428b      	cmp	r3, r1
 8003d02:	d1f6      	bne.n	8003cf2 <HAL_ADC_Start+0xce>
 8003d04:	e7e9      	b.n	8003cda <HAL_ADC_Start+0xb6>
  __HAL_LOCK(hadc);
 8003d06:	2002      	movs	r0, #2
 8003d08:	e7f4      	b.n	8003cf4 <HAL_ADC_Start+0xd0>
 8003d0a:	bf00      	nop
 8003d0c:	000f4240 	.word	0x000f4240
 8003d10:	2000007c 	.word	0x2000007c
 8003d14:	40012300 	.word	0x40012300
 8003d18:	40012000 	.word	0x40012000
 8003d1c:	40012200 	.word	0x40012200

08003d20 <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003d20:	6803      	ldr	r3, [r0, #0]
 8003d22:	689a      	ldr	r2, [r3, #8]
 8003d24:	0552      	lsls	r2, r2, #21
{
 8003d26:	b570      	push	{r4, r5, r6, lr}
 8003d28:	4604      	mov	r4, r0
 8003d2a:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003d2c:	d50b      	bpl.n	8003d46 <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003d2e:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003d30:	05de      	lsls	r6, r3, #23
 8003d32:	d508      	bpl.n	8003d46 <HAL_ADC_PollForConversion+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d34:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003d36:	f043 0320 	orr.w	r3, r3, #32
 8003d3a:	6403      	str	r3, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hadc);
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8003d42:	2001      	movs	r0, #1
}
 8003d44:	bd70      	pop	{r4, r5, r6, pc}
  tickstart = HAL_GetTick();
 8003d46:	f7ff feab 	bl	8003aa0 <HAL_GetTick>
 8003d4a:	4606      	mov	r6, r0
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003d4c:	6823      	ldr	r3, [r4, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	0791      	lsls	r1, r2, #30
 8003d52:	d50c      	bpl.n	8003d6e <HAL_ADC_PollForConversion+0x4e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003d54:	f06f 0212 	mvn.w	r2, #18
 8003d58:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d5a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003d5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d60:	6422      	str	r2, [r4, #64]	@ 0x40
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d62:	689a      	ldr	r2, [r3, #8]
 8003d64:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8003d68:	d017      	beq.n	8003d9a <HAL_ADC_PollForConversion+0x7a>
  return HAL_OK;
 8003d6a:	2000      	movs	r0, #0
 8003d6c:	e7ea      	b.n	8003d44 <HAL_ADC_PollForConversion+0x24>
    if (Timeout != HAL_MAX_DELAY)
 8003d6e:	1c68      	adds	r0, r5, #1
 8003d70:	d0ed      	beq.n	8003d4e <HAL_ADC_PollForConversion+0x2e>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003d72:	b965      	cbnz	r5, 8003d8e <HAL_ADC_PollForConversion+0x6e>
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003d74:	6823      	ldr	r3, [r4, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f013 0302 	ands.w	r3, r3, #2
 8003d7c:	d1e6      	bne.n	8003d4c <HAL_ADC_PollForConversion+0x2c>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003d7e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hadc);
 8003d80:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003d84:	f042 0204 	orr.w	r2, r2, #4
 8003d88:	6422      	str	r2, [r4, #64]	@ 0x40
          return HAL_TIMEOUT;
 8003d8a:	2003      	movs	r0, #3
 8003d8c:	e7da      	b.n	8003d44 <HAL_ADC_PollForConversion+0x24>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003d8e:	f7ff fe87 	bl	8003aa0 <HAL_GetTick>
 8003d92:	1b80      	subs	r0, r0, r6
 8003d94:	42a8      	cmp	r0, r5
 8003d96:	d8ed      	bhi.n	8003d74 <HAL_ADC_PollForConversion+0x54>
 8003d98:	e7d8      	b.n	8003d4c <HAL_ADC_PollForConversion+0x2c>
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d9a:	7e22      	ldrb	r2, [r4, #24]
 8003d9c:	2a00      	cmp	r2, #0
 8003d9e:	d1e4      	bne.n	8003d6a <HAL_ADC_PollForConversion+0x4a>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003da2:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 8003da6:	d002      	beq.n	8003dae <HAL_ADC_PollForConversion+0x8e>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003da8:	689b      	ldr	r3, [r3, #8]
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003daa:	055a      	lsls	r2, r3, #21
 8003dac:	d4dd      	bmi.n	8003d6a <HAL_ADC_PollForConversion+0x4a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003dae:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003db0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003db4:	6423      	str	r3, [r4, #64]	@ 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003db6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003db8:	04db      	lsls	r3, r3, #19
 8003dba:	d4d6      	bmi.n	8003d6a <HAL_ADC_PollForConversion+0x4a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003dbc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003dbe:	f043 0301 	orr.w	r3, r3, #1
 8003dc2:	6423      	str	r3, [r4, #64]	@ 0x40
 8003dc4:	e7d1      	b.n	8003d6a <HAL_ADC_PollForConversion+0x4a>

08003dc6 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8003dc6:	6803      	ldr	r3, [r0, #0]
 8003dc8:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
}
 8003dca:	4770      	bx	lr

08003dcc <HAL_ADC_ConfigChannel>:
{
 8003dcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8003dd2:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003dd6:	2b01      	cmp	r3, #1
{
 8003dd8:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8003dda:	f000 8086 	beq.w	8003eea <HAL_ADC_ConfigChannel+0x11e>
 8003dde:	2301      	movs	r3, #1
 8003de0:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003de4:	6808      	ldr	r0, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003de6:	682b      	ldr	r3, [r5, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003de8:	688e      	ldr	r6, [r1, #8]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003dea:	2809      	cmp	r0, #9
 8003dec:	b284      	uxth	r4, r0
 8003dee:	d933      	bls.n	8003e58 <HAL_ADC_ConfigChannel+0x8c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003df0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8003df4:	68df      	ldr	r7, [r3, #12]
 8003df6:	3a1e      	subs	r2, #30
 8003df8:	f04f 0c07 	mov.w	ip, #7
 8003dfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8003e00:	ea27 070c 	bic.w	r7, r7, ip
 8003e04:	60df      	str	r7, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003e06:	68df      	ldr	r7, [r3, #12]
 8003e08:	fa06 f202 	lsl.w	r2, r6, r2
 8003e0c:	433a      	orrs	r2, r7
 8003e0e:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 8003e10:	6849      	ldr	r1, [r1, #4]
 8003e12:	2906      	cmp	r1, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003e14:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  if (sConfig->Rank < 7U)
 8003e18:	d82d      	bhi.n	8003e76 <HAL_ADC_ConfigChannel+0xaa>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003e1a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003e1c:	3a05      	subs	r2, #5
 8003e1e:	261f      	movs	r6, #31
 8003e20:	4096      	lsls	r6, r2
 8003e22:	ea21 0106 	bic.w	r1, r1, r6
 8003e26:	6359      	str	r1, [r3, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003e28:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003e2a:	fa04 f202 	lsl.w	r2, r4, r2
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	635a      	str	r2, [r3, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003e32:	4a2f      	ldr	r2, [pc, #188]	@ (8003ef0 <HAL_ADC_ConfigChannel+0x124>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d10a      	bne.n	8003e4e <HAL_ADC_ConfigChannel+0x82>
 8003e38:	2812      	cmp	r0, #18
 8003e3a:	d137      	bne.n	8003eac <HAL_ADC_ConfigChannel+0xe0>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003e3c:	4b2d      	ldr	r3, [pc, #180]	@ (8003ef4 <HAL_ADC_ConfigChannel+0x128>)
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8003e44:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8003e4c:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hadc);
 8003e4e:	2000      	movs	r0, #0
 8003e50:	f885 003c 	strb.w	r0, [r5, #60]	@ 0x3c
}
 8003e54:	b003      	add	sp, #12
 8003e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003e58:	691a      	ldr	r2, [r3, #16]
 8003e5a:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 8003e5e:	2707      	movs	r7, #7
 8003e60:	fa07 f70c 	lsl.w	r7, r7, ip
 8003e64:	ea22 0207 	bic.w	r2, r2, r7
 8003e68:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003e6a:	691a      	ldr	r2, [r3, #16]
 8003e6c:	fa06 f60c 	lsl.w	r6, r6, ip
 8003e70:	4316      	orrs	r6, r2
 8003e72:	611e      	str	r6, [r3, #16]
 8003e74:	e7cc      	b.n	8003e10 <HAL_ADC_ConfigChannel+0x44>
  else if (sConfig->Rank < 13U)
 8003e76:	290c      	cmp	r1, #12
 8003e78:	f04f 011f 	mov.w	r1, #31
 8003e7c:	d80b      	bhi.n	8003e96 <HAL_ADC_ConfigChannel+0xca>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003e7e:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
 8003e80:	3a23      	subs	r2, #35	@ 0x23
 8003e82:	4091      	lsls	r1, r2
 8003e84:	ea26 0101 	bic.w	r1, r6, r1
 8003e88:	6319      	str	r1, [r3, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003e8a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003e8c:	fa04 f202 	lsl.w	r2, r4, r2
 8003e90:	430a      	orrs	r2, r1
 8003e92:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e94:	e7cd      	b.n	8003e32 <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003e96:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
 8003e98:	3a41      	subs	r2, #65	@ 0x41
 8003e9a:	4091      	lsls	r1, r2
 8003e9c:	ea26 0101 	bic.w	r1, r6, r1
 8003ea0:	62d9      	str	r1, [r3, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ea2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003ea4:	4094      	lsls	r4, r2
 8003ea6:	430c      	orrs	r4, r1
 8003ea8:	62dc      	str	r4, [r3, #44]	@ 0x2c
 8003eaa:	e7c2      	b.n	8003e32 <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003eac:	4b12      	ldr	r3, [pc, #72]	@ (8003ef8 <HAL_ADC_ConfigChannel+0x12c>)
 8003eae:	4298      	cmp	r0, r3
 8003eb0:	d001      	beq.n	8003eb6 <HAL_ADC_ConfigChannel+0xea>
 8003eb2:	2811      	cmp	r0, #17
 8003eb4:	d1cb      	bne.n	8003e4e <HAL_ADC_ConfigChannel+0x82>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8003ef4 <HAL_ADC_ConfigChannel+0x128>)
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 8003ebe:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003ec6:	605a      	str	r2, [r3, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef8 <HAL_ADC_ConfigChannel+0x12c>)
 8003eca:	4298      	cmp	r0, r3
 8003ecc:	d1bf      	bne.n	8003e4e <HAL_ADC_ConfigChannel+0x82>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003ece:	4b0b      	ldr	r3, [pc, #44]	@ (8003efc <HAL_ADC_ConfigChannel+0x130>)
 8003ed0:	4a0b      	ldr	r2, [pc, #44]	@ (8003f00 <HAL_ADC_ConfigChannel+0x134>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ed8:	220a      	movs	r2, #10
 8003eda:	4353      	muls	r3, r2
        counter--;
 8003edc:	9301      	str	r3, [sp, #4]
      while (counter != 0U)
 8003ede:	9b01      	ldr	r3, [sp, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d0b4      	beq.n	8003e4e <HAL_ADC_ConfigChannel+0x82>
        counter--;
 8003ee4:	9b01      	ldr	r3, [sp, #4]
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	e7f8      	b.n	8003edc <HAL_ADC_ConfigChannel+0x110>
  __HAL_LOCK(hadc);
 8003eea:	2002      	movs	r0, #2
 8003eec:	e7b2      	b.n	8003e54 <HAL_ADC_ConfigChannel+0x88>
 8003eee:	bf00      	nop
 8003ef0:	40012000 	.word	0x40012000
 8003ef4:	40012300 	.word	0x40012300
 8003ef8:	10000012 	.word	0x10000012
 8003efc:	2000007c 	.word	0x2000007c
 8003f00:	000f4240 	.word	0x000f4240

08003f04 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f04:	4907      	ldr	r1, [pc, #28]	@ (8003f24 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003f06:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f08:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f0c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f0e:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f14:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003f1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8003f20:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003f22:	4770      	bx	lr
 8003f24:	e000ed00 	.word	0xe000ed00

08003f28 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f28:	4b16      	ldr	r3, [pc, #88]	@ (8003f84 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f2a:	b530      	push	{r4, r5, lr}
 8003f2c:	68dc      	ldr	r4, [r3, #12]
 8003f2e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f32:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f36:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f38:	2b04      	cmp	r3, #4
 8003f3a:	bf28      	it	cs
 8003f3c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f3e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f40:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f44:	bf8c      	ite	hi
 8003f46:	3c03      	subhi	r4, #3
 8003f48:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f4a:	fa05 f303 	lsl.w	r3, r5, r3
 8003f4e:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f52:	40a5      	lsls	r5, r4
 8003f54:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f58:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8003f5a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f5c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f60:	bfac      	ite	ge
 8003f62:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f66:	4a08      	ldrlt	r2, [pc, #32]	@ (8003f88 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f68:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f6c:	bfb8      	it	lt
 8003f6e:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	bfaa      	itet	ge
 8003f76:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f7a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f7c:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003f80:	bd30      	pop	{r4, r5, pc}
 8003f82:	bf00      	nop
 8003f84:	e000ed00 	.word	0xe000ed00
 8003f88:	e000ed14 	.word	0xe000ed14

08003f8c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003f8c:	2800      	cmp	r0, #0
 8003f8e:	db07      	blt.n	8003fa0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f90:	0941      	lsrs	r1, r0, #5
 8003f92:	4a04      	ldr	r2, [pc, #16]	@ (8003fa4 <HAL_NVIC_EnableIRQ+0x18>)
 8003f94:	f000 001f 	and.w	r0, r0, #31
 8003f98:	2301      	movs	r3, #1
 8003f9a:	4083      	lsls	r3, r0
 8003f9c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	e000e100 	.word	0xe000e100

08003fa8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003fa8:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003faa:	4604      	mov	r4, r0
 8003fac:	b150      	cbz	r0, 8003fc4 <HAL_CRC_Init+0x1c>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003fae:	7943      	ldrb	r3, [r0, #5]
 8003fb0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003fb4:	b913      	cbnz	r3, 8003fbc <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003fb6:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003fb8:	f7fd fd06 	bl	80019c8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8003fc0:	2000      	movs	r0, #0
}
 8003fc2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003fc4:	2001      	movs	r0, #1
 8003fc6:	e7fc      	b.n	8003fc2 <HAL_CRC_Init+0x1a>

08003fc8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003fc8:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003fca:	4604      	mov	r4, r0
 8003fcc:	b320      	cbz	r0, 8004018 <HAL_DMA2D_Init+0x50>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003fce:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 8003fd2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003fd6:	b91b      	cbnz	r3, 8003fe0 <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003fd8:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003fdc:	f7fd fd0c 	bl	80019f8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003fe6:	6823      	ldr	r3, [r4, #0]
 8003fe8:	6861      	ldr	r1, [r4, #4]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003ff4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ff6:	68a1      	ldr	r1, [r4, #8]
 8003ff8:	f022 0207 	bic.w	r2, r2, #7
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004000:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004002:	68e1      	ldr	r1, [r4, #12]
 8004004:	f36f 020d 	bfc	r2, #0, #14
 8004008:	430a      	orrs	r2, r1
 800400a:	641a      	str	r2, [r3, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800400c:	2000      	movs	r0, #0

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800400e:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004010:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004012:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39

  return HAL_OK;
}
 8004016:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004018:	2001      	movs	r0, #1
 800401a:	e7fc      	b.n	8004016 <HAL_DMA2D_Init+0x4e>

0800401c <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 800401c:	4770      	bx	lr

0800401e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 800401e:	4770      	bx	lr

08004020 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004020:	6803      	ldr	r3, [r0, #0]
{
 8004022:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004024:	685e      	ldr	r6, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004026:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004028:	07f2      	lsls	r2, r6, #31
{
 800402a:	4604      	mov	r4, r0
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800402c:	d514      	bpl.n	8004058 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 800402e:	05e9      	lsls	r1, r5, #23
 8004030:	d512      	bpl.n	8004058 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004038:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800403a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800403c:	f042 0201 	orr.w	r2, r2, #1
 8004040:	63c2      	str	r2, [r0, #60]	@ 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004042:	2201      	movs	r2, #1
 8004044:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004046:	2304      	movs	r3, #4
 8004048:	f880 3039 	strb.w	r3, [r0, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 800404c:	2300      	movs	r3, #0
 800404e:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8004052:	6943      	ldr	r3, [r0, #20]
 8004054:	b103      	cbz	r3, 8004058 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 8004056:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004058:	06b2      	lsls	r2, r6, #26
 800405a:	d516      	bpl.n	800408a <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 800405c:	04ab      	lsls	r3, r5, #18
 800405e:	d514      	bpl.n	800408a <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004060:	6823      	ldr	r3, [r4, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004068:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800406a:	2220      	movs	r2, #32
 800406c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800406e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004070:	f043 0302 	orr.w	r3, r3, #2
 8004074:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004076:	2304      	movs	r3, #4
 8004078:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 800407c:	2300      	movs	r3, #0
 800407e:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8004082:	6963      	ldr	r3, [r4, #20]
 8004084:	b10b      	cbz	r3, 800408a <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 8004086:	4620      	mov	r0, r4
 8004088:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800408a:	0730      	lsls	r0, r6, #28
 800408c:	d516      	bpl.n	80040bc <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800408e:	0529      	lsls	r1, r5, #20
 8004090:	d514      	bpl.n	80040bc <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004092:	6823      	ldr	r3, [r4, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800409a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800409c:	2208      	movs	r2, #8
 800409e:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80040a0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80040a2:	f043 0304 	orr.w	r3, r3, #4
 80040a6:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80040a8:	2304      	movs	r3, #4
 80040aa:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 80040ae:	2300      	movs	r3, #0
 80040b0:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 80040b4:	6963      	ldr	r3, [r4, #20]
 80040b6:	b10b      	cbz	r3, 80040bc <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 80040b8:	4620      	mov	r0, r4
 80040ba:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80040bc:	0772      	lsls	r2, r6, #29
 80040be:	d50b      	bpl.n	80040d8 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 80040c0:	056b      	lsls	r3, r5, #21
 80040c2:	d509      	bpl.n	80040d8 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80040c4:	6823      	ldr	r3, [r4, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040cc:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80040ce:	2204      	movs	r2, #4
 80040d0:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80040d2:	4620      	mov	r0, r4
 80040d4:	f7ff ffa2 	bl	800401c <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80040d8:	07b0      	lsls	r0, r6, #30
 80040da:	d514      	bpl.n	8004106 <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 80040dc:	05a9      	lsls	r1, r5, #22
 80040de:	d512      	bpl.n	8004106 <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80040e0:	6823      	ldr	r3, [r4, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80040e8:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80040ea:	2202      	movs	r2, #2
 80040ec:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80040ee:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80040f0:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80040f2:	2301      	movs	r3, #1
 80040f4:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 80040f8:	2300      	movs	r3, #0
 80040fa:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferCpltCallback != NULL)
 80040fe:	6923      	ldr	r3, [r4, #16]
 8004100:	b10b      	cbz	r3, 8004106 <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 8004102:	4620      	mov	r0, r4
 8004104:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004106:	06f2      	lsls	r2, r6, #27
 8004108:	d513      	bpl.n	8004132 <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800410a:	04eb      	lsls	r3, r5, #19
 800410c:	d511      	bpl.n	8004132 <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800410e:	6823      	ldr	r3, [r4, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004116:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004118:	2210      	movs	r2, #16
 800411a:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800411c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800411e:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004120:	2301      	movs	r3, #1
 8004122:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 8004126:	2300      	movs	r3, #0
 8004128:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800412c:	4620      	mov	r0, r4
 800412e:	f7ff ff76 	bl	800401e <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8004132:	bd70      	pop	{r4, r5, r6, pc}

08004134 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004134:	b5f0      	push	{r4, r5, r6, r7, lr}
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004136:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800413a:	2a01      	cmp	r2, #1
{
 800413c:	4603      	mov	r3, r0
 800413e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hdma2d);
 8004142:	d02b      	beq.n	800419c <HAL_DMA2D_ConfigLayer+0x68>
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800414a:	f883 0039 	strb.w	r0, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800414e:	eb03 1201 	add.w	r2, r3, r1, lsl #4
 8004152:	e9d2 4007 	ldrd	r4, r0, [r2, #28]
 8004156:	6a55      	ldr	r5, [r2, #36]	@ 0x24
 8004158:	4f17      	ldr	r7, [pc, #92]	@ (80041b8 <HAL_DMA2D_ConfigLayer+0x84>)
 800415a:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800415e:	3c09      	subs	r4, #9
 8004160:	2c01      	cmp	r4, #1
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004162:	bf9c      	itt	ls
 8004164:	f005 427f 	andls.w	r2, r5, #4278190080	@ 0xff000000
 8004168:	4310      	orrls	r0, r2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800416a:	ea4f 1601 	mov.w	r6, r1, lsl #4

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800416e:	681a      	ldr	r2, [r3, #0]
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004170:	bf88      	it	hi
 8004172:	ea40 6005 	orrhi.w	r0, r0, r5, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004176:	b991      	cbnz	r1, 800419e <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004178:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 800417a:	4039      	ands	r1, r7
 800417c:	4301      	orrs	r1, r0
 800417e:	6251      	str	r1, [r2, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004180:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004182:	6999      	ldr	r1, [r3, #24]
 8004184:	6191      	str	r1, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004186:	d803      	bhi.n	8004190 <HAL_DMA2D_ConfigLayer+0x5c>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004188:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800418a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800418e:	6291      	str	r1, [r2, #40]	@ 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004190:	2201      	movs	r2, #1

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004192:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004194:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  __HAL_UNLOCK(hdma2d);
 8004198:	f883 0038 	strb.w	r0, [r3, #56]	@ 0x38

  return HAL_OK;
}
 800419c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800419e:	69d1      	ldr	r1, [r2, #28]
 80041a0:	4039      	ands	r1, r7
 80041a2:	4301      	orrs	r1, r0
 80041a4:	61d1      	str	r1, [r2, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80041a6:	1999      	adds	r1, r3, r6
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80041a8:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80041aa:	6989      	ldr	r1, [r1, #24]
 80041ac:	6111      	str	r1, [r2, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80041ae:	bf9c      	itt	ls
 80041b0:	f025 457f 	bicls.w	r5, r5, #4278190080	@ 0xff000000
 80041b4:	6215      	strls	r5, [r2, #32]
 80041b6:	e7eb      	b.n	8004190 <HAL_DMA2D_ConfigLayer+0x5c>
 80041b8:	00fcfff0 	.word	0x00fcfff0

080041bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041c0:	f8df 91bc 	ldr.w	r9, [pc, #444]	@ 8004380 <HAL_GPIO_Init+0x1c4>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041c4:	4a6c      	ldr	r2, [pc, #432]	@ (8004378 <HAL_GPIO_Init+0x1bc>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041c6:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041c8:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 80041ca:	2401      	movs	r4, #1
 80041cc:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041ce:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 80041d2:	43ac      	bics	r4, r5
 80041d4:	f040 80b7 	bne.w	8004346 <HAL_GPIO_Init+0x18a>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041d8:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041da:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041dc:	f005 0403 	and.w	r4, r5, #3
 80041e0:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041e4:	fa07 fc08 	lsl.w	ip, r7, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041e8:	1e67      	subs	r7, r4, #1
 80041ea:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041ec:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041f0:	d834      	bhi.n	800425c <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 80041f2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041f4:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041f8:	68cf      	ldr	r7, [r1, #12]
 80041fa:	fa07 f708 	lsl.w	r7, r7, r8
 80041fe:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8004202:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004204:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004206:	ea27 0e06 	bic.w	lr, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800420a:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800420e:	409f      	lsls	r7, r3
 8004210:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8004214:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8004216:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004218:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800421c:	688f      	ldr	r7, [r1, #8]
 800421e:	fa07 f708 	lsl.w	r7, r7, r8
 8004222:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004226:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8004228:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800422a:	d119      	bne.n	8004260 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 800422c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8004230:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004234:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8004238:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800423c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8004240:	f04f 0e0f 	mov.w	lr, #15
 8004244:	fa0e fe0b 	lsl.w	lr, lr, fp
 8004248:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800424c:	690f      	ldr	r7, [r1, #16]
 800424e:	fa07 f70b 	lsl.w	r7, r7, fp
 8004252:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8004256:	f8ca 7020 	str.w	r7, [sl, #32]
 800425a:	e001      	b.n	8004260 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800425c:	2c03      	cmp	r4, #3
 800425e:	d1da      	bne.n	8004216 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8004260:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004262:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004266:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800426a:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800426c:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8004270:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004272:	d068      	beq.n	8004346 <HAL_GPIO_Init+0x18a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004274:	2400      	movs	r4, #0
 8004276:	9401      	str	r4, [sp, #4]
 8004278:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 800427c:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8004280:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 8004284:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8004288:	f023 0703 	bic.w	r7, r3, #3
 800428c:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8004290:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 8004294:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 8004298:	9401      	str	r4, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800429a:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800429e:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80042a0:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80042a4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80042a8:	240f      	movs	r4, #15
 80042aa:	fa04 f40c 	lsl.w	r4, r4, ip
 80042ae:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80042b2:	4c32      	ldr	r4, [pc, #200]	@ (800437c <HAL_GPIO_Init+0x1c0>)
 80042b4:	42a0      	cmp	r0, r4
 80042b6:	d04d      	beq.n	8004354 <HAL_GPIO_Init+0x198>
 80042b8:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80042bc:	42a0      	cmp	r0, r4
 80042be:	d04b      	beq.n	8004358 <HAL_GPIO_Init+0x19c>
 80042c0:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80042c4:	42a0      	cmp	r0, r4
 80042c6:	d049      	beq.n	800435c <HAL_GPIO_Init+0x1a0>
 80042c8:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80042cc:	42a0      	cmp	r0, r4
 80042ce:	d047      	beq.n	8004360 <HAL_GPIO_Init+0x1a4>
 80042d0:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80042d4:	42a0      	cmp	r0, r4
 80042d6:	d045      	beq.n	8004364 <HAL_GPIO_Init+0x1a8>
 80042d8:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80042dc:	42a0      	cmp	r0, r4
 80042de:	d043      	beq.n	8004368 <HAL_GPIO_Init+0x1ac>
 80042e0:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80042e4:	42a0      	cmp	r0, r4
 80042e6:	d041      	beq.n	800436c <HAL_GPIO_Init+0x1b0>
 80042e8:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80042ec:	42a0      	cmp	r0, r4
 80042ee:	d03f      	beq.n	8004370 <HAL_GPIO_Init+0x1b4>
 80042f0:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80042f4:	42a0      	cmp	r0, r4
 80042f6:	d03d      	beq.n	8004374 <HAL_GPIO_Init+0x1b8>
 80042f8:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80042fc:	42a0      	cmp	r0, r4
 80042fe:	bf14      	ite	ne
 8004300:	240a      	movne	r4, #10
 8004302:	2409      	moveq	r4, #9
 8004304:	fa04 f40c 	lsl.w	r4, r4, ip
 8004308:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800430c:	60bc      	str	r4, [r7, #8]
        temp = EXTI->RTSR;
 800430e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8004310:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004312:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp &= ~((uint32_t)iocurrent);
 8004316:	bf0c      	ite	eq
 8004318:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 800431a:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;
 800431c:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 800431e:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004320:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        temp &= ~((uint32_t)iocurrent);
 8004324:	bf0c      	ite	eq
 8004326:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8004328:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;
 800432a:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 800432c:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800432e:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        temp &= ~((uint32_t)iocurrent);
 8004332:	bf0c      	ite	eq
 8004334:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8004336:	4334      	orrne	r4, r6
        }
        EXTI->EMR = temp;
 8004338:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800433a:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800433c:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 800433e:	bf54      	ite	pl
 8004340:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8004342:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 8004344:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004346:	3301      	adds	r3, #1
 8004348:	2b10      	cmp	r3, #16
 800434a:	f47f af3d 	bne.w	80041c8 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 800434e:	b003      	add	sp, #12
 8004350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004354:	2400      	movs	r4, #0
 8004356:	e7d5      	b.n	8004304 <HAL_GPIO_Init+0x148>
 8004358:	2401      	movs	r4, #1
 800435a:	e7d3      	b.n	8004304 <HAL_GPIO_Init+0x148>
 800435c:	2402      	movs	r4, #2
 800435e:	e7d1      	b.n	8004304 <HAL_GPIO_Init+0x148>
 8004360:	2403      	movs	r4, #3
 8004362:	e7cf      	b.n	8004304 <HAL_GPIO_Init+0x148>
 8004364:	2404      	movs	r4, #4
 8004366:	e7cd      	b.n	8004304 <HAL_GPIO_Init+0x148>
 8004368:	2405      	movs	r4, #5
 800436a:	e7cb      	b.n	8004304 <HAL_GPIO_Init+0x148>
 800436c:	2406      	movs	r4, #6
 800436e:	e7c9      	b.n	8004304 <HAL_GPIO_Init+0x148>
 8004370:	2407      	movs	r4, #7
 8004372:	e7c7      	b.n	8004304 <HAL_GPIO_Init+0x148>
 8004374:	2408      	movs	r4, #8
 8004376:	e7c5      	b.n	8004304 <HAL_GPIO_Init+0x148>
 8004378:	40013c00 	.word	0x40013c00
 800437c:	40020000 	.word	0x40020000
 8004380:	40023800 	.word	0x40023800

08004384 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004384:	6903      	ldr	r3, [r0, #16]
 8004386:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004388:	bf14      	ite	ne
 800438a:	2001      	movne	r0, #1
 800438c:	2000      	moveq	r0, #0
 800438e:	4770      	bx	lr

08004390 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004390:	b10a      	cbz	r2, 8004396 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004392:	6181      	str	r1, [r0, #24]
  }
}
 8004394:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004396:	0409      	lsls	r1, r1, #16
 8004398:	e7fb      	b.n	8004392 <HAL_GPIO_WritePin+0x2>

0800439a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800439a:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800439c:	ea01 0203 	and.w	r2, r1, r3
 80043a0:	ea21 0103 	bic.w	r1, r1, r3
 80043a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80043a8:	6181      	str	r1, [r0, #24]
}
 80043aa:	4770      	bx	lr

080043ac <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80043ac:	4770      	bx	lr
	...

080043b0 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80043b0:	4a04      	ldr	r2, [pc, #16]	@ (80043c4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80043b2:	6951      	ldr	r1, [r2, #20]
 80043b4:	4201      	tst	r1, r0
{
 80043b6:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80043b8:	d002      	beq.n	80043c0 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80043ba:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80043bc:	f7ff fff6 	bl	80043ac <HAL_GPIO_EXTI_Callback>
}
 80043c0:	bd08      	pop	{r3, pc}
 80043c2:	bf00      	nop
 80043c4:	40013c00 	.word	0x40013c00

080043c8 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043c8:	6801      	ldr	r1, [r0, #0]
 80043ca:	694b      	ldr	r3, [r1, #20]
 80043cc:	f413 6380 	ands.w	r3, r3, #1024	@ 0x400
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	d010      	beq.n	80043f8 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043d6:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 80043da:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80043dc:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80043de:	6302      	str	r2, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80043e0:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043e4:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043e8:	6c03      	ldr	r3, [r0, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043ea:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043ee:	f043 0304 	orr.w	r3, r3, #4
 80043f2:	6403      	str	r3, [r0, #64]	@ 0x40

    return HAL_ERROR;
 80043f4:	2001      	movs	r0, #1
 80043f6:	4770      	bx	lr
  }
  return HAL_OK;
 80043f8:	4618      	mov	r0, r3
}
 80043fa:	4770      	bx	lr

080043fc <I2C_WaitOnFlagUntilTimeout>:
{
 80043fc:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8004400:	4606      	mov	r6, r0
 8004402:	460f      	mov	r7, r1
 8004404:	4691      	mov	r9, r2
 8004406:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004408:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800440c:	6833      	ldr	r3, [r6, #0]
 800440e:	f1ba 0f01 	cmp.w	sl, #1
 8004412:	bf0c      	ite	eq
 8004414:	695c      	ldreq	r4, [r3, #20]
 8004416:	699c      	ldrne	r4, [r3, #24]
 8004418:	ea27 0404 	bic.w	r4, r7, r4
 800441c:	b2a4      	uxth	r4, r4
 800441e:	fab4 f484 	clz	r4, r4
 8004422:	0964      	lsrs	r4, r4, #5
 8004424:	45a1      	cmp	r9, r4
 8004426:	d001      	beq.n	800442c <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8004428:	2000      	movs	r0, #0
 800442a:	e017      	b.n	800445c <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 800442c:	1c6a      	adds	r2, r5, #1
 800442e:	d0ee      	beq.n	800440e <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004430:	f7ff fb36 	bl	8003aa0 <HAL_GetTick>
 8004434:	9b08      	ldr	r3, [sp, #32]
 8004436:	1ac0      	subs	r0, r0, r3
 8004438:	42a8      	cmp	r0, r5
 800443a:	d801      	bhi.n	8004440 <I2C_WaitOnFlagUntilTimeout+0x44>
 800443c:	2d00      	cmp	r5, #0
 800443e:	d1e5      	bne.n	800440c <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004440:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004442:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004444:	6333      	str	r3, [r6, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004446:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800444a:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800444e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004450:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004454:	f042 0220 	orr.w	r2, r2, #32
 8004458:	6432      	str	r2, [r6, #64]	@ 0x40
        return HAL_ERROR;
 800445a:	2001      	movs	r0, #1
}
 800445c:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08004460 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8004460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004464:	4604      	mov	r4, r0
 8004466:	460f      	mov	r7, r1
 8004468:	4616      	mov	r6, r2
 800446a:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800446c:	6825      	ldr	r5, [r4, #0]
 800446e:	6968      	ldr	r0, [r5, #20]
 8004470:	ea27 0000 	bic.w	r0, r7, r0
 8004474:	b280      	uxth	r0, r0
 8004476:	b1c0      	cbz	r0, 80044aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004478:	696b      	ldr	r3, [r5, #20]
 800447a:	055a      	lsls	r2, r3, #21
 800447c:	d517      	bpl.n	80044ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800447e:	682b      	ldr	r3, [r5, #0]
 8004480:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004484:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004486:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 800448a:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 800448c:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800448e:	2300      	movs	r3, #0
 8004490:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004492:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004496:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800449a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800449c:	f043 0304 	orr.w	r3, r3, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044a0:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80044a2:	2300      	movs	r3, #0
 80044a4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 80044a8:	2001      	movs	r0, #1
}
 80044aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80044ae:	1c73      	adds	r3, r6, #1
 80044b0:	d0dd      	beq.n	800446e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044b2:	f7ff faf5 	bl	8003aa0 <HAL_GetTick>
 80044b6:	eba0 0008 	sub.w	r0, r0, r8
 80044ba:	42b0      	cmp	r0, r6
 80044bc:	d909      	bls.n	80044d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044be:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80044c0:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044c2:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044c4:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044c8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80044ce:	4313      	orrs	r3, r2
 80044d0:	e7e6      	b.n	80044a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044d2:	2e00      	cmp	r6, #0
 80044d4:	d1ca      	bne.n	800446c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
 80044d6:	e7f2      	b.n	80044be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

080044d8 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80044d8:	b570      	push	{r4, r5, r6, lr}
 80044da:	4604      	mov	r4, r0
 80044dc:	460d      	mov	r5, r1
 80044de:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044e0:	6823      	ldr	r3, [r4, #0]
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	061b      	lsls	r3, r3, #24
 80044e6:	d501      	bpl.n	80044ec <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 80044e8:	2000      	movs	r0, #0
 80044ea:	e018      	b.n	800451e <I2C_WaitOnTXEFlagUntilTimeout+0x46>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044ec:	4620      	mov	r0, r4
 80044ee:	f7ff ff6b 	bl	80043c8 <I2C_IsAcknowledgeFailed>
 80044f2:	b998      	cbnz	r0, 800451c <I2C_WaitOnTXEFlagUntilTimeout+0x44>
    if (Timeout != HAL_MAX_DELAY)
 80044f4:	1c6a      	adds	r2, r5, #1
 80044f6:	d0f3      	beq.n	80044e0 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044f8:	f7ff fad2 	bl	8003aa0 <HAL_GetTick>
 80044fc:	1b80      	subs	r0, r0, r6
 80044fe:	42a8      	cmp	r0, r5
 8004500:	d90e      	bls.n	8004520 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004502:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004504:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004506:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004508:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800450c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004510:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004512:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004516:	f042 0220 	orr.w	r2, r2, #32
 800451a:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800451c:	2001      	movs	r0, #1
}
 800451e:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004520:	2d00      	cmp	r5, #0
 8004522:	d1dd      	bne.n	80044e0 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8004524:	e7ed      	b.n	8004502 <I2C_WaitOnTXEFlagUntilTimeout+0x2a>
	...

08004528 <I2C_RequestMemoryWrite>:
{
 8004528:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800452c:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800452e:	6802      	ldr	r2, [r0, #0]
{
 8004530:	b085      	sub	sp, #20
 8004532:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
 8004536:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004538:	6813      	ldr	r3, [r2, #0]
 800453a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800453e:	6013      	str	r3, [r2, #0]
{
 8004540:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004542:	463b      	mov	r3, r7
 8004544:	f8cd 8000 	str.w	r8, [sp]
 8004548:	2200      	movs	r2, #0
 800454a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
{
 800454e:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004550:	f7ff ff54 	bl	80043fc <I2C_WaitOnFlagUntilTimeout>
 8004554:	6823      	ldr	r3, [r4, #0]
 8004556:	b138      	cbz	r0, 8004568 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	05db      	lsls	r3, r3, #23
 800455c:	d502      	bpl.n	8004564 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800455e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004562:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8004564:	2603      	movs	r6, #3
 8004566:	e020      	b.n	80045aa <I2C_RequestMemoryWrite+0x82>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004568:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 800456c:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800456e:	491a      	ldr	r1, [pc, #104]	@ (80045d8 <I2C_RequestMemoryWrite+0xb0>)
 8004570:	4643      	mov	r3, r8
 8004572:	463a      	mov	r2, r7
 8004574:	4620      	mov	r0, r4
 8004576:	f7ff ff73 	bl	8004460 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800457a:	b9a8      	cbnz	r0, 80045a8 <I2C_RequestMemoryWrite+0x80>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800457c:	6823      	ldr	r3, [r4, #0]
 800457e:	9003      	str	r0, [sp, #12]
 8004580:	695a      	ldr	r2, [r3, #20]
 8004582:	9203      	str	r2, [sp, #12]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004588:	4642      	mov	r2, r8
 800458a:	4639      	mov	r1, r7
 800458c:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800458e:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004590:	f7ff ffa2 	bl	80044d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004594:	4606      	mov	r6, r0
 8004596:	b160      	cbz	r0, 80045b2 <I2C_RequestMemoryWrite+0x8a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004598:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800459a:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800459c:	bf01      	itttt	eq
 800459e:	6822      	ldreq	r2, [r4, #0]
 80045a0:	6813      	ldreq	r3, [r2, #0]
 80045a2:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 80045a6:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 80045a8:	2601      	movs	r6, #1
}
 80045aa:	4630      	mov	r0, r6
 80045ac:	b005      	add	sp, #20
 80045ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045b2:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045b6:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045b8:	d102      	bne.n	80045c0 <I2C_RequestMemoryWrite+0x98>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045ba:	b2ed      	uxtb	r5, r5
 80045bc:	611d      	str	r5, [r3, #16]
 80045be:	e7f4      	b.n	80045aa <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045c0:	0a2a      	lsrs	r2, r5, #8
 80045c2:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045c4:	4639      	mov	r1, r7
 80045c6:	4642      	mov	r2, r8
 80045c8:	4620      	mov	r0, r4
 80045ca:	f7ff ff85 	bl	80044d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80045ce:	2800      	cmp	r0, #0
 80045d0:	d1e2      	bne.n	8004598 <I2C_RequestMemoryWrite+0x70>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045d2:	6823      	ldr	r3, [r4, #0]
 80045d4:	e7f1      	b.n	80045ba <I2C_RequestMemoryWrite+0x92>
 80045d6:	bf00      	nop
 80045d8:	00010002 	.word	0x00010002

080045dc <I2C_RequestMemoryRead>:
{
 80045dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045e0:	469a      	mov	sl, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045e2:	6803      	ldr	r3, [r0, #0]
{
 80045e4:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80045ec:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045ee:	681a      	ldr	r2, [r3, #0]
{
 80045f0:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045f8:	601a      	str	r2, [r3, #0]
{
 80045fa:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045fc:	463b      	mov	r3, r7
 80045fe:	f8cd 8000 	str.w	r8, [sp]
 8004602:	2200      	movs	r2, #0
 8004604:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
{
 8004608:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800460a:	f7ff fef7 	bl	80043fc <I2C_WaitOnFlagUntilTimeout>
 800460e:	6823      	ldr	r3, [r4, #0]
 8004610:	b138      	cbz	r0, 8004622 <I2C_RequestMemoryRead+0x46>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004612:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004614:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004616:	bf44      	itt	mi
 8004618:	f44f 7300 	movmi.w	r3, #512	@ 0x200
 800461c:	6423      	strmi	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 800461e:	2003      	movs	r0, #3
 8004620:	e021      	b.n	8004666 <I2C_RequestMemoryRead+0x8a>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004622:	fa5f f986 	uxtb.w	r9, r6
 8004626:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 800462a:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800462c:	492b      	ldr	r1, [pc, #172]	@ (80046dc <I2C_RequestMemoryRead+0x100>)
 800462e:	4643      	mov	r3, r8
 8004630:	463a      	mov	r2, r7
 8004632:	4620      	mov	r0, r4
 8004634:	f7ff ff14 	bl	8004460 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004638:	b9a0      	cbnz	r0, 8004664 <I2C_RequestMemoryRead+0x88>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800463a:	6823      	ldr	r3, [r4, #0]
 800463c:	9003      	str	r0, [sp, #12]
 800463e:	695a      	ldr	r2, [r3, #20]
 8004640:	9203      	str	r2, [sp, #12]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004646:	4642      	mov	r2, r8
 8004648:	4639      	mov	r1, r7
 800464a:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800464c:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800464e:	f7ff ff43 	bl	80044d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004652:	b158      	cbz	r0, 800466c <I2C_RequestMemoryRead+0x90>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004654:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004656:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004658:	bf01      	itttt	eq
 800465a:	6822      	ldreq	r2, [r4, #0]
 800465c:	6813      	ldreq	r3, [r2, #0]
 800465e:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 8004662:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 8004664:	2001      	movs	r0, #1
}
 8004666:	b004      	add	sp, #16
 8004668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800466c:	f1ba 0f01 	cmp.w	sl, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004670:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004672:	d11a      	bne.n	80046aa <I2C_RequestMemoryRead+0xce>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004674:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004676:	4642      	mov	r2, r8
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004678:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800467a:	4639      	mov	r1, r7
 800467c:	4620      	mov	r0, r4
 800467e:	f7ff ff2b 	bl	80044d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004682:	4602      	mov	r2, r0
 8004684:	2800      	cmp	r0, #0
 8004686:	d1e5      	bne.n	8004654 <I2C_RequestMemoryRead+0x78>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004688:	6821      	ldr	r1, [r4, #0]
 800468a:	680b      	ldr	r3, [r1, #0]
 800468c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004690:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004692:	4620      	mov	r0, r4
 8004694:	f8cd 8000 	str.w	r8, [sp]
 8004698:	463b      	mov	r3, r7
 800469a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800469e:	f7ff fead 	bl	80043fc <I2C_WaitOnFlagUntilTimeout>
 80046a2:	6822      	ldr	r2, [r4, #0]
 80046a4:	b160      	cbz	r0, 80046c0 <I2C_RequestMemoryRead+0xe4>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046a6:	6813      	ldr	r3, [r2, #0]
 80046a8:	e7b4      	b.n	8004614 <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80046aa:	0a2a      	lsrs	r2, r5, #8
 80046ac:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046ae:	4639      	mov	r1, r7
 80046b0:	4642      	mov	r2, r8
 80046b2:	4620      	mov	r0, r4
 80046b4:	f7ff ff10 	bl	80044d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80046b8:	2800      	cmp	r0, #0
 80046ba:	d1cb      	bne.n	8004654 <I2C_RequestMemoryRead+0x78>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046bc:	6823      	ldr	r3, [r4, #0]
 80046be:	e7d9      	b.n	8004674 <I2C_RequestMemoryRead+0x98>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80046c0:	f049 0301 	orr.w	r3, r9, #1
 80046c4:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046c6:	4905      	ldr	r1, [pc, #20]	@ (80046dc <I2C_RequestMemoryRead+0x100>)
 80046c8:	4643      	mov	r3, r8
 80046ca:	463a      	mov	r2, r7
 80046cc:	4620      	mov	r0, r4
 80046ce:	f7ff fec7 	bl	8004460 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046d2:	3800      	subs	r0, #0
 80046d4:	bf18      	it	ne
 80046d6:	2001      	movne	r0, #1
 80046d8:	e7c5      	b.n	8004666 <I2C_RequestMemoryRead+0x8a>
 80046da:	bf00      	nop
 80046dc:	00010002 	.word	0x00010002

080046e0 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80046e0:	b570      	push	{r4, r5, r6, lr}
 80046e2:	4604      	mov	r4, r0
 80046e4:	460d      	mov	r5, r1
 80046e6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046e8:	6823      	ldr	r3, [r4, #0]
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	075b      	lsls	r3, r3, #29
 80046ee:	d501      	bpl.n	80046f4 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80046f0:	2000      	movs	r0, #0
 80046f2:	e018      	b.n	8004726 <I2C_WaitOnBTFFlagUntilTimeout+0x46>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046f4:	4620      	mov	r0, r4
 80046f6:	f7ff fe67 	bl	80043c8 <I2C_IsAcknowledgeFailed>
 80046fa:	b998      	cbnz	r0, 8004724 <I2C_WaitOnBTFFlagUntilTimeout+0x44>
    if (Timeout != HAL_MAX_DELAY)
 80046fc:	1c6a      	adds	r2, r5, #1
 80046fe:	d0f3      	beq.n	80046e8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004700:	f7ff f9ce 	bl	8003aa0 <HAL_GetTick>
 8004704:	1b80      	subs	r0, r0, r6
 8004706:	42a8      	cmp	r0, r5
 8004708:	d90e      	bls.n	8004728 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800470a:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800470c:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800470e:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004710:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004714:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004718:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800471a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800471e:	f042 0220 	orr.w	r2, r2, #32
 8004722:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8004724:	2001      	movs	r0, #1
}
 8004726:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004728:	2d00      	cmp	r5, #0
 800472a:	d1dd      	bne.n	80046e8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 800472c:	e7ed      	b.n	800470a <I2C_WaitOnBTFFlagUntilTimeout+0x2a>

0800472e <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800472e:	b570      	push	{r4, r5, r6, lr}
 8004730:	4604      	mov	r4, r0
 8004732:	460d      	mov	r5, r1
 8004734:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004736:	6821      	ldr	r1, [r4, #0]
 8004738:	694b      	ldr	r3, [r1, #20]
 800473a:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 800473e:	d001      	beq.n	8004744 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8004740:	2000      	movs	r0, #0
 8004742:	e011      	b.n	8004768 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004744:	694a      	ldr	r2, [r1, #20]
 8004746:	06d2      	lsls	r2, r2, #27
 8004748:	d50f      	bpl.n	800476a <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800474a:	f06f 0210 	mvn.w	r2, #16
 800474e:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8004750:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004752:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004754:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004758:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800475c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800475e:	6423      	str	r3, [r4, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8004760:	2300      	movs	r3, #0
 8004762:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8004766:	2001      	movs	r0, #1
}
 8004768:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800476a:	f7ff f999 	bl	8003aa0 <HAL_GetTick>
 800476e:	1b80      	subs	r0, r0, r6
 8004770:	42a8      	cmp	r0, r5
 8004772:	d909      	bls.n	8004788 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004774:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8004776:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004778:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800477a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800477e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004782:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004784:	4313      	orrs	r3, r2
 8004786:	e7ea      	b.n	800475e <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004788:	2d00      	cmp	r5, #0
 800478a:	d1d4      	bne.n	8004736 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 800478c:	e7f2      	b.n	8004774 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
	...

08004790 <HAL_I2C_Init>:
{
 8004790:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8004792:	4604      	mov	r4, r0
 8004794:	b908      	cbnz	r0, 800479a <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8004796:	2001      	movs	r0, #1
}
 8004798:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800479a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800479e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80047a2:	b91b      	cbnz	r3, 80047ac <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 80047a4:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 80047a8:	f7fd f948 	bl	8001a3c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80047ac:	2324      	movs	r3, #36	@ 0x24
 80047ae:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80047b2:	6823      	ldr	r3, [r4, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	f022 0201 	bic.w	r2, r2, #1
 80047ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80047c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80047ca:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80047cc:	f000 fea0 	bl	8005510 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80047d0:	4b3f      	ldr	r3, [pc, #252]	@ (80048d0 <HAL_I2C_Init+0x140>)
 80047d2:	6865      	ldr	r5, [r4, #4]
 80047d4:	429d      	cmp	r5, r3
 80047d6:	bf94      	ite	ls
 80047d8:	4b3e      	ldrls	r3, [pc, #248]	@ (80048d4 <HAL_I2C_Init+0x144>)
 80047da:	4b3f      	ldrhi	r3, [pc, #252]	@ (80048d8 <HAL_I2C_Init+0x148>)
 80047dc:	4298      	cmp	r0, r3
 80047de:	bf8c      	ite	hi
 80047e0:	2300      	movhi	r3, #0
 80047e2:	2301      	movls	r3, #1
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1d6      	bne.n	8004796 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047e8:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80047ea:	4e39      	ldr	r6, [pc, #228]	@ (80048d0 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047ec:	6851      	ldr	r1, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80047ee:	4b3b      	ldr	r3, [pc, #236]	@ (80048dc <HAL_I2C_Init+0x14c>)
 80047f0:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047f4:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80047f8:	4319      	orrs	r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80047fa:	42b5      	cmp	r5, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047fc:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80047fe:	bf88      	it	hi
 8004800:	f44f 7696 	movhi.w	r6, #300	@ 0x12c
 8004804:	6a11      	ldr	r1, [r2, #32]
 8004806:	bf88      	it	hi
 8004808:	4373      	mulhi	r3, r6
 800480a:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 800480e:	bf84      	itt	hi
 8004810:	f44f 767a 	movhi.w	r6, #1000	@ 0x3e8
 8004814:	fbb3 f3f6 	udivhi	r3, r3, r6
 8004818:	3301      	adds	r3, #1
 800481a:	430b      	orrs	r3, r1
 800481c:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800481e:	69d1      	ldr	r1, [r2, #28]
 8004820:	1e43      	subs	r3, r0, #1
 8004822:	482b      	ldr	r0, [pc, #172]	@ (80048d0 <HAL_I2C_Init+0x140>)
 8004824:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 8004828:	4285      	cmp	r5, r0
 800482a:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 800482e:	d832      	bhi.n	8004896 <HAL_I2C_Init+0x106>
 8004830:	006d      	lsls	r5, r5, #1
 8004832:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8004836:	fbb3 f3f5 	udiv	r3, r3, r5
 800483a:	3301      	adds	r3, #1
 800483c:	4203      	tst	r3, r0
 800483e:	d042      	beq.n	80048c6 <HAL_I2C_Init+0x136>
 8004840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004844:	4319      	orrs	r1, r3
 8004846:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004848:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 800484c:	6811      	ldr	r1, [r2, #0]
 800484e:	4303      	orrs	r3, r0
 8004850:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 8004854:	430b      	orrs	r3, r1
 8004856:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004858:	6891      	ldr	r1, [r2, #8]
 800485a:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 800485e:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 8004862:	4303      	orrs	r3, r0
 8004864:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8004868:	430b      	orrs	r3, r1
 800486a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800486c:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8004870:	68d1      	ldr	r1, [r2, #12]
 8004872:	4303      	orrs	r3, r0
 8004874:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8004878:	430b      	orrs	r3, r1
 800487a:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800487c:	6813      	ldr	r3, [r2, #0]
 800487e:	f043 0301 	orr.w	r3, r3, #1
 8004882:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004884:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8004886:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004888:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800488a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800488e:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004890:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  return HAL_OK;
 8004894:	e780      	b.n	8004798 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004896:	68a0      	ldr	r0, [r4, #8]
 8004898:	b950      	cbnz	r0, 80048b0 <HAL_I2C_Init+0x120>
 800489a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800489e:	fbb3 f3f5 	udiv	r3, r3, r5
 80048a2:	3301      	adds	r3, #1
 80048a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048a8:	b17b      	cbz	r3, 80048ca <HAL_I2C_Init+0x13a>
 80048aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048ae:	e7c9      	b.n	8004844 <HAL_I2C_Init+0xb4>
 80048b0:	2019      	movs	r0, #25
 80048b2:	4368      	muls	r0, r5
 80048b4:	fbb3 f3f0 	udiv	r3, r3, r0
 80048b8:	3301      	adds	r3, #1
 80048ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048be:	b123      	cbz	r3, 80048ca <HAL_I2C_Init+0x13a>
 80048c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80048c4:	e7be      	b.n	8004844 <HAL_I2C_Init+0xb4>
 80048c6:	2304      	movs	r3, #4
 80048c8:	e7bc      	b.n	8004844 <HAL_I2C_Init+0xb4>
 80048ca:	2301      	movs	r3, #1
 80048cc:	e7ba      	b.n	8004844 <HAL_I2C_Init+0xb4>
 80048ce:	bf00      	nop
 80048d0:	000186a0 	.word	0x000186a0
 80048d4:	001e847f 	.word	0x001e847f
 80048d8:	003d08ff 	.word	0x003d08ff
 80048dc:	000f4240 	.word	0x000f4240

080048e0 <HAL_I2C_Mem_Write>:
{
 80048e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80048e4:	4604      	mov	r4, r0
 80048e6:	4699      	mov	r9, r3
 80048e8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80048ea:	460f      	mov	r7, r1
 80048ec:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 80048ee:	f7ff f8d7 	bl	8003aa0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80048f2:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 80048f6:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 80048f8:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80048fa:	d003      	beq.n	8004904 <HAL_I2C_Mem_Write+0x24>
      return HAL_BUSY;
 80048fc:	2002      	movs	r0, #2
}
 80048fe:	b003      	add	sp, #12
 8004900:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004904:	9000      	str	r0, [sp, #0]
 8004906:	493c      	ldr	r1, [pc, #240]	@ (80049f8 <HAL_I2C_Mem_Write+0x118>)
 8004908:	2319      	movs	r3, #25
 800490a:	2201      	movs	r2, #1
 800490c:	4620      	mov	r0, r4
 800490e:	f7ff fd75 	bl	80043fc <I2C_WaitOnFlagUntilTimeout>
 8004912:	2800      	cmp	r0, #0
 8004914:	d1f2      	bne.n	80048fc <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8004916:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 800491a:	2b01      	cmp	r3, #1
 800491c:	d0ee      	beq.n	80048fc <HAL_I2C_Mem_Write+0x1c>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800491e:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8004920:	2301      	movs	r3, #1
 8004922:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004926:	6803      	ldr	r3, [r0, #0]
 8004928:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800492a:	bf5e      	ittt	pl
 800492c:	6803      	ldrpl	r3, [r0, #0]
 800492e:	f043 0301 	orrpl.w	r3, r3, #1
 8004932:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004934:	6803      	ldr	r3, [r0, #0]
 8004936:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800493a:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800493c:	2321      	movs	r3, #33	@ 0x21
 800493e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004942:	2340      	movs	r3, #64	@ 0x40
 8004944:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004948:	2300      	movs	r3, #0
 800494a:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 800494c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800494e:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004950:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8004954:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004956:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004958:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800495a:	4b28      	ldr	r3, [pc, #160]	@ (80049fc <HAL_I2C_Mem_Write+0x11c>)
 800495c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800495e:	4642      	mov	r2, r8
 8004960:	e9cd 6500 	strd	r6, r5, [sp]
 8004964:	464b      	mov	r3, r9
 8004966:	4639      	mov	r1, r7
 8004968:	4620      	mov	r0, r4
 800496a:	f7ff fddd 	bl	8004528 <I2C_RequestMemoryWrite>
 800496e:	2800      	cmp	r0, #0
 8004970:	d02a      	beq.n	80049c8 <HAL_I2C_Mem_Write+0xe8>
      return HAL_ERROR;
 8004972:	2001      	movs	r0, #1
 8004974:	e7c3      	b.n	80048fe <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004976:	f7ff fdaf 	bl	80044d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800497a:	b140      	cbz	r0, 800498e <HAL_I2C_Mem_Write+0xae>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800497c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800497e:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004980:	bf01      	itttt	eq
 8004982:	6822      	ldreq	r2, [r4, #0]
 8004984:	6813      	ldreq	r3, [r2, #0]
 8004986:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 800498a:	6013      	streq	r3, [r2, #0]
 800498c:	e7f1      	b.n	8004972 <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800498e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004990:	6827      	ldr	r7, [r4, #0]
 8004992:	461a      	mov	r2, r3
 8004994:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004998:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 800499a:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800499c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800499e:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80049a0:	3a01      	subs	r2, #1
 80049a2:	b292      	uxth	r2, r2
 80049a4:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80049a6:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 80049a8:	1e48      	subs	r0, r1, #1
 80049aa:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80049ac:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 80049ae:	8520      	strh	r0, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80049b0:	d50a      	bpl.n	80049c8 <HAL_I2C_Mem_Write+0xe8>
 80049b2:	b148      	cbz	r0, 80049c8 <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049b4:	785a      	ldrb	r2, [r3, #1]
 80049b6:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 80049b8:	3302      	adds	r3, #2
 80049ba:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 80049bc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80049be:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 80049c0:	3902      	subs	r1, #2
        hi2c->XferCount--;
 80049c2:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80049c4:	8521      	strh	r1, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 80049c6:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80049c8:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049ca:	462a      	mov	r2, r5
 80049cc:	4631      	mov	r1, r6
 80049ce:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1d0      	bne.n	8004976 <HAL_I2C_Mem_Write+0x96>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049d4:	f7ff fe84 	bl	80046e0 <I2C_WaitOnBTFFlagUntilTimeout>
 80049d8:	2800      	cmp	r0, #0
 80049da:	d1cf      	bne.n	800497c <HAL_I2C_Mem_Write+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049dc:	6822      	ldr	r2, [r4, #0]
 80049de:	6813      	ldr	r3, [r2, #0]
 80049e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80049e4:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80049e6:	2320      	movs	r3, #32
 80049e8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 80049ec:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049f0:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
    return HAL_OK;
 80049f4:	e783      	b.n	80048fe <HAL_I2C_Mem_Write+0x1e>
 80049f6:	bf00      	nop
 80049f8:	00100002 	.word	0x00100002
 80049fc:	ffff0000 	.word	0xffff0000

08004a00 <HAL_I2C_Mem_Read>:
{
 8004a00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a04:	4604      	mov	r4, r0
 8004a06:	b087      	sub	sp, #28
 8004a08:	4699      	mov	r9, r3
 8004a0a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8004a0c:	460d      	mov	r5, r1
 8004a0e:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8004a10:	f7ff f846 	bl	8003aa0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a14:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8004a18:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8004a1a:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a1c:	d004      	beq.n	8004a28 <HAL_I2C_Mem_Read+0x28>
      return HAL_BUSY;
 8004a1e:	2502      	movs	r5, #2
}
 8004a20:	4628      	mov	r0, r5
 8004a22:	b007      	add	sp, #28
 8004a24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a28:	9000      	str	r0, [sp, #0]
 8004a2a:	4976      	ldr	r1, [pc, #472]	@ (8004c04 <HAL_I2C_Mem_Read+0x204>)
 8004a2c:	2319      	movs	r3, #25
 8004a2e:	2201      	movs	r2, #1
 8004a30:	4620      	mov	r0, r4
 8004a32:	f7ff fce3 	bl	80043fc <I2C_WaitOnFlagUntilTimeout>
 8004a36:	2800      	cmp	r0, #0
 8004a38:	d1f1      	bne.n	8004a1e <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8004a3a:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d0ed      	beq.n	8004a1e <HAL_I2C_Mem_Read+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a42:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8004a44:	2301      	movs	r3, #1
 8004a46:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a4a:	6803      	ldr	r3, [r0, #0]
 8004a4c:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8004a4e:	bf5e      	ittt	pl
 8004a50:	6803      	ldrpl	r3, [r0, #0]
 8004a52:	f043 0301 	orrpl.w	r3, r3, #1
 8004a56:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a58:	6803      	ldr	r3, [r0, #0]
 8004a5a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a5e:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a60:	2322      	movs	r3, #34	@ 0x22
 8004a62:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a66:	2340      	movs	r3, #64	@ 0x40
 8004a68:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8004a70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004a72:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004a74:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8004a78:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a7a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004a7c:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a7e:	4b62      	ldr	r3, [pc, #392]	@ (8004c08 <HAL_I2C_Mem_Read+0x208>)
 8004a80:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a82:	4629      	mov	r1, r5
 8004a84:	e9cd 7600 	strd	r7, r6, [sp]
 8004a88:	464b      	mov	r3, r9
 8004a8a:	4642      	mov	r2, r8
 8004a8c:	4620      	mov	r0, r4
 8004a8e:	f7ff fda5 	bl	80045dc <I2C_RequestMemoryRead>
 8004a92:	4605      	mov	r5, r0
 8004a94:	b108      	cbz	r0, 8004a9a <HAL_I2C_Mem_Read+0x9a>
      return HAL_ERROR;
 8004a96:	2501      	movs	r5, #1
 8004a98:	e7c2      	b.n	8004a20 <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 8004a9a:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a9c:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 8004a9e:	b9b2      	cbnz	r2, 8004ace <HAL_I2C_Mem_Read+0xce>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aa0:	9002      	str	r0, [sp, #8]
 8004aa2:	695a      	ldr	r2, [r3, #20]
 8004aa4:	9202      	str	r2, [sp, #8]
 8004aa6:	699a      	ldr	r2, [r3, #24]
 8004aa8:	9202      	str	r2, [sp, #8]
 8004aaa:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ab2:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ab4:	f8df 8154 	ldr.w	r8, [pc, #340]	@ 8004c0c <HAL_I2C_Mem_Read+0x20c>
    while (hi2c->XferSize > 0U)
 8004ab8:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d12c      	bne.n	8004b18 <HAL_I2C_Mem_Read+0x118>
    hi2c->State = HAL_I2C_STATE_READY;
 8004abe:	2220      	movs	r2, #32
 8004ac0:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 8004ac4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ac8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    return HAL_OK;
 8004acc:	e7a8      	b.n	8004a20 <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 8004ace:	2a01      	cmp	r2, #1
 8004ad0:	d10a      	bne.n	8004ae8 <HAL_I2C_Mem_Read+0xe8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ad8:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ada:	9003      	str	r0, [sp, #12]
 8004adc:	695a      	ldr	r2, [r3, #20]
 8004ade:	9203      	str	r2, [sp, #12]
 8004ae0:	699a      	ldr	r2, [r3, #24]
 8004ae2:	9203      	str	r2, [sp, #12]
 8004ae4:	9a03      	ldr	r2, [sp, #12]
 8004ae6:	e7e1      	b.n	8004aac <HAL_I2C_Mem_Read+0xac>
    else if (hi2c->XferSize == 2U)
 8004ae8:	2a02      	cmp	r2, #2
 8004aea:	d10e      	bne.n	8004b0a <HAL_I2C_Mem_Read+0x10a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004af2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004afa:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004afc:	9004      	str	r0, [sp, #16]
 8004afe:	695a      	ldr	r2, [r3, #20]
 8004b00:	9204      	str	r2, [sp, #16]
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	9304      	str	r3, [sp, #16]
 8004b06:	9b04      	ldr	r3, [sp, #16]
 8004b08:	e7d4      	b.n	8004ab4 <HAL_I2C_Mem_Read+0xb4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b0a:	9005      	str	r0, [sp, #20]
 8004b0c:	695a      	ldr	r2, [r3, #20]
 8004b0e:	9205      	str	r2, [sp, #20]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	9305      	str	r3, [sp, #20]
 8004b14:	9b05      	ldr	r3, [sp, #20]
 8004b16:	e7cd      	b.n	8004ab4 <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 8004b18:	2b03      	cmp	r3, #3
 8004b1a:	d856      	bhi.n	8004bca <HAL_I2C_Mem_Read+0x1ca>
        if (hi2c->XferSize == 1U)
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d115      	bne.n	8004b4c <HAL_I2C_Mem_Read+0x14c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b20:	4632      	mov	r2, r6
 8004b22:	4639      	mov	r1, r7
 8004b24:	4620      	mov	r0, r4
 8004b26:	f7ff fe02 	bl	800472e <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b2a:	2800      	cmp	r0, #0
 8004b2c:	d1b3      	bne.n	8004a96 <HAL_I2C_Mem_Read+0x96>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b2e:	6823      	ldr	r3, [r4, #0]
 8004b30:	691a      	ldr	r2, [r3, #16]
 8004b32:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004b34:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004b36:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004b38:	3301      	adds	r3, #1
 8004b3a:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8004b3c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8004b42:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004b44:	3b01      	subs	r3, #1
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8004b4a:	e7b5      	b.n	8004ab8 <HAL_I2C_Mem_Read+0xb8>
        else if (hi2c->XferSize == 2U)
 8004b4c:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b4e:	9600      	str	r6, [sp, #0]
 8004b50:	463b      	mov	r3, r7
 8004b52:	f04f 0200 	mov.w	r2, #0
 8004b56:	4641      	mov	r1, r8
 8004b58:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8004b5a:	d119      	bne.n	8004b90 <HAL_I2C_Mem_Read+0x190>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b5c:	f7ff fc4e 	bl	80043fc <I2C_WaitOnFlagUntilTimeout>
 8004b60:	2800      	cmp	r0, #0
 8004b62:	d198      	bne.n	8004a96 <HAL_I2C_Mem_Read+0x96>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b64:	6823      	ldr	r3, [r4, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b6c:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b6e:	691a      	ldr	r2, [r3, #16]
 8004b70:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004b72:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004b74:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004b76:	1c53      	adds	r3, r2, #1
 8004b78:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8004b7a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8004b80:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004b82:	3b01      	subs	r3, #1
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b88:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	7053      	strb	r3, [r2, #1]
 8004b8e:	e7d2      	b.n	8004b36 <HAL_I2C_Mem_Read+0x136>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b90:	f7ff fc34 	bl	80043fc <I2C_WaitOnFlagUntilTimeout>
 8004b94:	4602      	mov	r2, r0
 8004b96:	2800      	cmp	r0, #0
 8004b98:	f47f af7d 	bne.w	8004a96 <HAL_I2C_Mem_Read+0x96>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b9c:	6823      	ldr	r3, [r4, #0]
 8004b9e:	6819      	ldr	r1, [r3, #0]
 8004ba0:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 8004ba4:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ba6:	6919      	ldr	r1, [r3, #16]
 8004ba8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004baa:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 8004bac:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004bae:	3301      	adds	r3, #1
 8004bb0:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8004bb2:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8004bb8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	8563      	strh	r3, [r4, #42]	@ 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bc0:	4641      	mov	r1, r8
 8004bc2:	9600      	str	r6, [sp, #0]
 8004bc4:	463b      	mov	r3, r7
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	e7c8      	b.n	8004b5c <HAL_I2C_Mem_Read+0x15c>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bca:	4632      	mov	r2, r6
 8004bcc:	4639      	mov	r1, r7
 8004bce:	4620      	mov	r0, r4
 8004bd0:	f7ff fdad 	bl	800472e <I2C_WaitOnRXNEFlagUntilTimeout>
 8004bd4:	2800      	cmp	r0, #0
 8004bd6:	f47f af5e 	bne.w	8004a96 <HAL_I2C_Mem_Read+0x96>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bda:	6823      	ldr	r3, [r4, #0]
 8004bdc:	691a      	ldr	r2, [r3, #16]
 8004bde:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004be0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004be2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004be4:	1c53      	adds	r3, r2, #1
 8004be6:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8004be8:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8004bea:	3b01      	subs	r3, #1
 8004bec:	8523      	strh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8004bee:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	8563      	strh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004bf6:	6823      	ldr	r3, [r4, #0]
 8004bf8:	6959      	ldr	r1, [r3, #20]
 8004bfa:	0749      	lsls	r1, r1, #29
 8004bfc:	f57f af5c 	bpl.w	8004ab8 <HAL_I2C_Mem_Read+0xb8>
 8004c00:	e7c3      	b.n	8004b8a <HAL_I2C_Mem_Read+0x18a>
 8004c02:	bf00      	nop
 8004c04:	00100002 	.word	0x00100002
 8004c08:	ffff0000 	.word	0xffff0000
 8004c0c:	00010004 	.word	0x00010004

08004c10 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c10:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c12:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004c16:	2b20      	cmp	r3, #32
 8004c18:	b2dc      	uxtb	r4, r3
 8004c1a:	d116      	bne.n	8004c4a <HAL_I2CEx_ConfigAnalogFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c1c:	2324      	movs	r3, #36	@ 0x24
 8004c1e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c22:	6803      	ldr	r3, [r0, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	f022 0201 	bic.w	r2, r2, #1
 8004c2a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004c2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c2e:	f022 0210 	bic.w	r2, r2, #16
 8004c32:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004c34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c36:	4311      	orrs	r1, r2
 8004c38:	6259      	str	r1, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	f042 0201 	orr.w	r2, r2, #1
 8004c40:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c42:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d

    return HAL_OK;
 8004c46:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004c48:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8004c4a:	2002      	movs	r0, #2
 8004c4c:	e7fc      	b.n	8004c48 <HAL_I2CEx_ConfigAnalogFilter+0x38>

08004c4e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004c4e:	b530      	push	{r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c50:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004c54:	2b20      	cmp	r3, #32
 8004c56:	b2dc      	uxtb	r4, r3
 8004c58:	d116      	bne.n	8004c88 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c5a:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c5c:	2324      	movs	r3, #36	@ 0x24
 8004c5e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    __HAL_I2C_DISABLE(hi2c);
 8004c62:	6813      	ldr	r3, [r2, #0]
 8004c64:	f023 0301 	bic.w	r3, r3, #1
 8004c68:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004c6a:	6a55      	ldr	r5, [r2, #36]	@ 0x24

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004c6c:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8004c70:	402b      	ands	r3, r5

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004c72:	430b      	orrs	r3, r1

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	6253      	str	r3, [r2, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004c78:	6813      	ldr	r3, [r2, #0]
 8004c7a:	f043 0301 	orr.w	r3, r3, #1
 8004c7e:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c80:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d

    return HAL_OK;
 8004c84:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004c86:	bd30      	pop	{r4, r5, pc}
    return HAL_BUSY;
 8004c88:	2002      	movs	r0, #2
 8004c8a:	e7fc      	b.n	8004c86 <HAL_I2CEx_ConfigDigitalFilter+0x38>

08004c8c <LTDC_SetConfig>:
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004c8c:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004c8e:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004c92:	01d2      	lsls	r2, r2, #7
 8004c94:	3284      	adds	r2, #132	@ 0x84
 8004c96:	1883      	adds	r3, r0, r2
{
 8004c98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004c9c:	68c6      	ldr	r6, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004c9e:	685d      	ldr	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004ca0:	684c      	ldr	r4, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004ca2:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004ca6:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 8004caa:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004cac:	68c5      	ldr	r5, [r0, #12]
 8004cae:	f10c 0701 	add.w	r7, ip, #1
 8004cb2:	f3c5 450b 	ubfx	r5, r5, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004cb6:	f3c6 460b 	ubfx	r6, r6, #16, #12
 8004cba:	4426      	add	r6, r4
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004cbc:	443d      	add	r5, r7
 8004cbe:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004cc2:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004cc4:	68c6      	ldr	r6, [r0, #12]
 8004cc6:	68cd      	ldr	r5, [r1, #12]
 8004cc8:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8004ccc:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004cce:	689d      	ldr	r5, [r3, #8]
 8004cd0:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 8004cd4:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004cd6:	68c7      	ldr	r7, [r0, #12]
 8004cd8:	688d      	ldr	r5, [r1, #8]
 8004cda:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8004cde:	3501      	adds	r5, #1
 8004ce0:	443d      	add	r5, r7
 8004ce2:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 8004ce6:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004ce8:	691d      	ldr	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004cea:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004cec:	f025 0507 	bic.w	r5, r5, #7
 8004cf0:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004cf2:	f04f 0e00 	mov.w	lr, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004cf6:	611e      	str	r6, [r3, #16]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004cf8:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004cfc:	699d      	ldr	r5, [r3, #24]
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004cfe:	f891 8031 	ldrb.w	r8, [r1, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004d02:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004d06:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 8004d0a:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8004d0e:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8004d12:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8004d16:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004d18:	695d      	ldr	r5, [r3, #20]
 8004d1a:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 8004d1e:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004d20:	694d      	ldr	r5, [r1, #20]
 8004d22:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004d24:	69dd      	ldr	r5, [r3, #28]
 8004d26:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 8004d2a:	f025 0507 	bic.w	r5, r5, #7
 8004d2e:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004d30:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8004d34:	433d      	orrs	r5, r7
 8004d36:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004d38:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004d3a:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004d3c:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004d40:	2e07      	cmp	r6, #7
 8004d42:	629d      	str	r5, [r3, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004d44:	bf9c      	itt	ls
 8004d46:	4d0e      	ldrls	r5, [pc, #56]	@ (8004d80 <LTDC_SetConfig+0xf4>)
 8004d48:	5dae      	ldrbls	r6, [r5, r6]
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004d4a:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 8004d4c:	f005 25e0 	and.w	r5, r5, #3758153728	@ 0xe000e000
 8004d50:	62dd      	str	r5, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004d52:	bf88      	it	hi
 8004d54:	2601      	movhi	r6, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004d56:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004d58:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004d5a:	eba4 040c 	sub.w	r4, r4, ip
 8004d5e:	4374      	muls	r4, r6
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004d60:	4375      	muls	r5, r6
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004d62:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004d64:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8004d68:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004d6a:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8004d6c:	f36f 040a 	bfc	r4, #0, #11
 8004d70:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004d72:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004d74:	5883      	ldr	r3, [r0, r2]
 8004d76:	f043 0301 	orr.w	r3, r3, #1
 8004d7a:	5083      	str	r3, [r0, r2]
}
 8004d7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d80:	080125b0 	.word	0x080125b0

08004d84 <HAL_LTDC_Init>:
{
 8004d84:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8004d86:	4604      	mov	r4, r0
 8004d88:	2800      	cmp	r0, #0
 8004d8a:	d063      	beq.n	8004e54 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004d8c:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 8004d90:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004d94:	b91b      	cbnz	r3, 8004d9e <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8004d96:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 8004d9a:	f7fc feab 	bl	8001af4 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004d9e:	2302      	movs	r3, #2
 8004da0:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004da4:	6823      	ldr	r3, [r4, #0]
 8004da6:	699a      	ldr	r2, [r3, #24]
 8004da8:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004dac:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004dae:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8004db2:	4302      	orrs	r2, r0
 8004db4:	68e0      	ldr	r0, [r4, #12]
 8004db6:	6999      	ldr	r1, [r3, #24]
 8004db8:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004dba:	6920      	ldr	r0, [r4, #16]
 8004dbc:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004dc2:	689a      	ldr	r2, [r3, #8]
 8004dc4:	4924      	ldr	r1, [pc, #144]	@ (8004e58 <HAL_LTDC_Init+0xd4>)
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004dc6:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004dc8:	400a      	ands	r2, r1
 8004dca:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004dcc:	689a      	ldr	r2, [r3, #8]
 8004dce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004dd2:	69a0      	ldr	r0, [r4, #24]
 8004dd4:	4302      	orrs	r2, r0
 8004dd6:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004dd8:	68da      	ldr	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004dda:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004ddc:	400a      	ands	r2, r1
 8004dde:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004de0:	68da      	ldr	r2, [r3, #12]
 8004de2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004de6:	6a20      	ldr	r0, [r4, #32]
 8004de8:	4302      	orrs	r2, r0
 8004dea:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004dec:	691a      	ldr	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004dee:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004df0:	400a      	ands	r2, r1
 8004df2:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004df4:	691a      	ldr	r2, [r3, #16]
 8004df6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004dfa:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8004dfc:	4302      	orrs	r2, r0
 8004dfe:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004e00:	695a      	ldr	r2, [r3, #20]
 8004e02:	400a      	ands	r2, r1
 8004e04:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004e06:	695a      	ldr	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004e08:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004e0a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004e0e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004e10:	430a      	orrs	r2, r1
 8004e12:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004e14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004e16:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004e1a:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004e1e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004e22:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004e24:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 8004e26:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 8004e2a:	432a      	orrs	r2, r5
 8004e2c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004e30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004e34:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004e36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e38:	f042 0206 	orr.w	r2, r2, #6
 8004e3c:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8004e3e:	699a      	ldr	r2, [r3, #24]
 8004e40:	f042 0201 	orr.w	r2, r2, #1
 8004e44:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004e46:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8004e48:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004e4a:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8004e4e:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 8004e52:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004e54:	2001      	movs	r0, #1
 8004e56:	e7fc      	b.n	8004e52 <HAL_LTDC_Init+0xce>
 8004e58:	f000f800 	.word	0xf000f800

08004e5c <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 8004e5c:	4770      	bx	lr

08004e5e <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 8004e5e:	4770      	bx	lr

08004e60 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004e60:	6803      	ldr	r3, [r0, #0]
{
 8004e62:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004e64:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004e66:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004e68:	0772      	lsls	r2, r6, #29
{
 8004e6a:	4604      	mov	r4, r0
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004e6c:	d514      	bpl.n	8004e98 <HAL_LTDC_IRQHandler+0x38>
 8004e6e:	0769      	lsls	r1, r5, #29
 8004e70:	d512      	bpl.n	8004e98 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004e72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e74:	f022 0204 	bic.w	r2, r2, #4
 8004e78:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004e7a:	2204      	movs	r2, #4
 8004e7c:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004e7e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 8004e82:	f043 0301 	orr.w	r3, r3, #1
 8004e86:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 8004e8a:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004e8c:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8004e90:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8004e94:	f7ff ffe2 	bl	8004e5c <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004e98:	07b2      	lsls	r2, r6, #30
 8004e9a:	d516      	bpl.n	8004eca <HAL_LTDC_IRQHandler+0x6a>
 8004e9c:	07ab      	lsls	r3, r5, #30
 8004e9e:	d514      	bpl.n	8004eca <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004ea0:	6823      	ldr	r3, [r4, #0]
 8004ea2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ea4:	f022 0202 	bic.w	r2, r2, #2
 8004ea8:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004eaa:	2202      	movs	r2, #2
 8004eac:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004eae:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004eb8:	2304      	movs	r3, #4
 8004eba:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8004ec4:	4620      	mov	r0, r4
 8004ec6:	f7ff ffc9 	bl	8004e5c <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004eca:	07f0      	lsls	r0, r6, #31
 8004ecc:	d510      	bpl.n	8004ef0 <HAL_LTDC_IRQHandler+0x90>
 8004ece:	07e9      	lsls	r1, r5, #31
 8004ed0:	d50e      	bpl.n	8004ef0 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004ed2:	6823      	ldr	r3, [r4, #0]
 8004ed4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ed6:	f022 0201 	bic.w	r2, r2, #1
 8004eda:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004edc:	2201      	movs	r2, #1
 8004ede:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 8004ee0:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8004ee2:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8004ee6:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8004eea:	4620      	mov	r0, r4
 8004eec:	f7fc f9a6 	bl	800123c <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004ef0:	0732      	lsls	r2, r6, #28
 8004ef2:	d511      	bpl.n	8004f18 <HAL_LTDC_IRQHandler+0xb8>
 8004ef4:	072b      	lsls	r3, r5, #28
 8004ef6:	d50f      	bpl.n	8004f18 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004ef8:	6823      	ldr	r3, [r4, #0]
 8004efa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004efc:	f022 0208 	bic.w	r2, r2, #8
 8004f00:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004f02:	2208      	movs	r2, #8
 8004f04:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8004f06:	2301      	movs	r3, #1
 8004f08:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004f12:	4620      	mov	r0, r4
 8004f14:	f7ff ffa3 	bl	8004e5e <HAL_LTDC_ReloadEventCallback>
}
 8004f18:	bd70      	pop	{r4, r5, r6, pc}

08004f1a <HAL_LTDC_ConfigLayer>:
{
 8004f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8004f1e:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 8004f22:	2b01      	cmp	r3, #1
{
 8004f24:	4606      	mov	r6, r0
 8004f26:	460f      	mov	r7, r1
 8004f28:	4694      	mov	ip, r2
 8004f2a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 8004f2e:	d01f      	beq.n	8004f70 <HAL_LTDC_ConfigLayer+0x56>
 8004f30:	f04f 0801 	mov.w	r8, #1
 8004f34:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004f38:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004f3c:	2434      	movs	r4, #52	@ 0x34
 8004f3e:	460d      	mov	r5, r1
 8004f40:	fb04 6402 	mla	r4, r4, r2, r6
 8004f44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f46:	3438      	adds	r4, #56	@ 0x38
 8004f48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f52:	682b      	ldr	r3, [r5, #0]
 8004f54:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004f56:	4630      	mov	r0, r6
 8004f58:	4662      	mov	r2, ip
 8004f5a:	4639      	mov	r1, r7
 8004f5c:	f7ff fe96 	bl	8004c8c <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004f60:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8004f62:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004f64:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004f68:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8004f6c:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 8004f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004f74 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 8004f74:	f890 20a0 	ldrb.w	r2, [r0, #160]	@ 0xa0
 8004f78:	2a01      	cmp	r2, #1
{
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 8004f80:	d012      	beq.n	8004fa8 <HAL_LTDC_ProgramLineEvent+0x34>
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004f82:	681a      	ldr	r2, [r3, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004f84:	f883 00a1 	strb.w	r0, [r3, #161]	@ 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004f88:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8004f8a:	f020 0001 	bic.w	r0, r0, #1
 8004f8e:	6350      	str	r0, [r2, #52]	@ 0x34
  LTDC->LIPCR = (uint32_t)Line;
 8004f90:	4806      	ldr	r0, [pc, #24]	@ (8004fac <HAL_LTDC_ProgramLineEvent+0x38>)
 8004f92:	6401      	str	r1, [r0, #64]	@ 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8004f94:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8004f96:	f041 0101 	orr.w	r1, r1, #1
 8004f9a:	6351      	str	r1, [r2, #52]	@ 0x34
  __HAL_UNLOCK(hltdc);
 8004f9c:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8004fa4:	f883 00a0 	strb.w	r0, [r3, #160]	@ 0xa0
}
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	40016800 	.word	0x40016800

08004fb0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004fb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	9301      	str	r3, [sp, #4]
 8004fb6:	4b18      	ldr	r3, [pc, #96]	@ (8005018 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004fb8:	4d18      	ldr	r5, [pc, #96]	@ (800501c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8004fba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004fbc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004fc0:	641a      	str	r2, [r3, #64]	@ 0x40
 8004fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fc8:	9301      	str	r3, [sp, #4]
 8004fca:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004fcc:	4b14      	ldr	r3, [pc, #80]	@ (8005020 <HAL_PWREx_EnableOverDrive+0x70>)
 8004fce:	2201      	movs	r2, #1
 8004fd0:	641a      	str	r2, [r3, #64]	@ 0x40
  tickstart = HAL_GetTick();
 8004fd2:	f7fe fd65 	bl	8003aa0 <HAL_GetTick>
 8004fd6:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004fd8:	686b      	ldr	r3, [r5, #4]
 8004fda:	03da      	lsls	r2, r3, #15
 8004fdc:	d50b      	bpl.n	8004ff6 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004fde:	4b10      	ldr	r3, [pc, #64]	@ (8005020 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004fe0:	4d0e      	ldr	r5, [pc, #56]	@ (800501c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	645a      	str	r2, [r3, #68]	@ 0x44
  tickstart = HAL_GetTick();
 8004fe6:	f7fe fd5b 	bl	8003aa0 <HAL_GetTick>
 8004fea:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004fec:	686b      	ldr	r3, [r5, #4]
 8004fee:	039b      	lsls	r3, r3, #14
 8004ff0:	d50a      	bpl.n	8005008 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8004ff2:	2000      	movs	r0, #0
 8004ff4:	e006      	b.n	8005004 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004ff6:	f7fe fd53 	bl	8003aa0 <HAL_GetTick>
 8004ffa:	1b00      	subs	r0, r0, r4
 8004ffc:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8005000:	d9ea      	bls.n	8004fd8 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 8005002:	2003      	movs	r0, #3
}
 8005004:	b003      	add	sp, #12
 8005006:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005008:	f7fe fd4a 	bl	8003aa0 <HAL_GetTick>
 800500c:	1b00      	subs	r0, r0, r4
 800500e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8005012:	d9eb      	bls.n	8004fec <HAL_PWREx_EnableOverDrive+0x3c>
 8005014:	e7f5      	b.n	8005002 <HAL_PWREx_EnableOverDrive+0x52>
 8005016:	bf00      	nop
 8005018:	40023800 	.word	0x40023800
 800501c:	40007000 	.word	0x40007000
 8005020:	420e0000 	.word	0x420e0000

08005024 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005024:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005028:	4604      	mov	r4, r0
 800502a:	b340      	cbz	r0, 800507e <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800502c:	6803      	ldr	r3, [r0, #0]
 800502e:	07de      	lsls	r6, r3, #31
 8005030:	d410      	bmi.n	8005054 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005032:	6823      	ldr	r3, [r4, #0]
 8005034:	079d      	lsls	r5, r3, #30
 8005036:	d45b      	bmi.n	80050f0 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005038:	6823      	ldr	r3, [r4, #0]
 800503a:	0719      	lsls	r1, r3, #28
 800503c:	f100 809d 	bmi.w	800517a <HAL_RCC_OscConfig+0x156>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005040:	6823      	ldr	r3, [r4, #0]
 8005042:	075a      	lsls	r2, r3, #29
 8005044:	f100 80bd 	bmi.w	80051c2 <HAL_RCC_OscConfig+0x19e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005048:	69a3      	ldr	r3, [r4, #24]
 800504a:	2b00      	cmp	r3, #0
 800504c:	f040 8124 	bne.w	8005298 <HAL_RCC_OscConfig+0x274>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8005050:	2000      	movs	r0, #0
 8005052:	e02c      	b.n	80050ae <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005054:	4b8d      	ldr	r3, [pc, #564]	@ (800528c <HAL_RCC_OscConfig+0x268>)
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	f002 020c 	and.w	r2, r2, #12
 800505c:	2a04      	cmp	r2, #4
 800505e:	d007      	beq.n	8005070 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005060:	689a      	ldr	r2, [r3, #8]
 8005062:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005066:	2a08      	cmp	r2, #8
 8005068:	d10b      	bne.n	8005082 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	0259      	lsls	r1, r3, #9
 800506e:	d508      	bpl.n	8005082 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005070:	4b86      	ldr	r3, [pc, #536]	@ (800528c <HAL_RCC_OscConfig+0x268>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	039a      	lsls	r2, r3, #14
 8005076:	d5dc      	bpl.n	8005032 <HAL_RCC_OscConfig+0xe>
 8005078:	6863      	ldr	r3, [r4, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1d9      	bne.n	8005032 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 800507e:	2001      	movs	r0, #1
 8005080:	e015      	b.n	80050ae <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005082:	6863      	ldr	r3, [r4, #4]
 8005084:	4d81      	ldr	r5, [pc, #516]	@ (800528c <HAL_RCC_OscConfig+0x268>)
 8005086:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800508a:	d113      	bne.n	80050b4 <HAL_RCC_OscConfig+0x90>
 800508c:	682b      	ldr	r3, [r5, #0]
 800508e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005092:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005094:	f7fe fd04 	bl	8003aa0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005098:	4e7c      	ldr	r6, [pc, #496]	@ (800528c <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 800509a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800509c:	6833      	ldr	r3, [r6, #0]
 800509e:	039b      	lsls	r3, r3, #14
 80050a0:	d4c7      	bmi.n	8005032 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050a2:	f7fe fcfd 	bl	8003aa0 <HAL_GetTick>
 80050a6:	1b40      	subs	r0, r0, r5
 80050a8:	2864      	cmp	r0, #100	@ 0x64
 80050aa:	d9f7      	bls.n	800509c <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 80050ac:	2003      	movs	r0, #3
}
 80050ae:	b002      	add	sp, #8
 80050b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050b8:	d104      	bne.n	80050c4 <HAL_RCC_OscConfig+0xa0>
 80050ba:	682b      	ldr	r3, [r5, #0]
 80050bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050c0:	602b      	str	r3, [r5, #0]
 80050c2:	e7e3      	b.n	800508c <HAL_RCC_OscConfig+0x68>
 80050c4:	682a      	ldr	r2, [r5, #0]
 80050c6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80050ca:	602a      	str	r2, [r5, #0]
 80050cc:	682a      	ldr	r2, [r5, #0]
 80050ce:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80050d2:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1dd      	bne.n	8005094 <HAL_RCC_OscConfig+0x70>
        tickstart = HAL_GetTick();
 80050d8:	f7fe fce2 	bl	8003aa0 <HAL_GetTick>
 80050dc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050de:	682b      	ldr	r3, [r5, #0]
 80050e0:	039f      	lsls	r7, r3, #14
 80050e2:	d5a6      	bpl.n	8005032 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050e4:	f7fe fcdc 	bl	8003aa0 <HAL_GetTick>
 80050e8:	1b80      	subs	r0, r0, r6
 80050ea:	2864      	cmp	r0, #100	@ 0x64
 80050ec:	d9f7      	bls.n	80050de <HAL_RCC_OscConfig+0xba>
 80050ee:	e7dd      	b.n	80050ac <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050f0:	4b66      	ldr	r3, [pc, #408]	@ (800528c <HAL_RCC_OscConfig+0x268>)
 80050f2:	689a      	ldr	r2, [r3, #8]
 80050f4:	f012 0f0c 	tst.w	r2, #12
 80050f8:	d007      	beq.n	800510a <HAL_RCC_OscConfig+0xe6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050fa:	689a      	ldr	r2, [r3, #8]
 80050fc:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005100:	2a08      	cmp	r2, #8
 8005102:	d111      	bne.n	8005128 <HAL_RCC_OscConfig+0x104>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	025d      	lsls	r5, r3, #9
 8005108:	d40e      	bmi.n	8005128 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800510a:	4a60      	ldr	r2, [pc, #384]	@ (800528c <HAL_RCC_OscConfig+0x268>)
 800510c:	6813      	ldr	r3, [r2, #0]
 800510e:	0799      	lsls	r1, r3, #30
 8005110:	d502      	bpl.n	8005118 <HAL_RCC_OscConfig+0xf4>
 8005112:	68e3      	ldr	r3, [r4, #12]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d1b2      	bne.n	800507e <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005118:	6813      	ldr	r3, [r2, #0]
 800511a:	6921      	ldr	r1, [r4, #16]
 800511c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005120:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005124:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005126:	e787      	b.n	8005038 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005128:	68e2      	ldr	r2, [r4, #12]
 800512a:	4b59      	ldr	r3, [pc, #356]	@ (8005290 <HAL_RCC_OscConfig+0x26c>)
 800512c:	b1b2      	cbz	r2, 800515c <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_HSI_ENABLE();
 800512e:	2201      	movs	r2, #1
 8005130:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005132:	f7fe fcb5 	bl	8003aa0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005136:	4d55      	ldr	r5, [pc, #340]	@ (800528c <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8005138:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800513a:	682b      	ldr	r3, [r5, #0]
 800513c:	079b      	lsls	r3, r3, #30
 800513e:	d507      	bpl.n	8005150 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005140:	682b      	ldr	r3, [r5, #0]
 8005142:	6922      	ldr	r2, [r4, #16]
 8005144:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005148:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800514c:	602b      	str	r3, [r5, #0]
 800514e:	e773      	b.n	8005038 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005150:	f7fe fca6 	bl	8003aa0 <HAL_GetTick>
 8005154:	1b80      	subs	r0, r0, r6
 8005156:	2802      	cmp	r0, #2
 8005158:	d9ef      	bls.n	800513a <HAL_RCC_OscConfig+0x116>
 800515a:	e7a7      	b.n	80050ac <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 800515c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800515e:	f7fe fc9f 	bl	8003aa0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005162:	4e4a      	ldr	r6, [pc, #296]	@ (800528c <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8005164:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005166:	6833      	ldr	r3, [r6, #0]
 8005168:	079f      	lsls	r7, r3, #30
 800516a:	f57f af65 	bpl.w	8005038 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800516e:	f7fe fc97 	bl	8003aa0 <HAL_GetTick>
 8005172:	1b40      	subs	r0, r0, r5
 8005174:	2802      	cmp	r0, #2
 8005176:	d9f6      	bls.n	8005166 <HAL_RCC_OscConfig+0x142>
 8005178:	e798      	b.n	80050ac <HAL_RCC_OscConfig+0x88>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800517a:	6962      	ldr	r2, [r4, #20]
 800517c:	4b44      	ldr	r3, [pc, #272]	@ (8005290 <HAL_RCC_OscConfig+0x26c>)
 800517e:	b182      	cbz	r2, 80051a2 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8005180:	2201      	movs	r2, #1
 8005182:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8005186:	f7fe fc8b 	bl	8003aa0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800518a:	4e40      	ldr	r6, [pc, #256]	@ (800528c <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 800518c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800518e:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8005190:	079b      	lsls	r3, r3, #30
 8005192:	f53f af55 	bmi.w	8005040 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005196:	f7fe fc83 	bl	8003aa0 <HAL_GetTick>
 800519a:	1b40      	subs	r0, r0, r5
 800519c:	2802      	cmp	r0, #2
 800519e:	d9f6      	bls.n	800518e <HAL_RCC_OscConfig+0x16a>
 80051a0:	e784      	b.n	80050ac <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 80051a2:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 80051a6:	f7fe fc7b 	bl	8003aa0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051aa:	4e38      	ldr	r6, [pc, #224]	@ (800528c <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 80051ac:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051ae:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 80051b0:	079f      	lsls	r7, r3, #30
 80051b2:	f57f af45 	bpl.w	8005040 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051b6:	f7fe fc73 	bl	8003aa0 <HAL_GetTick>
 80051ba:	1b40      	subs	r0, r0, r5
 80051bc:	2802      	cmp	r0, #2
 80051be:	d9f6      	bls.n	80051ae <HAL_RCC_OscConfig+0x18a>
 80051c0:	e774      	b.n	80050ac <HAL_RCC_OscConfig+0x88>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051c2:	4b32      	ldr	r3, [pc, #200]	@ (800528c <HAL_RCC_OscConfig+0x268>)
 80051c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051c6:	f012 5280 	ands.w	r2, r2, #268435456	@ 0x10000000
 80051ca:	d128      	bne.n	800521e <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_PWR_CLK_ENABLE();
 80051cc:	9201      	str	r2, [sp, #4]
 80051ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051d0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80051d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80051d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051dc:	9301      	str	r3, [sp, #4]
 80051de:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80051e0:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051e2:	4d2c      	ldr	r5, [pc, #176]	@ (8005294 <HAL_RCC_OscConfig+0x270>)
 80051e4:	682b      	ldr	r3, [r5, #0]
 80051e6:	05d8      	lsls	r0, r3, #23
 80051e8:	d51b      	bpl.n	8005222 <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051ea:	68a3      	ldr	r3, [r4, #8]
 80051ec:	4d27      	ldr	r5, [pc, #156]	@ (800528c <HAL_RCC_OscConfig+0x268>)
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d127      	bne.n	8005242 <HAL_RCC_OscConfig+0x21e>
 80051f2:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80051f4:	f043 0301 	orr.w	r3, r3, #1
 80051f8:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 80051fa:	f7fe fc51 	bl	8003aa0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051fe:	4e23      	ldr	r6, [pc, #140]	@ (800528c <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8005200:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005202:	f241 3888 	movw	r8, #5000	@ 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005206:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8005208:	079a      	lsls	r2, r3, #30
 800520a:	d539      	bpl.n	8005280 <HAL_RCC_OscConfig+0x25c>
    if(pwrclkchanged == SET)
 800520c:	2f00      	cmp	r7, #0
 800520e:	f43f af1b 	beq.w	8005048 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005212:	4a1e      	ldr	r2, [pc, #120]	@ (800528c <HAL_RCC_OscConfig+0x268>)
 8005214:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005216:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800521a:	6413      	str	r3, [r2, #64]	@ 0x40
 800521c:	e714      	b.n	8005048 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 800521e:	2700      	movs	r7, #0
 8005220:	e7df      	b.n	80051e2 <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005222:	682b      	ldr	r3, [r5, #0]
 8005224:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005228:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800522a:	f7fe fc39 	bl	8003aa0 <HAL_GetTick>
 800522e:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005230:	682b      	ldr	r3, [r5, #0]
 8005232:	05d9      	lsls	r1, r3, #23
 8005234:	d4d9      	bmi.n	80051ea <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005236:	f7fe fc33 	bl	8003aa0 <HAL_GetTick>
 800523a:	1b80      	subs	r0, r0, r6
 800523c:	2802      	cmp	r0, #2
 800523e:	d9f7      	bls.n	8005230 <HAL_RCC_OscConfig+0x20c>
 8005240:	e734      	b.n	80050ac <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005242:	2b05      	cmp	r3, #5
 8005244:	d104      	bne.n	8005250 <HAL_RCC_OscConfig+0x22c>
 8005246:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8005248:	f043 0304 	orr.w	r3, r3, #4
 800524c:	672b      	str	r3, [r5, #112]	@ 0x70
 800524e:	e7d0      	b.n	80051f2 <HAL_RCC_OscConfig+0x1ce>
 8005250:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 8005252:	f022 0201 	bic.w	r2, r2, #1
 8005256:	672a      	str	r2, [r5, #112]	@ 0x70
 8005258:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 800525a:	f022 0204 	bic.w	r2, r2, #4
 800525e:	672a      	str	r2, [r5, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1ca      	bne.n	80051fa <HAL_RCC_OscConfig+0x1d6>
      tickstart = HAL_GetTick();
 8005264:	f7fe fc1c 	bl	8003aa0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005268:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800526c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800526e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8005270:	079b      	lsls	r3, r3, #30
 8005272:	d5cb      	bpl.n	800520c <HAL_RCC_OscConfig+0x1e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005274:	f7fe fc14 	bl	8003aa0 <HAL_GetTick>
 8005278:	1b80      	subs	r0, r0, r6
 800527a:	4540      	cmp	r0, r8
 800527c:	d9f7      	bls.n	800526e <HAL_RCC_OscConfig+0x24a>
 800527e:	e715      	b.n	80050ac <HAL_RCC_OscConfig+0x88>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005280:	f7fe fc0e 	bl	8003aa0 <HAL_GetTick>
 8005284:	1b40      	subs	r0, r0, r5
 8005286:	4540      	cmp	r0, r8
 8005288:	d9bd      	bls.n	8005206 <HAL_RCC_OscConfig+0x1e2>
 800528a:	e70f      	b.n	80050ac <HAL_RCC_OscConfig+0x88>
 800528c:	40023800 	.word	0x40023800
 8005290:	42470000 	.word	0x42470000
 8005294:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005298:	4d37      	ldr	r5, [pc, #220]	@ (8005378 <HAL_RCC_OscConfig+0x354>)
 800529a:	68aa      	ldr	r2, [r5, #8]
 800529c:	f002 020c 	and.w	r2, r2, #12
 80052a0:	2a08      	cmp	r2, #8
 80052a2:	d03e      	beq.n	8005322 <HAL_RCC_OscConfig+0x2fe>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	4b35      	ldr	r3, [pc, #212]	@ (800537c <HAL_RCC_OscConfig+0x358>)
 80052a8:	f04f 0200 	mov.w	r2, #0
        __HAL_RCC_PLL_DISABLE();
 80052ac:	661a      	str	r2, [r3, #96]	@ 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052ae:	d12b      	bne.n	8005308 <HAL_RCC_OscConfig+0x2e4>
        tickstart = HAL_GetTick();
 80052b0:	f7fe fbf6 	bl	8003aa0 <HAL_GetTick>
 80052b4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052b6:	682b      	ldr	r3, [r5, #0]
 80052b8:	0199      	lsls	r1, r3, #6
 80052ba:	d41f      	bmi.n	80052fc <HAL_RCC_OscConfig+0x2d8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80052bc:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80052c4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80052c8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80052ca:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80052ce:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80052d0:	0852      	lsrs	r2, r2, #1
 80052d2:	3a01      	subs	r2, #1
 80052d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052d8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80052da:	4b28      	ldr	r3, [pc, #160]	@ (800537c <HAL_RCC_OscConfig+0x358>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052dc:	4d26      	ldr	r5, [pc, #152]	@ (8005378 <HAL_RCC_OscConfig+0x354>)
        __HAL_RCC_PLL_ENABLE();
 80052de:	2201      	movs	r2, #1
 80052e0:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80052e2:	f7fe fbdd 	bl	8003aa0 <HAL_GetTick>
 80052e6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052e8:	682b      	ldr	r3, [r5, #0]
 80052ea:	019a      	lsls	r2, r3, #6
 80052ec:	f53f aeb0 	bmi.w	8005050 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052f0:	f7fe fbd6 	bl	8003aa0 <HAL_GetTick>
 80052f4:	1b00      	subs	r0, r0, r4
 80052f6:	2802      	cmp	r0, #2
 80052f8:	d9f6      	bls.n	80052e8 <HAL_RCC_OscConfig+0x2c4>
 80052fa:	e6d7      	b.n	80050ac <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052fc:	f7fe fbd0 	bl	8003aa0 <HAL_GetTick>
 8005300:	1b80      	subs	r0, r0, r6
 8005302:	2802      	cmp	r0, #2
 8005304:	d9d7      	bls.n	80052b6 <HAL_RCC_OscConfig+0x292>
 8005306:	e6d1      	b.n	80050ac <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 8005308:	f7fe fbca 	bl	8003aa0 <HAL_GetTick>
 800530c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800530e:	682b      	ldr	r3, [r5, #0]
 8005310:	019b      	lsls	r3, r3, #6
 8005312:	f57f ae9d 	bpl.w	8005050 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005316:	f7fe fbc3 	bl	8003aa0 <HAL_GetTick>
 800531a:	1b00      	subs	r0, r0, r4
 800531c:	2802      	cmp	r0, #2
 800531e:	d9f6      	bls.n	800530e <HAL_RCC_OscConfig+0x2ea>
 8005320:	e6c4      	b.n	80050ac <HAL_RCC_OscConfig+0x88>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005322:	2b01      	cmp	r3, #1
 8005324:	f43f aeab 	beq.w	800507e <HAL_RCC_OscConfig+0x5a>
        pll_config = RCC->PLLCFGR;
 8005328:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800532a:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800532c:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005330:	4291      	cmp	r1, r2
 8005332:	f47f aea4 	bne.w	800507e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005336:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005338:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800533c:	428a      	cmp	r2, r1
 800533e:	f47f ae9e 	bne.w	800507e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005342:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005344:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8005348:	401a      	ands	r2, r3
 800534a:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800534e:	f47f ae96 	bne.w	800507e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005352:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8005354:	0852      	lsrs	r2, r2, #1
 8005356:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800535a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800535c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8005360:	f47f ae8d 	bne.w	800507e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005364:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005366:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800536a:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 800536e:	bf14      	ite	ne
 8005370:	2001      	movne	r0, #1
 8005372:	2000      	moveq	r0, #0
 8005374:	e69b      	b.n	80050ae <HAL_RCC_OscConfig+0x8a>
 8005376:	bf00      	nop
 8005378:	40023800 	.word	0x40023800
 800537c:	42470000 	.word	0x42470000

08005380 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005380:	4913      	ldr	r1, [pc, #76]	@ (80053d0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8005382:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005384:	688b      	ldr	r3, [r1, #8]
 8005386:	f003 030c 	and.w	r3, r3, #12
 800538a:	2b04      	cmp	r3, #4
 800538c:	d01c      	beq.n	80053c8 <HAL_RCC_GetSysClockFreq+0x48>
 800538e:	2b08      	cmp	r3, #8
 8005390:	d11c      	bne.n	80053cc <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005392:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005394:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005396:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005398:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800539c:	bf14      	ite	ne
 800539e:	480d      	ldrne	r0, [pc, #52]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053a0:	480d      	ldreq	r0, [pc, #52]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053a2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80053a6:	bf18      	it	ne
 80053a8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053aa:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053ae:	fba1 0100 	umull	r0, r1, r1, r0
 80053b2:	f7fa ff6d 	bl	8000290 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80053b6:	4b06      	ldr	r3, [pc, #24]	@ (80053d0 <HAL_RCC_GetSysClockFreq+0x50>)
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80053be:	3301      	adds	r3, #1
 80053c0:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80053c2:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80053c6:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053c8:	4802      	ldr	r0, [pc, #8]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0x54>)
 80053ca:	e7fc      	b.n	80053c6 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 80053cc:	4802      	ldr	r0, [pc, #8]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 80053ce:	e7fa      	b.n	80053c6 <HAL_RCC_GetSysClockFreq+0x46>
 80053d0:	40023800 	.word	0x40023800
 80053d4:	007a1200 	.word	0x007a1200
 80053d8:	00f42400 	.word	0x00f42400

080053dc <HAL_RCC_ClockConfig>:
{
 80053dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053e0:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80053e2:	4604      	mov	r4, r0
 80053e4:	b910      	cbnz	r0, 80053ec <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80053e6:	2001      	movs	r0, #1
}
 80053e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053ec:	4b43      	ldr	r3, [pc, #268]	@ (80054fc <HAL_RCC_ClockConfig+0x120>)
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	f002 020f 	and.w	r2, r2, #15
 80053f4:	428a      	cmp	r2, r1
 80053f6:	d328      	bcc.n	800544a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053f8:	6821      	ldr	r1, [r4, #0]
 80053fa:	078f      	lsls	r7, r1, #30
 80053fc:	d42d      	bmi.n	800545a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053fe:	07c8      	lsls	r0, r1, #31
 8005400:	d440      	bmi.n	8005484 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005402:	4b3e      	ldr	r3, [pc, #248]	@ (80054fc <HAL_RCC_ClockConfig+0x120>)
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	f002 020f 	and.w	r2, r2, #15
 800540a:	42aa      	cmp	r2, r5
 800540c:	d865      	bhi.n	80054da <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800540e:	6822      	ldr	r2, [r4, #0]
 8005410:	0751      	lsls	r1, r2, #29
 8005412:	d46b      	bmi.n	80054ec <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005414:	0713      	lsls	r3, r2, #28
 8005416:	d507      	bpl.n	8005428 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005418:	4a39      	ldr	r2, [pc, #228]	@ (8005500 <HAL_RCC_ClockConfig+0x124>)
 800541a:	6921      	ldr	r1, [r4, #16]
 800541c:	6893      	ldr	r3, [r2, #8]
 800541e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005422:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005426:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005428:	f7ff ffaa 	bl	8005380 <HAL_RCC_GetSysClockFreq>
 800542c:	4b34      	ldr	r3, [pc, #208]	@ (8005500 <HAL_RCC_ClockConfig+0x124>)
 800542e:	4a35      	ldr	r2, [pc, #212]	@ (8005504 <HAL_RCC_ClockConfig+0x128>)
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005436:	5cd3      	ldrb	r3, [r2, r3]
 8005438:	40d8      	lsrs	r0, r3
 800543a:	4b33      	ldr	r3, [pc, #204]	@ (8005508 <HAL_RCC_ClockConfig+0x12c>)
 800543c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800543e:	4b33      	ldr	r3, [pc, #204]	@ (800550c <HAL_RCC_ClockConfig+0x130>)
 8005440:	6818      	ldr	r0, [r3, #0]
 8005442:	f7fc fcd5 	bl	8001df0 <HAL_InitTick>
  return HAL_OK;
 8005446:	2000      	movs	r0, #0
 8005448:	e7ce      	b.n	80053e8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800544a:	b2ca      	uxtb	r2, r1
 800544c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 030f 	and.w	r3, r3, #15
 8005454:	428b      	cmp	r3, r1
 8005456:	d1c6      	bne.n	80053e6 <HAL_RCC_ClockConfig+0xa>
 8005458:	e7ce      	b.n	80053f8 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800545a:	4b29      	ldr	r3, [pc, #164]	@ (8005500 <HAL_RCC_ClockConfig+0x124>)
 800545c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005460:	bf1e      	ittt	ne
 8005462:	689a      	ldrne	r2, [r3, #8]
 8005464:	f442 52e0 	orrne.w	r2, r2, #7168	@ 0x1c00
 8005468:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800546a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800546c:	bf42      	ittt	mi
 800546e:	689a      	ldrmi	r2, [r3, #8]
 8005470:	f442 4260 	orrmi.w	r2, r2, #57344	@ 0xe000
 8005474:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005476:	689a      	ldr	r2, [r3, #8]
 8005478:	68a0      	ldr	r0, [r4, #8]
 800547a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800547e:	4302      	orrs	r2, r0
 8005480:	609a      	str	r2, [r3, #8]
 8005482:	e7bc      	b.n	80053fe <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005484:	6862      	ldr	r2, [r4, #4]
 8005486:	4b1e      	ldr	r3, [pc, #120]	@ (8005500 <HAL_RCC_ClockConfig+0x124>)
 8005488:	2a01      	cmp	r2, #1
 800548a:	d11c      	bne.n	80054c6 <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005492:	d0a8      	beq.n	80053e6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005494:	4e1a      	ldr	r6, [pc, #104]	@ (8005500 <HAL_RCC_ClockConfig+0x124>)
 8005496:	68b3      	ldr	r3, [r6, #8]
 8005498:	f023 0303 	bic.w	r3, r3, #3
 800549c:	4313      	orrs	r3, r2
 800549e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80054a0:	f7fe fafe 	bl	8003aa0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054a4:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 80054a8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054aa:	68b3      	ldr	r3, [r6, #8]
 80054ac:	6862      	ldr	r2, [r4, #4]
 80054ae:	f003 030c 	and.w	r3, r3, #12
 80054b2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80054b6:	d0a4      	beq.n	8005402 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054b8:	f7fe faf2 	bl	8003aa0 <HAL_GetTick>
 80054bc:	1bc0      	subs	r0, r0, r7
 80054be:	4540      	cmp	r0, r8
 80054c0:	d9f3      	bls.n	80054aa <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80054c2:	2003      	movs	r0, #3
 80054c4:	e790      	b.n	80053e8 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054c6:	1e91      	subs	r1, r2, #2
 80054c8:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054ca:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054cc:	d802      	bhi.n	80054d4 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054ce:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80054d2:	e7de      	b.n	8005492 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054d4:	f013 0f02 	tst.w	r3, #2
 80054d8:	e7db      	b.n	8005492 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054da:	b2ea      	uxtb	r2, r5
 80054dc:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 030f 	and.w	r3, r3, #15
 80054e4:	42ab      	cmp	r3, r5
 80054e6:	f47f af7e 	bne.w	80053e6 <HAL_RCC_ClockConfig+0xa>
 80054ea:	e790      	b.n	800540e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054ec:	4904      	ldr	r1, [pc, #16]	@ (8005500 <HAL_RCC_ClockConfig+0x124>)
 80054ee:	68e0      	ldr	r0, [r4, #12]
 80054f0:	688b      	ldr	r3, [r1, #8]
 80054f2:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 80054f6:	4303      	orrs	r3, r0
 80054f8:	608b      	str	r3, [r1, #8]
 80054fa:	e78b      	b.n	8005414 <HAL_RCC_ClockConfig+0x38>
 80054fc:	40023c00 	.word	0x40023c00
 8005500:	40023800 	.word	0x40023800
 8005504:	080125a0 	.word	0x080125a0
 8005508:	2000007c 	.word	0x2000007c
 800550c:	20000084 	.word	0x20000084

08005510 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005510:	4b04      	ldr	r3, [pc, #16]	@ (8005524 <HAL_RCC_GetPCLK1Freq+0x14>)
 8005512:	4a05      	ldr	r2, [pc, #20]	@ (8005528 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800551a:	5cd3      	ldrb	r3, [r2, r3]
 800551c:	4a03      	ldr	r2, [pc, #12]	@ (800552c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800551e:	6810      	ldr	r0, [r2, #0]
}
 8005520:	40d8      	lsrs	r0, r3
 8005522:	4770      	bx	lr
 8005524:	40023800 	.word	0x40023800
 8005528:	08012598 	.word	0x08012598
 800552c:	2000007c 	.word	0x2000007c

08005530 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005530:	230f      	movs	r3, #15
 8005532:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005534:	4b0b      	ldr	r3, [pc, #44]	@ (8005564 <HAL_RCC_GetClockConfig+0x34>)
 8005536:	689a      	ldr	r2, [r3, #8]
 8005538:	f002 0203 	and.w	r2, r2, #3
 800553c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800553e:	689a      	ldr	r2, [r3, #8]
 8005540:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8005544:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005546:	689a      	ldr	r2, [r3, #8]
 8005548:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 800554c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	08db      	lsrs	r3, r3, #3
 8005552:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8005556:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005558:	4b03      	ldr	r3, [pc, #12]	@ (8005568 <HAL_RCC_GetClockConfig+0x38>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 030f 	and.w	r3, r3, #15
 8005560:	600b      	str	r3, [r1, #0]
}
 8005562:	4770      	bx	lr
 8005564:	40023800 	.word	0x40023800
 8005568:	40023c00 	.word	0x40023c00

0800556c <HAL_RCCEx_PeriphCLKConfig>:
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800556c:	6803      	ldr	r3, [r0, #0]
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800556e:	f013 0f43 	tst.w	r3, #67	@ 0x43
{
 8005572:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005574:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005576:	f040 8088 	bne.w	800568a <HAL_RCCEx_PeriphCLKConfig+0x11e>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800557a:	6823      	ldr	r3, [r4, #0]
 800557c:	f013 0f0c 	tst.w	r3, #12
 8005580:	d045      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005582:	4b8c      	ldr	r3, [pc, #560]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005584:	4d8c      	ldr	r5, [pc, #560]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLSAI_DISABLE();
 8005586:	2200      	movs	r2, #0
 8005588:	671a      	str	r2, [r3, #112]	@ 0x70
    tickstart = HAL_GetTick();
 800558a:	f7fe fa89 	bl	8003aa0 <HAL_GetTick>
 800558e:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005590:	682b      	ldr	r3, [r5, #0]
 8005592:	0099      	lsls	r1, r3, #2
 8005594:	f100 80cb 	bmi.w	800572e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005598:	6821      	ldr	r1, [r4, #0]
 800559a:	074a      	lsls	r2, r1, #29
 800559c:	d515      	bpl.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800559e:	e9d4 0304 	ldrd	r0, r3, [r4, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80055a2:	f8d5 2088 	ldr.w	r2, [r5, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80055a6:	061b      	lsls	r3, r3, #24
 80055a8:	f002 42e0 	and.w	r2, r2, #1879048192	@ 0x70000000
 80055ac:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80055b0:	4313      	orrs	r3, r2
 80055b2:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80055b6:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 80055ba:	6a22      	ldr	r2, [r4, #32]
 80055bc:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 80055c0:	3a01      	subs	r2, #1
 80055c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80055c6:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80055ca:	070b      	lsls	r3, r1, #28
 80055cc:	d514      	bpl.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80055ce:	4a7a      	ldr	r2, [pc, #488]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80055d0:	69a3      	ldr	r3, [r4, #24]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80055d2:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80055d6:	6920      	ldr	r0, [r4, #16]
 80055d8:	071b      	lsls	r3, r3, #28
 80055da:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 80055de:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80055e2:	430b      	orrs	r3, r1
 80055e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80055e8:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 80055ec:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80055ee:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80055f2:	430b      	orrs	r3, r1
 80055f4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80055f8:	4b6e      	ldr	r3, [pc, #440]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055fa:	4e6f      	ldr	r6, [pc, #444]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLSAI_ENABLE();
 80055fc:	2201      	movs	r2, #1
 80055fe:	671a      	str	r2, [r3, #112]	@ 0x70
    tickstart = HAL_GetTick();
 8005600:	f7fe fa4e 	bl	8003aa0 <HAL_GetTick>
 8005604:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005606:	6833      	ldr	r3, [r6, #0]
 8005608:	009f      	lsls	r7, r3, #2
 800560a:	f140 8097 	bpl.w	800573c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800560e:	6823      	ldr	r3, [r4, #0]
 8005610:	0698      	lsls	r0, r3, #26
 8005612:	d534      	bpl.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005614:	2300      	movs	r3, #0
 8005616:	9301      	str	r3, [sp, #4]
 8005618:	4b67      	ldr	r3, [pc, #412]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800561a:	4d68      	ldr	r5, [pc, #416]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0x250>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800561c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800561e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005622:	641a      	str	r2, [r3, #64]	@ 0x40
 8005624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800562a:	9301      	str	r3, [sp, #4]
 800562c:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800562e:	682b      	ldr	r3, [r5, #0]
 8005630:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005634:	602b      	str	r3, [r5, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005636:	f7fe fa33 	bl	8003aa0 <HAL_GetTick>
 800563a:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800563c:	682b      	ldr	r3, [r5, #0]
 800563e:	05d8      	lsls	r0, r3, #23
 8005640:	f140 8083 	bpl.w	800574a <HAL_RCCEx_PeriphCLKConfig+0x1de>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005644:	4d5c      	ldr	r5, [pc, #368]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005646:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005648:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800564a:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 800564e:	f040 8083 	bne.w	8005758 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005652:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005654:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8005658:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800565c:	4a56      	ldr	r2, [pc, #344]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800565e:	f040 809e 	bne.w	800579e <HAL_RCCEx_PeriphCLKConfig+0x232>
 8005662:	6891      	ldr	r1, [r2, #8]
 8005664:	f023 4070 	bic.w	r0, r3, #4026531840	@ 0xf0000000
 8005668:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 800566c:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 8005670:	4301      	orrs	r1, r0
 8005672:	6091      	str	r1, [r2, #8]
 8005674:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8005676:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800567a:	430b      	orrs	r3, r1
 800567c:	6713      	str	r3, [r2, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800567e:	6823      	ldr	r3, [r4, #0]
 8005680:	06db      	lsls	r3, r3, #27
 8005682:	f100 8090 	bmi.w	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
  return HAL_OK;
 8005686:	2000      	movs	r0, #0
 8005688:	e04f      	b.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    __HAL_RCC_PLLI2S_DISABLE();
 800568a:	4b4a      	ldr	r3, [pc, #296]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800568c:	4e4a      	ldr	r6, [pc, #296]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLI2S_DISABLE();
 800568e:	2200      	movs	r2, #0
 8005690:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8005692:	f7fe fa05 	bl	8003aa0 <HAL_GetTick>
 8005696:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005698:	6833      	ldr	r3, [r6, #0]
 800569a:	011f      	lsls	r7, r3, #4
 800569c:	d43f      	bmi.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800569e:	6821      	ldr	r1, [r4, #0]
 80056a0:	07c8      	lsls	r0, r1, #31
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80056a2:	bf41      	itttt	mi
 80056a4:	e9d4 2301 	ldrdmi	r2, r3, [r4, #4]
 80056a8:	071b      	lslmi	r3, r3, #28
 80056aa:	ea43 1382 	orrmi.w	r3, r3, r2, lsl #6
 80056ae:	f8c6 3084 	strmi.w	r3, [r6, #132]	@ 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80056b2:	078a      	lsls	r2, r1, #30
 80056b4:	d515      	bpl.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056b6:	4a40      	ldr	r2, [pc, #256]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80056b8:	68e3      	ldr	r3, [r4, #12]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056ba:	f8d2 0084 	ldr.w	r0, [r2, #132]	@ 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80056be:	6865      	ldr	r5, [r4, #4]
 80056c0:	061b      	lsls	r3, r3, #24
 80056c2:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 80056c6:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 80056ca:	4303      	orrs	r3, r0
 80056cc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80056d0:	f8d2 008c 	ldr.w	r0, [r2, #140]	@ 0x8c
 80056d4:	69e3      	ldr	r3, [r4, #28]
 80056d6:	f020 001f 	bic.w	r0, r0, #31
 80056da:	3b01      	subs	r3, #1
 80056dc:	4303      	orrs	r3, r0
 80056de:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80056e2:	064b      	lsls	r3, r1, #25
 80056e4:	d50a      	bpl.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x190>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80056e6:	68e3      	ldr	r3, [r4, #12]
 80056e8:	6862      	ldr	r2, [r4, #4]
 80056ea:	061b      	lsls	r3, r3, #24
 80056ec:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80056f0:	68a2      	ldr	r2, [r4, #8]
 80056f2:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80056f6:	4a30      	ldr	r2, [pc, #192]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80056f8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80056fc:	4b2d      	ldr	r3, [pc, #180]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056fe:	4e2e      	ldr	r6, [pc, #184]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLI2S_ENABLE();
 8005700:	2201      	movs	r2, #1
 8005702:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8005704:	f7fe f9cc 	bl	8003aa0 <HAL_GetTick>
 8005708:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800570a:	6833      	ldr	r3, [r6, #0]
 800570c:	011f      	lsls	r7, r3, #4
 800570e:	f53f af34 	bmi.w	800557a <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005712:	f7fe f9c5 	bl	8003aa0 <HAL_GetTick>
 8005716:	1b40      	subs	r0, r0, r5
 8005718:	2802      	cmp	r0, #2
 800571a:	d9f6      	bls.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x19e>
 800571c:	e004      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800571e:	f7fe f9bf 	bl	8003aa0 <HAL_GetTick>
 8005722:	1b40      	subs	r0, r0, r5
 8005724:	2802      	cmp	r0, #2
 8005726:	d9b7      	bls.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        return HAL_TIMEOUT;
 8005728:	2003      	movs	r0, #3
}
 800572a:	b003      	add	sp, #12
 800572c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800572e:	f7fe f9b7 	bl	8003aa0 <HAL_GetTick>
 8005732:	1b80      	subs	r0, r0, r6
 8005734:	2802      	cmp	r0, #2
 8005736:	f67f af2b 	bls.w	8005590 <HAL_RCCEx_PeriphCLKConfig+0x24>
 800573a:	e7f5      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800573c:	f7fe f9b0 	bl	8003aa0 <HAL_GetTick>
 8005740:	1b40      	subs	r0, r0, r5
 8005742:	2802      	cmp	r0, #2
 8005744:	f67f af5f 	bls.w	8005606 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8005748:	e7ee      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800574a:	f7fe f9a9 	bl	8003aa0 <HAL_GetTick>
 800574e:	1b80      	subs	r0, r0, r6
 8005750:	2802      	cmp	r0, #2
 8005752:	f67f af73 	bls.w	800563c <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8005756:	e7e7      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005758:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 800575c:	4293      	cmp	r3, r2
 800575e:	f43f af78 	beq.w	8005652 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005762:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8005764:	4a13      	ldr	r2, [pc, #76]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005766:	2101      	movs	r1, #1
 8005768:	f8c2 1e40 	str.w	r1, [r2, #3648]	@ 0xe40
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800576c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005770:	2100      	movs	r1, #0
 8005772:	f8c2 1e40 	str.w	r1, [r2, #3648]	@ 0xe40
      RCC->BDCR = tmpreg1;
 8005776:	672b      	str	r3, [r5, #112]	@ 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005778:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800577a:	07d9      	lsls	r1, r3, #31
 800577c:	f57f af69 	bpl.w	8005652 <HAL_RCCEx_PeriphCLKConfig+0xe6>
        tickstart = HAL_GetTick();
 8005780:	f7fe f98e 	bl	8003aa0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005784:	f241 3788 	movw	r7, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8005788:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800578a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800578c:	079a      	lsls	r2, r3, #30
 800578e:	f53f af60 	bmi.w	8005652 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005792:	f7fe f985 	bl	8003aa0 <HAL_GetTick>
 8005796:	1b80      	subs	r0, r0, r6
 8005798:	42b8      	cmp	r0, r7
 800579a:	d9f6      	bls.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800579c:	e7c4      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800579e:	6891      	ldr	r1, [r2, #8]
 80057a0:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 80057a4:	e765      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x106>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80057a6:	4b06      	ldr	r3, [pc, #24]	@ (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80057a8:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 80057ac:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
 80057b0:	e769      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x11a>
 80057b2:	bf00      	nop
 80057b4:	42470000 	.word	0x42470000
 80057b8:	40023800 	.word	0x40023800
 80057bc:	40007000 	.word	0x40007000
 80057c0:	42471000 	.word	0x42471000

080057c4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80057c4:	b538      	push	{r3, r4, r5, lr}
 80057c6:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80057c8:	4604      	mov	r4, r0
 80057ca:	b1c8      	cbz	r0, 8005800 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80057cc:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80057d0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80057d4:	b91b      	cbnz	r3, 80057de <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80057d6:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80057da:	f7fc fa9d 	bl	8001d18 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80057de:	2302      	movs	r3, #2
 80057e0:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80057e4:	1d21      	adds	r1, r4, #4
 80057e6:	6820      	ldr	r0, [r4, #0]
 80057e8:	f000 fce6 	bl	80061b8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80057ec:	6862      	ldr	r2, [r4, #4]
 80057ee:	6820      	ldr	r0, [r4, #0]
 80057f0:	4629      	mov	r1, r5
 80057f2:	f000 fd17 	bl	8006224 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80057f6:	2301      	movs	r3, #1
 80057f8:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c

  return HAL_OK;
 80057fc:	2000      	movs	r0, #0
}
 80057fe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005800:	2001      	movs	r0, #1
 8005802:	e7fc      	b.n	80057fe <HAL_SDRAM_Init+0x3a>

08005804 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8005804:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8005806:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800580a:	2b02      	cmp	r3, #2
{
 800580c:	4605      	mov	r5, r0
 800580e:	460e      	mov	r6, r1
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8005810:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8005812:	d012      	beq.n	800583a <HAL_SDRAM_SendCommand+0x36>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8005814:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 8005818:	2c01      	cmp	r4, #1
 800581a:	d10f      	bne.n	800583c <HAL_SDRAM_SendCommand+0x38>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800581c:	2302      	movs	r3, #2
 800581e:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005822:	6828      	ldr	r0, [r5, #0]
 8005824:	f000 fd34 	bl	8006290 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005828:	6833      	ldr	r3, [r6, #0]
 800582a:	2b02      	cmp	r3, #2
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800582c:	bf06      	itte	eq
 800582e:	2305      	moveq	r3, #5
 8005830:	f885 302c 	strbeq.w	r3, [r5, #44]	@ 0x2c
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8005834:	f885 402c 	strbne.w	r4, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005838:	2000      	movs	r0, #0
}
 800583a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800583c:	2001      	movs	r0, #1
 800583e:	e7fc      	b.n	800583a <HAL_SDRAM_SendCommand+0x36>

08005840 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005840:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005842:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8005846:	2b02      	cmp	r3, #2
{
 8005848:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800584a:	b2d8      	uxtb	r0, r3
 800584c:	d00d      	beq.n	800586a <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800584e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8005852:	2b01      	cmp	r3, #1
 8005854:	b2dd      	uxtb	r5, r3
 8005856:	d109      	bne.n	800586c <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005858:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800585a:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800585c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005860:	f000 fd3a 	bl	80062d8 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005864:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005868:	2000      	movs	r0, #0
}
 800586a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800586c:	2001      	movs	r0, #1
 800586e:	e7fc      	b.n	800586a <HAL_SDRAM_ProgramRefreshRate+0x2a>

08005870 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8005870:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005874:	461c      	mov	r4, r3
 8005876:	4616      	mov	r6, r2
 8005878:	460f      	mov	r7, r1
 800587a:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800587c:	f7fe f910 	bl	8003aa0 <HAL_GetTick>
 8005880:	4434      	add	r4, r6
 8005882:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8005884:	f7fe f90c 	bl	8003aa0 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005888:	4b24      	ldr	r3, [pc, #144]	@ (800591c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xac>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8005890:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 8005892:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005894:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005896:	682a      	ldr	r2, [r5, #0]
 8005898:	6893      	ldr	r3, [r2, #8]
 800589a:	ea37 0303 	bics.w	r3, r7, r3
 800589e:	d001      	beq.n	80058a4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
      }
      count--;
    }
  }

  return HAL_OK;
 80058a0:	2000      	movs	r0, #0
 80058a2:	e02e      	b.n	8005902 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
    if (Timeout != HAL_MAX_DELAY)
 80058a4:	1c73      	adds	r3, r6, #1
 80058a6:	d0f7      	beq.n	8005898 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80058a8:	f7fe f8fa 	bl	8003aa0 <HAL_GetTick>
 80058ac:	eba0 0008 	sub.w	r0, r0, r8
 80058b0:	42a0      	cmp	r0, r4
 80058b2:	d329      	bcc.n	8005908 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058b4:	682b      	ldr	r3, [r5, #0]
 80058b6:	685a      	ldr	r2, [r3, #4]
 80058b8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80058bc:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058be:	686a      	ldr	r2, [r5, #4]
 80058c0:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80058c4:	d10a      	bne.n	80058dc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
 80058c6:	68aa      	ldr	r2, [r5, #8]
 80058c8:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80058cc:	d002      	beq.n	80058d4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058ce:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80058d2:	d103      	bne.n	80058dc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          __HAL_SPI_DISABLE(hspi);
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058da:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058dc:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 80058de:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80058e2:	d107      	bne.n	80058f4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
          SPI_RESET_CRC(hspi);
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80058ea:	601a      	str	r2, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80058f2:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80058f4:	2301      	movs	r3, #1
 80058f6:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80058fa:	2300      	movs	r3, #0
 80058fc:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005900:	2003      	movs	r0, #3
}
 8005902:	b002      	add	sp, #8
 8005904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (count == 0U)
 8005908:	9a01      	ldr	r2, [sp, #4]
      count--;
 800590a:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 800590c:	2a00      	cmp	r2, #0
      count--;
 800590e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005912:	9301      	str	r3, [sp, #4]
 8005914:	bf08      	it	eq
 8005916:	4614      	moveq	r4, r2
 8005918:	e7bd      	b.n	8005896 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
 800591a:	bf00      	nop
 800591c:	2000007c 	.word	0x2000007c

08005920 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005920:	b538      	push	{r3, r4, r5, lr}
 8005922:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005924:	6842      	ldr	r2, [r0, #4]
 8005926:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
{
 800592a:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800592c:	d006      	beq.n	800593c <SPI_EndRxTransaction+0x1c>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800592e:	460a      	mov	r2, r1
 8005930:	2101      	movs	r1, #1
 8005932:	f7ff ff9d 	bl	8005870 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8005936:	b9b8      	cbnz	r0, 8005968 <SPI_EndRxTransaction+0x48>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8005938:	2000      	movs	r0, #0
}
 800593a:	bd38      	pop	{r3, r4, r5, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800593c:	6882      	ldr	r2, [r0, #8]
 800593e:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8005942:	d002      	beq.n	800594a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005944:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8005948:	d107      	bne.n	800595a <SPI_EndRxTransaction+0x3a>
    __HAL_SPI_DISABLE(hspi);
 800594a:	6825      	ldr	r5, [r4, #0]
 800594c:	6828      	ldr	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800594e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
    __HAL_SPI_DISABLE(hspi);
 8005952:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8005956:	6028      	str	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005958:	d003      	beq.n	8005962 <SPI_EndRxTransaction+0x42>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800595a:	460a      	mov	r2, r1
 800595c:	2180      	movs	r1, #128	@ 0x80
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800595e:	4620      	mov	r0, r4
 8005960:	e7e7      	b.n	8005932 <SPI_EndRxTransaction+0x12>
 8005962:	460a      	mov	r2, r1
 8005964:	2101      	movs	r1, #1
 8005966:	e7fa      	b.n	800595e <SPI_EndRxTransaction+0x3e>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005968:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800596a:	f043 0320 	orr.w	r3, r3, #32
 800596e:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005970:	2003      	movs	r0, #3
 8005972:	e7e2      	b.n	800593a <SPI_EndRxTransaction+0x1a>

08005974 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005974:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005976:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005978:	4a12      	ldr	r2, [pc, #72]	@ (80059c4 <SPI_EndRxTxTransaction+0x50>)
 800597a:	6815      	ldr	r5, [r2, #0]
 800597c:	4a12      	ldr	r2, [pc, #72]	@ (80059c8 <SPI_EndRxTxTransaction+0x54>)
 800597e:	fbb5 f5f2 	udiv	r5, r5, r2
 8005982:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005986:	4355      	muls	r5, r2
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005988:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800598a:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800598c:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
{
 8005990:	4604      	mov	r4, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005992:	d10b      	bne.n	80059ac <SPI_EndRxTxTransaction+0x38>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005994:	460a      	mov	r2, r1
 8005996:	2180      	movs	r1, #128	@ 0x80
 8005998:	f7ff ff6a 	bl	8005870 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800599c:	b178      	cbz	r0, 80059be <SPI_EndRxTxTransaction+0x4a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800599e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80059a0:	f043 0320 	orr.w	r3, r3, #32
 80059a4:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 80059a6:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 80059a8:	b003      	add	sp, #12
 80059aa:	bd30      	pop	{r4, r5, pc}
      if (count == 0U)
 80059ac:	9b01      	ldr	r3, [sp, #4]
 80059ae:	b133      	cbz	r3, 80059be <SPI_EndRxTxTransaction+0x4a>
      count--;
 80059b0:	9b01      	ldr	r3, [sp, #4]
 80059b2:	3b01      	subs	r3, #1
 80059b4:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80059b6:	6823      	ldr	r3, [r4, #0]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	061b      	lsls	r3, r3, #24
 80059bc:	d4f6      	bmi.n	80059ac <SPI_EndRxTxTransaction+0x38>
  return HAL_OK;
 80059be:	2000      	movs	r0, #0
 80059c0:	e7f2      	b.n	80059a8 <SPI_EndRxTxTransaction+0x34>
 80059c2:	bf00      	nop
 80059c4:	2000007c 	.word	0x2000007c
 80059c8:	016e3600 	.word	0x016e3600

080059cc <HAL_SPI_Init>:
{
 80059cc:	b510      	push	{r4, lr}
  if (hspi == NULL)
 80059ce:	4604      	mov	r4, r0
 80059d0:	2800      	cmp	r0, #0
 80059d2:	d055      	beq.n	8005a80 <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80059d4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d14e      	bne.n	8005a78 <HAL_SPI_Init+0xac>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059da:	6842      	ldr	r2, [r0, #4]
 80059dc:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80059e0:	d000      	beq.n	80059e4 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059e2:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059e4:	2300      	movs	r3, #0
 80059e6:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80059e8:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80059ec:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80059f0:	b923      	cbnz	r3, 80059fc <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 80059f2:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 80059f6:	4620      	mov	r0, r4
 80059f8:	f7fc f958 	bl	8001cac <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80059fc:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059fe:	68a0      	ldr	r0, [r4, #8]
 8005a00:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8005a02:	2302      	movs	r3, #2
 8005a04:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 8005a08:	680b      	ldr	r3, [r1, #0]
 8005a0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a0e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a10:	6863      	ldr	r3, [r4, #4]
 8005a12:	f400 4004 	and.w	r0, r0, #33792	@ 0x8400
 8005a16:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8005a1a:	4303      	orrs	r3, r0
 8005a1c:	68e0      	ldr	r0, [r4, #12]
 8005a1e:	f400 6000 	and.w	r0, r0, #2048	@ 0x800
 8005a22:	4303      	orrs	r3, r0
 8005a24:	6920      	ldr	r0, [r4, #16]
 8005a26:	f000 0002 	and.w	r0, r0, #2
 8005a2a:	4303      	orrs	r3, r0
 8005a2c:	6960      	ldr	r0, [r4, #20]
 8005a2e:	f000 0001 	and.w	r0, r0, #1
 8005a32:	4303      	orrs	r3, r0
 8005a34:	f402 7000 	and.w	r0, r2, #512	@ 0x200
 8005a38:	4303      	orrs	r3, r0
 8005a3a:	69e0      	ldr	r0, [r4, #28]
 8005a3c:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 8005a40:	4303      	orrs	r3, r0
 8005a42:	6a20      	ldr	r0, [r4, #32]
 8005a44:	f000 0080 	and.w	r0, r0, #128	@ 0x80
 8005a48:	4303      	orrs	r3, r0
 8005a4a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8005a4c:	f400 5000 	and.w	r0, r0, #8192	@ 0x2000
 8005a50:	4303      	orrs	r3, r0
 8005a52:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005a54:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005a56:	0c12      	lsrs	r2, r2, #16
 8005a58:	f003 0310 	and.w	r3, r3, #16
 8005a5c:	f002 0204 	and.w	r2, r2, #4
 8005a60:	431a      	orrs	r2, r3
 8005a62:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a64:	69cb      	ldr	r3, [r1, #28]
 8005a66:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a6a:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a6c:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8005a6e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a70:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a72:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 8005a76:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a78:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a7e:	e7b1      	b.n	80059e4 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8005a80:	2001      	movs	r0, #1
 8005a82:	e7f8      	b.n	8005a76 <HAL_SPI_Init+0xaa>

08005a84 <HAL_SPI_Transmit>:
{
 8005a84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005a88:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8005a8a:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 8005a8e:	2b01      	cmp	r3, #1
{
 8005a90:	4604      	mov	r4, r0
 8005a92:	460d      	mov	r5, r1
 8005a94:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8005a96:	f000 80a0 	beq.w	8005bda <HAL_SPI_Transmit+0x156>
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tickstart = HAL_GetTick();
 8005aa0:	f7fd fffe 	bl	8003aa0 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8005aa4:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8005aa8:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8005aaa:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8005aac:	b2d8      	uxtb	r0, r3
 8005aae:	f040 8092 	bne.w	8005bd6 <HAL_SPI_Transmit+0x152>
  if ((pData == NULL) || (Size == 0U))
 8005ab2:	2d00      	cmp	r5, #0
 8005ab4:	d061      	beq.n	8005b7a <HAL_SPI_Transmit+0xf6>
 8005ab6:	f1b8 0f00 	cmp.w	r8, #0
 8005aba:	d05e      	beq.n	8005b7a <HAL_SPI_Transmit+0xf6>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005abc:	2303      	movs	r3, #3
 8005abe:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->RxISR       = NULL;
 8005ac6:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  hspi->TxXferCount = Size;
 8005aca:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ace:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005ad0:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005ad2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ad4:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8005ad6:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005ad8:	6325      	str	r5, [r4, #48]	@ 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ada:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
  hspi->TxXferSize  = Size;
 8005ade:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ae2:	d107      	bne.n	8005af4 <HAL_SPI_Transmit+0x70>
    __HAL_SPI_DISABLE(hspi);
 8005ae4:	6833      	ldr	r3, [r6, #0]
 8005ae6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005aea:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 8005aec:	6833      	ldr	r3, [r6, #0]
 8005aee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005af2:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005af4:	6833      	ldr	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005af6:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005af8:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8005afa:	bf5e      	ittt	pl
 8005afc:	6833      	ldrpl	r3, [r6, #0]
 8005afe:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 8005b02:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b04:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b08:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b0a:	d13f      	bne.n	8005b8c <HAL_SPI_Transmit+0x108>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b0c:	b113      	cbz	r3, 8005b14 <HAL_SPI_Transmit+0x90>
 8005b0e:	f1b8 0f01 	cmp.w	r8, #1
 8005b12:	d107      	bne.n	8005b24 <HAL_SPI_Transmit+0xa0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b14:	f835 3b02 	ldrh.w	r3, [r5], #2
 8005b18:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b1a:	6325      	str	r5, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8005b1c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8005b24:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	b9a3      	cbnz	r3, 8005b54 <HAL_SPI_Transmit+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b2a:	464a      	mov	r2, r9
 8005b2c:	4639      	mov	r1, r7
 8005b2e:	4620      	mov	r0, r4
 8005b30:	f7ff ff20 	bl	8005974 <SPI_EndRxTxTransaction>
 8005b34:	2800      	cmp	r0, #0
 8005b36:	d14b      	bne.n	8005bd0 <HAL_SPI_Transmit+0x14c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b38:	68a3      	ldr	r3, [r4, #8]
 8005b3a:	b933      	cbnz	r3, 8005b4a <HAL_SPI_Transmit+0xc6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b3c:	9301      	str	r3, [sp, #4]
 8005b3e:	6823      	ldr	r3, [r4, #0]
 8005b40:	68da      	ldr	r2, [r3, #12]
 8005b42:	9201      	str	r2, [sp, #4]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	9301      	str	r3, [sp, #4]
 8005b48:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b4a:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8005b4c:	3800      	subs	r0, #0
 8005b4e:	bf18      	it	ne
 8005b50:	2001      	movne	r0, #1
error:
 8005b52:	e012      	b.n	8005b7a <HAL_SPI_Transmit+0xf6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b54:	6822      	ldr	r2, [r4, #0]
 8005b56:	6893      	ldr	r3, [r2, #8]
 8005b58:	0798      	lsls	r0, r3, #30
 8005b5a:	d505      	bpl.n	8005b68 <HAL_SPI_Transmit+0xe4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b5c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005b5e:	f833 1b02 	ldrh.w	r1, [r3], #2
 8005b62:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b64:	6323      	str	r3, [r4, #48]	@ 0x30
 8005b66:	e7d9      	b.n	8005b1c <HAL_SPI_Transmit+0x98>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b68:	f7fd ff9a 	bl	8003aa0 <HAL_GetTick>
 8005b6c:	eba0 0009 	sub.w	r0, r0, r9
 8005b70:	42b8      	cmp	r0, r7
 8005b72:	d3d7      	bcc.n	8005b24 <HAL_SPI_Transmit+0xa0>
 8005b74:	1c79      	adds	r1, r7, #1
 8005b76:	d0d5      	beq.n	8005b24 <HAL_SPI_Transmit+0xa0>
          errorcode = HAL_TIMEOUT;
 8005b78:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8005b80:	2300      	movs	r3, #0
 8005b82:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8005b86:	b003      	add	sp, #12
 8005b88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b8c:	b113      	cbz	r3, 8005b94 <HAL_SPI_Transmit+0x110>
 8005b8e:	f1b8 0f01 	cmp.w	r8, #1
 8005b92:	d108      	bne.n	8005ba6 <HAL_SPI_Transmit+0x122>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b94:	782b      	ldrb	r3, [r5, #0]
 8005b96:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b98:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8005b9e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8005ba6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d0bd      	beq.n	8005b2a <HAL_SPI_Transmit+0xa6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005bae:	6823      	ldr	r3, [r4, #0]
 8005bb0:	689a      	ldr	r2, [r3, #8]
 8005bb2:	0792      	lsls	r2, r2, #30
 8005bb4:	d503      	bpl.n	8005bbe <HAL_SPI_Transmit+0x13a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005bb6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8005bb8:	7812      	ldrb	r2, [r2, #0]
 8005bba:	731a      	strb	r2, [r3, #12]
 8005bbc:	e7ec      	b.n	8005b98 <HAL_SPI_Transmit+0x114>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bbe:	f7fd ff6f 	bl	8003aa0 <HAL_GetTick>
 8005bc2:	eba0 0009 	sub.w	r0, r0, r9
 8005bc6:	42b8      	cmp	r0, r7
 8005bc8:	d3ed      	bcc.n	8005ba6 <HAL_SPI_Transmit+0x122>
 8005bca:	1c7b      	adds	r3, r7, #1
 8005bcc:	d0eb      	beq.n	8005ba6 <HAL_SPI_Transmit+0x122>
 8005bce:	e7d3      	b.n	8005b78 <HAL_SPI_Transmit+0xf4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bd0:	2320      	movs	r3, #32
 8005bd2:	6563      	str	r3, [r4, #84]	@ 0x54
 8005bd4:	e7b0      	b.n	8005b38 <HAL_SPI_Transmit+0xb4>
    errorcode = HAL_BUSY;
 8005bd6:	2002      	movs	r0, #2
 8005bd8:	e7cf      	b.n	8005b7a <HAL_SPI_Transmit+0xf6>
  __HAL_LOCK(hspi);
 8005bda:	2002      	movs	r0, #2
 8005bdc:	e7d3      	b.n	8005b86 <HAL_SPI_Transmit+0x102>

08005bde <HAL_SPI_TransmitReceive>:
{
 8005bde:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005be2:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8005be4:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
{
 8005be8:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  __HAL_LOCK(hspi);
 8005bec:	2b01      	cmp	r3, #1
{
 8005bee:	4604      	mov	r4, r0
 8005bf0:	460d      	mov	r5, r1
 8005bf2:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8005bf4:	f000 80e1 	beq.w	8005dba <HAL_SPI_TransmitReceive+0x1dc>
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tickstart = HAL_GetTick();
 8005bfe:	f7fd ff4f 	bl	8003aa0 <HAL_GetTick>
  tmp_state           = hspi->State;
 8005c02:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tmp_mode            = hspi->Init.Mode;
 8005c06:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c08:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8005c0a:	4607      	mov	r7, r0
  tmp_state           = hspi->State;
 8005c0c:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c0e:	d00a      	beq.n	8005c26 <HAL_SPI_TransmitReceive+0x48>
 8005c10:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8005c14:	f040 80cf 	bne.w	8005db6 <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005c18:	68a3      	ldr	r3, [r4, #8]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f040 80cb 	bne.w	8005db6 <HAL_SPI_TransmitReceive+0x1d8>
 8005c20:	2904      	cmp	r1, #4
 8005c22:	f040 80c8 	bne.w	8005db6 <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c26:	b115      	cbz	r5, 8005c2e <HAL_SPI_TransmitReceive+0x50>
 8005c28:	f1b9 0f00 	cmp.w	r9, #0
 8005c2c:	d109      	bne.n	8005c42 <HAL_SPI_TransmitReceive+0x64>
    errorcode = HAL_ERROR;
 8005c2e:	2001      	movs	r0, #1
  hspi->State = HAL_SPI_STATE_READY;
 8005c30:	2301      	movs	r3, #1
 8005c32:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8005c36:	2300      	movs	r3, #0
 8005c38:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8005c3c:	b003      	add	sp, #12
 8005c3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c42:	2e00      	cmp	r6, #0
 8005c44:	d0f3      	beq.n	8005c2e <HAL_SPI_TransmitReceive+0x50>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c46:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c4a:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c4e:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c50:	bf1c      	itt	ne
 8005c52:	2305      	movne	r3, #5
 8005c54:	f884 3051 	strbne.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->TxISR       = NULL;
 8005c5c:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c60:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8005c62:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxXferCount = Size;
 8005c64:	86e6      	strh	r6, [r4, #54]	@ 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c66:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 8005c68:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c6a:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 8005c6c:	bf58      	it	pl
 8005c6e:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005c70:	6325      	str	r5, [r4, #48]	@ 0x30
    __HAL_SPI_ENABLE(hspi);
 8005c72:	bf58      	it	pl
 8005c74:	f041 0140 	orrpl.w	r1, r1, #64	@ 0x40
  hspi->TxXferSize  = Size;
 8005c78:	86a6      	strh	r6, [r4, #52]	@ 0x34
    __HAL_SPI_ENABLE(hspi);
 8005c7a:	bf58      	it	pl
 8005c7c:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005c7e:	68e1      	ldr	r1, [r4, #12]
 8005c80:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8005c84:	d148      	bne.n	8005d18 <HAL_SPI_TransmitReceive+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c86:	b10a      	cbz	r2, 8005c8c <HAL_SPI_TransmitReceive+0xae>
 8005c88:	2e01      	cmp	r6, #1
 8005c8a:	d107      	bne.n	8005c9c <HAL_SPI_TransmitReceive+0xbe>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c8c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8005c90:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8005c92:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c94:	6325      	str	r5, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8005c96:	3b01      	subs	r3, #1
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8005c9c:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c9e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	b963      	cbnz	r3, 8005cbe <HAL_SPI_TransmitReceive+0xe0>
 8005ca4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	b94b      	cbnz	r3, 8005cbe <HAL_SPI_TransmitReceive+0xe0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005caa:	463a      	mov	r2, r7
 8005cac:	4641      	mov	r1, r8
 8005cae:	4620      	mov	r0, r4
 8005cb0:	f7ff fe60 	bl	8005974 <SPI_EndRxTxTransaction>
 8005cb4:	2800      	cmp	r0, #0
 8005cb6:	d072      	beq.n	8005d9e <HAL_SPI_TransmitReceive+0x1c0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cb8:	2320      	movs	r3, #32
 8005cba:	6563      	str	r3, [r4, #84]	@ 0x54
    goto error;
 8005cbc:	e7b7      	b.n	8005c2e <HAL_SPI_TransmitReceive+0x50>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005cbe:	6821      	ldr	r1, [r4, #0]
 8005cc0:	688b      	ldr	r3, [r1, #8]
 8005cc2:	079a      	lsls	r2, r3, #30
 8005cc4:	d50d      	bpl.n	8005ce2 <HAL_SPI_TransmitReceive+0x104>
 8005cc6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	b153      	cbz	r3, 8005ce2 <HAL_SPI_TransmitReceive+0x104>
 8005ccc:	b145      	cbz	r5, 8005ce0 <HAL_SPI_TransmitReceive+0x102>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cce:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005cd0:	f833 2b02 	ldrh.w	r2, [r3], #2
 8005cd4:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cd6:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8005cd8:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	86e3      	strh	r3, [r4, #54]	@ 0x36
{
 8005ce0:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ce2:	688a      	ldr	r2, [r1, #8]
 8005ce4:	f012 0201 	ands.w	r2, r2, #1
 8005ce8:	d00c      	beq.n	8005d04 <HAL_SPI_TransmitReceive+0x126>
 8005cea:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	b14b      	cbz	r3, 8005d04 <HAL_SPI_TransmitReceive+0x126>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005cf0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005cf2:	68c9      	ldr	r1, [r1, #12]
 8005cf4:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005cf8:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8005cfa:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8005d02:	4615      	mov	r5, r2
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005d04:	f7fd fecc 	bl	8003aa0 <HAL_GetTick>
 8005d08:	1bc0      	subs	r0, r0, r7
 8005d0a:	4540      	cmp	r0, r8
 8005d0c:	d3c7      	bcc.n	8005c9e <HAL_SPI_TransmitReceive+0xc0>
 8005d0e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005d12:	d0c4      	beq.n	8005c9e <HAL_SPI_TransmitReceive+0xc0>
        errorcode = HAL_TIMEOUT;
 8005d14:	2003      	movs	r0, #3
 8005d16:	e78b      	b.n	8005c30 <HAL_SPI_TransmitReceive+0x52>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d18:	b10a      	cbz	r2, 8005d1e <HAL_SPI_TransmitReceive+0x140>
 8005d1a:	2e01      	cmp	r6, #1
 8005d1c:	d108      	bne.n	8005d30 <HAL_SPI_TransmitReceive+0x152>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d1e:	782a      	ldrb	r2, [r5, #0]
 8005d20:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d22:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005d24:	3301      	adds	r3, #1
 8005d26:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8005d28:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8005d30:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d32:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	b91b      	cbnz	r3, 8005d40 <HAL_SPI_TransmitReceive+0x162>
 8005d38:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d0b4      	beq.n	8005caa <HAL_SPI_TransmitReceive+0xcc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d40:	6822      	ldr	r2, [r4, #0]
 8005d42:	6893      	ldr	r3, [r2, #8]
 8005d44:	079b      	lsls	r3, r3, #30
 8005d46:	d50e      	bpl.n	8005d66 <HAL_SPI_TransmitReceive+0x188>
 8005d48:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	b15b      	cbz	r3, 8005d66 <HAL_SPI_TransmitReceive+0x188>
 8005d4e:	b14d      	cbz	r5, 8005d64 <HAL_SPI_TransmitReceive+0x186>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005d50:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8005d56:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005d58:	3301      	adds	r3, #1
 8005d5a:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8005d5c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8005d64:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d66:	6822      	ldr	r2, [r4, #0]
 8005d68:	6891      	ldr	r1, [r2, #8]
 8005d6a:	f011 0101 	ands.w	r1, r1, #1
 8005d6e:	d00d      	beq.n	8005d8c <HAL_SPI_TransmitReceive+0x1ae>
 8005d70:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	b153      	cbz	r3, 8005d8c <HAL_SPI_TransmitReceive+0x1ae>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005d76:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005d78:	68d2      	ldr	r2, [r2, #12]
 8005d7a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005d7c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005d7e:	3301      	adds	r3, #1
 8005d80:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8005d82:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005d84:	3b01      	subs	r3, #1
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8005d8a:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d8c:	f7fd fe88 	bl	8003aa0 <HAL_GetTick>
 8005d90:	1bc0      	subs	r0, r0, r7
 8005d92:	4540      	cmp	r0, r8
 8005d94:	d3cd      	bcc.n	8005d32 <HAL_SPI_TransmitReceive+0x154>
 8005d96:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005d9a:	d0ca      	beq.n	8005d32 <HAL_SPI_TransmitReceive+0x154>
 8005d9c:	e7ba      	b.n	8005d14 <HAL_SPI_TransmitReceive+0x136>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d9e:	68a3      	ldr	r3, [r4, #8]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f47f af45 	bne.w	8005c30 <HAL_SPI_TransmitReceive+0x52>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005da6:	6823      	ldr	r3, [r4, #0]
 8005da8:	9001      	str	r0, [sp, #4]
 8005daa:	68da      	ldr	r2, [r3, #12]
 8005dac:	9201      	str	r2, [sp, #4]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	9301      	str	r3, [sp, #4]
 8005db2:	9b01      	ldr	r3, [sp, #4]
 8005db4:	e73c      	b.n	8005c30 <HAL_SPI_TransmitReceive+0x52>
    errorcode = HAL_BUSY;
 8005db6:	2002      	movs	r0, #2
 8005db8:	e73a      	b.n	8005c30 <HAL_SPI_TransmitReceive+0x52>
  __HAL_LOCK(hspi);
 8005dba:	2002      	movs	r0, #2
 8005dbc:	e73e      	b.n	8005c3c <HAL_SPI_TransmitReceive+0x5e>

08005dbe <HAL_SPI_Receive>:
{
 8005dbe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005dc2:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005dc4:	6843      	ldr	r3, [r0, #4]
 8005dc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
{
 8005dca:	4604      	mov	r4, r0
 8005dcc:	4689      	mov	r9, r1
 8005dce:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005dd0:	d10c      	bne.n	8005dec <HAL_SPI_Receive+0x2e>
 8005dd2:	6883      	ldr	r3, [r0, #8]
 8005dd4:	b953      	cbnz	r3, 8005dec <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005dd6:	2304      	movs	r3, #4
 8005dd8:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005ddc:	4613      	mov	r3, r2
 8005dde:	9500      	str	r5, [sp, #0]
 8005de0:	460a      	mov	r2, r1
 8005de2:	f7ff fefc 	bl	8005bde <HAL_SPI_TransmitReceive>
}
 8005de6:	b003      	add	sp, #12
 8005de8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8005dec:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d07f      	beq.n	8005ef4 <HAL_SPI_Receive+0x136>
 8005df4:	2301      	movs	r3, #1
 8005df6:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  tickstart = HAL_GetTick();
 8005dfa:	f7fd fe51 	bl	8003aa0 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8005dfe:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8005e02:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8005e04:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8005e06:	b2d8      	uxtb	r0, r3
 8005e08:	d172      	bne.n	8005ef0 <HAL_SPI_Receive+0x132>
  if ((pData == NULL) || (Size == 0U))
 8005e0a:	f1b9 0f00 	cmp.w	r9, #0
 8005e0e:	d05c      	beq.n	8005eca <HAL_SPI_Receive+0x10c>
 8005e10:	2f00      	cmp	r7, #0
 8005e12:	d05a      	beq.n	8005eca <HAL_SPI_Receive+0x10c>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e14:	68a2      	ldr	r2, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005e16:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e1a:	2600      	movs	r6, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005e1c:	2304      	movs	r3, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e1e:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005e22:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->TxISR       = NULL;
 8005e26:	e9c4 6610 	strd	r6, r6, [r4, #64]	@ 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e2a:	6566      	str	r6, [r4, #84]	@ 0x54
    __HAL_SPI_DISABLE(hspi);
 8005e2c:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8005e2e:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005e30:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005e32:	6326      	str	r6, [r4, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005e34:	86a6      	strh	r6, [r4, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005e36:	86e6      	strh	r6, [r4, #54]	@ 0x36
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e38:	d107      	bne.n	8005e4a <HAL_SPI_Receive+0x8c>
    __HAL_SPI_DISABLE(hspi);
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005e48:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	0656      	lsls	r6, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8005e4e:	bf5e      	ittt	pl
 8005e50:	681a      	ldrpl	r2, [r3, #0]
 8005e52:	f042 0240 	orrpl.w	r2, r2, #64	@ 0x40
 8005e56:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005e58:	68e3      	ldr	r3, [r4, #12]
 8005e5a:	b1f3      	cbz	r3, 8005e9a <HAL_SPI_Receive+0xdc>
    while (hspi->RxXferCount > 0U)
 8005e5c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	b1fb      	cbz	r3, 8005ea2 <HAL_SPI_Receive+0xe4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e62:	6823      	ldr	r3, [r4, #0]
 8005e64:	689a      	ldr	r2, [r3, #8]
 8005e66:	07d2      	lsls	r2, r2, #31
 8005e68:	d536      	bpl.n	8005ed8 <HAL_SPI_Receive+0x11a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e6a:	68da      	ldr	r2, [r3, #12]
 8005e6c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005e6e:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e72:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8005e74:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005e76:	3b01      	subs	r3, #1
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8005e7c:	e7ee      	b.n	8005e5c <HAL_SPI_Receive+0x9e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e7e:	6823      	ldr	r3, [r4, #0]
 8005e80:	689a      	ldr	r2, [r3, #8]
 8005e82:	07d0      	lsls	r0, r2, #31
 8005e84:	d518      	bpl.n	8005eb8 <HAL_SPI_Receive+0xfa>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005e86:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005e88:	7b1b      	ldrb	r3, [r3, #12]
 8005e8a:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e8c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005e8e:	3301      	adds	r3, #1
 8005e90:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8005e92:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005e94:	3b01      	subs	r3, #1
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->RxXferCount > 0U)
 8005e9a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1ed      	bne.n	8005e7e <HAL_SPI_Receive+0xc0>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ea2:	4642      	mov	r2, r8
 8005ea4:	4629      	mov	r1, r5
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	f7ff fd3a 	bl	8005920 <SPI_EndRxTransaction>
 8005eac:	b9e8      	cbnz	r0, 8005eea <HAL_SPI_Receive+0x12c>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005eae:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8005eb0:	3800      	subs	r0, #0
 8005eb2:	bf18      	it	ne
 8005eb4:	2001      	movne	r0, #1
error :
 8005eb6:	e008      	b.n	8005eca <HAL_SPI_Receive+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005eb8:	f7fd fdf2 	bl	8003aa0 <HAL_GetTick>
 8005ebc:	eba0 0008 	sub.w	r0, r0, r8
 8005ec0:	42a8      	cmp	r0, r5
 8005ec2:	d3ea      	bcc.n	8005e9a <HAL_SPI_Receive+0xdc>
 8005ec4:	1c69      	adds	r1, r5, #1
 8005ec6:	d0e8      	beq.n	8005e9a <HAL_SPI_Receive+0xdc>
          errorcode = HAL_TIMEOUT;
 8005ec8:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  return errorcode;
 8005ed6:	e786      	b.n	8005de6 <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ed8:	f7fd fde2 	bl	8003aa0 <HAL_GetTick>
 8005edc:	eba0 0008 	sub.w	r0, r0, r8
 8005ee0:	42a8      	cmp	r0, r5
 8005ee2:	d3bb      	bcc.n	8005e5c <HAL_SPI_Receive+0x9e>
 8005ee4:	1c6b      	adds	r3, r5, #1
 8005ee6:	d0b9      	beq.n	8005e5c <HAL_SPI_Receive+0x9e>
 8005ee8:	e7ee      	b.n	8005ec8 <HAL_SPI_Receive+0x10a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005eea:	2320      	movs	r3, #32
 8005eec:	6563      	str	r3, [r4, #84]	@ 0x54
 8005eee:	e7de      	b.n	8005eae <HAL_SPI_Receive+0xf0>
    errorcode = HAL_BUSY;
 8005ef0:	2002      	movs	r0, #2
 8005ef2:	e7ea      	b.n	8005eca <HAL_SPI_Receive+0x10c>
  __HAL_LOCK(hspi);
 8005ef4:	2002      	movs	r0, #2
 8005ef6:	e776      	b.n	8005de6 <HAL_SPI_Receive+0x28>

08005ef8 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005ef8:	4770      	bx	lr
	...

08005efc <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005efc:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d130      	bne.n	8005f66 <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f04:	2302      	movs	r3, #2
 8005f06:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f0a:	6803      	ldr	r3, [r0, #0]
 8005f0c:	68da      	ldr	r2, [r3, #12]
 8005f0e:	f042 0201 	orr.w	r2, r2, #1
 8005f12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f14:	4a15      	ldr	r2, [pc, #84]	@ (8005f6c <HAL_TIM_Base_Start_IT+0x70>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d01a      	beq.n	8005f50 <HAL_TIM_Base_Start_IT+0x54>
 8005f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f1e:	d017      	beq.n	8005f50 <HAL_TIM_Base_Start_IT+0x54>
 8005f20:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d013      	beq.n	8005f50 <HAL_TIM_Base_Start_IT+0x54>
 8005f28:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d00f      	beq.n	8005f50 <HAL_TIM_Base_Start_IT+0x54>
 8005f30:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d00b      	beq.n	8005f50 <HAL_TIM_Base_Start_IT+0x54>
 8005f38:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d007      	beq.n	8005f50 <HAL_TIM_Base_Start_IT+0x54>
 8005f40:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d003      	beq.n	8005f50 <HAL_TIM_Base_Start_IT+0x54>
 8005f48:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d104      	bne.n	8005f5a <HAL_TIM_Base_Start_IT+0x5e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f50:	689a      	ldr	r2, [r3, #8]
 8005f52:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f56:	2a06      	cmp	r2, #6
 8005f58:	d003      	beq.n	8005f62 <HAL_TIM_Base_Start_IT+0x66>
    {
      __HAL_TIM_ENABLE(htim);
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	f042 0201 	orr.w	r2, r2, #1
 8005f60:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8005f62:	2000      	movs	r0, #0
 8005f64:	4770      	bx	lr
    return HAL_ERROR;
 8005f66:	2001      	movs	r0, #1
}
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	40010000 	.word	0x40010000

08005f70 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8005f70:	4770      	bx	lr

08005f72 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8005f72:	4770      	bx	lr

08005f74 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8005f74:	4770      	bx	lr

08005f76 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8005f76:	4770      	bx	lr

08005f78 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f78:	6803      	ldr	r3, [r0, #0]
 8005f7a:	691a      	ldr	r2, [r3, #16]
 8005f7c:	0791      	lsls	r1, r2, #30
{
 8005f7e:	b510      	push	{r4, lr}
 8005f80:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f82:	d50e      	bpl.n	8005fa2 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f84:	68da      	ldr	r2, [r3, #12]
 8005f86:	0792      	lsls	r2, r2, #30
 8005f88:	d50b      	bpl.n	8005fa2 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f8a:	f06f 0202 	mvn.w	r2, #2
 8005f8e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f90:	2201      	movs	r2, #1
 8005f92:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	079b      	lsls	r3, r3, #30
 8005f98:	d077      	beq.n	800608a <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8005f9a:	f7ff ffea 	bl	8005f72 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005fa2:	6823      	ldr	r3, [r4, #0]
 8005fa4:	691a      	ldr	r2, [r3, #16]
 8005fa6:	0750      	lsls	r0, r2, #29
 8005fa8:	d510      	bpl.n	8005fcc <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005faa:	68da      	ldr	r2, [r3, #12]
 8005fac:	0751      	lsls	r1, r2, #29
 8005fae:	d50d      	bpl.n	8005fcc <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005fb0:	f06f 0204 	mvn.w	r2, #4
 8005fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fba:	699b      	ldr	r3, [r3, #24]
 8005fbc:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8005fc0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fc2:	d068      	beq.n	8006096 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8005fc4:	f7ff ffd5 	bl	8005f72 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fcc:	6823      	ldr	r3, [r4, #0]
 8005fce:	691a      	ldr	r2, [r3, #16]
 8005fd0:	0712      	lsls	r2, r2, #28
 8005fd2:	d50f      	bpl.n	8005ff4 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fd4:	68da      	ldr	r2, [r3, #12]
 8005fd6:	0710      	lsls	r0, r2, #28
 8005fd8:	d50c      	bpl.n	8005ff4 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fda:	f06f 0208 	mvn.w	r2, #8
 8005fde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fe0:	2204      	movs	r2, #4
 8005fe2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fe4:	69db      	ldr	r3, [r3, #28]
 8005fe6:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8005fe8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fea:	d05a      	beq.n	80060a2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8005fec:	f7ff ffc1 	bl	8005f72 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ff4:	6823      	ldr	r3, [r4, #0]
 8005ff6:	691a      	ldr	r2, [r3, #16]
 8005ff8:	06d2      	lsls	r2, r2, #27
 8005ffa:	d510      	bpl.n	800601e <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ffc:	68da      	ldr	r2, [r3, #12]
 8005ffe:	06d0      	lsls	r0, r2, #27
 8006000:	d50d      	bpl.n	800601e <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006002:	f06f 0210 	mvn.w	r2, #16
 8006006:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006008:	2208      	movs	r2, #8
 800600a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800600c:	69db      	ldr	r3, [r3, #28]
 800600e:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8006012:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006014:	d04b      	beq.n	80060ae <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8006016:	f7ff ffac 	bl	8005f72 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800601a:	2300      	movs	r3, #0
 800601c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800601e:	6823      	ldr	r3, [r4, #0]
 8006020:	691a      	ldr	r2, [r3, #16]
 8006022:	07d1      	lsls	r1, r2, #31
 8006024:	d508      	bpl.n	8006038 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006026:	68da      	ldr	r2, [r3, #12]
 8006028:	07d2      	lsls	r2, r2, #31
 800602a:	d505      	bpl.n	8006038 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800602c:	f06f 0201 	mvn.w	r2, #1
 8006030:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006032:	4620      	mov	r0, r4
 8006034:	f7fb fc9c 	bl	8001970 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006038:	6823      	ldr	r3, [r4, #0]
 800603a:	691a      	ldr	r2, [r3, #16]
 800603c:	0610      	lsls	r0, r2, #24
 800603e:	d508      	bpl.n	8006052 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006040:	68da      	ldr	r2, [r3, #12]
 8006042:	0611      	lsls	r1, r2, #24
 8006044:	d505      	bpl.n	8006052 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006046:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800604a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800604c:	4620      	mov	r0, r4
 800604e:	f000 f8b2 	bl	80061b6 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006052:	6823      	ldr	r3, [r4, #0]
 8006054:	691a      	ldr	r2, [r3, #16]
 8006056:	0652      	lsls	r2, r2, #25
 8006058:	d508      	bpl.n	800606c <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800605a:	68da      	ldr	r2, [r3, #12]
 800605c:	0650      	lsls	r0, r2, #25
 800605e:	d505      	bpl.n	800606c <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006060:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006064:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006066:	4620      	mov	r0, r4
 8006068:	f7ff ff85 	bl	8005f76 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800606c:	6823      	ldr	r3, [r4, #0]
 800606e:	691a      	ldr	r2, [r3, #16]
 8006070:	0691      	lsls	r1, r2, #26
 8006072:	d522      	bpl.n	80060ba <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006074:	68da      	ldr	r2, [r3, #12]
 8006076:	0692      	lsls	r2, r2, #26
 8006078:	d51f      	bpl.n	80060ba <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800607a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800607e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006080:	611a      	str	r2, [r3, #16]
}
 8006082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8006086:	f000 b895 	b.w	80061b4 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800608a:	f7ff ff71 	bl	8005f70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800608e:	4620      	mov	r0, r4
 8006090:	f7ff ff70 	bl	8005f74 <HAL_TIM_PWM_PulseFinishedCallback>
 8006094:	e783      	b.n	8005f9e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006096:	f7ff ff6b 	bl	8005f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800609a:	4620      	mov	r0, r4
 800609c:	f7ff ff6a 	bl	8005f74 <HAL_TIM_PWM_PulseFinishedCallback>
 80060a0:	e792      	b.n	8005fc8 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060a2:	f7ff ff65 	bl	8005f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060a6:	4620      	mov	r0, r4
 80060a8:	f7ff ff64 	bl	8005f74 <HAL_TIM_PWM_PulseFinishedCallback>
 80060ac:	e7a0      	b.n	8005ff0 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ae:	f7ff ff5f 	bl	8005f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060b2:	4620      	mov	r0, r4
 80060b4:	f7ff ff5e 	bl	8005f74 <HAL_TIM_PWM_PulseFinishedCallback>
 80060b8:	e7af      	b.n	800601a <HAL_TIM_IRQHandler+0xa2>
}
 80060ba:	bd10      	pop	{r4, pc}

080060bc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060bc:	4a25      	ldr	r2, [pc, #148]	@ (8006154 <TIM_Base_SetConfig+0x98>)
  tmpcr1 = TIMx->CR1;
 80060be:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060c0:	4290      	cmp	r0, r2
 80060c2:	d012      	beq.n	80060ea <TIM_Base_SetConfig+0x2e>
 80060c4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80060c8:	d00f      	beq.n	80060ea <TIM_Base_SetConfig+0x2e>
 80060ca:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80060ce:	4290      	cmp	r0, r2
 80060d0:	d00b      	beq.n	80060ea <TIM_Base_SetConfig+0x2e>
 80060d2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80060d6:	4290      	cmp	r0, r2
 80060d8:	d007      	beq.n	80060ea <TIM_Base_SetConfig+0x2e>
 80060da:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80060de:	4290      	cmp	r0, r2
 80060e0:	d003      	beq.n	80060ea <TIM_Base_SetConfig+0x2e>
 80060e2:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80060e6:	4290      	cmp	r0, r2
 80060e8:	d108      	bne.n	80060fc <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80060ea:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80060f0:	4313      	orrs	r3, r2

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060f2:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80060f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060f8:	4313      	orrs	r3, r2
 80060fa:	e016      	b.n	800612a <TIM_Base_SetConfig+0x6e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060fc:	4a16      	ldr	r2, [pc, #88]	@ (8006158 <TIM_Base_SetConfig+0x9c>)
 80060fe:	4290      	cmp	r0, r2
 8006100:	d0f7      	beq.n	80060f2 <TIM_Base_SetConfig+0x36>
 8006102:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006106:	4290      	cmp	r0, r2
 8006108:	d0f3      	beq.n	80060f2 <TIM_Base_SetConfig+0x36>
 800610a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800610e:	4290      	cmp	r0, r2
 8006110:	d0ef      	beq.n	80060f2 <TIM_Base_SetConfig+0x36>
 8006112:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8006116:	4290      	cmp	r0, r2
 8006118:	d0eb      	beq.n	80060f2 <TIM_Base_SetConfig+0x36>
 800611a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800611e:	4290      	cmp	r0, r2
 8006120:	d0e7      	beq.n	80060f2 <TIM_Base_SetConfig+0x36>
 8006122:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006126:	4290      	cmp	r0, r2
 8006128:	d0e3      	beq.n	80060f2 <TIM_Base_SetConfig+0x36>
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800612a:	694a      	ldr	r2, [r1, #20]
 800612c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006130:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8006132:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006134:	688b      	ldr	r3, [r1, #8]
 8006136:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006138:	680b      	ldr	r3, [r1, #0]
 800613a:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800613c:	4b05      	ldr	r3, [pc, #20]	@ (8006154 <TIM_Base_SetConfig+0x98>)
 800613e:	4298      	cmp	r0, r3
 8006140:	d003      	beq.n	800614a <TIM_Base_SetConfig+0x8e>
 8006142:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006146:	4298      	cmp	r0, r3
 8006148:	d101      	bne.n	800614e <TIM_Base_SetConfig+0x92>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800614a:	690b      	ldr	r3, [r1, #16]
 800614c:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800614e:	2301      	movs	r3, #1
 8006150:	6143      	str	r3, [r0, #20]
}
 8006152:	4770      	bx	lr
 8006154:	40010000 	.word	0x40010000
 8006158:	40014000 	.word	0x40014000

0800615c <HAL_TIM_Base_Init>:
{
 800615c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800615e:	4604      	mov	r4, r0
 8006160:	b330      	cbz	r0, 80061b0 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006162:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006166:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800616a:	b91b      	cbnz	r3, 8006174 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800616c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006170:	f7ff fec2 	bl	8005ef8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8006174:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006176:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006178:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800617c:	1d21      	adds	r1, r4, #4
 800617e:	f7ff ff9d 	bl	80060bc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006182:	2301      	movs	r3, #1
 8006184:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  return HAL_OK;
 8006188:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800618a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800618e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8006192:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8006196:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800619a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800619e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061a2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80061a6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80061aa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 80061ae:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80061b0:	2001      	movs	r0, #1
 80061b2:	e7fc      	b.n	80061ae <HAL_TIM_Base_Init+0x52>

080061b4 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 80061b4:	4770      	bx	lr

080061b6 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 80061b6:	4770      	bx	lr

080061b8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80061b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80061bc:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 80061c0:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 80061c4:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 80061c8:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
 80061cc:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80061d0:	6809      	ldr	r1, [r1, #0]
 80061d2:	ea43 0308 	orr.w	r3, r3, r8
 80061d6:	b981      	cbnz	r1, 80061fa <FMC_SDRAM_Init+0x42>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80061d8:	ea43 030e 	orr.w	r3, r3, lr
 80061dc:	4313      	orrs	r3, r2
 80061de:	ea43 030c 	orr.w	r3, r3, ip
 80061e2:	433b      	orrs	r3, r7
 80061e4:	6801      	ldr	r1, [r0, #0]
 80061e6:	4333      	orrs	r3, r6
 80061e8:	432b      	orrs	r3, r5
 80061ea:	4323      	orrs	r3, r4
 80061ec:	f36f 010e 	bfc	r1, #0, #15
 80061f0:	430b      	orrs	r3, r1
 80061f2:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 80061f4:	2000      	movs	r0, #0
 80061f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80061fa:	6801      	ldr	r1, [r0, #0]
 80061fc:	ea43 030e 	orr.w	r3, r3, lr
 8006200:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 8006204:	430b      	orrs	r3, r1
 8006206:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006208:	ea42 030c 	orr.w	r3, r2, ip
 800620c:	6841      	ldr	r1, [r0, #4]
 800620e:	433b      	orrs	r3, r7
 8006210:	4333      	orrs	r3, r6
 8006212:	432b      	orrs	r3, r5
 8006214:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 8006218:	4323      	orrs	r3, r4
 800621a:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800621e:	4313      	orrs	r3, r2
 8006220:	6043      	str	r3, [r0, #4]
 8006222:	e7e7      	b.n	80061f4 <FMC_SDRAM_Init+0x3c>

08006224 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006224:	68cb      	ldr	r3, [r1, #12]
 8006226:	f103 3cff 	add.w	ip, r3, #4294967295
 800622a:	694b      	ldr	r3, [r1, #20]
{
 800622c:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800622e:	684c      	ldr	r4, [r1, #4]
 8006230:	688f      	ldr	r7, [r1, #8]
 8006232:	690e      	ldr	r6, [r1, #16]
 8006234:	698d      	ldr	r5, [r1, #24]
 8006236:	6809      	ldr	r1, [r1, #0]
 8006238:	3b01      	subs	r3, #1
 800623a:	051b      	lsls	r3, r3, #20
 800623c:	3c01      	subs	r4, #1
 800623e:	3f01      	subs	r7, #1
 8006240:	3e01      	subs	r6, #1
 8006242:	3d01      	subs	r5, #1
 8006244:	0124      	lsls	r4, r4, #4
 8006246:	023f      	lsls	r7, r7, #8
 8006248:	0436      	lsls	r6, r6, #16
 800624a:	062d      	lsls	r5, r5, #24
 800624c:	3901      	subs	r1, #1
 800624e:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 8006252:	b95a      	cbnz	r2, 800626c <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006254:	430b      	orrs	r3, r1
 8006256:	4323      	orrs	r3, r4
 8006258:	6882      	ldr	r2, [r0, #8]
 800625a:	433b      	orrs	r3, r7
 800625c:	4333      	orrs	r3, r6
 800625e:	432b      	orrs	r3, r5
 8006260:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8006264:	4313      	orrs	r3, r2
 8006266:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 8006268:	2000      	movs	r0, #0
 800626a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800626c:	6882      	ldr	r2, [r0, #8]
 800626e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8006272:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 8006276:	4313      	orrs	r3, r2
 8006278:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800627a:	ea44 0307 	orr.w	r3, r4, r7
 800627e:	68c2      	ldr	r2, [r0, #12]
 8006280:	430b      	orrs	r3, r1
 8006282:	4333      	orrs	r3, r6
 8006284:	432b      	orrs	r3, r5
 8006286:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800628a:	4313      	orrs	r3, r2
 800628c:	60c3      	str	r3, [r0, #12]
 800628e:	e7eb      	b.n	8006268 <FMC_SDRAM_Timing_Init+0x44>

08006290 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006290:	b570      	push	{r4, r5, r6, lr}
 8006292:	4604      	mov	r4, r0
 8006294:	4615      	mov	r5, r2
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8006296:	6902      	ldr	r2, [r0, #16]
 8006298:	e9d1 3000 	ldrd	r3, r0, [r1]
 800629c:	4303      	orrs	r3, r0
 800629e:	68c8      	ldr	r0, [r1, #12]
 80062a0:	f36f 0215 	bfc	r2, #0, #22
 80062a4:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
 80062a8:	4313      	orrs	r3, r2
 80062aa:	688a      	ldr	r2, [r1, #8]
 80062ac:	3a01      	subs	r2, #1
 80062ae:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80062b2:	6123      	str	r3, [r4, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 80062b4:	f7fd fbf4 	bl	8003aa0 <HAL_GetTick>
 80062b8:	4606      	mov	r6, r0

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80062ba:	69a0      	ldr	r0, [r4, #24]
 80062bc:	f010 0020 	ands.w	r0, r0, #32
 80062c0:	d003      	beq.n	80062ca <FMC_SDRAM_SendCommand+0x3a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062c2:	1c6b      	adds	r3, r5, #1
 80062c4:	d0f9      	beq.n	80062ba <FMC_SDRAM_SendCommand+0x2a>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80062c6:	b90d      	cbnz	r5, 80062cc <FMC_SDRAM_SendCommand+0x3c>
      {
        return HAL_TIMEOUT;
 80062c8:	2003      	movs	r0, #3
      }
    }
  }
  return HAL_OK;
}
 80062ca:	bd70      	pop	{r4, r5, r6, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80062cc:	f7fd fbe8 	bl	8003aa0 <HAL_GetTick>
 80062d0:	1b80      	subs	r0, r0, r6
 80062d2:	42a8      	cmp	r0, r5
 80062d4:	d9f1      	bls.n	80062ba <FMC_SDRAM_SendCommand+0x2a>
 80062d6:	e7f7      	b.n	80062c8 <FMC_SDRAM_SendCommand+0x38>

080062d8 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80062d8:	6943      	ldr	r3, [r0, #20]
 80062da:	f36f 034d 	bfc	r3, #1, #13
 80062de:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80062e2:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 80062e4:	2000      	movs	r0, #0
 80062e6:	4770      	bx	lr

080062e8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80062e8:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 80062ea:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80062ee:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80062f0:	f001 fe1c 	bl	8007f2c <xTaskGetSchedulerState>
 80062f4:	2801      	cmp	r0, #1
 80062f6:	d003      	beq.n	8006300 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 80062f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 80062fc:	f000 bbea 	b.w	8006ad4 <xPortSysTickHandler>
}
 8006300:	bd08      	pop	{r3, pc}
	...

08006304 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006304:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8006308:	b92b      	cbnz	r3, 8006316 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800630a:	4b06      	ldr	r3, [pc, #24]	@ (8006324 <osKernelInitialize+0x20>)
 800630c:	6818      	ldr	r0, [r3, #0]
 800630e:	b928      	cbnz	r0, 800631c <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006310:	2201      	movs	r2, #1
 8006312:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006314:	4770      	bx	lr
    stat = osErrorISR;
 8006316:	f06f 0005 	mvn.w	r0, #5
 800631a:	4770      	bx	lr
    } else {
      stat = osError;
 800631c:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	20001de4 	.word	0x20001de4

08006328 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006328:	b510      	push	{r4, lr}
 800632a:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800632e:	b95c      	cbnz	r4, 8006348 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8006330:	4b08      	ldr	r3, [pc, #32]	@ (8006354 <osKernelStart+0x2c>)
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	2a01      	cmp	r2, #1
 8006336:	d10a      	bne.n	800634e <osKernelStart+0x26>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006338:	4a07      	ldr	r2, [pc, #28]	@ (8006358 <osKernelStart+0x30>)
 800633a:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800633c:	2202      	movs	r2, #2
 800633e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006340:	f001 fb72 	bl	8007a28 <vTaskStartScheduler>
      stat = osOK;
 8006344:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8006346:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8006348:	f06f 0005 	mvn.w	r0, #5
 800634c:	e7fb      	b.n	8006346 <osKernelStart+0x1e>
      stat = osError;
 800634e:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8006352:	e7f8      	b.n	8006346 <osKernelStart+0x1e>
 8006354:	20001de4 	.word	0x20001de4
 8006358:	e000ed00 	.word	0xe000ed00

0800635c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800635c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800635e:	b087      	sub	sp, #28
 8006360:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006362:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006364:	460b      	mov	r3, r1
  hTask = NULL;
 8006366:	9205      	str	r2, [sp, #20]
 8006368:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800636c:	b9fa      	cbnz	r2, 80063ae <osThreadNew+0x52>
 800636e:	b1f0      	cbz	r0, 80063ae <osThreadNew+0x52>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8006370:	b354      	cbz	r4, 80063c8 <osThreadNew+0x6c>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8006372:	69a5      	ldr	r5, [r4, #24]
 8006374:	b125      	cbz	r5, 8006380 <osThreadNew+0x24>
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006376:	1e69      	subs	r1, r5, #1
 8006378:	2937      	cmp	r1, #55	@ 0x37
 800637a:	d902      	bls.n	8006382 <osThreadNew+0x26>
        return (NULL);
 800637c:	2000      	movs	r0, #0
 800637e:	e017      	b.n	80063b0 <osThreadNew+0x54>
    prio  = (UBaseType_t)osPriorityNormal;
 8006380:	2518      	movs	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006382:	6862      	ldr	r2, [r4, #4]
 8006384:	07d2      	lsls	r2, r2, #31
 8006386:	d4f9      	bmi.n	800637c <osThreadNew+0x20>
      }

      if (attr->stack_size > 0U) {
 8006388:	6966      	ldr	r6, [r4, #20]
 800638a:	b19e      	cbz	r6, 80063b4 <osThreadNew+0x58>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800638c:	08b2      	lsrs	r2, r6, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800638e:	e9d4 7c02 	ldrd	r7, ip, [r4, #8]
      if (attr->name != NULL) {
 8006392:	6821      	ldr	r1, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006394:	b187      	cbz	r7, 80063b8 <osThreadNew+0x5c>
 8006396:	f1bc 0f5f 	cmp.w	ip, #95	@ 0x5f
 800639a:	d908      	bls.n	80063ae <osThreadNew+0x52>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800639c:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800639e:	b134      	cbz	r4, 80063ae <osThreadNew+0x52>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80063a0:	b12e      	cbz	r6, 80063ae <osThreadNew+0x52>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80063a2:	e9cd 4701 	strd	r4, r7, [sp, #4]
 80063a6:	9500      	str	r5, [sp, #0]
 80063a8:	f001 fad7 	bl	800795a <xTaskCreateStatic>
 80063ac:	9005      	str	r0, [sp, #20]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80063ae:	9805      	ldr	r0, [sp, #20]
}
 80063b0:	b007      	add	sp, #28
 80063b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 80063b4:	2280      	movs	r2, #128	@ 0x80
 80063b6:	e7ea      	b.n	800638e <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80063b8:	f1bc 0f00 	cmp.w	ip, #0
 80063bc:	d1f7      	bne.n	80063ae <osThreadNew+0x52>
 80063be:	6924      	ldr	r4, [r4, #16]
 80063c0:	2c00      	cmp	r4, #0
 80063c2:	d1f4      	bne.n	80063ae <osThreadNew+0x52>
 80063c4:	460c      	mov	r4, r1
 80063c6:	e001      	b.n	80063cc <osThreadNew+0x70>
    prio  = (UBaseType_t)osPriorityNormal;
 80063c8:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 80063ca:	2280      	movs	r2, #128	@ 0x80
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80063cc:	a905      	add	r1, sp, #20
 80063ce:	e9cd 5100 	strd	r5, r1, [sp]
 80063d2:	b292      	uxth	r2, r2
 80063d4:	4621      	mov	r1, r4
 80063d6:	f001 faf8 	bl	80079ca <xTaskCreate>
 80063da:	2801      	cmp	r0, #1
            hTask = NULL;
 80063dc:	bf1c      	itt	ne
 80063de:	2300      	movne	r3, #0
 80063e0:	9305      	strne	r3, [sp, #20]
 80063e2:	e7e4      	b.n	80063ae <osThreadNew+0x52>

080063e4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80063e4:	b508      	push	{r3, lr}
 80063e6:	f3ef 8205 	mrs	r2, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80063ea:	b922      	cbnz	r2, 80063f6 <osDelay+0x12>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 80063ec:	b108      	cbz	r0, 80063f2 <osDelay+0xe>
      vTaskDelay(ticks);
 80063ee:	f001 fc79 	bl	8007ce4 <vTaskDelay>
    stat = osOK;
 80063f2:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 80063f4:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 80063f6:	f06f 0005 	mvn.w	r0, #5
  return (stat);
 80063fa:	e7fb      	b.n	80063f4 <osDelay+0x10>

080063fc <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80063fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063fe:	4604      	mov	r4, r0
 8006400:	460e      	mov	r6, r1
 8006402:	4615      	mov	r5, r2
 8006404:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006408:	b942      	cbnz	r2, 800641c <osSemaphoreNew+0x20>
 800640a:	b138      	cbz	r0, 800641c <osSemaphoreNew+0x20>
 800640c:	4288      	cmp	r0, r1
 800640e:	d305      	bcc.n	800641c <osSemaphoreNew+0x20>
    mem = -1;

    if (attr != NULL) {
 8006410:	b155      	cbz	r5, 8006428 <osSemaphoreNew+0x2c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006412:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 8006416:	b12b      	cbz	r3, 8006424 <osSemaphoreNew+0x28>
 8006418:	2f4f      	cmp	r7, #79	@ 0x4f
 800641a:	d822      	bhi.n	8006462 <osSemaphoreNew+0x66>
  hSemaphore = NULL;
 800641c:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800641e:	4620      	mov	r0, r4
 8006420:	b003      	add	sp, #12
 8006422:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006424:	2f00      	cmp	r7, #0
 8006426:	d1f9      	bne.n	800641c <osSemaphoreNew+0x20>
      if (max_count == 1U) {
 8006428:	2c01      	cmp	r4, #1
 800642a:	d00c      	beq.n	8006446 <osSemaphoreNew+0x4a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800642c:	4620      	mov	r0, r4
 800642e:	4631      	mov	r1, r6
 8006430:	f000 fd88 	bl	8006f44 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 8006434:	4604      	mov	r4, r0
 8006436:	2800      	cmp	r0, #0
 8006438:	d0f0      	beq.n	800641c <osSemaphoreNew+0x20>
        if (attr != NULL) {
 800643a:	b985      	cbnz	r5, 800645e <osSemaphoreNew+0x62>
        vQueueAddToRegistry (hSemaphore, name);
 800643c:	4629      	mov	r1, r5
 800643e:	4620      	mov	r0, r4
 8006440:	f001 f8c6 	bl	80075d0 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 8006444:	e7eb      	b.n	800641e <osSemaphoreNew+0x22>
            hSemaphore = xSemaphoreCreateBinary();
 8006446:	2203      	movs	r2, #3
 8006448:	2100      	movs	r1, #0
 800644a:	2001      	movs	r0, #1
 800644c:	f000 fd31 	bl	8006eb2 <xQueueGenericCreate>
 8006450:	e00e      	b.n	8006470 <osSemaphoreNew+0x74>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006452:	461a      	mov	r2, r3
 8006454:	f000 fd54 	bl	8006f00 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 8006458:	4604      	mov	r4, r0
 800645a:	2800      	cmp	r0, #0
 800645c:	d0de      	beq.n	800641c <osSemaphoreNew+0x20>
          name = attr->name;
 800645e:	682d      	ldr	r5, [r5, #0]
 8006460:	e7ec      	b.n	800643c <osSemaphoreNew+0x40>
      if (max_count == 1U) {
 8006462:	2801      	cmp	r0, #1
 8006464:	d1f5      	bne.n	8006452 <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006466:	2103      	movs	r1, #3
 8006468:	9100      	str	r1, [sp, #0]
 800646a:	4611      	mov	r1, r2
 800646c:	f000 fcd3 	bl	8006e16 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 8006470:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006472:	2800      	cmp	r0, #0
 8006474:	d0d2      	beq.n	800641c <osSemaphoreNew+0x20>
 8006476:	2e00      	cmp	r6, #0
 8006478:	d0df      	beq.n	800643a <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800647a:	2300      	movs	r3, #0
 800647c:	461a      	mov	r2, r3
 800647e:	4619      	mov	r1, r3
 8006480:	f000 fd7e 	bl	8006f80 <xQueueGenericSend>
 8006484:	2801      	cmp	r0, #1
 8006486:	d0d8      	beq.n	800643a <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 8006488:	4620      	mov	r0, r4
 800648a:	f001 f8cb 	bl	8007624 <vQueueDelete>
      if (hSemaphore != NULL) {
 800648e:	e7c5      	b.n	800641c <osSemaphoreNew+0x20>

08006490 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006490:	b513      	push	{r0, r1, r4, lr}
 8006492:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8006494:	b328      	cbz	r0, 80064e2 <osSemaphoreAcquire+0x52>
 8006496:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800649a:	b1cb      	cbz	r3, 80064d0 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 800649c:	bb09      	cbnz	r1, 80064e2 <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800649e:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80064a0:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80064a2:	f001 f828 	bl	80074f6 <xQueueReceiveFromISR>
 80064a6:	2801      	cmp	r0, #1
 80064a8:	d003      	beq.n	80064b2 <osSemaphoreAcquire+0x22>
        stat = osErrorResource;
 80064aa:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 80064ae:	b002      	add	sp, #8
 80064b0:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 80064b2:	9b01      	ldr	r3, [sp, #4]
 80064b4:	b90b      	cbnz	r3, 80064ba <osSemaphoreAcquire+0x2a>
  stat = osOK;
 80064b6:	2000      	movs	r0, #0
 80064b8:	e7f9      	b.n	80064ae <osSemaphoreAcquire+0x1e>
        portYIELD_FROM_ISR (yield);
 80064ba:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80064be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064c2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80064c6:	f3bf 8f4f 	dsb	sy
 80064ca:	f3bf 8f6f 	isb	sy
 80064ce:	e7f2      	b.n	80064b6 <osSemaphoreAcquire+0x26>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80064d0:	f000 ff54 	bl	800737c <xQueueSemaphoreTake>
 80064d4:	2801      	cmp	r0, #1
 80064d6:	d0ee      	beq.n	80064b6 <osSemaphoreAcquire+0x26>
      if (timeout != 0U) {
 80064d8:	2c00      	cmp	r4, #0
 80064da:	d0e6      	beq.n	80064aa <osSemaphoreAcquire+0x1a>
        stat = osErrorTimeout;
 80064dc:	f06f 0001 	mvn.w	r0, #1
 80064e0:	e7e5      	b.n	80064ae <osSemaphoreAcquire+0x1e>
    stat = osErrorParameter;
 80064e2:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80064e6:	e7e2      	b.n	80064ae <osSemaphoreAcquire+0x1e>

080064e8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80064e8:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80064ea:	b318      	cbz	r0, 8006534 <osSemaphoreRelease+0x4c>
 80064ec:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 80064f0:	b1cb      	cbz	r3, 8006526 <osSemaphoreRelease+0x3e>
    yield = pdFALSE;
 80064f2:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80064f4:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 80064f6:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80064f8:	f000 fe51 	bl	800719e <xQueueGiveFromISR>
 80064fc:	2801      	cmp	r0, #1
 80064fe:	d004      	beq.n	800650a <osSemaphoreRelease+0x22>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 8006500:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 8006504:	b003      	add	sp, #12
 8006506:	f85d fb04 	ldr.w	pc, [sp], #4
      portYIELD_FROM_ISR (yield);
 800650a:	9b01      	ldr	r3, [sp, #4]
 800650c:	b14b      	cbz	r3, 8006522 <osSemaphoreRelease+0x3a>
 800650e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006512:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006516:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8006522:	2000      	movs	r0, #0
 8006524:	e7ee      	b.n	8006504 <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006526:	461a      	mov	r2, r3
 8006528:	4619      	mov	r1, r3
 800652a:	f000 fd29 	bl	8006f80 <xQueueGenericSend>
 800652e:	2801      	cmp	r0, #1
 8006530:	d0f7      	beq.n	8006522 <osSemaphoreRelease+0x3a>
 8006532:	e7e5      	b.n	8006500 <osSemaphoreRelease+0x18>
    stat = osErrorParameter;
 8006534:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8006538:	e7e4      	b.n	8006504 <osSemaphoreRelease+0x1c>

0800653a <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
  uint32_t count;

  if (hSemaphore == NULL) {
 800653a:	b130      	cbz	r0, 800654a <osSemaphoreGetCount+0x10>
 800653c:	f3ef 8305 	mrs	r3, IPSR
    count = 0U;
  }
  else if (IS_IRQ()) {
 8006540:	b10b      	cbz	r3, 8006546 <osSemaphoreGetCount+0xc>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 8006542:	f001 b838 	b.w	80075b6 <uxQueueMessagesWaitingFromISR>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 8006546:	f001 b823 	b.w	8007590 <uxQueueMessagesWaiting>
  }

  return (count);
}
 800654a:	4770      	bx	lr

0800654c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800654c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800654e:	4605      	mov	r5, r0
 8006550:	460e      	mov	r6, r1
 8006552:	4614      	mov	r4, r2
 8006554:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006558:	b11f      	cbz	r7, 8006562 <osMessageQueueNew+0x16>
  hQueue = NULL;
 800655a:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800655c:	4628      	mov	r0, r5
 800655e:	b003      	add	sp, #12
 8006560:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006562:	2800      	cmp	r0, #0
 8006564:	d0f9      	beq.n	800655a <osMessageQueueNew+0xe>
 8006566:	2900      	cmp	r1, #0
 8006568:	d0f7      	beq.n	800655a <osMessageQueueNew+0xe>
    if (attr != NULL) {
 800656a:	b1da      	cbz	r2, 80065a4 <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800656c:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 8006570:	b183      	cbz	r3, 8006594 <osMessageQueueNew+0x48>
 8006572:	2a4f      	cmp	r2, #79	@ 0x4f
 8006574:	d9f1      	bls.n	800655a <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006576:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006578:	2a00      	cmp	r2, #0
 800657a:	d0ee      	beq.n	800655a <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800657c:	6966      	ldr	r6, [r4, #20]
 800657e:	434d      	muls	r5, r1
 8006580:	42ae      	cmp	r6, r5
 8006582:	d3ea      	bcc.n	800655a <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006584:	9700      	str	r7, [sp, #0]
 8006586:	f000 fc46 	bl	8006e16 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800658a:	4605      	mov	r5, r0
 800658c:	2800      	cmp	r0, #0
 800658e:	d0e4      	beq.n	800655a <osMessageQueueNew+0xe>
        name = attr->name;
 8006590:	6824      	ldr	r4, [r4, #0]
 8006592:	e011      	b.n	80065b8 <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006594:	2a00      	cmp	r2, #0
 8006596:	d1e0      	bne.n	800655a <osMessageQueueNew+0xe>
 8006598:	6923      	ldr	r3, [r4, #16]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1dd      	bne.n	800655a <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800659e:	6963      	ldr	r3, [r4, #20]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d1da      	bne.n	800655a <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 80065a4:	4628      	mov	r0, r5
 80065a6:	2200      	movs	r2, #0
 80065a8:	4631      	mov	r1, r6
 80065aa:	f000 fc82 	bl	8006eb2 <xQueueGenericCreate>
    if (hQueue != NULL) {
 80065ae:	4605      	mov	r5, r0
 80065b0:	2800      	cmp	r0, #0
 80065b2:	d0d2      	beq.n	800655a <osMessageQueueNew+0xe>
      if (attr != NULL) {
 80065b4:	2c00      	cmp	r4, #0
 80065b6:	d1eb      	bne.n	8006590 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 80065b8:	4621      	mov	r1, r4
 80065ba:	4628      	mov	r0, r5
 80065bc:	f001 f808 	bl	80075d0 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 80065c0:	e7cc      	b.n	800655c <osMessageQueueNew+0x10>

080065c2 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80065c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80065c4:	461c      	mov	r4, r3
 80065c6:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80065ca:	b1de      	cbz	r6, 8006604 <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80065cc:	b338      	cbz	r0, 800661e <osMessageQueuePut+0x5c>
 80065ce:	b331      	cbz	r1, 800661e <osMessageQueuePut+0x5c>
 80065d0:	bb2b      	cbnz	r3, 800661e <osMessageQueuePut+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80065d2:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80065d4:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80065d6:	f000 fd85 	bl	80070e4 <xQueueGenericSendFromISR>
 80065da:	2801      	cmp	r0, #1
 80065dc:	d003      	beq.n	80065e6 <osMessageQueuePut+0x24>
        stat = osErrorResource;
 80065de:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 80065e2:	b002      	add	sp, #8
 80065e4:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 80065e6:	9b01      	ldr	r3, [sp, #4]
 80065e8:	b90b      	cbnz	r3, 80065ee <osMessageQueuePut+0x2c>
  stat = osOK;
 80065ea:	2000      	movs	r0, #0
 80065ec:	e7f9      	b.n	80065e2 <osMessageQueuePut+0x20>
        portYIELD_FROM_ISR (yield);
 80065ee:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80065f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065f6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80065fa:	f3bf 8f4f 	dsb	sy
 80065fe:	f3bf 8f6f 	isb	sy
 8006602:	e7f2      	b.n	80065ea <osMessageQueuePut+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006604:	b158      	cbz	r0, 800661e <osMessageQueuePut+0x5c>
 8006606:	b151      	cbz	r1, 800661e <osMessageQueuePut+0x5c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006608:	4633      	mov	r3, r6
 800660a:	4622      	mov	r2, r4
 800660c:	f000 fcb8 	bl	8006f80 <xQueueGenericSend>
 8006610:	2801      	cmp	r0, #1
 8006612:	d0ea      	beq.n	80065ea <osMessageQueuePut+0x28>
        if (timeout != 0U) {
 8006614:	2c00      	cmp	r4, #0
 8006616:	d0e2      	beq.n	80065de <osMessageQueuePut+0x1c>
          stat = osErrorTimeout;
 8006618:	f06f 0001 	mvn.w	r0, #1
 800661c:	e7e1      	b.n	80065e2 <osMessageQueuePut+0x20>
      stat = osErrorParameter;
 800661e:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8006622:	e7de      	b.n	80065e2 <osMessageQueuePut+0x20>

08006624 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006624:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006626:	461c      	mov	r4, r3
 8006628:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800662c:	b1db      	cbz	r3, 8006666 <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800662e:	b330      	cbz	r0, 800667e <osMessageQueueGet+0x5a>
 8006630:	b329      	cbz	r1, 800667e <osMessageQueueGet+0x5a>
 8006632:	bb24      	cbnz	r4, 800667e <osMessageQueueGet+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006634:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8006636:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006638:	f000 ff5d 	bl	80074f6 <xQueueReceiveFromISR>
 800663c:	2801      	cmp	r0, #1
 800663e:	d003      	beq.n	8006648 <osMessageQueueGet+0x24>
        stat = osErrorResource;
 8006640:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 8006644:	b003      	add	sp, #12
 8006646:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 8006648:	9b01      	ldr	r3, [sp, #4]
 800664a:	b90b      	cbnz	r3, 8006650 <osMessageQueueGet+0x2c>
  stat = osOK;
 800664c:	2000      	movs	r0, #0
 800664e:	e7f9      	b.n	8006644 <osMessageQueueGet+0x20>
        portYIELD_FROM_ISR (yield);
 8006650:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006654:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006658:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800665c:	f3bf 8f4f 	dsb	sy
 8006660:	f3bf 8f6f 	isb	sy
 8006664:	e7f2      	b.n	800664c <osMessageQueueGet+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006666:	b150      	cbz	r0, 800667e <osMessageQueueGet+0x5a>
 8006668:	b149      	cbz	r1, 800667e <osMessageQueueGet+0x5a>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800666a:	4622      	mov	r2, r4
 800666c:	f000 fde8 	bl	8007240 <xQueueReceive>
 8006670:	2801      	cmp	r0, #1
 8006672:	d0eb      	beq.n	800664c <osMessageQueueGet+0x28>
        if (timeout != 0U) {
 8006674:	2c00      	cmp	r4, #0
 8006676:	d0e3      	beq.n	8006640 <osMessageQueueGet+0x1c>
          stat = osErrorTimeout;
 8006678:	f06f 0001 	mvn.w	r0, #1
 800667c:	e7e2      	b.n	8006644 <osMessageQueueGet+0x20>
      stat = osErrorParameter;
 800667e:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8006682:	e7df      	b.n	8006644 <osMessageQueueGet+0x20>

08006684 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8006684:	f7ff bf59 	b.w	800653a <osSemaphoreGetCount>

08006688 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006688:	4b03      	ldr	r3, [pc, #12]	@ (8006698 <vApplicationGetIdleTaskMemory+0x10>)
 800668a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800668c:	4b03      	ldr	r3, [pc, #12]	@ (800669c <vApplicationGetIdleTaskMemory+0x14>)
 800668e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006690:	2380      	movs	r3, #128	@ 0x80
 8006692:	6013      	str	r3, [r2, #0]
}
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	20001d84 	.word	0x20001d84
 800669c:	20001b84 	.word	0x20001b84

080066a0 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80066a0:	4b03      	ldr	r3, [pc, #12]	@ (80066b0 <vApplicationGetTimerTaskMemory+0x10>)
 80066a2:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80066a4:	4b03      	ldr	r3, [pc, #12]	@ (80066b4 <vApplicationGetTimerTaskMemory+0x14>)
 80066a6:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80066a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80066ac:	6013      	str	r3, [r2, #0]
}
 80066ae:	4770      	bx	lr
 80066b0:	20001b24 	.word	0x20001b24
 80066b4:	20001724 	.word	0x20001724

080066b8 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80066b8:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80066ba:	4b10      	ldr	r3, [pc, #64]	@ (80066fc <prvInsertBlockIntoFreeList+0x44>)
 80066bc:	461a      	mov	r2, r3
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4283      	cmp	r3, r0
 80066c2:	d3fb      	bcc.n	80066bc <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80066c4:	6854      	ldr	r4, [r2, #4]
 80066c6:	1911      	adds	r1, r2, r4
 80066c8:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80066ca:	bf01      	itttt	eq
 80066cc:	6841      	ldreq	r1, [r0, #4]
		pxBlockToInsert = pxIterator;
 80066ce:	4610      	moveq	r0, r2
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80066d0:	1909      	addeq	r1, r1, r4
 80066d2:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80066d4:	6844      	ldr	r4, [r0, #4]
 80066d6:	1901      	adds	r1, r0, r4
 80066d8:	428b      	cmp	r3, r1
 80066da:	d10c      	bne.n	80066f6 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80066dc:	4908      	ldr	r1, [pc, #32]	@ (8006700 <prvInsertBlockIntoFreeList+0x48>)
 80066de:	6809      	ldr	r1, [r1, #0]
 80066e0:	428b      	cmp	r3, r1
 80066e2:	d003      	beq.n	80066ec <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80066e4:	6859      	ldr	r1, [r3, #4]
 80066e6:	4421      	add	r1, r4
 80066e8:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80066ea:	6819      	ldr	r1, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80066ec:	6001      	str	r1, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80066ee:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80066f0:	bf18      	it	ne
 80066f2:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066f4:	bd10      	pop	{r4, pc}
 80066f6:	4619      	mov	r1, r3
 80066f8:	e7f8      	b.n	80066ec <prvInsertBlockIntoFreeList+0x34>
 80066fa:	bf00      	nop
 80066fc:	20001e00 	.word	0x20001e00
 8006700:	20001dfc 	.word	0x20001dfc

08006704 <pvPortMalloc>:
{
 8006704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006708:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800670a:	f001 f9d3 	bl	8007ab4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800670e:	4942      	ldr	r1, [pc, #264]	@ (8006818 <pvPortMalloc+0x114>)
 8006710:	4d42      	ldr	r5, [pc, #264]	@ (800681c <pvPortMalloc+0x118>)
 8006712:	680b      	ldr	r3, [r1, #0]
 8006714:	bb0b      	cbnz	r3, 800675a <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8006716:	4a42      	ldr	r2, [pc, #264]	@ (8006820 <pvPortMalloc+0x11c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006718:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800671a:	bf1f      	itttt	ne
 800671c:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800671e:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006722:	f502 3280 	addne.w	r2, r2, #65536	@ 0x10000
 8006726:	1a13      	subne	r3, r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006728:	bf0c      	ite	eq
 800672a:	f44f 3380 	moveq.w	r3, #65536	@ 0x10000
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800672e:	4602      	movne	r2, r0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006730:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006732:	4e3c      	ldr	r6, [pc, #240]	@ (8006824 <pvPortMalloc+0x120>)
	uxAddress -= xHeapStructSize;
 8006734:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006736:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 800673a:	2000      	movs	r0, #0
 800673c:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800673e:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8006740:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006744:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006746:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 800674a:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800674c:	4b36      	ldr	r3, [pc, #216]	@ (8006828 <pvPortMalloc+0x124>)
 800674e:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006750:	4b36      	ldr	r3, [pc, #216]	@ (800682c <pvPortMalloc+0x128>)
 8006752:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006754:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006758:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800675a:	682e      	ldr	r6, [r5, #0]
 800675c:	4226      	tst	r6, r4
 800675e:	d155      	bne.n	800680c <pvPortMalloc+0x108>
			if( xWantedSize > 0 )
 8006760:	2c00      	cmp	r4, #0
 8006762:	d046      	beq.n	80067f2 <pvPortMalloc+0xee>
				xWantedSize += xHeapStructSize;
 8006764:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006768:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800676a:	bf1c      	itt	ne
 800676c:	f023 0307 	bicne.w	r3, r3, #7
 8006770:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006772:	2b00      	cmp	r3, #0
 8006774:	d04a      	beq.n	800680c <pvPortMalloc+0x108>
 8006776:	4f2d      	ldr	r7, [pc, #180]	@ (800682c <pvPortMalloc+0x128>)
 8006778:	683c      	ldr	r4, [r7, #0]
 800677a:	429c      	cmp	r4, r3
 800677c:	d346      	bcc.n	800680c <pvPortMalloc+0x108>
				pxBlock = xStart.pxNextFreeBlock;
 800677e:	4a29      	ldr	r2, [pc, #164]	@ (8006824 <pvPortMalloc+0x120>)
 8006780:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006782:	6868      	ldr	r0, [r5, #4]
 8006784:	4298      	cmp	r0, r3
 8006786:	d204      	bcs.n	8006792 <pvPortMalloc+0x8e>
 8006788:	f8d5 c000 	ldr.w	ip, [r5]
 800678c:	f1bc 0f00 	cmp.w	ip, #0
 8006790:	d115      	bne.n	80067be <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 8006792:	6809      	ldr	r1, [r1, #0]
 8006794:	42a9      	cmp	r1, r5
 8006796:	d039      	beq.n	800680c <pvPortMalloc+0x108>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006798:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800679a:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800679e:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80067a0:	1ac2      	subs	r2, r0, r3
 80067a2:	2a10      	cmp	r2, #16
 80067a4:	d912      	bls.n	80067cc <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80067a6:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067a8:	0741      	lsls	r1, r0, #29
 80067aa:	d00b      	beq.n	80067c4 <pvPortMalloc+0xc0>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80067ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b0:	f383 8811 	msr	BASEPRI, r3
 80067b4:	f3bf 8f6f 	isb	sy
 80067b8:	f3bf 8f4f 	dsb	sy
 80067bc:	e7fe      	b.n	80067bc <pvPortMalloc+0xb8>
					pxPreviousBlock = pxBlock;
 80067be:	462a      	mov	r2, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 80067c0:	4665      	mov	r5, ip
 80067c2:	e7de      	b.n	8006782 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80067c4:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80067c6:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80067c8:	f7ff ff76 	bl	80066b8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80067cc:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80067ce:	4916      	ldr	r1, [pc, #88]	@ (8006828 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80067d0:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80067d2:	4316      	orrs	r6, r2
					xNumberOfSuccessfulAllocations++;
 80067d4:	4a16      	ldr	r2, [pc, #88]	@ (8006830 <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80067d6:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80067d8:	603c      	str	r4, [r7, #0]
					pxBlock->pxNextFreeBlock = NULL;
 80067da:	2300      	movs	r3, #0
 80067dc:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 80067de:	6813      	ldr	r3, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80067e0:	606e      	str	r6, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80067e2:	4284      	cmp	r4, r0
					xNumberOfSuccessfulAllocations++;
 80067e4:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80067e8:	bf38      	it	cc
 80067ea:	600c      	strcc	r4, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 80067ec:	6013      	str	r3, [r2, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80067ee:	f108 0408 	add.w	r4, r8, #8
	( void ) xTaskResumeAll();
 80067f2:	f001 fa03 	bl	8007bfc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80067f6:	0763      	lsls	r3, r4, #29
 80067f8:	d00a      	beq.n	8006810 <pvPortMalloc+0x10c>
 80067fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067fe:	f383 8811 	msr	BASEPRI, r3
 8006802:	f3bf 8f6f 	isb	sy
 8006806:	f3bf 8f4f 	dsb	sy
 800680a:	e7fe      	b.n	800680a <pvPortMalloc+0x106>
void *pvReturn = NULL;
 800680c:	2400      	movs	r4, #0
 800680e:	e7f0      	b.n	80067f2 <pvPortMalloc+0xee>
}
 8006810:	4620      	mov	r0, r4
 8006812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006816:	bf00      	nop
 8006818:	20001dfc 	.word	0x20001dfc
 800681c:	20001de8 	.word	0x20001de8
 8006820:	20001e08 	.word	0x20001e08
 8006824:	20001e00 	.word	0x20001e00
 8006828:	20001df4 	.word	0x20001df4
 800682c:	20001df8 	.word	0x20001df8
 8006830:	20001df0 	.word	0x20001df0

08006834 <vPortFree>:
{
 8006834:	b510      	push	{r4, lr}
	if( pv != NULL )
 8006836:	4604      	mov	r4, r0
 8006838:	b390      	cbz	r0, 80068a0 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800683a:	4a1a      	ldr	r2, [pc, #104]	@ (80068a4 <vPortFree+0x70>)
 800683c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006840:	6812      	ldr	r2, [r2, #0]
 8006842:	4213      	tst	r3, r2
 8006844:	d108      	bne.n	8006858 <vPortFree+0x24>
 8006846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800684a:	f383 8811 	msr	BASEPRI, r3
 800684e:	f3bf 8f6f 	isb	sy
 8006852:	f3bf 8f4f 	dsb	sy
 8006856:	e7fe      	b.n	8006856 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006858:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800685c:	b141      	cbz	r1, 8006870 <vPortFree+0x3c>
 800685e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006862:	f383 8811 	msr	BASEPRI, r3
 8006866:	f3bf 8f6f 	isb	sy
 800686a:	f3bf 8f4f 	dsb	sy
 800686e:	e7fe      	b.n	800686e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006870:	ea23 0302 	bic.w	r3, r3, r2
 8006874:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8006878:	f001 f91c 	bl	8007ab4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800687c:	4a0a      	ldr	r2, [pc, #40]	@ (80068a8 <vPortFree+0x74>)
 800687e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006882:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006884:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006888:	440b      	add	r3, r1
 800688a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800688c:	f7ff ff14 	bl	80066b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006890:	4a06      	ldr	r2, [pc, #24]	@ (80068ac <vPortFree+0x78>)
 8006892:	6813      	ldr	r3, [r2, #0]
}
 8006894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 8006898:	3301      	adds	r3, #1
 800689a:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800689c:	f001 b9ae 	b.w	8007bfc <xTaskResumeAll>
}
 80068a0:	bd10      	pop	{r4, pc}
 80068a2:	bf00      	nop
 80068a4:	20001de8 	.word	0x20001de8
 80068a8:	20001df8 	.word	0x20001df8
 80068ac:	20001dec 	.word	0x20001dec

080068b0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068b0:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80068b4:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068b8:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068bc:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068be:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80068c0:	2300      	movs	r3, #0
 80068c2:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80068c4:	4770      	bx	lr

080068c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80068c6:	2300      	movs	r3, #0
 80068c8:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80068ca:	4770      	bx	lr

080068cc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80068cc:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80068ce:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80068d0:	689a      	ldr	r2, [r3, #8]
 80068d2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80068d4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80068d6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80068d8:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80068da:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80068dc:	3301      	adds	r3, #1
 80068de:	6003      	str	r3, [r0, #0]
}
 80068e0:	4770      	bx	lr

080068e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80068e2:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80068e4:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80068e6:	1c63      	adds	r3, r4, #1
 80068e8:	d10a      	bne.n	8006900 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80068ea:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80068ec:	685a      	ldr	r2, [r3, #4]
 80068ee:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80068f0:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80068f2:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80068f4:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80068f6:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80068f8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80068fa:	3301      	adds	r3, #1
 80068fc:	6003      	str	r3, [r0, #0]
}
 80068fe:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006900:	f100 0208 	add.w	r2, r0, #8
 8006904:	4613      	mov	r3, r2
 8006906:	6852      	ldr	r2, [r2, #4]
 8006908:	6815      	ldr	r5, [r2, #0]
 800690a:	42a5      	cmp	r5, r4
 800690c:	d9fa      	bls.n	8006904 <vListInsert+0x22>
 800690e:	e7ed      	b.n	80068ec <vListInsert+0xa>

08006910 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006910:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
 8006914:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006916:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006918:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800691a:	6859      	ldr	r1, [r3, #4]
 800691c:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800691e:	bf08      	it	eq
 8006920:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006922:	2200      	movs	r2, #0
 8006924:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	3a01      	subs	r2, #1
 800692a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800692c:	6818      	ldr	r0, [r3, #0]
}
 800692e:	4770      	bx	lr

08006930 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006930:	4808      	ldr	r0, [pc, #32]	@ (8006954 <prvPortStartFirstTask+0x24>)
 8006932:	6800      	ldr	r0, [r0, #0]
 8006934:	6800      	ldr	r0, [r0, #0]
 8006936:	f380 8808 	msr	MSP, r0
 800693a:	f04f 0000 	mov.w	r0, #0
 800693e:	f380 8814 	msr	CONTROL, r0
 8006942:	b662      	cpsie	i
 8006944:	b661      	cpsie	f
 8006946:	f3bf 8f4f 	dsb	sy
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	df00      	svc	0
 8006950:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006952:	0000      	.short	0x0000
 8006954:	e000ed08 	.word	0xe000ed08

08006958 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006958:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006968 <vPortEnableVFP+0x10>
 800695c:	6801      	ldr	r1, [r0, #0]
 800695e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006962:	6001      	str	r1, [r0, #0]
 8006964:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006966:	0000      	.short	0x0000
 8006968:	e000ed88 	.word	0xe000ed88

0800696c <prvTaskExitError>:
{
 800696c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800696e:	2300      	movs	r3, #0
 8006970:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8006972:	4b0d      	ldr	r3, [pc, #52]	@ (80069a8 <prvTaskExitError+0x3c>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3301      	adds	r3, #1
 8006978:	d008      	beq.n	800698c <prvTaskExitError+0x20>
 800697a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800697e:	f383 8811 	msr	BASEPRI, r3
 8006982:	f3bf 8f6f 	isb	sy
 8006986:	f3bf 8f4f 	dsb	sy
 800698a:	e7fe      	b.n	800698a <prvTaskExitError+0x1e>
 800698c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006990:	f383 8811 	msr	BASEPRI, r3
 8006994:	f3bf 8f6f 	isb	sy
 8006998:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800699c:	9b01      	ldr	r3, [sp, #4]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d0fc      	beq.n	800699c <prvTaskExitError+0x30>
}
 80069a2:	b002      	add	sp, #8
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	20000088 	.word	0x20000088

080069ac <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80069ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80069b0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80069b4:	4b07      	ldr	r3, [pc, #28]	@ (80069d4 <pxPortInitialiseStack+0x28>)
 80069b6:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80069ba:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80069be:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80069c2:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80069c6:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80069ca:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80069ce:	3844      	subs	r0, #68	@ 0x44
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	0800696d 	.word	0x0800696d
	...

080069e0 <SVC_Handler>:
	__asm volatile (
 80069e0:	4b07      	ldr	r3, [pc, #28]	@ (8006a00 <pxCurrentTCBConst2>)
 80069e2:	6819      	ldr	r1, [r3, #0]
 80069e4:	6808      	ldr	r0, [r1, #0]
 80069e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ea:	f380 8809 	msr	PSP, r0
 80069ee:	f3bf 8f6f 	isb	sy
 80069f2:	f04f 0000 	mov.w	r0, #0
 80069f6:	f380 8811 	msr	BASEPRI, r0
 80069fa:	4770      	bx	lr
 80069fc:	f3af 8000 	nop.w

08006a00 <pxCurrentTCBConst2>:
 8006a00:	20012348 	.word	0x20012348

08006a04 <vPortEnterCritical>:
 8006a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a08:	f383 8811 	msr	BASEPRI, r3
 8006a0c:	f3bf 8f6f 	isb	sy
 8006a10:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8006a14:	4a0a      	ldr	r2, [pc, #40]	@ (8006a40 <vPortEnterCritical+0x3c>)
 8006a16:	6813      	ldr	r3, [r2, #0]
 8006a18:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8006a1a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8006a1c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8006a1e:	d10e      	bne.n	8006a3e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a20:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006a24:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	b143      	cbz	r3, 8006a3e <vPortEnterCritical+0x3a>
 8006a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a30:	f383 8811 	msr	BASEPRI, r3
 8006a34:	f3bf 8f6f 	isb	sy
 8006a38:	f3bf 8f4f 	dsb	sy
 8006a3c:	e7fe      	b.n	8006a3c <vPortEnterCritical+0x38>
}
 8006a3e:	4770      	bx	lr
 8006a40:	20000088 	.word	0x20000088

08006a44 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8006a44:	4a08      	ldr	r2, [pc, #32]	@ (8006a68 <vPortExitCritical+0x24>)
 8006a46:	6813      	ldr	r3, [r2, #0]
 8006a48:	b943      	cbnz	r3, 8006a5c <vPortExitCritical+0x18>
 8006a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a4e:	f383 8811 	msr	BASEPRI, r3
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	e7fe      	b.n	8006a5a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a60:	b90b      	cbnz	r3, 8006a66 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006a62:	f383 8811 	msr	BASEPRI, r3
}
 8006a66:	4770      	bx	lr
 8006a68:	20000088 	.word	0x20000088
 8006a6c:	00000000 	.word	0x00000000

08006a70 <PendSV_Handler>:
	__asm volatile
 8006a70:	f3ef 8009 	mrs	r0, PSP
 8006a74:	f3bf 8f6f 	isb	sy
 8006a78:	4b15      	ldr	r3, [pc, #84]	@ (8006ad0 <pxCurrentTCBConst>)
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	f01e 0f10 	tst.w	lr, #16
 8006a80:	bf08      	it	eq
 8006a82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a8a:	6010      	str	r0, [r2, #0]
 8006a8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006a94:	f380 8811 	msr	BASEPRI, r0
 8006a98:	f3bf 8f4f 	dsb	sy
 8006a9c:	f3bf 8f6f 	isb	sy
 8006aa0:	f001 f944 	bl	8007d2c <vTaskSwitchContext>
 8006aa4:	f04f 0000 	mov.w	r0, #0
 8006aa8:	f380 8811 	msr	BASEPRI, r0
 8006aac:	bc09      	pop	{r0, r3}
 8006aae:	6819      	ldr	r1, [r3, #0]
 8006ab0:	6808      	ldr	r0, [r1, #0]
 8006ab2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ab6:	f01e 0f10 	tst.w	lr, #16
 8006aba:	bf08      	it	eq
 8006abc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ac0:	f380 8809 	msr	PSP, r0
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	f3af 8000 	nop.w

08006ad0 <pxCurrentTCBConst>:
 8006ad0:	20012348 	.word	0x20012348

08006ad4 <xPortSysTickHandler>:
{
 8006ad4:	b508      	push	{r3, lr}
	__asm volatile
 8006ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ada:	f383 8811 	msr	BASEPRI, r3
 8006ade:	f3bf 8f6f 	isb	sy
 8006ae2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8006ae6:	f000 fff3 	bl	8007ad0 <xTaskIncrementTick>
 8006aea:	b128      	cbz	r0, 8006af8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006aec:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006af0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006af4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8006af8:	2300      	movs	r3, #0
 8006afa:	f383 8811 	msr	BASEPRI, r3
}
 8006afe:	bd08      	pop	{r3, pc}

08006b00 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b00:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8006b04:	2300      	movs	r3, #0
 8006b06:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b08:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b0a:	4b05      	ldr	r3, [pc, #20]	@ (8006b20 <vPortSetupTimerInterrupt+0x20>)
 8006b0c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b16:	3b01      	subs	r3, #1
 8006b18:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b1a:	2307      	movs	r3, #7
 8006b1c:	6113      	str	r3, [r2, #16]
}
 8006b1e:	4770      	bx	lr
 8006b20:	2000007c 	.word	0x2000007c

08006b24 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006b24:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 8006b28:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006b2a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 8006b2e:	4a38      	ldr	r2, [pc, #224]	@ (8006c10 <xPortStartScheduler+0xec>)
 8006b30:	4291      	cmp	r1, r2
 8006b32:	d108      	bne.n	8006b46 <xPortStartScheduler+0x22>
	__asm volatile
 8006b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b38:	f383 8811 	msr	BASEPRI, r3
 8006b3c:	f3bf 8f6f 	isb	sy
 8006b40:	f3bf 8f4f 	dsb	sy
 8006b44:	e7fe      	b.n	8006b44 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006b46:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8006b4a:	4b32      	ldr	r3, [pc, #200]	@ (8006c14 <xPortStartScheduler+0xf0>)
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d108      	bne.n	8006b62 <xPortStartScheduler+0x3e>
 8006b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b54:	f383 8811 	msr	BASEPRI, r3
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	e7fe      	b.n	8006b60 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006b62:	4b2d      	ldr	r3, [pc, #180]	@ (8006c18 <xPortStartScheduler+0xf4>)
 8006b64:	781a      	ldrb	r2, [r3, #0]
 8006b66:	b2d2      	uxtb	r2, r2
 8006b68:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006b6a:	22ff      	movs	r2, #255	@ 0xff
 8006b6c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006b6e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b70:	4a2a      	ldr	r2, [pc, #168]	@ (8006c1c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b78:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006b7c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006b80:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006b82:	4a27      	ldr	r2, [pc, #156]	@ (8006c20 <xPortStartScheduler+0xfc>)
 8006b84:	2307      	movs	r3, #7
 8006b86:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b88:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 8006b8c:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b8e:	0609      	lsls	r1, r1, #24
 8006b90:	d40a      	bmi.n	8006ba8 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b92:	2b03      	cmp	r3, #3
 8006b94:	d011      	beq.n	8006bba <xPortStartScheduler+0x96>
 8006b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b9a:	f383 8811 	msr	BASEPRI, r3
 8006b9e:	f3bf 8f6f 	isb	sy
 8006ba2:	f3bf 8f4f 	dsb	sy
 8006ba6:	e7fe      	b.n	8006ba6 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006bac:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006bb0:	005b      	lsls	r3, r3, #1
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	f88d 3003 	strb.w	r3, [sp, #3]
 8006bb8:	e7e6      	b.n	8006b88 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006bba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006bbe:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006bc0:	9b01      	ldr	r3, [sp, #4]
 8006bc2:	4a15      	ldr	r2, [pc, #84]	@ (8006c18 <xPortStartScheduler+0xf4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006bc4:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006bcc:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8006bd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006bd4:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006bd8:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8006bdc:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006be0:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8006be4:	f7ff ff8c 	bl	8006b00 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8006be8:	4b0e      	ldr	r3, [pc, #56]	@ (8006c24 <xPortStartScheduler+0x100>)
 8006bea:	2500      	movs	r5, #0
 8006bec:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8006bee:	f7ff feb3 	bl	8006958 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006bf2:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8006bf6:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006bfa:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8006bfe:	f7ff fe97 	bl	8006930 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8006c02:	f001 f893 	bl	8007d2c <vTaskSwitchContext>
	prvTaskExitError();
 8006c06:	f7ff feb1 	bl	800696c <prvTaskExitError>
}
 8006c0a:	4628      	mov	r0, r5
 8006c0c:	b003      	add	sp, #12
 8006c0e:	bd30      	pop	{r4, r5, pc}
 8006c10:	410fc271 	.word	0x410fc271
 8006c14:	410fc270 	.word	0x410fc270
 8006c18:	e000e400 	.word	0xe000e400
 8006c1c:	20011e0c 	.word	0x20011e0c
 8006c20:	20011e08 	.word	0x20011e08
 8006c24:	20000088 	.word	0x20000088

08006c28 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006c28:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006c2c:	2b0f      	cmp	r3, #15
 8006c2e:	d90e      	bls.n	8006c4e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006c30:	4a11      	ldr	r2, [pc, #68]	@ (8006c78 <vPortValidateInterruptPriority+0x50>)
 8006c32:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006c34:	4a11      	ldr	r2, [pc, #68]	@ (8006c7c <vPortValidateInterruptPriority+0x54>)
 8006c36:	7812      	ldrb	r2, [r2, #0]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d908      	bls.n	8006c4e <vPortValidateInterruptPriority+0x26>
 8006c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c40:	f383 8811 	msr	BASEPRI, r3
 8006c44:	f3bf 8f6f 	isb	sy
 8006c48:	f3bf 8f4f 	dsb	sy
 8006c4c:	e7fe      	b.n	8006c4c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006c4e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006c52:	4a0b      	ldr	r2, [pc, #44]	@ (8006c80 <vPortValidateInterruptPriority+0x58>)
 8006c54:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8006c58:	6812      	ldr	r2, [r2, #0]
 8006c5a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d908      	bls.n	8006c74 <vPortValidateInterruptPriority+0x4c>
 8006c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c66:	f383 8811 	msr	BASEPRI, r3
 8006c6a:	f3bf 8f6f 	isb	sy
 8006c6e:	f3bf 8f4f 	dsb	sy
 8006c72:	e7fe      	b.n	8006c72 <vPortValidateInterruptPriority+0x4a>
	}
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	e000e3f0 	.word	0xe000e3f0
 8006c7c:	20011e0c 	.word	0x20011e0c
 8006c80:	20011e08 	.word	0x20011e08

08006c84 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006c84:	b510      	push	{r4, lr}
 8006c86:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006c88:	f7ff febc 	bl	8006a04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006c8c:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8006c8e:	f7ff fed9 	bl	8006a44 <vPortExitCritical>

	return xReturn;
}
 8006c92:	fab4 f084 	clz	r0, r4
 8006c96:	0940      	lsrs	r0, r0, #5
 8006c98:	bd10      	pop	{r4, pc}

08006c9a <prvCopyDataToQueue>:
{
 8006c9a:	b570      	push	{r4, r5, r6, lr}
 8006c9c:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006c9e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ca0:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 8006ca2:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006ca4:	b942      	cbnz	r2, 8006cb8 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ca6:	6806      	ldr	r6, [r0, #0]
 8006ca8:	b99e      	cbnz	r6, 8006cd2 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006caa:	6880      	ldr	r0, [r0, #8]
 8006cac:	f001 f98c 	bl	8007fc8 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006cb0:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006cb2:	3501      	adds	r5, #1
 8006cb4:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8006cb6:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8006cb8:	b96e      	cbnz	r6, 8006cd6 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006cba:	6840      	ldr	r0, [r0, #4]
 8006cbc:	f009 fde1 	bl	8010882 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006cc0:	6863      	ldr	r3, [r4, #4]
 8006cc2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8006cc4:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006cc6:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006cc8:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006cca:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ccc:	bf24      	itt	cs
 8006cce:	6823      	ldrcs	r3, [r4, #0]
 8006cd0:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8006cd2:	2000      	movs	r0, #0
 8006cd4:	e7ed      	b.n	8006cb2 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006cd6:	68c0      	ldr	r0, [r0, #12]
 8006cd8:	f009 fdd3 	bl	8010882 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006cdc:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8006cde:	68e3      	ldr	r3, [r4, #12]
 8006ce0:	4251      	negs	r1, r2
 8006ce2:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ce4:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006ce6:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ce8:	4293      	cmp	r3, r2
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006cea:	bf3e      	ittt	cc
 8006cec:	68a3      	ldrcc	r3, [r4, #8]
 8006cee:	185b      	addcc	r3, r3, r1
 8006cf0:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8006cf2:	2e02      	cmp	r6, #2
 8006cf4:	d1ed      	bne.n	8006cd2 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006cf6:	b10d      	cbz	r5, 8006cfc <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8006cf8:	3d01      	subs	r5, #1
 8006cfa:	e7ea      	b.n	8006cd2 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8006cfc:	4628      	mov	r0, r5
 8006cfe:	e7d8      	b.n	8006cb2 <prvCopyDataToQueue+0x18>

08006d00 <prvCopyDataFromQueue>:
{
 8006d00:	4603      	mov	r3, r0
 8006d02:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006d04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 8006d06:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006d08:	b16a      	cbz	r2, 8006d26 <prvCopyDataFromQueue+0x26>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d0a:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006d0c:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d0e:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006d10:	428c      	cmp	r4, r1
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006d12:	bf28      	it	cs
 8006d14:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d16:	60dc      	str	r4, [r3, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006d18:	bf28      	it	cs
 8006d1a:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d1c:	68d9      	ldr	r1, [r3, #12]
}
 8006d1e:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d22:	f009 bdae 	b.w	8010882 <memcpy>
}
 8006d26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <prvUnlockQueue>:
{
 8006d2c:	b570      	push	{r4, r5, r6, lr}
 8006d2e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8006d30:	f7ff fe68 	bl	8006a04 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8006d34:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d38:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8006d3c:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d3e:	2d00      	cmp	r5, #0
 8006d40:	dd01      	ble.n	8006d46 <prvUnlockQueue+0x1a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d42:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006d44:	b9b3      	cbnz	r3, 8006d74 <prvUnlockQueue+0x48>
		pxQueue->cTxLock = queueUNLOCKED;
 8006d46:	23ff      	movs	r3, #255	@ 0xff
 8006d48:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8006d4c:	f7ff fe7a 	bl	8006a44 <vPortExitCritical>
	taskENTER_CRITICAL();
 8006d50:	f7ff fe58 	bl	8006a04 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8006d54:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d58:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8006d5c:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d5e:	2d00      	cmp	r5, #0
 8006d60:	dd01      	ble.n	8006d66 <prvUnlockQueue+0x3a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d62:	6923      	ldr	r3, [r4, #16]
 8006d64:	b97b      	cbnz	r3, 8006d86 <prvUnlockQueue+0x5a>
		pxQueue->cRxLock = queueUNLOCKED;
 8006d66:	23ff      	movs	r3, #255	@ 0xff
 8006d68:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 8006d6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8006d70:	f7ff be68 	b.w	8006a44 <vPortExitCritical>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d74:	4630      	mov	r0, r6
 8006d76:	f001 f84b 	bl	8007e10 <xTaskRemoveFromEventList>
 8006d7a:	b108      	cbz	r0, 8006d80 <prvUnlockQueue+0x54>
						vTaskMissedYield();
 8006d7c:	f001 f8d0 	bl	8007f20 <vTaskMissedYield>
			--cTxLock;
 8006d80:	3d01      	subs	r5, #1
 8006d82:	b26d      	sxtb	r5, r5
 8006d84:	e7db      	b.n	8006d3e <prvUnlockQueue+0x12>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d86:	4630      	mov	r0, r6
 8006d88:	f001 f842 	bl	8007e10 <xTaskRemoveFromEventList>
 8006d8c:	b108      	cbz	r0, 8006d92 <prvUnlockQueue+0x66>
					vTaskMissedYield();
 8006d8e:	f001 f8c7 	bl	8007f20 <vTaskMissedYield>
				--cRxLock;
 8006d92:	3d01      	subs	r5, #1
 8006d94:	b26d      	sxtb	r5, r5
 8006d96:	e7e2      	b.n	8006d5e <prvUnlockQueue+0x32>

08006d98 <xQueueGenericReset>:
{
 8006d98:	b538      	push	{r3, r4, r5, lr}
 8006d9a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8006d9c:	4604      	mov	r4, r0
 8006d9e:	b940      	cbnz	r0, 8006db2 <xQueueGenericReset+0x1a>
 8006da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da4:	f383 8811 	msr	BASEPRI, r3
 8006da8:	f3bf 8f6f 	isb	sy
 8006dac:	f3bf 8f4f 	dsb	sy
 8006db0:	e7fe      	b.n	8006db0 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8006db2:	f7ff fe27 	bl	8006a04 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006db6:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 8006dba:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006dbc:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006dbe:	434b      	muls	r3, r1
 8006dc0:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006dc2:	1a5b      	subs	r3, r3, r1
 8006dc4:	441a      	add	r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006dc6:	60a0      	str	r0, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 8006dc8:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006dca:	2000      	movs	r0, #0
 8006dcc:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006dce:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006dd0:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006dd4:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8006dd8:	b9a5      	cbnz	r5, 8006e04 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dda:	6923      	ldr	r3, [r4, #16]
 8006ddc:	b173      	cbz	r3, 8006dfc <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dde:	f104 0010 	add.w	r0, r4, #16
 8006de2:	f001 f815 	bl	8007e10 <xTaskRemoveFromEventList>
 8006de6:	b148      	cbz	r0, 8006dfc <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8006de8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006dec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006df0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006df4:	f3bf 8f4f 	dsb	sy
 8006df8:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8006dfc:	f7ff fe22 	bl	8006a44 <vPortExitCritical>
}
 8006e00:	2001      	movs	r0, #1
 8006e02:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006e04:	f104 0010 	add.w	r0, r4, #16
 8006e08:	f7ff fd52 	bl	80068b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006e0c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8006e10:	f7ff fd4e 	bl	80068b0 <vListInitialise>
 8006e14:	e7f2      	b.n	8006dfc <xQueueGenericReset+0x64>

08006e16 <xQueueGenericCreateStatic>:
	{
 8006e16:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e18:	460d      	mov	r5, r1
 8006e1a:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006e1c:	b940      	cbnz	r0, 8006e30 <xQueueGenericCreateStatic+0x1a>
 8006e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e22:	f383 8811 	msr	BASEPRI, r3
 8006e26:	f3bf 8f6f 	isb	sy
 8006e2a:	f3bf 8f4f 	dsb	sy
 8006e2e:	e7fe      	b.n	8006e2e <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 8006e30:	b943      	cbnz	r3, 8006e44 <xQueueGenericCreateStatic+0x2e>
 8006e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e36:	f383 8811 	msr	BASEPRI, r3
 8006e3a:	f3bf 8f6f 	isb	sy
 8006e3e:	f3bf 8f4f 	dsb	sy
 8006e42:	e7fe      	b.n	8006e42 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006e44:	b14a      	cbz	r2, 8006e5a <xQueueGenericCreateStatic+0x44>
 8006e46:	b991      	cbnz	r1, 8006e6e <xQueueGenericCreateStatic+0x58>
 8006e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e4c:	f383 8811 	msr	BASEPRI, r3
 8006e50:	f3bf 8f6f 	isb	sy
 8006e54:	f3bf 8f4f 	dsb	sy
 8006e58:	e7fe      	b.n	8006e58 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006e5a:	b141      	cbz	r1, 8006e6e <xQueueGenericCreateStatic+0x58>
 8006e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e60:	f383 8811 	msr	BASEPRI, r3
 8006e64:	f3bf 8f6f 	isb	sy
 8006e68:	f3bf 8f4f 	dsb	sy
 8006e6c:	e7fe      	b.n	8006e6c <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006e6e:	2350      	movs	r3, #80	@ 0x50
 8006e70:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006e72:	9b01      	ldr	r3, [sp, #4]
 8006e74:	2b50      	cmp	r3, #80	@ 0x50
 8006e76:	d008      	beq.n	8006e8a <xQueueGenericCreateStatic+0x74>
 8006e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e7c:	f383 8811 	msr	BASEPRI, r3
 8006e80:	f3bf 8f6f 	isb	sy
 8006e84:	f3bf 8f4f 	dsb	sy
 8006e88:	e7fe      	b.n	8006e88 <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006e8a:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006e8c:	2d00      	cmp	r5, #0
 8006e8e:	bf08      	it	eq
 8006e90:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8006e92:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006e96:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
 8006e9a:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006e9c:	4620      	mov	r0, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006e9e:	9b01      	ldr	r3, [sp, #4]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006ea0:	f7ff ff7a 	bl	8006d98 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8006ea4:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8006ea8:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 8006eac:	4620      	mov	r0, r4
 8006eae:	b003      	add	sp, #12
 8006eb0:	bd30      	pop	{r4, r5, pc}

08006eb2 <xQueueGenericCreate>:
	{
 8006eb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eb4:	460d      	mov	r5, r1
 8006eb6:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006eb8:	4606      	mov	r6, r0
 8006eba:	b940      	cbnz	r0, 8006ece <xQueueGenericCreate+0x1c>
 8006ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec0:	f383 8811 	msr	BASEPRI, r3
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	e7fe      	b.n	8006ecc <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ece:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006ed0:	3050      	adds	r0, #80	@ 0x50
 8006ed2:	f7ff fc17 	bl	8006704 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8006ed6:	4604      	mov	r4, r0
 8006ed8:	b170      	cbz	r0, 8006ef8 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006eda:	2300      	movs	r3, #0
 8006edc:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8006ee0:	b165      	cbz	r5, 8006efc <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ee2:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	pxNewQueue->uxItemSize = uxItemSize;
 8006ee6:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
 8006eea:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006eec:	2101      	movs	r1, #1
 8006eee:	4620      	mov	r0, r4
 8006ef0:	f7ff ff52 	bl	8006d98 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8006ef4:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 8006ef8:	4620      	mov	r0, r4
 8006efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006efc:	4603      	mov	r3, r0
 8006efe:	e7f2      	b.n	8006ee6 <xQueueGenericCreate+0x34>

08006f00 <xQueueCreateCountingSemaphoreStatic>:
	{
 8006f00:	b513      	push	{r0, r1, r4, lr}
 8006f02:	4613      	mov	r3, r2
 8006f04:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8006f06:	b940      	cbnz	r0, 8006f1a <xQueueCreateCountingSemaphoreStatic+0x1a>
 8006f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f0c:	f383 8811 	msr	BASEPRI, r3
 8006f10:	f3bf 8f6f 	isb	sy
 8006f14:	f3bf 8f4f 	dsb	sy
 8006f18:	e7fe      	b.n	8006f18 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006f1a:	4288      	cmp	r0, r1
 8006f1c:	d208      	bcs.n	8006f30 <xQueueCreateCountingSemaphoreStatic+0x30>
 8006f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f22:	f383 8811 	msr	BASEPRI, r3
 8006f26:	f3bf 8f6f 	isb	sy
 8006f2a:	f3bf 8f4f 	dsb	sy
 8006f2e:	e7fe      	b.n	8006f2e <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006f30:	2202      	movs	r2, #2
 8006f32:	9200      	str	r2, [sp, #0]
 8006f34:	2200      	movs	r2, #0
 8006f36:	4611      	mov	r1, r2
 8006f38:	f7ff ff6d 	bl	8006e16 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8006f3c:	b100      	cbz	r0, 8006f40 <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006f3e:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8006f40:	b002      	add	sp, #8
 8006f42:	bd10      	pop	{r4, pc}

08006f44 <xQueueCreateCountingSemaphore>:
	{
 8006f44:	b510      	push	{r4, lr}
 8006f46:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8006f48:	b940      	cbnz	r0, 8006f5c <xQueueCreateCountingSemaphore+0x18>
 8006f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f4e:	f383 8811 	msr	BASEPRI, r3
 8006f52:	f3bf 8f6f 	isb	sy
 8006f56:	f3bf 8f4f 	dsb	sy
 8006f5a:	e7fe      	b.n	8006f5a <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006f5c:	4288      	cmp	r0, r1
 8006f5e:	d208      	bcs.n	8006f72 <xQueueCreateCountingSemaphore+0x2e>
 8006f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f64:	f383 8811 	msr	BASEPRI, r3
 8006f68:	f3bf 8f6f 	isb	sy
 8006f6c:	f3bf 8f4f 	dsb	sy
 8006f70:	e7fe      	b.n	8006f70 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006f72:	2202      	movs	r2, #2
 8006f74:	2100      	movs	r1, #0
 8006f76:	f7ff ff9c 	bl	8006eb2 <xQueueGenericCreate>
		if( xHandle != NULL )
 8006f7a:	b100      	cbz	r0, 8006f7e <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006f7c:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8006f7e:	bd10      	pop	{r4, pc}

08006f80 <xQueueGenericSend>:
{
 8006f80:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006f84:	460f      	mov	r7, r1
 8006f86:	9201      	str	r2, [sp, #4]
 8006f88:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8006f8a:	4604      	mov	r4, r0
 8006f8c:	b940      	cbnz	r0, 8006fa0 <xQueueGenericSend+0x20>
 8006f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f92:	f383 8811 	msr	BASEPRI, r3
 8006f96:	f3bf 8f6f 	isb	sy
 8006f9a:	f3bf 8f4f 	dsb	sy
 8006f9e:	e7fe      	b.n	8006f9e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fa0:	b951      	cbnz	r1, 8006fb8 <xQueueGenericSend+0x38>
 8006fa2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8006fa4:	b143      	cbz	r3, 8006fb8 <xQueueGenericSend+0x38>
 8006fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006faa:	f383 8811 	msr	BASEPRI, r3
 8006fae:	f3bf 8f6f 	isb	sy
 8006fb2:	f3bf 8f4f 	dsb	sy
 8006fb6:	e7fe      	b.n	8006fb6 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006fb8:	2e02      	cmp	r6, #2
 8006fba:	d10b      	bne.n	8006fd4 <xQueueGenericSend+0x54>
 8006fbc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d008      	beq.n	8006fd4 <xQueueGenericSend+0x54>
 8006fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc6:	f383 8811 	msr	BASEPRI, r3
 8006fca:	f3bf 8f6f 	isb	sy
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	e7fe      	b.n	8006fd2 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006fd4:	f000 ffaa 	bl	8007f2c <xTaskGetSchedulerState>
 8006fd8:	4605      	mov	r5, r0
 8006fda:	b320      	cbz	r0, 8007026 <xQueueGenericSend+0xa6>
 8006fdc:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8006fde:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8006fe2:	f7ff fd0f 	bl	8006a04 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006fe6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006fe8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d227      	bcs.n	800703e <xQueueGenericSend+0xbe>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006fee:	4632      	mov	r2, r6
 8006ff0:	4639      	mov	r1, r7
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	f7ff fe51 	bl	8006c9a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ff8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006ffa:	b11b      	cbz	r3, 8007004 <xQueueGenericSend+0x84>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ffc:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007000:	f000 ff06 	bl	8007e10 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8007004:	b148      	cbz	r0, 800701a <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
 8007006:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800700a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800700e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007012:	f3bf 8f4f 	dsb	sy
 8007016:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800701a:	f7ff fd13 	bl	8006a44 <vPortExitCritical>
				return pdPASS;
 800701e:	2001      	movs	r0, #1
}
 8007020:	b004      	add	sp, #16
 8007022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007026:	9b01      	ldr	r3, [sp, #4]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d0d8      	beq.n	8006fde <xQueueGenericSend+0x5e>
 800702c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007030:	f383 8811 	msr	BASEPRI, r3
 8007034:	f3bf 8f6f 	isb	sy
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	e7fe      	b.n	800703c <xQueueGenericSend+0xbc>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800703e:	2e02      	cmp	r6, #2
 8007040:	d0d5      	beq.n	8006fee <xQueueGenericSend+0x6e>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007042:	9b01      	ldr	r3, [sp, #4]
 8007044:	b91b      	cbnz	r3, 800704e <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 8007046:	f7ff fcfd 	bl	8006a44 <vPortExitCritical>
					return errQUEUE_FULL;
 800704a:	2000      	movs	r0, #0
 800704c:	e7e8      	b.n	8007020 <xQueueGenericSend+0xa0>
				else if( xEntryTimeSet == pdFALSE )
 800704e:	b915      	cbnz	r5, 8007056 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007050:	a802      	add	r0, sp, #8
 8007052:	f000 ff1d 	bl	8007e90 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007056:	f7ff fcf5 	bl	8006a44 <vPortExitCritical>
		vTaskSuspendAll();
 800705a:	f000 fd2b 	bl	8007ab4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800705e:	f7ff fcd1 	bl	8006a04 <vPortEnterCritical>
 8007062:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007066:	2bff      	cmp	r3, #255	@ 0xff
 8007068:	bf08      	it	eq
 800706a:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 800706e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007072:	2bff      	cmp	r3, #255	@ 0xff
 8007074:	bf08      	it	eq
 8007076:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 800707a:	f7ff fce3 	bl	8006a44 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800707e:	a901      	add	r1, sp, #4
 8007080:	a802      	add	r0, sp, #8
 8007082:	f000 ff11 	bl	8007ea8 <xTaskCheckForTimeOut>
 8007086:	bb38      	cbnz	r0, 80070d8 <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007088:	f7ff fcbc 	bl	8006a04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800708c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800708e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007090:	429a      	cmp	r2, r3
 8007092:	d10e      	bne.n	80070b2 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007094:	f7ff fcd6 	bl	8006a44 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007098:	9901      	ldr	r1, [sp, #4]
 800709a:	f104 0010 	add.w	r0, r4, #16
 800709e:	f000 fe7f 	bl	8007da0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80070a2:	4620      	mov	r0, r4
 80070a4:	f7ff fe42 	bl	8006d2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80070a8:	f000 fda8 	bl	8007bfc <xTaskResumeAll>
 80070ac:	b148      	cbz	r0, 80070c2 <xQueueGenericSend+0x142>
 80070ae:	2501      	movs	r5, #1
 80070b0:	e797      	b.n	8006fe2 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 80070b2:	f7ff fcc7 	bl	8006a44 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80070b6:	4620      	mov	r0, r4
 80070b8:	f7ff fe38 	bl	8006d2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80070bc:	f000 fd9e 	bl	8007bfc <xTaskResumeAll>
 80070c0:	e7f5      	b.n	80070ae <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 80070c2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80070c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070ca:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80070ce:	f3bf 8f4f 	dsb	sy
 80070d2:	f3bf 8f6f 	isb	sy
 80070d6:	e7ea      	b.n	80070ae <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 80070d8:	4620      	mov	r0, r4
 80070da:	f7ff fe27 	bl	8006d2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80070de:	f000 fd8d 	bl	8007bfc <xTaskResumeAll>
			return errQUEUE_FULL;
 80070e2:	e7b2      	b.n	800704a <xQueueGenericSend+0xca>

080070e4 <xQueueGenericSendFromISR>:
{
 80070e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070e8:	4689      	mov	r9, r1
 80070ea:	4617      	mov	r7, r2
 80070ec:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 80070ee:	4604      	mov	r4, r0
 80070f0:	b940      	cbnz	r0, 8007104 <xQueueGenericSendFromISR+0x20>
 80070f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f6:	f383 8811 	msr	BASEPRI, r3
 80070fa:	f3bf 8f6f 	isb	sy
 80070fe:	f3bf 8f4f 	dsb	sy
 8007102:	e7fe      	b.n	8007102 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007104:	b951      	cbnz	r1, 800711c <xQueueGenericSendFromISR+0x38>
 8007106:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007108:	b143      	cbz	r3, 800711c <xQueueGenericSendFromISR+0x38>
 800710a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800710e:	f383 8811 	msr	BASEPRI, r3
 8007112:	f3bf 8f6f 	isb	sy
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	e7fe      	b.n	800711a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800711c:	2e02      	cmp	r6, #2
 800711e:	d10b      	bne.n	8007138 <xQueueGenericSendFromISR+0x54>
 8007120:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007122:	2b01      	cmp	r3, #1
 8007124:	d008      	beq.n	8007138 <xQueueGenericSendFromISR+0x54>
 8007126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800712a:	f383 8811 	msr	BASEPRI, r3
 800712e:	f3bf 8f6f 	isb	sy
 8007132:	f3bf 8f4f 	dsb	sy
 8007136:	e7fe      	b.n	8007136 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007138:	f7ff fd76 	bl	8006c28 <vPortValidateInterruptPriority>
	__asm volatile
 800713c:	f3ef 8811 	mrs	r8, BASEPRI
 8007140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007144:	f383 8811 	msr	BASEPRI, r3
 8007148:	f3bf 8f6f 	isb	sy
 800714c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007150:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007152:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007154:	429a      	cmp	r2, r3
 8007156:	d301      	bcc.n	800715c <xQueueGenericSendFromISR+0x78>
 8007158:	2e02      	cmp	r6, #2
 800715a:	d11e      	bne.n	800719a <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 800715c:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007160:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8007162:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007164:	4632      	mov	r2, r6
 8007166:	4649      	mov	r1, r9
 8007168:	4620      	mov	r0, r4
 800716a:	f7ff fd96 	bl	8006c9a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800716e:	1c6b      	adds	r3, r5, #1
 8007170:	d10e      	bne.n	8007190 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007172:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007174:	b13b      	cbz	r3, 8007186 <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007176:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800717a:	f000 fe49 	bl	8007e10 <xTaskRemoveFromEventList>
 800717e:	b110      	cbz	r0, 8007186 <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 8007180:	b10f      	cbz	r7, 8007186 <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007182:	2301      	movs	r3, #1
 8007184:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 8007186:	2001      	movs	r0, #1
	__asm volatile
 8007188:	f388 8811 	msr	BASEPRI, r8
}
 800718c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007190:	3501      	adds	r5, #1
 8007192:	b26d      	sxtb	r5, r5
 8007194:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 8007198:	e7f5      	b.n	8007186 <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 800719a:	2000      	movs	r0, #0
 800719c:	e7f4      	b.n	8007188 <xQueueGenericSendFromISR+0xa4>

0800719e <xQueueGiveFromISR>:
{
 800719e:	b570      	push	{r4, r5, r6, lr}
 80071a0:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80071a2:	4604      	mov	r4, r0
 80071a4:	b940      	cbnz	r0, 80071b8 <xQueueGiveFromISR+0x1a>
	__asm volatile
 80071a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071aa:	f383 8811 	msr	BASEPRI, r3
 80071ae:	f3bf 8f6f 	isb	sy
 80071b2:	f3bf 8f4f 	dsb	sy
 80071b6:	e7fe      	b.n	80071b6 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 80071b8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80071ba:	b143      	cbz	r3, 80071ce <xQueueGiveFromISR+0x30>
 80071bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c0:	f383 8811 	msr	BASEPRI, r3
 80071c4:	f3bf 8f6f 	isb	sy
 80071c8:	f3bf 8f4f 	dsb	sy
 80071cc:	e7fe      	b.n	80071cc <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80071ce:	6803      	ldr	r3, [r0, #0]
 80071d0:	b953      	cbnz	r3, 80071e8 <xQueueGiveFromISR+0x4a>
 80071d2:	6883      	ldr	r3, [r0, #8]
 80071d4:	b143      	cbz	r3, 80071e8 <xQueueGiveFromISR+0x4a>
 80071d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071da:	f383 8811 	msr	BASEPRI, r3
 80071de:	f3bf 8f6f 	isb	sy
 80071e2:	f3bf 8f4f 	dsb	sy
 80071e6:	e7fe      	b.n	80071e6 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80071e8:	f7ff fd1e 	bl	8006c28 <vPortValidateInterruptPriority>
	__asm volatile
 80071ec:	f3ef 8611 	mrs	r6, BASEPRI
 80071f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071f4:	f383 8811 	msr	BASEPRI, r3
 80071f8:	f3bf 8f6f 	isb	sy
 80071fc:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007200:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007202:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007204:	4293      	cmp	r3, r2
 8007206:	d919      	bls.n	800723c <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 8007208:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800720c:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800720e:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8007210:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007212:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 8007214:	d10d      	bne.n	8007232 <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007216:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007218:	b13b      	cbz	r3, 800722a <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800721a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800721e:	f000 fdf7 	bl	8007e10 <xTaskRemoveFromEventList>
 8007222:	b110      	cbz	r0, 800722a <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 8007224:	b10d      	cbz	r5, 800722a <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007226:	2301      	movs	r3, #1
 8007228:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 800722a:	2001      	movs	r0, #1
	__asm volatile
 800722c:	f386 8811 	msr	BASEPRI, r6
}
 8007230:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007232:	3301      	adds	r3, #1
 8007234:	b25b      	sxtb	r3, r3
 8007236:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800723a:	e7f6      	b.n	800722a <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 800723c:	2000      	movs	r0, #0
 800723e:	e7f5      	b.n	800722c <xQueueGiveFromISR+0x8e>

08007240 <xQueueReceive>:
{
 8007240:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007244:	460e      	mov	r6, r1
 8007246:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8007248:	4604      	mov	r4, r0
 800724a:	b940      	cbnz	r0, 800725e <xQueueReceive+0x1e>
	__asm volatile
 800724c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007250:	f383 8811 	msr	BASEPRI, r3
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	f3bf 8f4f 	dsb	sy
 800725c:	e7fe      	b.n	800725c <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800725e:	b951      	cbnz	r1, 8007276 <xQueueReceive+0x36>
 8007260:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007262:	b143      	cbz	r3, 8007276 <xQueueReceive+0x36>
 8007264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007268:	f383 8811 	msr	BASEPRI, r3
 800726c:	f3bf 8f6f 	isb	sy
 8007270:	f3bf 8f4f 	dsb	sy
 8007274:	e7fe      	b.n	8007274 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007276:	f000 fe59 	bl	8007f2c <xTaskGetSchedulerState>
 800727a:	4605      	mov	r5, r0
 800727c:	b318      	cbz	r0, 80072c6 <xQueueReceive+0x86>
 800727e:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8007280:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8007284:	f7ff fbbe 	bl	8006a04 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007288:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800728a:	b347      	cbz	r7, 80072de <xQueueReceive+0x9e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800728c:	4631      	mov	r1, r6
 800728e:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007290:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007292:	f7ff fd35 	bl	8006d00 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007296:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007298:	6923      	ldr	r3, [r4, #16]
 800729a:	b173      	cbz	r3, 80072ba <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800729c:	f104 0010 	add.w	r0, r4, #16
 80072a0:	f000 fdb6 	bl	8007e10 <xTaskRemoveFromEventList>
 80072a4:	b148      	cbz	r0, 80072ba <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 80072a6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80072aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072ae:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80072b2:	f3bf 8f4f 	dsb	sy
 80072b6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80072ba:	f7ff fbc3 	bl	8006a44 <vPortExitCritical>
				return pdPASS;
 80072be:	2001      	movs	r0, #1
}
 80072c0:	b004      	add	sp, #16
 80072c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80072c6:	9b01      	ldr	r3, [sp, #4]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d0d9      	beq.n	8007280 <xQueueReceive+0x40>
 80072cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d0:	f383 8811 	msr	BASEPRI, r3
 80072d4:	f3bf 8f6f 	isb	sy
 80072d8:	f3bf 8f4f 	dsb	sy
 80072dc:	e7fe      	b.n	80072dc <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 80072de:	9b01      	ldr	r3, [sp, #4]
 80072e0:	b91b      	cbnz	r3, 80072ea <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 80072e2:	f7ff fbaf 	bl	8006a44 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80072e6:	2000      	movs	r0, #0
 80072e8:	e7ea      	b.n	80072c0 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 80072ea:	b915      	cbnz	r5, 80072f2 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80072ec:	a802      	add	r0, sp, #8
 80072ee:	f000 fdcf 	bl	8007e90 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80072f2:	f7ff fba7 	bl	8006a44 <vPortExitCritical>
		vTaskSuspendAll();
 80072f6:	f000 fbdd 	bl	8007ab4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072fa:	f7ff fb83 	bl	8006a04 <vPortEnterCritical>
 80072fe:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007302:	2bff      	cmp	r3, #255	@ 0xff
 8007304:	bf08      	it	eq
 8007306:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 800730a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800730e:	2bff      	cmp	r3, #255	@ 0xff
 8007310:	bf08      	it	eq
 8007312:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8007316:	f7ff fb95 	bl	8006a44 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800731a:	a901      	add	r1, sp, #4
 800731c:	a802      	add	r0, sp, #8
 800731e:	f000 fdc3 	bl	8007ea8 <xTaskCheckForTimeOut>
 8007322:	bb00      	cbnz	r0, 8007366 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007324:	4620      	mov	r0, r4
 8007326:	f7ff fcad 	bl	8006c84 <prvIsQueueEmpty>
 800732a:	b1b0      	cbz	r0, 800735a <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800732c:	9901      	ldr	r1, [sp, #4]
 800732e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007332:	f000 fd35 	bl	8007da0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007336:	4620      	mov	r0, r4
 8007338:	f7ff fcf8 	bl	8006d2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800733c:	f000 fc5e 	bl	8007bfc <xTaskResumeAll>
 8007340:	b948      	cbnz	r0, 8007356 <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 8007342:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007346:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800734a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800734e:	f3bf 8f4f 	dsb	sy
 8007352:	f3bf 8f6f 	isb	sy
 8007356:	2501      	movs	r5, #1
 8007358:	e794      	b.n	8007284 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 800735a:	4620      	mov	r0, r4
 800735c:	f7ff fce6 	bl	8006d2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007360:	f000 fc4c 	bl	8007bfc <xTaskResumeAll>
 8007364:	e7f7      	b.n	8007356 <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 8007366:	4620      	mov	r0, r4
 8007368:	f7ff fce0 	bl	8006d2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800736c:	f000 fc46 	bl	8007bfc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007370:	4620      	mov	r0, r4
 8007372:	f7ff fc87 	bl	8006c84 <prvIsQueueEmpty>
 8007376:	2800      	cmp	r0, #0
 8007378:	d0ed      	beq.n	8007356 <xQueueReceive+0x116>
 800737a:	e7b4      	b.n	80072e6 <xQueueReceive+0xa6>

0800737c <xQueueSemaphoreTake>:
{
 800737c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800737e:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8007380:	4604      	mov	r4, r0
{
 8007382:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8007384:	b940      	cbnz	r0, 8007398 <xQueueSemaphoreTake+0x1c>
 8007386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800738a:	f383 8811 	msr	BASEPRI, r3
 800738e:	f3bf 8f6f 	isb	sy
 8007392:	f3bf 8f4f 	dsb	sy
 8007396:	e7fe      	b.n	8007396 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8007398:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800739a:	b145      	cbz	r5, 80073ae <xQueueSemaphoreTake+0x32>
 800739c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073a0:	f383 8811 	msr	BASEPRI, r3
 80073a4:	f3bf 8f6f 	isb	sy
 80073a8:	f3bf 8f4f 	dsb	sy
 80073ac:	e7fe      	b.n	80073ac <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073ae:	f000 fdbd 	bl	8007f2c <xTaskGetSchedulerState>
 80073b2:	4606      	mov	r6, r0
 80073b4:	b320      	cbz	r0, 8007400 <xQueueSemaphoreTake+0x84>
 80073b6:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 80073b8:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 80073ba:	f7ff fb23 	bl	8006a04 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80073be:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80073c0:	b353      	cbz	r3, 8007418 <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80073c2:	3b01      	subs	r3, #1
 80073c4:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80073c6:	6823      	ldr	r3, [r4, #0]
 80073c8:	b913      	cbnz	r3, 80073d0 <xQueueSemaphoreTake+0x54>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80073ca:	f000 fe8d 	bl	80080e8 <pvTaskIncrementMutexHeldCount>
 80073ce:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073d0:	6923      	ldr	r3, [r4, #16]
 80073d2:	b173      	cbz	r3, 80073f2 <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073d4:	f104 0010 	add.w	r0, r4, #16
 80073d8:	f000 fd1a 	bl	8007e10 <xTaskRemoveFromEventList>
 80073dc:	b148      	cbz	r0, 80073f2 <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 80073de:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80073e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073e6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80073ea:	f3bf 8f4f 	dsb	sy
 80073ee:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80073f2:	f7ff fb27 	bl	8006a44 <vPortExitCritical>
				return pdPASS;
 80073f6:	2001      	movs	r0, #1
}
 80073f8:	b005      	add	sp, #20
 80073fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073fc:	4635      	mov	r5, r6
 80073fe:	e7db      	b.n	80073b8 <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007400:	9b01      	ldr	r3, [sp, #4]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d0fa      	beq.n	80073fc <xQueueSemaphoreTake+0x80>
 8007406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800740a:	f383 8811 	msr	BASEPRI, r3
 800740e:	f3bf 8f6f 	isb	sy
 8007412:	f3bf 8f4f 	dsb	sy
 8007416:	e7fe      	b.n	8007416 <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007418:	9b01      	ldr	r3, [sp, #4]
 800741a:	b953      	cbnz	r3, 8007432 <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800741c:	2d00      	cmp	r5, #0
 800741e:	d066      	beq.n	80074ee <xQueueSemaphoreTake+0x172>
 8007420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007424:	f383 8811 	msr	BASEPRI, r3
 8007428:	f3bf 8f6f 	isb	sy
 800742c:	f3bf 8f4f 	dsb	sy
 8007430:	e7fe      	b.n	8007430 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 8007432:	b916      	cbnz	r6, 800743a <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007434:	a802      	add	r0, sp, #8
 8007436:	f000 fd2b 	bl	8007e90 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800743a:	f7ff fb03 	bl	8006a44 <vPortExitCritical>
		vTaskSuspendAll();
 800743e:	f000 fb39 	bl	8007ab4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007442:	f7ff fadf 	bl	8006a04 <vPortEnterCritical>
 8007446:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800744a:	2bff      	cmp	r3, #255	@ 0xff
 800744c:	bf08      	it	eq
 800744e:	f884 7044 	strbeq.w	r7, [r4, #68]	@ 0x44
 8007452:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007456:	2bff      	cmp	r3, #255	@ 0xff
 8007458:	bf08      	it	eq
 800745a:	f884 7045 	strbeq.w	r7, [r4, #69]	@ 0x45
 800745e:	f7ff faf1 	bl	8006a44 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007462:	a901      	add	r1, sp, #4
 8007464:	a802      	add	r0, sp, #8
 8007466:	f000 fd1f 	bl	8007ea8 <xTaskCheckForTimeOut>
 800746a:	bb50      	cbnz	r0, 80074c2 <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800746c:	4620      	mov	r0, r4
 800746e:	f7ff fc09 	bl	8006c84 <prvIsQueueEmpty>
 8007472:	b300      	cbz	r0, 80074b6 <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007474:	6823      	ldr	r3, [r4, #0]
 8007476:	b93b      	cbnz	r3, 8007488 <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 8007478:	f7ff fac4 	bl	8006a04 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800747c:	68a0      	ldr	r0, [r4, #8]
 800747e:	f000 fd65 	bl	8007f4c <xTaskPriorityInherit>
 8007482:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8007484:	f7ff fade 	bl	8006a44 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007488:	9901      	ldr	r1, [sp, #4]
 800748a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800748e:	f000 fc87 	bl	8007da0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007492:	4620      	mov	r0, r4
 8007494:	f7ff fc4a 	bl	8006d2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007498:	f000 fbb0 	bl	8007bfc <xTaskResumeAll>
 800749c:	b948      	cbnz	r0, 80074b2 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 800749e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80074a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074a6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80074aa:	f3bf 8f4f 	dsb	sy
 80074ae:	f3bf 8f6f 	isb	sy
 80074b2:	2601      	movs	r6, #1
 80074b4:	e781      	b.n	80073ba <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 80074b6:	4620      	mov	r0, r4
 80074b8:	f7ff fc38 	bl	8006d2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80074bc:	f000 fb9e 	bl	8007bfc <xTaskResumeAll>
 80074c0:	e7f7      	b.n	80074b2 <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 80074c2:	4620      	mov	r0, r4
 80074c4:	f7ff fc32 	bl	8006d2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80074c8:	f000 fb98 	bl	8007bfc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074cc:	4620      	mov	r0, r4
 80074ce:	f7ff fbd9 	bl	8006c84 <prvIsQueueEmpty>
 80074d2:	2800      	cmp	r0, #0
 80074d4:	d0ed      	beq.n	80074b2 <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 80074d6:	b165      	cbz	r5, 80074f2 <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 80074d8:	f7ff fa94 	bl	8006a04 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80074dc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80074de:	b119      	cbz	r1, 80074e8 <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80074e0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80074e2:	6819      	ldr	r1, [r3, #0]
 80074e4:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80074e8:	68a0      	ldr	r0, [r4, #8]
 80074ea:	f000 fdaf 	bl	800804c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80074ee:	f7ff faa9 	bl	8006a44 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80074f2:	2000      	movs	r0, #0
 80074f4:	e780      	b.n	80073f8 <xQueueSemaphoreTake+0x7c>

080074f6 <xQueueReceiveFromISR>:
{
 80074f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074fa:	4689      	mov	r9, r1
 80074fc:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 80074fe:	4604      	mov	r4, r0
 8007500:	b940      	cbnz	r0, 8007514 <xQueueReceiveFromISR+0x1e>
 8007502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007506:	f383 8811 	msr	BASEPRI, r3
 800750a:	f3bf 8f6f 	isb	sy
 800750e:	f3bf 8f4f 	dsb	sy
 8007512:	e7fe      	b.n	8007512 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007514:	b951      	cbnz	r1, 800752c <xQueueReceiveFromISR+0x36>
 8007516:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007518:	b143      	cbz	r3, 800752c <xQueueReceiveFromISR+0x36>
 800751a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800751e:	f383 8811 	msr	BASEPRI, r3
 8007522:	f3bf 8f6f 	isb	sy
 8007526:	f3bf 8f4f 	dsb	sy
 800752a:	e7fe      	b.n	800752a <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800752c:	f7ff fb7c 	bl	8006c28 <vPortValidateInterruptPriority>
	__asm volatile
 8007530:	f3ef 8711 	mrs	r7, BASEPRI
 8007534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007538:	f383 8811 	msr	BASEPRI, r3
 800753c:	f3bf 8f6f 	isb	sy
 8007540:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007544:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007546:	b30d      	cbz	r5, 800758c <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 8007548:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800754c:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 800754e:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007550:	4620      	mov	r0, r4
 8007552:	f7ff fbd5 	bl	8006d00 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007556:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8007558:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800755a:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 800755c:	d111      	bne.n	8007582 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800755e:	6923      	ldr	r3, [r4, #16]
 8007560:	b153      	cbz	r3, 8007578 <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007562:	f104 0010 	add.w	r0, r4, #16
 8007566:	f000 fc53 	bl	8007e10 <xTaskRemoveFromEventList>
 800756a:	b128      	cbz	r0, 8007578 <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 800756c:	f1b8 0f00 	cmp.w	r8, #0
 8007570:	d002      	beq.n	8007578 <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007572:	2301      	movs	r3, #1
 8007574:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 8007578:	2001      	movs	r0, #1
	__asm volatile
 800757a:	f387 8811 	msr	BASEPRI, r7
}
 800757e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007582:	3601      	adds	r6, #1
 8007584:	b276      	sxtb	r6, r6
 8007586:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 800758a:	e7f5      	b.n	8007578 <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 800758c:	4628      	mov	r0, r5
 800758e:	e7f4      	b.n	800757a <xQueueReceiveFromISR+0x84>

08007590 <uxQueueMessagesWaiting>:
{
 8007590:	b510      	push	{r4, lr}
	configASSERT( xQueue );
 8007592:	4604      	mov	r4, r0
 8007594:	b940      	cbnz	r0, 80075a8 <uxQueueMessagesWaiting+0x18>
	__asm volatile
 8007596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800759a:	f383 8811 	msr	BASEPRI, r3
 800759e:	f3bf 8f6f 	isb	sy
 80075a2:	f3bf 8f4f 	dsb	sy
 80075a6:	e7fe      	b.n	80075a6 <uxQueueMessagesWaiting+0x16>
	taskENTER_CRITICAL();
 80075a8:	f7ff fa2c 	bl	8006a04 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80075ac:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
	taskEXIT_CRITICAL();
 80075ae:	f7ff fa49 	bl	8006a44 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80075b2:	4620      	mov	r0, r4
 80075b4:	bd10      	pop	{r4, pc}

080075b6 <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 80075b6:	b940      	cbnz	r0, 80075ca <uxQueueMessagesWaitingFromISR+0x14>
 80075b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075bc:	f383 8811 	msr	BASEPRI, r3
 80075c0:	f3bf 8f6f 	isb	sy
 80075c4:	f3bf 8f4f 	dsb	sy
 80075c8:	e7fe      	b.n	80075c8 <uxQueueMessagesWaitingFromISR+0x12>
	uxReturn = pxQueue->uxMessagesWaiting;
 80075ca:	6b80      	ldr	r0, [r0, #56]	@ 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80075cc:	4770      	bx	lr
	...

080075d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80075d0:	b530      	push	{r4, r5, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80075d2:	4a07      	ldr	r2, [pc, #28]	@ (80075f0 <vQueueAddToRegistry+0x20>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80075d4:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80075d6:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 80075da:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 80075de:	b91d      	cbnz	r5, 80075e8 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80075e0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80075e4:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80075e6:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80075e8:	3301      	adds	r3, #1
 80075ea:	2b08      	cmp	r3, #8
 80075ec:	d1f3      	bne.n	80075d6 <vQueueAddToRegistry+0x6>
 80075ee:	e7fa      	b.n	80075e6 <vQueueAddToRegistry+0x16>
 80075f0:	20011e10 	.word	0x20011e10

080075f4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80075f4:	b510      	push	{r4, lr}

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80075f6:	4a09      	ldr	r2, [pc, #36]	@ (800761c <vQueueUnregisterQueue+0x28>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80075f8:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80075fa:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80075fe:	4281      	cmp	r1, r0
 8007600:	ea4f 04c3 	mov.w	r4, r3, lsl #3
 8007604:	d106      	bne.n	8007614 <vQueueUnregisterQueue+0x20>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007606:	4a06      	ldr	r2, [pc, #24]	@ (8007620 <vQueueUnregisterQueue+0x2c>)
 8007608:	2100      	movs	r1, #0
 800760a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800760e:	4422      	add	r2, r4
 8007610:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007612:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007614:	3301      	adds	r3, #1
 8007616:	2b08      	cmp	r3, #8
 8007618:	d1ef      	bne.n	80075fa <vQueueUnregisterQueue+0x6>
 800761a:	e7fa      	b.n	8007612 <vQueueUnregisterQueue+0x1e>
 800761c:	20011e14 	.word	0x20011e14
 8007620:	20011e10 	.word	0x20011e10

08007624 <vQueueDelete>:
{
 8007624:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8007626:	b940      	cbnz	r0, 800763a <vQueueDelete+0x16>
 8007628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800762c:	f383 8811 	msr	BASEPRI, r3
 8007630:	f3bf 8f6f 	isb	sy
 8007634:	f3bf 8f4f 	dsb	sy
 8007638:	e7fe      	b.n	8007638 <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 800763a:	f7ff ffdb 	bl	80075f4 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800763e:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 8007642:	b91b      	cbnz	r3, 800764c <vQueueDelete+0x28>
}
 8007644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 8007648:	f7ff b8f4 	b.w	8006834 <vPortFree>
}
 800764c:	bd10      	pop	{r4, pc}

0800764e <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800764e:	b570      	push	{r4, r5, r6, lr}
 8007650:	4604      	mov	r4, r0
 8007652:	460d      	mov	r5, r1
 8007654:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007656:	f7ff f9d5 	bl	8006a04 <vPortEnterCritical>
 800765a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800765e:	2bff      	cmp	r3, #255	@ 0xff
 8007660:	bf04      	itt	eq
 8007662:	2300      	moveq	r3, #0
 8007664:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 8007668:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800766c:	2bff      	cmp	r3, #255	@ 0xff
 800766e:	bf04      	itt	eq
 8007670:	2300      	moveq	r3, #0
 8007672:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 8007676:	f7ff f9e5 	bl	8006a44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800767a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800767c:	b92b      	cbnz	r3, 800768a <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800767e:	4632      	mov	r2, r6
 8007680:	4629      	mov	r1, r5
 8007682:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007686:	f000 fba5 	bl	8007dd4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800768a:	4620      	mov	r0, r4
	}
 800768c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8007690:	f7ff bb4c 	b.w	8006d2c <prvUnlockQueue>

08007694 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007698:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800769a:	f7ff f9b3 	bl	8006a04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800769e:	4b30      	ldr	r3, [pc, #192]	@ (8007760 <prvAddNewTaskToReadyList+0xcc>)
		if( pxCurrentTCB == NULL )
 80076a0:	4e30      	ldr	r6, [pc, #192]	@ (8007764 <prvAddNewTaskToReadyList+0xd0>)
		uxCurrentNumberOfTasks++;
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	4f30      	ldr	r7, [pc, #192]	@ (8007768 <prvAddNewTaskToReadyList+0xd4>)
 80076a6:	3201      	adds	r2, #1
 80076a8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80076aa:	6835      	ldr	r5, [r6, #0]
 80076ac:	2d00      	cmp	r5, #0
 80076ae:	d14b      	bne.n	8007748 <prvAddNewTaskToReadyList+0xb4>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80076b0:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d11f      	bne.n	80076f8 <prvAddNewTaskToReadyList+0x64>
 80076b8:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80076ba:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80076bc:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80076be:	f7ff f8f7 	bl	80068b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80076c2:	2d38      	cmp	r5, #56	@ 0x38
 80076c4:	f108 0814 	add.w	r8, r8, #20
 80076c8:	d1f7      	bne.n	80076ba <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 80076ca:	f8df 80c4 	ldr.w	r8, [pc, #196]	@ 8007790 <prvAddNewTaskToReadyList+0xfc>
	vListInitialise( &xDelayedTaskList2 );
 80076ce:	4d27      	ldr	r5, [pc, #156]	@ (800776c <prvAddNewTaskToReadyList+0xd8>)
	vListInitialise( &xDelayedTaskList1 );
 80076d0:	4640      	mov	r0, r8
 80076d2:	f7ff f8ed 	bl	80068b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80076d6:	4628      	mov	r0, r5
 80076d8:	f7ff f8ea 	bl	80068b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80076dc:	4824      	ldr	r0, [pc, #144]	@ (8007770 <prvAddNewTaskToReadyList+0xdc>)
 80076de:	f7ff f8e7 	bl	80068b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80076e2:	4824      	ldr	r0, [pc, #144]	@ (8007774 <prvAddNewTaskToReadyList+0xe0>)
 80076e4:	f7ff f8e4 	bl	80068b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80076e8:	4823      	ldr	r0, [pc, #140]	@ (8007778 <prvAddNewTaskToReadyList+0xe4>)
 80076ea:	f7ff f8e1 	bl	80068b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80076ee:	4b23      	ldr	r3, [pc, #140]	@ (800777c <prvAddNewTaskToReadyList+0xe8>)
 80076f0:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80076f4:	4b22      	ldr	r3, [pc, #136]	@ (8007780 <prvAddNewTaskToReadyList+0xec>)
 80076f6:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80076f8:	4a22      	ldr	r2, [pc, #136]	@ (8007784 <prvAddNewTaskToReadyList+0xf0>)
 80076fa:	6813      	ldr	r3, [r2, #0]
 80076fc:	3301      	adds	r3, #1
 80076fe:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8007700:	4a21      	ldr	r2, [pc, #132]	@ (8007788 <prvAddNewTaskToReadyList+0xf4>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007702:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8007704:	6811      	ldr	r1, [r2, #0]
 8007706:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007708:	2014      	movs	r0, #20
 800770a:	428b      	cmp	r3, r1
 800770c:	fb00 7003 	mla	r0, r0, r3, r7
 8007710:	f104 0104 	add.w	r1, r4, #4
 8007714:	bf88      	it	hi
 8007716:	6013      	strhi	r3, [r2, #0]
 8007718:	f7ff f8d8 	bl	80068cc <vListInsertEnd>
	taskEXIT_CRITICAL();
 800771c:	f7ff f992 	bl	8006a44 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8007720:	4b1a      	ldr	r3, [pc, #104]	@ (800778c <prvAddNewTaskToReadyList+0xf8>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	b173      	cbz	r3, 8007744 <prvAddNewTaskToReadyList+0xb0>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007726:	6833      	ldr	r3, [r6, #0]
 8007728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800772a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800772c:	429a      	cmp	r2, r3
 800772e:	d209      	bcs.n	8007744 <prvAddNewTaskToReadyList+0xb0>
			taskYIELD_IF_USING_PREEMPTION();
 8007730:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007734:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007738:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800773c:	f3bf 8f4f 	dsb	sy
 8007740:	f3bf 8f6f 	isb	sy
}
 8007744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8007748:	4b10      	ldr	r3, [pc, #64]	@ (800778c <prvAddNewTaskToReadyList+0xf8>)
 800774a:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800774c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 800774e:	2a00      	cmp	r2, #0
 8007750:	d1d2      	bne.n	80076f8 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007752:	6832      	ldr	r2, [r6, #0]
 8007754:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007756:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8007758:	bf98      	it	ls
 800775a:	6034      	strls	r4, [r6, #0]
 800775c:	e7cc      	b.n	80076f8 <prvAddNewTaskToReadyList+0x64>
 800775e:	bf00      	nop
 8007760:	20011e74 	.word	0x20011e74
 8007764:	20012348 	.word	0x20012348
 8007768:	20011ee8 	.word	0x20011ee8
 800776c:	20011ec0 	.word	0x20011ec0
 8007770:	20011ea4 	.word	0x20011ea4
 8007774:	20011e90 	.word	0x20011e90
 8007778:	20011e78 	.word	0x20011e78
 800777c:	20011ebc 	.word	0x20011ebc
 8007780:	20011eb8 	.word	0x20011eb8
 8007784:	20011e58 	.word	0x20011e58
 8007788:	20011e6c 	.word	0x20011e6c
 800778c:	20011e68 	.word	0x20011e68
 8007790:	20011ed4 	.word	0x20011ed4

08007794 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007796:	4b15      	ldr	r3, [pc, #84]	@ (80077ec <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007798:	4d15      	ldr	r5, [pc, #84]	@ (80077f0 <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 800779a:	681c      	ldr	r4, [r3, #0]
{
 800779c:	4606      	mov	r6, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800779e:	6828      	ldr	r0, [r5, #0]
 80077a0:	3004      	adds	r0, #4
{
 80077a2:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077a4:	f7ff f8b4 	bl	8006910 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80077a8:	1c73      	adds	r3, r6, #1
 80077aa:	d107      	bne.n	80077bc <prvAddCurrentTaskToDelayedList+0x28>
 80077ac:	b137      	cbz	r7, 80077bc <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077ae:	6829      	ldr	r1, [r5, #0]
 80077b0:	4810      	ldr	r0, [pc, #64]	@ (80077f4 <prvAddCurrentTaskToDelayedList+0x60>)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80077b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077b6:	3104      	adds	r1, #4
 80077b8:	f7ff b888 	b.w	80068cc <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80077bc:	682b      	ldr	r3, [r5, #0]
 80077be:	19a4      	adds	r4, r4, r6
 80077c0:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80077c2:	d307      	bcc.n	80077d4 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077c4:	4b0c      	ldr	r3, [pc, #48]	@ (80077f8 <prvAddCurrentTaskToDelayedList+0x64>)
 80077c6:	6818      	ldr	r0, [r3, #0]
 80077c8:	6829      	ldr	r1, [r5, #0]
}
 80077ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077ce:	3104      	adds	r1, #4
 80077d0:	f7ff b887 	b.w	80068e2 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077d4:	4b09      	ldr	r3, [pc, #36]	@ (80077fc <prvAddCurrentTaskToDelayedList+0x68>)
 80077d6:	6818      	ldr	r0, [r3, #0]
 80077d8:	6829      	ldr	r1, [r5, #0]
 80077da:	3104      	adds	r1, #4
 80077dc:	f7ff f881 	bl	80068e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80077e0:	4b07      	ldr	r3, [pc, #28]	@ (8007800 <prvAddCurrentTaskToDelayedList+0x6c>)
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 80077e6:	bf88      	it	hi
 80077e8:	601c      	strhi	r4, [r3, #0]
}
 80077ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077ec:	20011e70 	.word	0x20011e70
 80077f0:	20012348 	.word	0x20012348
 80077f4:	20011e78 	.word	0x20011e78
 80077f8:	20011eb8 	.word	0x20011eb8
 80077fc:	20011ebc 	.word	0x20011ebc
 8007800:	20011e54 	.word	0x20011e54

08007804 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007804:	4a06      	ldr	r2, [pc, #24]	@ (8007820 <prvResetNextTaskUnblockTime+0x1c>)
 8007806:	6813      	ldr	r3, [r2, #0]
 8007808:	6819      	ldr	r1, [r3, #0]
 800780a:	4b06      	ldr	r3, [pc, #24]	@ (8007824 <prvResetNextTaskUnblockTime+0x20>)
 800780c:	b919      	cbnz	r1, 8007816 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800780e:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007812:	601a      	str	r2, [r3, #0]
}
 8007814:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007816:	6812      	ldr	r2, [r2, #0]
 8007818:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800781a:	68d2      	ldr	r2, [r2, #12]
 800781c:	6852      	ldr	r2, [r2, #4]
 800781e:	e7f8      	b.n	8007812 <prvResetNextTaskUnblockTime+0xe>
 8007820:	20011ebc 	.word	0x20011ebc
 8007824:	20011e54 	.word	0x20011e54

08007828 <prvDeleteTCB>:
	{
 8007828:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800782a:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
	{
 800782e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007830:	b93b      	cbnz	r3, 8007842 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8007832:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8007834:	f7fe fffe 	bl	8006834 <vPortFree>
				vPortFree( pxTCB );
 8007838:	4620      	mov	r0, r4
	}
 800783a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800783e:	f7fe bff9 	b.w	8006834 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007842:	2b01      	cmp	r3, #1
 8007844:	d0f9      	beq.n	800783a <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007846:	2b02      	cmp	r3, #2
 8007848:	d008      	beq.n	800785c <prvDeleteTCB+0x34>
 800784a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800784e:	f383 8811 	msr	BASEPRI, r3
 8007852:	f3bf 8f6f 	isb	sy
 8007856:	f3bf 8f4f 	dsb	sy
 800785a:	e7fe      	b.n	800785a <prvDeleteTCB+0x32>
	}
 800785c:	bd10      	pop	{r4, pc}
	...

08007860 <prvIdleTask>:
{
 8007860:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007862:	4c13      	ldr	r4, [pc, #76]	@ (80078b0 <prvIdleTask+0x50>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007864:	4f13      	ldr	r7, [pc, #76]	@ (80078b4 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8007866:	4d14      	ldr	r5, [pc, #80]	@ (80078b8 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007868:	6823      	ldr	r3, [r4, #0]
 800786a:	b973      	cbnz	r3, 800788a <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800786c:	4b13      	ldr	r3, [pc, #76]	@ (80078bc <prvIdleTask+0x5c>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2b01      	cmp	r3, #1
 8007872:	d9f8      	bls.n	8007866 <prvIdleTask+0x6>
				taskYIELD();
 8007874:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007878:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800787c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007880:	f3bf 8f4f 	dsb	sy
 8007884:	f3bf 8f6f 	isb	sy
 8007888:	e7ed      	b.n	8007866 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800788a:	f7ff f8bb 	bl	8006a04 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007892:	1d30      	adds	r0, r6, #4
 8007894:	f7ff f83c 	bl	8006910 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007898:	682b      	ldr	r3, [r5, #0]
 800789a:	3b01      	subs	r3, #1
 800789c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800789e:	6823      	ldr	r3, [r4, #0]
 80078a0:	3b01      	subs	r3, #1
 80078a2:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80078a4:	f7ff f8ce 	bl	8006a44 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80078a8:	4630      	mov	r0, r6
 80078aa:	f7ff ffbd 	bl	8007828 <prvDeleteTCB>
 80078ae:	e7db      	b.n	8007868 <prvIdleTask+0x8>
 80078b0:	20011e8c 	.word	0x20011e8c
 80078b4:	20011e90 	.word	0x20011e90
 80078b8:	20011e74 	.word	0x20011e74
 80078bc:	20011ee8 	.word	0x20011ee8

080078c0 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80078c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078c4:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80078c8:	0096      	lsls	r6, r2, #2
 80078ca:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80078cc:	4607      	mov	r7, r0
 80078ce:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80078d0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80078d2:	21a5      	movs	r1, #165	@ 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80078d4:	4698      	mov	r8, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80078d6:	f008 ff04 	bl	80106e2 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80078da:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80078dc:	3e04      	subs	r6, #4
 80078de:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80078e0:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 80078e4:	b3b5      	cbz	r5, 8007954 <prvInitialiseNewTask.constprop.0+0x94>
 80078e6:	1e6b      	subs	r3, r5, #1
 80078e8:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 80078ec:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80078ee:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80078f2:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 80078f6:	b109      	cbz	r1, 80078fc <prvInitialiseNewTask.constprop.0+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80078f8:	42ab      	cmp	r3, r5
 80078fa:	d1f8      	bne.n	80078ee <prvInitialiseNewTask.constprop.0+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80078fc:	2300      	movs	r3, #0
 80078fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007902:	9d08      	ldr	r5, [sp, #32]
 8007904:	2d37      	cmp	r5, #55	@ 0x37
 8007906:	bf28      	it	cs
 8007908:	2537      	movcs	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800790a:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 800790e:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8007910:	64e5      	str	r5, [r4, #76]	@ 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007912:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8007914:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007918:	f7fe ffd5 	bl	80068c6 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800791c:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007920:	f104 0018 	add.w	r0, r4, #24
 8007924:	f7fe ffcf 	bl	80068c6 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8007928:	f8c4 a058 	str.w	sl, [r4, #88]	@ 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800792c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800792e:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007930:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 8007932:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007936:	f884 a05c 	strb.w	sl, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800793a:	4642      	mov	r2, r8
 800793c:	4639      	mov	r1, r7
 800793e:	4630      	mov	r0, r6
 8007940:	f7ff f834 	bl	80069ac <pxPortInitialiseStack>
 8007944:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8007946:	f1b9 0f00 	cmp.w	r9, #0
 800794a:	d001      	beq.n	8007950 <prvInitialiseNewTask.constprop.0+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800794c:	f8c9 4000 	str.w	r4, [r9]
}
 8007950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007954:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 8007958:	e7d3      	b.n	8007902 <prvInitialiseNewTask.constprop.0+0x42>

0800795a <xTaskCreateStatic>:
	{
 800795a:	b570      	push	{r4, r5, r6, lr}
 800795c:	b086      	sub	sp, #24
 800795e:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8007962:	b945      	cbnz	r5, 8007976 <xTaskCreateStatic+0x1c>
 8007964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007968:	f383 8811 	msr	BASEPRI, r3
 800796c:	f3bf 8f6f 	isb	sy
 8007970:	f3bf 8f4f 	dsb	sy
 8007974:	e7fe      	b.n	8007974 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8007976:	b944      	cbnz	r4, 800798a <xTaskCreateStatic+0x30>
 8007978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800797c:	f383 8811 	msr	BASEPRI, r3
 8007980:	f3bf 8f6f 	isb	sy
 8007984:	f3bf 8f4f 	dsb	sy
 8007988:	e7fe      	b.n	8007988 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800798a:	2660      	movs	r6, #96	@ 0x60
 800798c:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800798e:	9e05      	ldr	r6, [sp, #20]
 8007990:	2e60      	cmp	r6, #96	@ 0x60
 8007992:	d008      	beq.n	80079a6 <xTaskCreateStatic+0x4c>
 8007994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007998:	f383 8811 	msr	BASEPRI, r3
 800799c:	f3bf 8f6f 	isb	sy
 80079a0:	f3bf 8f4f 	dsb	sy
 80079a4:	e7fe      	b.n	80079a4 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80079a6:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80079a8:	2502      	movs	r5, #2
 80079aa:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80079ae:	ad04      	add	r5, sp, #16
 80079b0:	9501      	str	r5, [sp, #4]
 80079b2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80079b4:	9402      	str	r4, [sp, #8]
 80079b6:	9500      	str	r5, [sp, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80079b8:	9e05      	ldr	r6, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80079ba:	f7ff ff81 	bl	80078c0 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80079be:	4620      	mov	r0, r4
 80079c0:	f7ff fe68 	bl	8007694 <prvAddNewTaskToReadyList>
	}
 80079c4:	9804      	ldr	r0, [sp, #16]
 80079c6:	b006      	add	sp, #24
 80079c8:	bd70      	pop	{r4, r5, r6, pc}

080079ca <xTaskCreate>:
	{
 80079ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80079ce:	4607      	mov	r7, r0
 80079d0:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80079d2:	0090      	lsls	r0, r2, #2
	{
 80079d4:	4688      	mov	r8, r1
 80079d6:	4616      	mov	r6, r2
 80079d8:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80079da:	f7fe fe93 	bl	8006704 <pvPortMalloc>
			if( pxStack != NULL )
 80079de:	4605      	mov	r5, r0
 80079e0:	b920      	cbnz	r0, 80079ec <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80079e2:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80079e6:	b005      	add	sp, #20
 80079e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80079ec:	2060      	movs	r0, #96	@ 0x60
 80079ee:	f7fe fe89 	bl	8006704 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80079f2:	4604      	mov	r4, r0
 80079f4:	b198      	cbz	r0, 8007a1e <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80079f6:	2300      	movs	r3, #0
 80079f8:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80079fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
					pxNewTCB->pxStack = pxStack;
 80079fe:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007a00:	9301      	str	r3, [sp, #4]
 8007a02:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007a04:	9002      	str	r0, [sp, #8]
 8007a06:	9300      	str	r3, [sp, #0]
 8007a08:	4632      	mov	r2, r6
 8007a0a:	464b      	mov	r3, r9
 8007a0c:	4641      	mov	r1, r8
 8007a0e:	4638      	mov	r0, r7
 8007a10:	f7ff ff56 	bl	80078c0 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a14:	4620      	mov	r0, r4
 8007a16:	f7ff fe3d 	bl	8007694 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007a1a:	2001      	movs	r0, #1
 8007a1c:	e7e3      	b.n	80079e6 <xTaskCreate+0x1c>
					vPortFree( pxStack );
 8007a1e:	4628      	mov	r0, r5
 8007a20:	f7fe ff08 	bl	8006834 <vPortFree>
		if( pxNewTCB != NULL )
 8007a24:	e7dd      	b.n	80079e2 <xTaskCreate+0x18>
	...

08007a28 <vTaskStartScheduler>:
{
 8007a28:	b510      	push	{r4, lr}
 8007a2a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007a2c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007a2e:	aa07      	add	r2, sp, #28
 8007a30:	a906      	add	r1, sp, #24
 8007a32:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007a34:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007a38:	f7fe fe26 	bl	8006688 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007a3c:	9b05      	ldr	r3, [sp, #20]
 8007a3e:	9302      	str	r3, [sp, #8]
 8007a40:	9b06      	ldr	r3, [sp, #24]
 8007a42:	9a07      	ldr	r2, [sp, #28]
 8007a44:	4916      	ldr	r1, [pc, #88]	@ (8007aa0 <vTaskStartScheduler+0x78>)
 8007a46:	4817      	ldr	r0, [pc, #92]	@ (8007aa4 <vTaskStartScheduler+0x7c>)
 8007a48:	e9cd 4300 	strd	r4, r3, [sp]
 8007a4c:	4623      	mov	r3, r4
 8007a4e:	f7ff ff84 	bl	800795a <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8007a52:	b318      	cbz	r0, 8007a9c <vTaskStartScheduler+0x74>
			xReturn = xTimerCreateTimerTask();
 8007a54:	f000 fba6 	bl	80081a4 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8007a58:	2801      	cmp	r0, #1
 8007a5a:	d114      	bne.n	8007a86 <vTaskStartScheduler+0x5e>
 8007a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a60:	f383 8811 	msr	BASEPRI, r3
 8007a64:	f3bf 8f6f 	isb	sy
 8007a68:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8007a6c:	4b0e      	ldr	r3, [pc, #56]	@ (8007aa8 <vTaskStartScheduler+0x80>)
 8007a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a72:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007a74:	4b0d      	ldr	r3, [pc, #52]	@ (8007aac <vTaskStartScheduler+0x84>)
 8007a76:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007a78:	4b0d      	ldr	r3, [pc, #52]	@ (8007ab0 <vTaskStartScheduler+0x88>)
 8007a7a:	601c      	str	r4, [r3, #0]
}
 8007a7c:	b008      	add	sp, #32
 8007a7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8007a82:	f7ff b84f 	b.w	8006b24 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007a86:	3001      	adds	r0, #1
 8007a88:	d108      	bne.n	8007a9c <vTaskStartScheduler+0x74>
 8007a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a8e:	f383 8811 	msr	BASEPRI, r3
 8007a92:	f3bf 8f6f 	isb	sy
 8007a96:	f3bf 8f4f 	dsb	sy
 8007a9a:	e7fe      	b.n	8007a9a <vTaskStartScheduler+0x72>
}
 8007a9c:	b008      	add	sp, #32
 8007a9e:	bd10      	pop	{r4, pc}
 8007aa0:	08011e21 	.word	0x08011e21
 8007aa4:	08007861 	.word	0x08007861
 8007aa8:	20011e54 	.word	0x20011e54
 8007aac:	20011e68 	.word	0x20011e68
 8007ab0:	20011e70 	.word	0x20011e70

08007ab4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8007ab4:	4a02      	ldr	r2, [pc, #8]	@ (8007ac0 <vTaskSuspendAll+0xc>)
 8007ab6:	6813      	ldr	r3, [r2, #0]
 8007ab8:	3301      	adds	r3, #1
 8007aba:	6013      	str	r3, [r2, #0]
}
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop
 8007ac0:	20011e50 	.word	0x20011e50

08007ac4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8007ac4:	4b01      	ldr	r3, [pc, #4]	@ (8007acc <xTaskGetTickCount+0x8>)
 8007ac6:	6818      	ldr	r0, [r3, #0]
}
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	20011e70 	.word	0x20011e70

08007ad0 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ad0:	4b3f      	ldr	r3, [pc, #252]	@ (8007bd0 <xTaskIncrementTick+0x100>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
{
 8007ad4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d172      	bne.n	8007bc2 <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007adc:	4b3d      	ldr	r3, [pc, #244]	@ (8007bd4 <xTaskIncrementTick+0x104>)
 8007ade:	681c      	ldr	r4, [r3, #0]
 8007ae0:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8007ae2:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007ae4:	b9bc      	cbnz	r4, 8007b16 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8007ae6:	4b3c      	ldr	r3, [pc, #240]	@ (8007bd8 <xTaskIncrementTick+0x108>)
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	6812      	ldr	r2, [r2, #0]
 8007aec:	b142      	cbz	r2, 8007b00 <xTaskIncrementTick+0x30>
 8007aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af2:	f383 8811 	msr	BASEPRI, r3
 8007af6:	f3bf 8f6f 	isb	sy
 8007afa:	f3bf 8f4f 	dsb	sy
 8007afe:	e7fe      	b.n	8007afe <xTaskIncrementTick+0x2e>
 8007b00:	4a36      	ldr	r2, [pc, #216]	@ (8007bdc <xTaskIncrementTick+0x10c>)
 8007b02:	6819      	ldr	r1, [r3, #0]
 8007b04:	6810      	ldr	r0, [r2, #0]
 8007b06:	6018      	str	r0, [r3, #0]
 8007b08:	6011      	str	r1, [r2, #0]
 8007b0a:	4a35      	ldr	r2, [pc, #212]	@ (8007be0 <xTaskIncrementTick+0x110>)
 8007b0c:	6813      	ldr	r3, [r2, #0]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	6013      	str	r3, [r2, #0]
 8007b12:	f7ff fe77 	bl	8007804 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b16:	4d33      	ldr	r5, [pc, #204]	@ (8007be4 <xTaskIncrementTick+0x114>)
 8007b18:	4e33      	ldr	r6, [pc, #204]	@ (8007be8 <xTaskIncrementTick+0x118>)
 8007b1a:	682b      	ldr	r3, [r5, #0]
 8007b1c:	4f33      	ldr	r7, [pc, #204]	@ (8007bec <xTaskIncrementTick+0x11c>)
 8007b1e:	429c      	cmp	r4, r3
BaseType_t xSwitchRequired = pdFALSE;
 8007b20:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b24:	d212      	bcs.n	8007b4c <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b26:	683a      	ldr	r2, [r7, #0]
 8007b28:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007b2a:	2114      	movs	r1, #20
 8007b2c:	434a      	muls	r2, r1
 8007b2e:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 8007b30:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 8007b32:	4a2f      	ldr	r2, [pc, #188]	@ (8007bf0 <xTaskIncrementTick+0x120>)
 8007b34:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 8007b36:	bf28      	it	cs
 8007b38:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 8007b3c:	2a00      	cmp	r2, #0
 8007b3e:	bf18      	it	ne
 8007b40:	f04f 0b01 	movne.w	fp, #1
}
 8007b44:	4658      	mov	r0, fp
 8007b46:	b003      	add	sp, #12
 8007b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b4c:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 8007bd8 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 8007b50:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 8007bf8 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b54:	f8d9 2000 	ldr.w	r2, [r9]
 8007b58:	6812      	ldr	r2, [r2, #0]
 8007b5a:	b91a      	cbnz	r2, 8007b64 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b60:	602a      	str	r2, [r5, #0]
					break;
 8007b62:	e7e0      	b.n	8007b26 <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b64:	f8d9 2000 	ldr.w	r2, [r9]
 8007b68:	68d2      	ldr	r2, [r2, #12]
 8007b6a:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b6e:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 8007b72:	428c      	cmp	r4, r1
 8007b74:	d201      	bcs.n	8007b7a <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 8007b76:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007b78:	e7d5      	b.n	8007b26 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b7a:	f108 0304 	add.w	r3, r8, #4
 8007b7e:	4618      	mov	r0, r3
 8007b80:	9301      	str	r3, [sp, #4]
 8007b82:	f7fe fec5 	bl	8006910 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b86:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 8007b8a:	b119      	cbz	r1, 8007b94 <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b8c:	f108 0018 	add.w	r0, r8, #24
 8007b90:	f7fe febe 	bl	8006910 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b94:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 8007b98:	f8da 1000 	ldr.w	r1, [sl]
 8007b9c:	2314      	movs	r3, #20
 8007b9e:	4288      	cmp	r0, r1
 8007ba0:	bf88      	it	hi
 8007ba2:	f8ca 0000 	strhi.w	r0, [sl]
 8007ba6:	9901      	ldr	r1, [sp, #4]
 8007ba8:	fb03 6000 	mla	r0, r3, r0, r6
 8007bac:	f7fe fe8e 	bl	80068cc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007bb0:	6838      	ldr	r0, [r7, #0]
 8007bb2:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 8007bb6:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8007bb8:	4291      	cmp	r1, r2
 8007bba:	bf28      	it	cs
 8007bbc:	f04f 0b01 	movcs.w	fp, #1
 8007bc0:	e7c8      	b.n	8007b54 <xTaskIncrementTick+0x84>
		++xPendedTicks;
 8007bc2:	4a0c      	ldr	r2, [pc, #48]	@ (8007bf4 <xTaskIncrementTick+0x124>)
 8007bc4:	6813      	ldr	r3, [r2, #0]
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8007bca:	f04f 0b00 	mov.w	fp, #0
 8007bce:	e7b9      	b.n	8007b44 <xTaskIncrementTick+0x74>
 8007bd0:	20011e50 	.word	0x20011e50
 8007bd4:	20011e70 	.word	0x20011e70
 8007bd8:	20011ebc 	.word	0x20011ebc
 8007bdc:	20011eb8 	.word	0x20011eb8
 8007be0:	20011e5c 	.word	0x20011e5c
 8007be4:	20011e54 	.word	0x20011e54
 8007be8:	20011ee8 	.word	0x20011ee8
 8007bec:	20012348 	.word	0x20012348
 8007bf0:	20011e60 	.word	0x20011e60
 8007bf4:	20011e64 	.word	0x20011e64
 8007bf8:	20011e6c 	.word	0x20011e6c

08007bfc <xTaskResumeAll>:
{
 8007bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8007c00:	4c30      	ldr	r4, [pc, #192]	@ (8007cc4 <xTaskResumeAll+0xc8>)
 8007c02:	6823      	ldr	r3, [r4, #0]
 8007c04:	b943      	cbnz	r3, 8007c18 <xTaskResumeAll+0x1c>
 8007c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c0a:	f383 8811 	msr	BASEPRI, r3
 8007c0e:	f3bf 8f6f 	isb	sy
 8007c12:	f3bf 8f4f 	dsb	sy
 8007c16:	e7fe      	b.n	8007c16 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8007c18:	f7fe fef4 	bl	8006a04 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8007c1c:	6823      	ldr	r3, [r4, #0]
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c22:	6824      	ldr	r4, [r4, #0]
 8007c24:	b12c      	cbz	r4, 8007c32 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8007c26:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007c28:	f7fe ff0c 	bl	8006a44 <vPortExitCritical>
}
 8007c2c:	4620      	mov	r0, r4
 8007c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007c32:	4b25      	ldr	r3, [pc, #148]	@ (8007cc8 <xTaskResumeAll+0xcc>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d0f5      	beq.n	8007c26 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c3a:	4d24      	ldr	r5, [pc, #144]	@ (8007ccc <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 8007c3c:	4e24      	ldr	r6, [pc, #144]	@ (8007cd0 <xTaskResumeAll+0xd4>)
 8007c3e:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 8007ce0 <xTaskResumeAll+0xe4>
 8007c42:	e01d      	b.n	8007c80 <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c44:	68eb      	ldr	r3, [r5, #12]
 8007c46:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c48:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c4a:	f104 0018 	add.w	r0, r4, #24
 8007c4e:	f7fe fe5f 	bl	8006910 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c52:	4638      	mov	r0, r7
 8007c54:	f7fe fe5c 	bl	8006910 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007c58:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007c5a:	6832      	ldr	r2, [r6, #0]
 8007c5c:	2014      	movs	r0, #20
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	fb00 8003 	mla	r0, r0, r3, r8
 8007c64:	4639      	mov	r1, r7
 8007c66:	bf88      	it	hi
 8007c68:	6033      	strhi	r3, [r6, #0]
 8007c6a:	f7fe fe2f 	bl	80068cc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c6e:	4b19      	ldr	r3, [pc, #100]	@ (8007cd4 <xTaskResumeAll+0xd8>)
 8007c70:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d302      	bcc.n	8007c80 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 8007c7a:	4b17      	ldr	r3, [pc, #92]	@ (8007cd8 <xTaskResumeAll+0xdc>)
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c80:	682b      	ldr	r3, [r5, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d1de      	bne.n	8007c44 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8007c86:	b10c      	cbz	r4, 8007c8c <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 8007c88:	f7ff fdbc 	bl	8007804 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007c8c:	4d13      	ldr	r5, [pc, #76]	@ (8007cdc <xTaskResumeAll+0xe0>)
 8007c8e:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8007c90:	b144      	cbz	r4, 8007ca4 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 8007c92:	4e11      	ldr	r6, [pc, #68]	@ (8007cd8 <xTaskResumeAll+0xdc>)
 8007c94:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8007c96:	f7ff ff1b 	bl	8007ad0 <xTaskIncrementTick>
 8007c9a:	b100      	cbz	r0, 8007c9e <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 8007c9c:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007c9e:	3c01      	subs	r4, #1
 8007ca0:	d1f9      	bne.n	8007c96 <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 8007ca2:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8007ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8007cd8 <xTaskResumeAll+0xdc>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d0bc      	beq.n	8007c26 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8007cac:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007cb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cb4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007cb8:	f3bf 8f4f 	dsb	sy
 8007cbc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8007cc0:	2401      	movs	r4, #1
 8007cc2:	e7b1      	b.n	8007c28 <xTaskResumeAll+0x2c>
 8007cc4:	20011e50 	.word	0x20011e50
 8007cc8:	20011e74 	.word	0x20011e74
 8007ccc:	20011ea4 	.word	0x20011ea4
 8007cd0:	20011e6c 	.word	0x20011e6c
 8007cd4:	20012348 	.word	0x20012348
 8007cd8:	20011e60 	.word	0x20011e60
 8007cdc:	20011e64 	.word	0x20011e64
 8007ce0:	20011ee8 	.word	0x20011ee8

08007ce4 <vTaskDelay>:
	{
 8007ce4:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007ce6:	b950      	cbnz	r0, 8007cfe <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8007ce8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007cec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cf0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007cf4:	f3bf 8f4f 	dsb	sy
 8007cf8:	f3bf 8f6f 	isb	sy
	}
 8007cfc:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8007cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8007d28 <vTaskDelay+0x44>)
 8007d00:	6819      	ldr	r1, [r3, #0]
 8007d02:	b141      	cbz	r1, 8007d16 <vTaskDelay+0x32>
 8007d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d08:	f383 8811 	msr	BASEPRI, r3
 8007d0c:	f3bf 8f6f 	isb	sy
 8007d10:	f3bf 8f4f 	dsb	sy
 8007d14:	e7fe      	b.n	8007d14 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8007d16:	f7ff fecd 	bl	8007ab4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007d1a:	f7ff fd3b 	bl	8007794 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8007d1e:	f7ff ff6d 	bl	8007bfc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8007d22:	2800      	cmp	r0, #0
 8007d24:	d0e0      	beq.n	8007ce8 <vTaskDelay+0x4>
 8007d26:	e7e9      	b.n	8007cfc <vTaskDelay+0x18>
 8007d28:	20011e50 	.word	0x20011e50

08007d2c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007d2c:	4b17      	ldr	r3, [pc, #92]	@ (8007d8c <vTaskSwitchContext+0x60>)
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	4b17      	ldr	r3, [pc, #92]	@ (8007d90 <vTaskSwitchContext+0x64>)
{
 8007d32:	b570      	push	{r4, r5, r6, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007d34:	b112      	cbz	r2, 8007d3c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8007d36:	2201      	movs	r2, #1
 8007d38:	601a      	str	r2, [r3, #0]
}
 8007d3a:	bd70      	pop	{r4, r5, r6, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d3c:	4d15      	ldr	r5, [pc, #84]	@ (8007d94 <vTaskSwitchContext+0x68>)
		xYieldPending = pdFALSE;
 8007d3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d40:	682a      	ldr	r2, [r5, #0]
 8007d42:	4915      	ldr	r1, [pc, #84]	@ (8007d98 <vTaskSwitchContext+0x6c>)
 8007d44:	2614      	movs	r6, #20
 8007d46:	fb06 f302 	mul.w	r3, r6, r2
 8007d4a:	18c8      	adds	r0, r1, r3
 8007d4c:	58cc      	ldr	r4, [r1, r3]
 8007d4e:	b18c      	cbz	r4, 8007d74 <vTaskSwitchContext+0x48>
 8007d50:	6844      	ldr	r4, [r0, #4]
 8007d52:	3308      	adds	r3, #8
 8007d54:	6864      	ldr	r4, [r4, #4]
 8007d56:	6044      	str	r4, [r0, #4]
 8007d58:	440b      	add	r3, r1
 8007d5a:	429c      	cmp	r4, r3
 8007d5c:	bf04      	itt	eq
 8007d5e:	6863      	ldreq	r3, [r4, #4]
 8007d60:	6043      	streq	r3, [r0, #4]
 8007d62:	2314      	movs	r3, #20
 8007d64:	fb03 1102 	mla	r1, r3, r2, r1
 8007d68:	684b      	ldr	r3, [r1, #4]
 8007d6a:	68d9      	ldr	r1, [r3, #12]
 8007d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8007d9c <vTaskSwitchContext+0x70>)
 8007d6e:	6019      	str	r1, [r3, #0]
 8007d70:	602a      	str	r2, [r5, #0]
}
 8007d72:	e7e2      	b.n	8007d3a <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d74:	b942      	cbnz	r2, 8007d88 <vTaskSwitchContext+0x5c>
 8007d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d7a:	f383 8811 	msr	BASEPRI, r3
 8007d7e:	f3bf 8f6f 	isb	sy
 8007d82:	f3bf 8f4f 	dsb	sy
 8007d86:	e7fe      	b.n	8007d86 <vTaskSwitchContext+0x5a>
 8007d88:	3a01      	subs	r2, #1
 8007d8a:	e7dc      	b.n	8007d46 <vTaskSwitchContext+0x1a>
 8007d8c:	20011e50 	.word	0x20011e50
 8007d90:	20011e60 	.word	0x20011e60
 8007d94:	20011e6c 	.word	0x20011e6c
 8007d98:	20011ee8 	.word	0x20011ee8
 8007d9c:	20012348 	.word	0x20012348

08007da0 <vTaskPlaceOnEventList>:
{
 8007da0:	b510      	push	{r4, lr}
 8007da2:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8007da4:	b940      	cbnz	r0, 8007db8 <vTaskPlaceOnEventList+0x18>
 8007da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007daa:	f383 8811 	msr	BASEPRI, r3
 8007dae:	f3bf 8f6f 	isb	sy
 8007db2:	f3bf 8f4f 	dsb	sy
 8007db6:	e7fe      	b.n	8007db6 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007db8:	4b05      	ldr	r3, [pc, #20]	@ (8007dd0 <vTaskPlaceOnEventList+0x30>)
 8007dba:	6819      	ldr	r1, [r3, #0]
 8007dbc:	3118      	adds	r1, #24
 8007dbe:	f7fe fd90 	bl	80068e2 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007dc2:	4620      	mov	r0, r4
 8007dc4:	2101      	movs	r1, #1
}
 8007dc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007dca:	f7ff bce3 	b.w	8007794 <prvAddCurrentTaskToDelayedList>
 8007dce:	bf00      	nop
 8007dd0:	20012348 	.word	0x20012348

08007dd4 <vTaskPlaceOnEventListRestricted>:
	{
 8007dd4:	b538      	push	{r3, r4, r5, lr}
 8007dd6:	460d      	mov	r5, r1
 8007dd8:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8007dda:	b940      	cbnz	r0, 8007dee <vTaskPlaceOnEventListRestricted+0x1a>
 8007ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de0:	f383 8811 	msr	BASEPRI, r3
 8007de4:	f3bf 8f6f 	isb	sy
 8007de8:	f3bf 8f4f 	dsb	sy
 8007dec:	e7fe      	b.n	8007dec <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007dee:	4b07      	ldr	r3, [pc, #28]	@ (8007e0c <vTaskPlaceOnEventListRestricted+0x38>)
 8007df0:	6819      	ldr	r1, [r3, #0]
 8007df2:	3118      	adds	r1, #24
 8007df4:	f7fe fd6a 	bl	80068cc <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8007df8:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007dfa:	4621      	mov	r1, r4
 8007dfc:	bf0c      	ite	eq
 8007dfe:	4628      	moveq	r0, r5
 8007e00:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8007e04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007e08:	f7ff bcc4 	b.w	8007794 <prvAddCurrentTaskToDelayedList>
 8007e0c:	20012348 	.word	0x20012348

08007e10 <xTaskRemoveFromEventList>:
{
 8007e10:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e12:	68c3      	ldr	r3, [r0, #12]
 8007e14:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8007e16:	b944      	cbnz	r4, 8007e2a <xTaskRemoveFromEventList+0x1a>
 8007e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e1c:	f383 8811 	msr	BASEPRI, r3
 8007e20:	f3bf 8f6f 	isb	sy
 8007e24:	f3bf 8f4f 	dsb	sy
 8007e28:	e7fe      	b.n	8007e28 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007e2a:	f104 0518 	add.w	r5, r4, #24
 8007e2e:	4628      	mov	r0, r5
 8007e30:	f7fe fd6e 	bl	8006910 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e34:	4b10      	ldr	r3, [pc, #64]	@ (8007e78 <xTaskRemoveFromEventList+0x68>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	b9db      	cbnz	r3, 8007e72 <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007e3a:	1d25      	adds	r5, r4, #4
 8007e3c:	4628      	mov	r0, r5
 8007e3e:	f7fe fd67 	bl	8006910 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007e42:	4a0e      	ldr	r2, [pc, #56]	@ (8007e7c <xTaskRemoveFromEventList+0x6c>)
 8007e44:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007e46:	6811      	ldr	r1, [r2, #0]
 8007e48:	428b      	cmp	r3, r1
 8007e4a:	bf88      	it	hi
 8007e4c:	6013      	strhi	r3, [r2, #0]
 8007e4e:	4a0c      	ldr	r2, [pc, #48]	@ (8007e80 <xTaskRemoveFromEventList+0x70>)
 8007e50:	2014      	movs	r0, #20
 8007e52:	4629      	mov	r1, r5
 8007e54:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007e58:	f7fe fd38 	bl	80068cc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e5c:	4b09      	ldr	r3, [pc, #36]	@ (8007e84 <xTaskRemoveFromEventList+0x74>)
 8007e5e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e64:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8007e66:	bf83      	ittte	hi
 8007e68:	4b07      	ldrhi	r3, [pc, #28]	@ (8007e88 <xTaskRemoveFromEventList+0x78>)
 8007e6a:	2001      	movhi	r0, #1
 8007e6c:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8007e6e:	2000      	movls	r0, #0
}
 8007e70:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007e72:	4806      	ldr	r0, [pc, #24]	@ (8007e8c <xTaskRemoveFromEventList+0x7c>)
 8007e74:	4629      	mov	r1, r5
 8007e76:	e7ef      	b.n	8007e58 <xTaskRemoveFromEventList+0x48>
 8007e78:	20011e50 	.word	0x20011e50
 8007e7c:	20011e6c 	.word	0x20011e6c
 8007e80:	20011ee8 	.word	0x20011ee8
 8007e84:	20012348 	.word	0x20012348
 8007e88:	20011e60 	.word	0x20011e60
 8007e8c:	20011ea4 	.word	0x20011ea4

08007e90 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007e90:	4b03      	ldr	r3, [pc, #12]	@ (8007ea0 <vTaskInternalSetTimeOutState+0x10>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007e96:	4b03      	ldr	r3, [pc, #12]	@ (8007ea4 <vTaskInternalSetTimeOutState+0x14>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	6043      	str	r3, [r0, #4]
}
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	20011e5c 	.word	0x20011e5c
 8007ea4:	20011e70 	.word	0x20011e70

08007ea8 <xTaskCheckForTimeOut>:
{
 8007ea8:	b570      	push	{r4, r5, r6, lr}
 8007eaa:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8007eac:	4605      	mov	r5, r0
 8007eae:	b940      	cbnz	r0, 8007ec2 <xTaskCheckForTimeOut+0x1a>
 8007eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eb4:	f383 8811 	msr	BASEPRI, r3
 8007eb8:	f3bf 8f6f 	isb	sy
 8007ebc:	f3bf 8f4f 	dsb	sy
 8007ec0:	e7fe      	b.n	8007ec0 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8007ec2:	b941      	cbnz	r1, 8007ed6 <xTaskCheckForTimeOut+0x2e>
 8007ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ec8:	f383 8811 	msr	BASEPRI, r3
 8007ecc:	f3bf 8f6f 	isb	sy
 8007ed0:	f3bf 8f4f 	dsb	sy
 8007ed4:	e7fe      	b.n	8007ed4 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8007ed6:	f7fe fd95 	bl	8006a04 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8007eda:	4b0f      	ldr	r3, [pc, #60]	@ (8007f18 <xTaskCheckForTimeOut+0x70>)
 8007edc:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8007ede:	6823      	ldr	r3, [r4, #0]
 8007ee0:	1c5a      	adds	r2, r3, #1
 8007ee2:	d010      	beq.n	8007f06 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007ee4:	480d      	ldr	r0, [pc, #52]	@ (8007f1c <xTaskCheckForTimeOut+0x74>)
 8007ee6:	682e      	ldr	r6, [r5, #0]
 8007ee8:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007eea:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007eec:	4286      	cmp	r6, r0
 8007eee:	d001      	beq.n	8007ef4 <xTaskCheckForTimeOut+0x4c>
 8007ef0:	428a      	cmp	r2, r1
 8007ef2:	d90f      	bls.n	8007f14 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007ef4:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007ef6:	4283      	cmp	r3, r0
 8007ef8:	d90a      	bls.n	8007f10 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8007efa:	1a5b      	subs	r3, r3, r1
 8007efc:	4413      	add	r3, r2
 8007efe:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007f00:	4628      	mov	r0, r5
 8007f02:	f7ff ffc5 	bl	8007e90 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8007f06:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007f08:	f7fe fd9c 	bl	8006a44 <vPortExitCritical>
}
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8007f10:	2300      	movs	r3, #0
 8007f12:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8007f14:	2401      	movs	r4, #1
 8007f16:	e7f7      	b.n	8007f08 <xTaskCheckForTimeOut+0x60>
 8007f18:	20011e70 	.word	0x20011e70
 8007f1c:	20011e5c 	.word	0x20011e5c

08007f20 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8007f20:	4b01      	ldr	r3, [pc, #4]	@ (8007f28 <vTaskMissedYield+0x8>)
 8007f22:	2201      	movs	r2, #1
 8007f24:	601a      	str	r2, [r3, #0]
}
 8007f26:	4770      	bx	lr
 8007f28:	20011e60 	.word	0x20011e60

08007f2c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8007f2c:	4b05      	ldr	r3, [pc, #20]	@ (8007f44 <xTaskGetSchedulerState+0x18>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	b133      	cbz	r3, 8007f40 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f32:	4b05      	ldr	r3, [pc, #20]	@ (8007f48 <xTaskGetSchedulerState+0x1c>)
 8007f34:	6818      	ldr	r0, [r3, #0]
 8007f36:	fab0 f080 	clz	r0, r0
 8007f3a:	0940      	lsrs	r0, r0, #5
 8007f3c:	0040      	lsls	r0, r0, #1
 8007f3e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f40:	2001      	movs	r0, #1
	}
 8007f42:	4770      	bx	lr
 8007f44:	20011e68 	.word	0x20011e68
 8007f48:	20011e50 	.word	0x20011e50

08007f4c <xTaskPriorityInherit>:
	{
 8007f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8007f4e:	4604      	mov	r4, r0
 8007f50:	b338      	cbz	r0, 8007fa2 <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007f52:	4d1a      	ldr	r5, [pc, #104]	@ (8007fbc <xTaskPriorityInherit+0x70>)
 8007f54:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8007f56:	682a      	ldr	r2, [r5, #0]
 8007f58:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d226      	bcs.n	8007fac <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007f5e:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007f60:	4e17      	ldr	r6, [pc, #92]	@ (8007fc0 <xTaskPriorityInherit+0x74>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007f62:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f64:	bfa1      	itttt	ge
 8007f66:	682a      	ldrge	r2, [r5, #0]
 8007f68:	6ad2      	ldrge	r2, [r2, #44]	@ 0x2c
 8007f6a:	f1c2 0238 	rsbge	r2, r2, #56	@ 0x38
 8007f6e:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007f70:	2214      	movs	r2, #20
 8007f72:	fb02 6303 	mla	r3, r2, r3, r6
 8007f76:	6942      	ldr	r2, [r0, #20]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d113      	bne.n	8007fa4 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f7c:	1d07      	adds	r7, r0, #4
 8007f7e:	4638      	mov	r0, r7
 8007f80:	f7fe fcc6 	bl	8006910 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007f84:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007f86:	4a0f      	ldr	r2, [pc, #60]	@ (8007fc4 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007f8a:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007f8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007f8e:	2014      	movs	r0, #20
 8007f90:	428b      	cmp	r3, r1
 8007f92:	fb00 6003 	mla	r0, r0, r3, r6
 8007f96:	4639      	mov	r1, r7
 8007f98:	bf88      	it	hi
 8007f9a:	6013      	strhi	r3, [r2, #0]
 8007f9c:	f7fe fc96 	bl	80068cc <vListInsertEnd>
				xReturn = pdTRUE;
 8007fa0:	2001      	movs	r0, #1
	}
 8007fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007fa4:	682b      	ldr	r3, [r5, #0]
 8007fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fa8:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8007faa:	e7f9      	b.n	8007fa0 <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007fac:	682b      	ldr	r3, [r5, #0]
 8007fae:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8007fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fb2:	4298      	cmp	r0, r3
 8007fb4:	bf2c      	ite	cs
 8007fb6:	2000      	movcs	r0, #0
 8007fb8:	2001      	movcc	r0, #1
 8007fba:	e7f2      	b.n	8007fa2 <xTaskPriorityInherit+0x56>
 8007fbc:	20012348 	.word	0x20012348
 8007fc0:	20011ee8 	.word	0x20011ee8
 8007fc4:	20011e6c 	.word	0x20011e6c

08007fc8 <xTaskPriorityDisinherit>:
	{
 8007fc8:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8007fca:	b908      	cbnz	r0, 8007fd0 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 8007fcc:	2000      	movs	r0, #0
	}
 8007fce:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8007fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8008040 <xTaskPriorityDisinherit+0x78>)
 8007fd2:	681c      	ldr	r4, [r3, #0]
 8007fd4:	4284      	cmp	r4, r0
 8007fd6:	d008      	beq.n	8007fea <xTaskPriorityDisinherit+0x22>
 8007fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fdc:	f383 8811 	msr	BASEPRI, r3
 8007fe0:	f3bf 8f6f 	isb	sy
 8007fe4:	f3bf 8f4f 	dsb	sy
 8007fe8:	e7fe      	b.n	8007fe8 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8007fea:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8007fec:	b943      	cbnz	r3, 8008000 <xTaskPriorityDisinherit+0x38>
 8007fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ff2:	f383 8811 	msr	BASEPRI, r3
 8007ff6:	f3bf 8f6f 	isb	sy
 8007ffa:	f3bf 8f4f 	dsb	sy
 8007ffe:	e7fe      	b.n	8007ffe <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008000:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008002:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 8008004:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008006:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8008008:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800800a:	d0df      	beq.n	8007fcc <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800800c:	2b00      	cmp	r3, #0
 800800e:	d1dd      	bne.n	8007fcc <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008010:	1d25      	adds	r5, r4, #4
 8008012:	4628      	mov	r0, r5
 8008014:	f7fe fc7c 	bl	8006910 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008018:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800801a:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800801c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008020:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8008022:	4a08      	ldr	r2, [pc, #32]	@ (8008044 <xTaskPriorityDisinherit+0x7c>)
 8008024:	6811      	ldr	r1, [r2, #0]
 8008026:	428b      	cmp	r3, r1
 8008028:	bf88      	it	hi
 800802a:	6013      	strhi	r3, [r2, #0]
 800802c:	4a06      	ldr	r2, [pc, #24]	@ (8008048 <xTaskPriorityDisinherit+0x80>)
 800802e:	2014      	movs	r0, #20
 8008030:	fb00 2003 	mla	r0, r0, r3, r2
 8008034:	4629      	mov	r1, r5
 8008036:	f7fe fc49 	bl	80068cc <vListInsertEnd>
					xReturn = pdTRUE;
 800803a:	2001      	movs	r0, #1
		return xReturn;
 800803c:	e7c7      	b.n	8007fce <xTaskPriorityDisinherit+0x6>
 800803e:	bf00      	nop
 8008040:	20012348 	.word	0x20012348
 8008044:	20011e6c 	.word	0x20011e6c
 8008048:	20011ee8 	.word	0x20011ee8

0800804c <vTaskPriorityDisinheritAfterTimeout>:
	{
 800804c:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800804e:	4604      	mov	r4, r0
 8008050:	2800      	cmp	r0, #0
 8008052:	d041      	beq.n	80080d8 <vTaskPriorityDisinheritAfterTimeout+0x8c>
			configASSERT( pxTCB->uxMutexesHeld );
 8008054:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8008056:	b942      	cbnz	r2, 800806a <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8008058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800805c:	f383 8811 	msr	BASEPRI, r3
 8008060:	f3bf 8f6f 	isb	sy
 8008064:	f3bf 8f4f 	dsb	sy
 8008068:	e7fe      	b.n	8008068 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800806a:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800806c:	4299      	cmp	r1, r3
 800806e:	bf38      	it	cc
 8008070:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008072:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8008074:	428b      	cmp	r3, r1
 8008076:	d02f      	beq.n	80080d8 <vTaskPriorityDisinheritAfterTimeout+0x8c>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008078:	2a01      	cmp	r2, #1
 800807a:	d12d      	bne.n	80080d8 <vTaskPriorityDisinheritAfterTimeout+0x8c>
					configASSERT( pxTCB != pxCurrentTCB );
 800807c:	4a17      	ldr	r2, [pc, #92]	@ (80080dc <vTaskPriorityDisinheritAfterTimeout+0x90>)
 800807e:	6812      	ldr	r2, [r2, #0]
 8008080:	4282      	cmp	r2, r0
 8008082:	d108      	bne.n	8008096 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8008084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008088:	f383 8811 	msr	BASEPRI, r3
 800808c:	f3bf 8f6f 	isb	sy
 8008090:	f3bf 8f4f 	dsb	sy
 8008094:	e7fe      	b.n	8008094 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008096:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008098:	4d11      	ldr	r5, [pc, #68]	@ (80080e0 <vTaskPriorityDisinheritAfterTimeout+0x94>)
					pxTCB->uxPriority = uxPriorityToUse;
 800809a:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800809c:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800809e:	f04f 0214 	mov.w	r2, #20
 80080a2:	fb02 5303 	mla	r3, r2, r3, r5
 80080a6:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080a8:	bfa4      	itt	ge
 80080aa:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
 80080ae:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d111      	bne.n	80080d8 <vTaskPriorityDisinheritAfterTimeout+0x8c>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080b4:	1d06      	adds	r6, r0, #4
 80080b6:	4630      	mov	r0, r6
 80080b8:	f7fe fc2a 	bl	8006910 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 80080bc:	4a09      	ldr	r2, [pc, #36]	@ (80080e4 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 80080be:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80080c0:	6811      	ldr	r1, [r2, #0]
 80080c2:	2014      	movs	r0, #20
 80080c4:	428b      	cmp	r3, r1
 80080c6:	fb00 5003 	mla	r0, r0, r3, r5
 80080ca:	4631      	mov	r1, r6
	}
 80080cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 80080d0:	bf88      	it	hi
 80080d2:	6013      	strhi	r3, [r2, #0]
 80080d4:	f7fe bbfa 	b.w	80068cc <vListInsertEnd>
	}
 80080d8:	bd70      	pop	{r4, r5, r6, pc}
 80080da:	bf00      	nop
 80080dc:	20012348 	.word	0x20012348
 80080e0:	20011ee8 	.word	0x20011ee8
 80080e4:	20011e6c 	.word	0x20011e6c

080080e8 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80080e8:	4b04      	ldr	r3, [pc, #16]	@ (80080fc <pvTaskIncrementMutexHeldCount+0x14>)
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	b11a      	cbz	r2, 80080f6 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80080ee:	6819      	ldr	r1, [r3, #0]
 80080f0:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 80080f2:	3201      	adds	r2, #1
 80080f4:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 80080f6:	6818      	ldr	r0, [r3, #0]
	}
 80080f8:	4770      	bx	lr
 80080fa:	bf00      	nop
 80080fc:	20012348 	.word	0x20012348

08008100 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8008100:	4291      	cmp	r1, r2
{
 8008102:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008104:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008106:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8008108:	d80a      	bhi.n	8008120 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800810a:	1ad2      	subs	r2, r2, r3
 800810c:	6983      	ldr	r3, [r0, #24]
 800810e:	429a      	cmp	r2, r3
 8008110:	d20d      	bcs.n	800812e <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008112:	4b08      	ldr	r3, [pc, #32]	@ (8008134 <prvInsertTimerInActiveList+0x34>)
 8008114:	1d01      	adds	r1, r0, #4
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008116:	6818      	ldr	r0, [r3, #0]
 8008118:	f7fe fbe3 	bl	80068e2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800811c:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 800811e:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008120:	429a      	cmp	r2, r3
 8008122:	d201      	bcs.n	8008128 <prvInsertTimerInActiveList+0x28>
 8008124:	4299      	cmp	r1, r3
 8008126:	d202      	bcs.n	800812e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008128:	4b03      	ldr	r3, [pc, #12]	@ (8008138 <prvInsertTimerInActiveList+0x38>)
 800812a:	1d01      	adds	r1, r0, #4
 800812c:	e7f3      	b.n	8008116 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800812e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8008130:	e7f5      	b.n	800811e <prvInsertTimerInActiveList+0x1e>
 8008132:	bf00      	nop
 8008134:	20012448 	.word	0x20012448
 8008138:	2001244c 	.word	0x2001244c

0800813c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800813c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800813e:	4c11      	ldr	r4, [pc, #68]	@ (8008184 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8008140:	f7fe fc60 	bl	8006a04 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8008144:	6825      	ldr	r5, [r4, #0]
 8008146:	b9bd      	cbnz	r5, 8008178 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8008148:	4f0f      	ldr	r7, [pc, #60]	@ (8008188 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800814a:	4e10      	ldr	r6, [pc, #64]	@ (800818c <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800814c:	4638      	mov	r0, r7
 800814e:	f7fe fbaf 	bl	80068b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008152:	4630      	mov	r0, r6
 8008154:	f7fe fbac 	bl	80068b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008158:	4b0d      	ldr	r3, [pc, #52]	@ (8008190 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800815a:	4a0e      	ldr	r2, [pc, #56]	@ (8008194 <prvCheckForValidListAndQueue+0x58>)
			pxCurrentTimerList = &xActiveTimerList1;
 800815c:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800815e:	4b0e      	ldr	r3, [pc, #56]	@ (8008198 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008160:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 8008162:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008164:	200a      	movs	r0, #10
 8008166:	4b0d      	ldr	r3, [pc, #52]	@ (800819c <prvCheckForValidListAndQueue+0x60>)
 8008168:	9500      	str	r5, [sp, #0]
 800816a:	f7fe fe54 	bl	8006e16 <xQueueGenericCreateStatic>
 800816e:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008170:	b110      	cbz	r0, 8008178 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008172:	490b      	ldr	r1, [pc, #44]	@ (80081a0 <prvCheckForValidListAndQueue+0x64>)
 8008174:	f7ff fa2c 	bl	80075d0 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8008178:	b003      	add	sp, #12
 800817a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800817e:	f7fe bc61 	b.w	8006a44 <vPortExitCritical>
 8008182:	bf00      	nop
 8008184:	20012444 	.word	0x20012444
 8008188:	20012464 	.word	0x20012464
 800818c:	20012450 	.word	0x20012450
 8008190:	2001244c 	.word	0x2001244c
 8008194:	2001239c 	.word	0x2001239c
 8008198:	20012448 	.word	0x20012448
 800819c:	2001234c 	.word	0x2001234c
 80081a0:	08011e26 	.word	0x08011e26

080081a4 <xTimerCreateTimerTask>:
{
 80081a4:	b510      	push	{r4, lr}
 80081a6:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 80081a8:	f7ff ffc8 	bl	800813c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80081ac:	4b12      	ldr	r3, [pc, #72]	@ (80081f8 <xTimerCreateTimerTask+0x54>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	b1b3      	cbz	r3, 80081e0 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80081b2:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80081b4:	aa07      	add	r2, sp, #28
 80081b6:	a906      	add	r1, sp, #24
 80081b8:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80081ba:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80081be:	f7fe fa6f 	bl	80066a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80081c2:	9b05      	ldr	r3, [sp, #20]
 80081c4:	9302      	str	r3, [sp, #8]
 80081c6:	9b06      	ldr	r3, [sp, #24]
 80081c8:	9301      	str	r3, [sp, #4]
 80081ca:	2302      	movs	r3, #2
 80081cc:	9300      	str	r3, [sp, #0]
 80081ce:	9a07      	ldr	r2, [sp, #28]
 80081d0:	490a      	ldr	r1, [pc, #40]	@ (80081fc <xTimerCreateTimerTask+0x58>)
 80081d2:	480b      	ldr	r0, [pc, #44]	@ (8008200 <xTimerCreateTimerTask+0x5c>)
 80081d4:	4623      	mov	r3, r4
 80081d6:	f7ff fbc0 	bl	800795a <xTaskCreateStatic>
 80081da:	4b0a      	ldr	r3, [pc, #40]	@ (8008204 <xTimerCreateTimerTask+0x60>)
 80081dc:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80081de:	b940      	cbnz	r0, 80081f2 <xTimerCreateTimerTask+0x4e>
 80081e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e4:	f383 8811 	msr	BASEPRI, r3
 80081e8:	f3bf 8f6f 	isb	sy
 80081ec:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 80081f0:	e7fe      	b.n	80081f0 <xTimerCreateTimerTask+0x4c>
}
 80081f2:	2001      	movs	r0, #1
 80081f4:	b008      	add	sp, #32
 80081f6:	bd10      	pop	{r4, pc}
 80081f8:	20012444 	.word	0x20012444
 80081fc:	08011e2b 	.word	0x08011e2b
 8008200:	08008305 	.word	0x08008305
 8008204:	20012440 	.word	0x20012440

08008208 <xTimerGenericCommand>:
{
 8008208:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800820a:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800820c:	4604      	mov	r4, r0
{
 800820e:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8008210:	b940      	cbnz	r0, 8008224 <xTimerGenericCommand+0x1c>
 8008212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008216:	f383 8811 	msr	BASEPRI, r3
 800821a:	f3bf 8f6f 	isb	sy
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	e7fe      	b.n	8008222 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8008224:	4d0d      	ldr	r5, [pc, #52]	@ (800825c <xTimerGenericCommand+0x54>)
 8008226:	6828      	ldr	r0, [r5, #0]
 8008228:	b180      	cbz	r0, 800824c <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800822a:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800822c:	e9cd 1600 	strd	r1, r6, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008230:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008232:	dc0d      	bgt.n	8008250 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008234:	f7ff fe7a 	bl	8007f2c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008238:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800823a:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800823c:	bf08      	it	eq
 800823e:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008240:	6828      	ldr	r0, [r5, #0]
 8008242:	bf18      	it	ne
 8008244:	461a      	movne	r2, r3
 8008246:	4669      	mov	r1, sp
 8008248:	f7fe fe9a 	bl	8006f80 <xQueueGenericSend>
}
 800824c:	b004      	add	sp, #16
 800824e:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008250:	2300      	movs	r3, #0
 8008252:	4669      	mov	r1, sp
 8008254:	f7fe ff46 	bl	80070e4 <xQueueGenericSendFromISR>
 8008258:	e7f8      	b.n	800824c <xTimerGenericCommand+0x44>
 800825a:	bf00      	nop
 800825c:	20012444 	.word	0x20012444

08008260 <prvSampleTimeNow>:
{
 8008260:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 8008264:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8008300 <prvSampleTimeNow+0xa0>
{
 8008268:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800826a:	f7ff fc2b 	bl	8007ac4 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800826e:	f8d8 3000 	ldr.w	r3, [r8]
 8008272:	4283      	cmp	r3, r0
	xTimeNow = xTaskGetTickCount();
 8008274:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8008276:	d909      	bls.n	800828c <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008278:	4f1f      	ldr	r7, [pc, #124]	@ (80082f8 <prvSampleTimeNow+0x98>)
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	b96a      	cbnz	r2, 800829c <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 8008280:	4a1e      	ldr	r2, [pc, #120]	@ (80082fc <prvSampleTimeNow+0x9c>)
 8008282:	6811      	ldr	r1, [r2, #0]
 8008284:	6039      	str	r1, [r7, #0]
	pxOverflowTimerList = pxTemp;
 8008286:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8008288:	2301      	movs	r3, #1
 800828a:	e000      	b.n	800828e <prvSampleTimeNow+0x2e>
 800828c:	2300      	movs	r3, #0
}
 800828e:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 8008290:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 8008292:	f8c8 5000 	str.w	r5, [r8]
}
 8008296:	b002      	add	sp, #8
 8008298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800829c:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800829e:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80082a0:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082a4:	f104 0a04 	add.w	sl, r4, #4
 80082a8:	4650      	mov	r0, sl
 80082aa:	f7fe fb31 	bl	8006910 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082ae:	6a23      	ldr	r3, [r4, #32]
 80082b0:	4620      	mov	r0, r4
 80082b2:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80082b4:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80082b8:	075b      	lsls	r3, r3, #29
 80082ba:	d5de      	bpl.n	800827a <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80082bc:	69a3      	ldr	r3, [r4, #24]
 80082be:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 80082c0:	4599      	cmp	r9, r3
 80082c2:	d206      	bcs.n	80082d2 <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80082c4:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80082c6:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80082c8:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80082ca:	4651      	mov	r1, sl
 80082cc:	f7fe fb09 	bl	80068e2 <vListInsert>
 80082d0:	e7d3      	b.n	800827a <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80082d2:	2300      	movs	r3, #0
 80082d4:	9300      	str	r3, [sp, #0]
 80082d6:	464a      	mov	r2, r9
 80082d8:	4619      	mov	r1, r3
 80082da:	4620      	mov	r0, r4
 80082dc:	f7ff ff94 	bl	8008208 <xTimerGenericCommand>
				configASSERT( xResult );
 80082e0:	2800      	cmp	r0, #0
 80082e2:	d1ca      	bne.n	800827a <prvSampleTimeNow+0x1a>
 80082e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082e8:	f383 8811 	msr	BASEPRI, r3
 80082ec:	f3bf 8f6f 	isb	sy
 80082f0:	f3bf 8f4f 	dsb	sy
 80082f4:	e7fe      	b.n	80082f4 <prvSampleTimeNow+0x94>
 80082f6:	bf00      	nop
 80082f8:	2001244c 	.word	0x2001244c
 80082fc:	20012448 	.word	0x20012448
 8008300:	2001243c 	.word	0x2001243c

08008304 <prvTimerTask>:
{
 8008304:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008308:	4d6e      	ldr	r5, [pc, #440]	@ (80084c4 <prvTimerTask+0x1c0>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800830a:	4e6f      	ldr	r6, [pc, #444]	@ (80084c8 <prvTimerTask+0x1c4>)
{
 800830c:	b089      	sub	sp, #36	@ 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800830e:	682b      	ldr	r3, [r5, #0]
 8008310:	f8d3 8000 	ldr.w	r8, [r3]
 8008314:	f1b8 0f00 	cmp.w	r8, #0
 8008318:	d035      	beq.n	8008386 <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	f8d3 8000 	ldr.w	r8, [r3]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008320:	2400      	movs	r4, #0
	vTaskSuspendAll();
 8008322:	f7ff fbc7 	bl	8007ab4 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008326:	a804      	add	r0, sp, #16
 8008328:	f7ff ff9a 	bl	8008260 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800832c:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800832e:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8008330:	2b00      	cmp	r3, #0
 8008332:	d169      	bne.n	8008408 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008334:	2c00      	cmp	r4, #0
 8008336:	d14c      	bne.n	80083d2 <prvTimerTask+0xce>
 8008338:	4540      	cmp	r0, r8
 800833a:	d350      	bcc.n	80083de <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 800833c:	f7ff fc5e 	bl	8007bfc <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008340:	682b      	ldr	r3, [r5, #0]
 8008342:	68db      	ldr	r3, [r3, #12]
 8008344:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008346:	1d38      	adds	r0, r7, #4
 8008348:	f7fe fae2 	bl	8006910 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800834c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008350:	0758      	lsls	r0, r3, #29
 8008352:	d51a      	bpl.n	800838a <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008354:	69b9      	ldr	r1, [r7, #24]
 8008356:	4643      	mov	r3, r8
 8008358:	464a      	mov	r2, r9
 800835a:	4441      	add	r1, r8
 800835c:	4638      	mov	r0, r7
 800835e:	f7ff fecf 	bl	8008100 <prvInsertTimerInActiveList>
 8008362:	b1b0      	cbz	r0, 8008392 <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008364:	9400      	str	r4, [sp, #0]
 8008366:	4623      	mov	r3, r4
 8008368:	4642      	mov	r2, r8
 800836a:	4621      	mov	r1, r4
 800836c:	4638      	mov	r0, r7
 800836e:	f7ff ff4b 	bl	8008208 <xTimerGenericCommand>
			configASSERT( xResult );
 8008372:	b970      	cbnz	r0, 8008392 <prvTimerTask+0x8e>
 8008374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008378:	f383 8811 	msr	BASEPRI, r3
 800837c:	f3bf 8f6f 	isb	sy
 8008380:	f3bf 8f4f 	dsb	sy
 8008384:	e7fe      	b.n	8008384 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008386:	2401      	movs	r4, #1
 8008388:	e7cb      	b.n	8008322 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800838a:	f023 0301 	bic.w	r3, r3, #1
 800838e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008392:	6a3b      	ldr	r3, [r7, #32]
 8008394:	4638      	mov	r0, r7
 8008396:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008398:	6830      	ldr	r0, [r6, #0]
 800839a:	2200      	movs	r2, #0
 800839c:	a904      	add	r1, sp, #16
 800839e:	f7fe ff4f 	bl	8007240 <xQueueReceive>
 80083a2:	2800      	cmp	r0, #0
 80083a4:	d0b3      	beq.n	800830e <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80083a6:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80083a8:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	db2f      	blt.n	800840e <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80083ae:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80083b0:	6963      	ldr	r3, [r4, #20]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d132      	bne.n	800841c <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80083b6:	a803      	add	r0, sp, #12
 80083b8:	f7ff ff52 	bl	8008260 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 80083bc:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80083be:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 80083c0:	2b09      	cmp	r3, #9
 80083c2:	d8e9      	bhi.n	8008398 <prvTimerTask+0x94>
 80083c4:	e8df f003 	tbb	[pc, r3]
 80083c8:	572e2e2e 	.word	0x572e2e2e
 80083cc:	2e2e765e 	.word	0x2e2e765e
 80083d0:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80083d2:	4b3e      	ldr	r3, [pc, #248]	@ (80084cc <prvTimerTask+0x1c8>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	681c      	ldr	r4, [r3, #0]
 80083d8:	fab4 f484 	clz	r4, r4
 80083dc:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80083de:	6830      	ldr	r0, [r6, #0]
 80083e0:	4622      	mov	r2, r4
 80083e2:	eba8 0109 	sub.w	r1, r8, r9
 80083e6:	f7ff f932 	bl	800764e <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80083ea:	f7ff fc07 	bl	8007bfc <xTaskResumeAll>
 80083ee:	2800      	cmp	r0, #0
 80083f0:	d1d2      	bne.n	8008398 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 80083f2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80083f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083fa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80083fe:	f3bf 8f4f 	dsb	sy
 8008402:	f3bf 8f6f 	isb	sy
 8008406:	e7c7      	b.n	8008398 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 8008408:	f7ff fbf8 	bl	8007bfc <xTaskResumeAll>
}
 800840c:	e7c4      	b.n	8008398 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800840e:	9b05      	ldr	r3, [sp, #20]
 8008410:	9907      	ldr	r1, [sp, #28]
 8008412:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008414:	9b04      	ldr	r3, [sp, #16]
 8008416:	2b00      	cmp	r3, #0
 8008418:	dbbe      	blt.n	8008398 <prvTimerTask+0x94>
 800841a:	e7c8      	b.n	80083ae <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800841c:	1d20      	adds	r0, r4, #4
 800841e:	f7fe fa77 	bl	8006910 <uxListRemove>
 8008422:	e7c8      	b.n	80083b6 <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008424:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008428:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800842a:	f043 0301 	orr.w	r3, r3, #1
 800842e:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008432:	9b05      	ldr	r3, [sp, #20]
 8008434:	4620      	mov	r0, r4
 8008436:	4419      	add	r1, r3
 8008438:	f7ff fe62 	bl	8008100 <prvInsertTimerInActiveList>
 800843c:	2800      	cmp	r0, #0
 800843e:	d0ab      	beq.n	8008398 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008440:	6a23      	ldr	r3, [r4, #32]
 8008442:	4620      	mov	r0, r4
 8008444:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008446:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800844a:	0759      	lsls	r1, r3, #29
 800844c:	d5a4      	bpl.n	8008398 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800844e:	69a2      	ldr	r2, [r4, #24]
 8008450:	9905      	ldr	r1, [sp, #20]
 8008452:	2300      	movs	r3, #0
 8008454:	440a      	add	r2, r1
 8008456:	9300      	str	r3, [sp, #0]
 8008458:	4619      	mov	r1, r3
 800845a:	4620      	mov	r0, r4
 800845c:	f7ff fed4 	bl	8008208 <xTimerGenericCommand>
							configASSERT( xResult );
 8008460:	2800      	cmp	r0, #0
 8008462:	d199      	bne.n	8008398 <prvTimerTask+0x94>
 8008464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008468:	f383 8811 	msr	BASEPRI, r3
 800846c:	f3bf 8f6f 	isb	sy
 8008470:	f3bf 8f4f 	dsb	sy
 8008474:	e7fe      	b.n	8008474 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008476:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800847a:	f023 0301 	bic.w	r3, r3, #1
 800847e:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8008482:	e789      	b.n	8008398 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008484:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8008488:	f043 0301 	orr.w	r3, r3, #1
 800848c:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008490:	9905      	ldr	r1, [sp, #20]
 8008492:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008494:	b941      	cbnz	r1, 80084a8 <prvTimerTask+0x1a4>
 8008496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800849a:	f383 8811 	msr	BASEPRI, r3
 800849e:	f3bf 8f6f 	isb	sy
 80084a2:	f3bf 8f4f 	dsb	sy
 80084a6:	e7fe      	b.n	80084a6 <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80084a8:	4603      	mov	r3, r0
 80084aa:	4401      	add	r1, r0
 80084ac:	4620      	mov	r0, r4
 80084ae:	f7ff fe27 	bl	8008100 <prvInsertTimerInActiveList>
					break;
 80084b2:	e771      	b.n	8008398 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80084b4:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80084b8:	079a      	lsls	r2, r3, #30
 80084ba:	d4de      	bmi.n	800847a <prvTimerTask+0x176>
							vPortFree( pxTimer );
 80084bc:	4620      	mov	r0, r4
 80084be:	f7fe f9b9 	bl	8006834 <vPortFree>
 80084c2:	e769      	b.n	8008398 <prvTimerTask+0x94>
 80084c4:	2001244c 	.word	0x2001244c
 80084c8:	20012444 	.word	0x20012444
 80084cc:	20012448 	.word	0x20012448

080084d0 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 80084d0:	8880      	ldrh	r0, [r0, #4]
 80084d2:	4770      	bx	lr

080084d4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 80084d4:	b570      	push	{r4, r5, r6, lr}
 80084d6:	6803      	ldr	r3, [r0, #0]
 80084d8:	4605      	mov	r5, r0
 80084da:	460c      	mov	r4, r1
 80084dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084de:	2100      	movs	r1, #0
 80084e0:	4798      	blx	r3
 80084e2:	682b      	ldr	r3, [r5, #0]
 80084e4:	4606      	mov	r6, r0
 80084e6:	6a1b      	ldr	r3, [r3, #32]
 80084e8:	4628      	mov	r0, r5
 80084ea:	4798      	blx	r3
 80084ec:	1ba4      	subs	r4, r4, r6
 80084ee:	b2a4      	uxth	r4, r4
 80084f0:	fbb4 f0f0 	udiv	r0, r4, r0
 80084f4:	bd70      	pop	{r4, r5, r6, pc}

080084f6 <_ZN8touchgfx17AbstractPartition5clearEv>:
 80084f6:	2300      	movs	r3, #0
 80084f8:	8083      	strh	r3, [r0, #4]
 80084fa:	4770      	bx	lr

080084fc <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80084fc:	b510      	push	{r4, lr}
 80084fe:	6803      	ldr	r3, [r0, #0]
 8008500:	8881      	ldrh	r1, [r0, #4]
 8008502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008504:	4604      	mov	r4, r0
 8008506:	4798      	blx	r3
 8008508:	88a3      	ldrh	r3, [r4, #4]
 800850a:	3301      	adds	r3, #1
 800850c:	80a3      	strh	r3, [r4, #4]
 800850e:	bd10      	pop	{r4, pc}

08008510 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8008510:	6803      	ldr	r3, [r0, #0]
 8008512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008514:	4718      	bx	r3

08008516 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8008516:	4770      	bx	lr

08008518 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8008518:	4a02      	ldr	r2, [pc, #8]	@ (8008524 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800851a:	6002      	str	r2, [r0, #0]
 800851c:	2200      	movs	r2, #0
 800851e:	8082      	strh	r2, [r0, #4]
 8008520:	4770      	bx	lr
 8008522:	bf00      	nop
 8008524:	080125c0 	.word	0x080125c0

08008528 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8008528:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800852a:	2000      	movs	r0, #0
 800852c:	b12b      	cbz	r3, 800853a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800852e:	b920      	cbnz	r0, 800853a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8008530:	1a5a      	subs	r2, r3, r1
 8008532:	4250      	negs	r0, r2
 8008534:	4150      	adcs	r0, r2
 8008536:	699b      	ldr	r3, [r3, #24]
 8008538:	e7f8      	b.n	800852c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800853a:	4770      	bx	lr

0800853c <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800853c:	2300      	movs	r3, #0
 800853e:	6148      	str	r0, [r1, #20]
 8008540:	618b      	str	r3, [r1, #24]
 8008542:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8008544:	b913      	cbnz	r3, 800854c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8008546:	6281      	str	r1, [r0, #40]	@ 0x28
 8008548:	4770      	bx	lr
 800854a:	4613      	mov	r3, r2
 800854c:	699a      	ldr	r2, [r3, #24]
 800854e:	2a00      	cmp	r2, #0
 8008550:	d1fb      	bne.n	800854a <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8008552:	6199      	str	r1, [r3, #24]
 8008554:	4770      	bx	lr

08008556 <_ZN8touchgfx9Container9removeAllEv>:
 8008556:	2200      	movs	r2, #0
 8008558:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800855a:	b123      	cbz	r3, 8008566 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800855c:	6999      	ldr	r1, [r3, #24]
 800855e:	6281      	str	r1, [r0, #40]	@ 0x28
 8008560:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8008564:	e7f8      	b.n	8008558 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8008566:	4770      	bx	lr

08008568 <_ZN8touchgfx9Container6unlinkEv>:
 8008568:	2300      	movs	r3, #0
 800856a:	6283      	str	r3, [r0, #40]	@ 0x28
 800856c:	4770      	bx	lr

0800856e <_ZNK8touchgfx9Container12getSolidRectEv>:
 800856e:	2200      	movs	r2, #0
 8008570:	8002      	strh	r2, [r0, #0]
 8008572:	8042      	strh	r2, [r0, #2]
 8008574:	8082      	strh	r2, [r0, #4]
 8008576:	80c2      	strh	r2, [r0, #6]
 8008578:	4770      	bx	lr

0800857a <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800857a:	b570      	push	{r4, r5, r6, lr}
 800857c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800857e:	460d      	mov	r5, r1
 8008580:	4616      	mov	r6, r2
 8008582:	b13c      	cbz	r4, 8008594 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8008584:	6823      	ldr	r3, [r4, #0]
 8008586:	4620      	mov	r0, r4
 8008588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800858a:	4632      	mov	r2, r6
 800858c:	4629      	mov	r1, r5
 800858e:	4798      	blx	r3
 8008590:	69a4      	ldr	r4, [r4, #24]
 8008592:	e7f6      	b.n	8008582 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8008594:	bd70      	pop	{r4, r5, r6, pc}

08008596 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8008596:	b538      	push	{r3, r4, r5, lr}
 8008598:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800859a:	460d      	mov	r5, r1
 800859c:	b134      	cbz	r4, 80085ac <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800859e:	682b      	ldr	r3, [r5, #0]
 80085a0:	4621      	mov	r1, r4
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	4628      	mov	r0, r5
 80085a6:	4798      	blx	r3
 80085a8:	69a4      	ldr	r4, [r4, #24]
 80085aa:	e7f7      	b.n	800859c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 80085ac:	bd38      	pop	{r3, r4, r5, pc}

080085ae <_ZN8touchgfx9ContainerD1Ev>:
 80085ae:	4770      	bx	lr

080085b0 <_ZN8touchgfx9ContainerD0Ev>:
 80085b0:	b510      	push	{r4, lr}
 80085b2:	212c      	movs	r1, #44	@ 0x2c
 80085b4:	4604      	mov	r4, r0
 80085b6:	f007 fe5f 	bl	8010278 <_ZdlPvj>
 80085ba:	4620      	mov	r0, r4
 80085bc:	bd10      	pop	{r4, pc}

080085be <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 80085be:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80085c0:	b19b      	cbz	r3, 80085ea <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80085c2:	428b      	cmp	r3, r1
 80085c4:	d109      	bne.n	80085da <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 80085c6:	699a      	ldr	r2, [r3, #24]
 80085c8:	2100      	movs	r1, #0
 80085ca:	6159      	str	r1, [r3, #20]
 80085cc:	6282      	str	r2, [r0, #40]	@ 0x28
 80085ce:	b902      	cbnz	r2, 80085d2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 80085d0:	4770      	bx	lr
 80085d2:	6199      	str	r1, [r3, #24]
 80085d4:	4770      	bx	lr
 80085d6:	4613      	mov	r3, r2
 80085d8:	b13a      	cbz	r2, 80085ea <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80085da:	699a      	ldr	r2, [r3, #24]
 80085dc:	428a      	cmp	r2, r1
 80085de:	d1fa      	bne.n	80085d6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 80085e0:	698a      	ldr	r2, [r1, #24]
 80085e2:	619a      	str	r2, [r3, #24]
 80085e4:	2300      	movs	r3, #0
 80085e6:	e9c1 3305 	strd	r3, r3, [r1, #20]
 80085ea:	4770      	bx	lr

080085ec <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 80085ec:	b410      	push	{r4}
 80085ee:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80085f0:	4604      	mov	r4, r0
 80085f2:	b92b      	cbnz	r3, 8008600 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80085f4:	6803      	ldr	r3, [r0, #0]
 80085f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085fc:	4611      	mov	r1, r2
 80085fe:	4718      	bx	r3
 8008600:	b941      	cbnz	r1, 8008614 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8008602:	6193      	str	r3, [r2, #24]
 8008604:	6282      	str	r2, [r0, #40]	@ 0x28
 8008606:	6154      	str	r4, [r2, #20]
 8008608:	f85d 4b04 	ldr.w	r4, [sp], #4
 800860c:	4770      	bx	lr
 800860e:	4603      	mov	r3, r0
 8008610:	2800      	cmp	r0, #0
 8008612:	d0f9      	beq.n	8008608 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8008614:	4299      	cmp	r1, r3
 8008616:	6998      	ldr	r0, [r3, #24]
 8008618:	d1f9      	bne.n	800860e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800861a:	6190      	str	r0, [r2, #24]
 800861c:	618a      	str	r2, [r1, #24]
 800861e:	e7f2      	b.n	8008606 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08008620 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8008620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008624:	461f      	mov	r7, r3
 8008626:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800862a:	460d      	mov	r5, r1
 800862c:	4616      	mov	r6, r2
 800862e:	b103      	cbz	r3, 8008632 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8008630:	6038      	str	r0, [r7, #0]
 8008632:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8008634:	b314      	cbz	r4, 800867c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8008636:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800863a:	b1eb      	cbz	r3, 8008678 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800863c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8008640:	428d      	cmp	r5, r1
 8008642:	db19      	blt.n	8008678 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8008644:	8923      	ldrh	r3, [r4, #8]
 8008646:	b289      	uxth	r1, r1
 8008648:	440b      	add	r3, r1
 800864a:	b21b      	sxth	r3, r3
 800864c:	429d      	cmp	r5, r3
 800864e:	da13      	bge.n	8008678 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8008650:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8008654:	4296      	cmp	r6, r2
 8008656:	db0f      	blt.n	8008678 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8008658:	8963      	ldrh	r3, [r4, #10]
 800865a:	b292      	uxth	r2, r2
 800865c:	4413      	add	r3, r2
 800865e:	b21b      	sxth	r3, r3
 8008660:	429e      	cmp	r6, r3
 8008662:	da09      	bge.n	8008678 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8008664:	6823      	ldr	r3, [r4, #0]
 8008666:	1ab2      	subs	r2, r6, r2
 8008668:	1a69      	subs	r1, r5, r1
 800866a:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 800866e:	b212      	sxth	r2, r2
 8008670:	463b      	mov	r3, r7
 8008672:	b209      	sxth	r1, r1
 8008674:	4620      	mov	r0, r4
 8008676:	47c0      	blx	r8
 8008678:	69a4      	ldr	r4, [r4, #24]
 800867a:	e7db      	b.n	8008634 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800867c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008680 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8008680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008684:	4c6e      	ldr	r4, [pc, #440]	@ (8008840 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8008686:	b0a1      	sub	sp, #132	@ 0x84
 8008688:	6824      	ldr	r4, [r4, #0]
 800868a:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 800868c:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 8008690:	9303      	str	r3, [sp, #12]
 8008692:	2400      	movs	r4, #0
 8008694:	802c      	strh	r4, [r5, #0]
 8008696:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 8008698:	802c      	strh	r4, [r5, #0]
 800869a:	601c      	str	r4, [r3, #0]
 800869c:	4606      	mov	r6, r0
 800869e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 80086a2:	f7ff ffbd 	bl	8008620 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80086a6:	f1b9 0f03 	cmp.w	r9, #3
 80086aa:	f340 80c2 	ble.w	8008832 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 80086ae:	4631      	mov	r1, r6
 80086b0:	a80c      	add	r0, sp, #48	@ 0x30
 80086b2:	f003 fbc7 	bl	800be44 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80086b6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 80086ba:	9306      	str	r3, [sp, #24]
 80086bc:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80086c0:	9307      	str	r3, [sp, #28]
 80086c2:	9b03      	ldr	r3, [sp, #12]
 80086c4:	f8d3 a000 	ldr.w	sl, [r3]
 80086c8:	f1ba 0f00 	cmp.w	sl, #0
 80086cc:	f000 80b4 	beq.w	8008838 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>
 80086d0:	4651      	mov	r1, sl
 80086d2:	a810      	add	r0, sp, #64	@ 0x40
 80086d4:	f003 fbb6 	bl	800be44 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80086d8:	9b01      	ldr	r3, [sp, #4]
 80086da:	9a06      	ldr	r2, [sp, #24]
 80086dc:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 80086e0:	189d      	adds	r5, r3, r2
 80086e2:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 80086e6:	9a07      	ldr	r2, [sp, #28]
 80086e8:	2002      	movs	r0, #2
 80086ea:	fb91 f1f0 	sdiv	r1, r1, r0
 80086ee:	4419      	add	r1, r3
 80086f0:	1a6d      	subs	r5, r5, r1
 80086f2:	9b02      	ldr	r3, [sp, #8]
 80086f4:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 80086f8:	4413      	add	r3, r2
 80086fa:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 80086fe:	fb92 f2f0 	sdiv	r2, r2, r0
 8008702:	440a      	add	r2, r1
 8008704:	1a9b      	subs	r3, r3, r2
 8008706:	435b      	muls	r3, r3
 8008708:	fb05 3505 	mla	r5, r5, r5, r3
 800870c:	4f4d      	ldr	r7, [pc, #308]	@ (8008844 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c4>)
 800870e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8008710:	ac10      	add	r4, sp, #64	@ 0x40
 8008712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008714:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8008716:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008718:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800871a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800871c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8008720:	f1b9 0f0c 	cmp.w	r9, #12
 8008724:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008728:	f04f 0303 	mov.w	r3, #3
 800872c:	bfc8      	it	gt
 800872e:	4698      	movgt	r8, r3
 8008730:	f8cd 9000 	str.w	r9, [sp]
 8008734:	f04f 0400 	mov.w	r4, #0
 8008738:	bfdc      	itt	le
 800873a:	f109 32ff 	addle.w	r2, r9, #4294967295
 800873e:	fb92 f8f3 	sdivle	r8, r2, r3
 8008742:	1c63      	adds	r3, r4, #1
 8008744:	aa10      	add	r2, sp, #64	@ 0x40
 8008746:	f004 0401 	and.w	r4, r4, #1
 800874a:	9308      	str	r3, [sp, #32]
 800874c:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8008750:	9b00      	ldr	r3, [sp, #0]
 8008752:	fb93 f3f8 	sdiv	r3, r3, r8
 8008756:	b29b      	uxth	r3, r3
 8008758:	3404      	adds	r4, #4
 800875a:	f04f 0b00 	mov.w	fp, #0
 800875e:	9304      	str	r3, [sp, #16]
 8008760:	9a04      	ldr	r2, [sp, #16]
 8008762:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008766:	fb13 f302 	smulbb	r3, r3, r2
 800876a:	9a01      	ldr	r2, [sp, #4]
 800876c:	b29b      	uxth	r3, r3
 800876e:	1899      	adds	r1, r3, r2
 8008770:	9305      	str	r3, [sp, #20]
 8008772:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8008776:	b209      	sxth	r1, r1
 8008778:	4299      	cmp	r1, r3
 800877a:	db4d      	blt.n	8008818 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800877c:	8932      	ldrh	r2, [r6, #8]
 800877e:	4413      	add	r3, r2
 8008780:	b21b      	sxth	r3, r3
 8008782:	4299      	cmp	r1, r3
 8008784:	da48      	bge.n	8008818 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8008786:	9b04      	ldr	r3, [sp, #16]
 8008788:	6827      	ldr	r7, [r4, #0]
 800878a:	fb17 f703 	smulbb	r7, r7, r3
 800878e:	9b02      	ldr	r3, [sp, #8]
 8008790:	b2bf      	uxth	r7, r7
 8008792:	18fa      	adds	r2, r7, r3
 8008794:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8008798:	b212      	sxth	r2, r2
 800879a:	429a      	cmp	r2, r3
 800879c:	db3c      	blt.n	8008818 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800879e:	8970      	ldrh	r0, [r6, #10]
 80087a0:	4403      	add	r3, r0
 80087a2:	b21b      	sxth	r3, r3
 80087a4:	429a      	cmp	r2, r3
 80087a6:	da37      	bge.n	8008818 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80087a8:	2300      	movs	r3, #0
 80087aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80087ac:	4630      	mov	r0, r6
 80087ae:	ab0b      	add	r3, sp, #44	@ 0x2c
 80087b0:	f7ff ff36 	bl	8008620 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80087b4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80087b6:	b37a      	cbz	r2, 8008818 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80087b8:	4552      	cmp	r2, sl
 80087ba:	d02d      	beq.n	8008818 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80087bc:	4611      	mov	r1, r2
 80087be:	a80e      	add	r0, sp, #56	@ 0x38
 80087c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80087c2:	f003 fb3f 	bl	800be44 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80087c6:	9a06      	ldr	r2, [sp, #24]
 80087c8:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 80087cc:	9b01      	ldr	r3, [sp, #4]
 80087ce:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 80087d2:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 80087d6:	4413      	add	r3, r2
 80087d8:	f04f 0e02 	mov.w	lr, #2
 80087dc:	fb91 f1fe 	sdiv	r1, r1, lr
 80087e0:	4401      	add	r1, r0
 80087e2:	1a58      	subs	r0, r3, r1
 80087e4:	9a07      	ldr	r2, [sp, #28]
 80087e6:	9b02      	ldr	r3, [sp, #8]
 80087e8:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 80087ec:	fb9c fcfe 	sdiv	ip, ip, lr
 80087f0:	4413      	add	r3, r2
 80087f2:	448c      	add	ip, r1
 80087f4:	eba3 030c 	sub.w	r3, r3, ip
 80087f8:	435b      	muls	r3, r3
 80087fa:	fb00 3300 	mla	r3, r0, r0, r3
 80087fe:	42ab      	cmp	r3, r5
 8008800:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008802:	d208      	bcs.n	8008816 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8008804:	9803      	ldr	r0, [sp, #12]
 8008806:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008808:	6001      	str	r1, [r0, #0]
 800880a:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 800880c:	9805      	ldr	r0, [sp, #20]
 800880e:	8008      	strh	r0, [r1, #0]
 8008810:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8008812:	461d      	mov	r5, r3
 8008814:	800f      	strh	r7, [r1, #0]
 8008816:	4692      	mov	sl, r2
 8008818:	f10b 0b01 	add.w	fp, fp, #1
 800881c:	f1bb 0f04 	cmp.w	fp, #4
 8008820:	f104 0408 	add.w	r4, r4, #8
 8008824:	d19c      	bne.n	8008760 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8008826:	9b00      	ldr	r3, [sp, #0]
 8008828:	9c08      	ldr	r4, [sp, #32]
 800882a:	444b      	add	r3, r9
 800882c:	4544      	cmp	r4, r8
 800882e:	9300      	str	r3, [sp, #0]
 8008830:	d187      	bne.n	8008742 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8008832:	b021      	add	sp, #132	@ 0x84
 8008834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008838:	f04f 35ff 	mov.w	r5, #4294967295
 800883c:	e766      	b.n	800870c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800883e:	bf00      	nop
 8008840:	20012484 	.word	0x20012484
 8008844:	08011328 	.word	0x08011328

08008848 <_ZN8touchgfx4RectaNERKS0_>:
 8008848:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800884c:	f9b1 7000 	ldrsh.w	r7, [r1]
 8008850:	888c      	ldrh	r4, [r1, #4]
 8008852:	f9b0 9000 	ldrsh.w	r9, [r0]
 8008856:	443c      	add	r4, r7
 8008858:	b2a4      	uxth	r4, r4
 800885a:	fa0f f884 	sxth.w	r8, r4
 800885e:	45c1      	cmp	r9, r8
 8008860:	da2f      	bge.n	80088c2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8008862:	8882      	ldrh	r2, [r0, #4]
 8008864:	444a      	add	r2, r9
 8008866:	b292      	uxth	r2, r2
 8008868:	fa0f fe82 	sxth.w	lr, r2
 800886c:	4577      	cmp	r7, lr
 800886e:	da28      	bge.n	80088c2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8008870:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8008874:	88cb      	ldrh	r3, [r1, #6]
 8008876:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800887a:	442b      	add	r3, r5
 800887c:	b21b      	sxth	r3, r3
 800887e:	429e      	cmp	r6, r3
 8008880:	da1f      	bge.n	80088c2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8008882:	88c3      	ldrh	r3, [r0, #6]
 8008884:	4433      	add	r3, r6
 8008886:	b29b      	uxth	r3, r3
 8008888:	fa0f fc83 	sxth.w	ip, r3
 800888c:	4565      	cmp	r5, ip
 800888e:	da18      	bge.n	80088c2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8008890:	454f      	cmp	r7, r9
 8008892:	bfb8      	it	lt
 8008894:	464f      	movlt	r7, r9
 8008896:	42b5      	cmp	r5, r6
 8008898:	bfb8      	it	lt
 800889a:	4635      	movlt	r5, r6
 800889c:	45f0      	cmp	r8, lr
 800889e:	bfd8      	it	le
 80088a0:	4622      	movle	r2, r4
 80088a2:	1bd2      	subs	r2, r2, r7
 80088a4:	8082      	strh	r2, [r0, #4]
 80088a6:	884a      	ldrh	r2, [r1, #2]
 80088a8:	88c9      	ldrh	r1, [r1, #6]
 80088aa:	8007      	strh	r7, [r0, #0]
 80088ac:	440a      	add	r2, r1
 80088ae:	b292      	uxth	r2, r2
 80088b0:	b211      	sxth	r1, r2
 80088b2:	458c      	cmp	ip, r1
 80088b4:	bfa8      	it	ge
 80088b6:	4613      	movge	r3, r2
 80088b8:	1b5b      	subs	r3, r3, r5
 80088ba:	80c3      	strh	r3, [r0, #6]
 80088bc:	8045      	strh	r5, [r0, #2]
 80088be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088c2:	2300      	movs	r3, #0
 80088c4:	8003      	strh	r3, [r0, #0]
 80088c6:	8043      	strh	r3, [r0, #2]
 80088c8:	8083      	strh	r3, [r0, #4]
 80088ca:	80c3      	strh	r3, [r0, #6]
 80088cc:	e7f7      	b.n	80088be <_ZN8touchgfx4RectaNERKS0_+0x76>

080088ce <_ZNK8touchgfx4Rect7isEmptyEv>:
 80088ce:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	dd06      	ble.n	80088e4 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 80088d6:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80088da:	2800      	cmp	r0, #0
 80088dc:	bfcc      	ite	gt
 80088de:	2000      	movgt	r0, #0
 80088e0:	2001      	movle	r0, #1
 80088e2:	4770      	bx	lr
 80088e4:	2001      	movs	r0, #1
 80088e6:	4770      	bx	lr

080088e8 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80088e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088ec:	2300      	movs	r3, #0
 80088ee:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 80088f0:	8003      	strh	r3, [r0, #0]
 80088f2:	4604      	mov	r4, r0
 80088f4:	8043      	strh	r3, [r0, #2]
 80088f6:	8083      	strh	r3, [r0, #4]
 80088f8:	80c3      	strh	r3, [r0, #6]
 80088fa:	2d00      	cmp	r5, #0
 80088fc:	d040      	beq.n	8008980 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80088fe:	1d28      	adds	r0, r5, #4
 8008900:	f7ff ffe5 	bl	80088ce <_ZNK8touchgfx4Rect7isEmptyEv>
 8008904:	b988      	cbnz	r0, 800892a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8008906:	4620      	mov	r0, r4
 8008908:	f7ff ffe1 	bl	80088ce <_ZNK8touchgfx4Rect7isEmptyEv>
 800890c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8008910:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8008914:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8008918:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800891c:	b138      	cbz	r0, 800892e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800891e:	8022      	strh	r2, [r4, #0]
 8008920:	8063      	strh	r3, [r4, #2]
 8008922:	f8a4 e004 	strh.w	lr, [r4, #4]
 8008926:	f8a4 c006 	strh.w	ip, [r4, #6]
 800892a:	69ad      	ldr	r5, [r5, #24]
 800892c:	e7e5      	b.n	80088fa <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800892e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8008932:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8008936:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800893a:	4290      	cmp	r0, r2
 800893c:	4607      	mov	r7, r0
 800893e:	bfa8      	it	ge
 8008940:	4617      	movge	r7, r2
 8008942:	4472      	add	r2, lr
 8008944:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8008948:	8027      	strh	r7, [r4, #0]
 800894a:	4299      	cmp	r1, r3
 800894c:	460e      	mov	r6, r1
 800894e:	4440      	add	r0, r8
 8008950:	bfa8      	it	ge
 8008952:	461e      	movge	r6, r3
 8008954:	4471      	add	r1, lr
 8008956:	4463      	add	r3, ip
 8008958:	b200      	sxth	r0, r0
 800895a:	b212      	sxth	r2, r2
 800895c:	b209      	sxth	r1, r1
 800895e:	b21b      	sxth	r3, r3
 8008960:	4290      	cmp	r0, r2
 8008962:	bfac      	ite	ge
 8008964:	ebc7 0200 	rsbge	r2, r7, r0
 8008968:	ebc7 0202 	rsblt	r2, r7, r2
 800896c:	4299      	cmp	r1, r3
 800896e:	bfac      	ite	ge
 8008970:	ebc6 0301 	rsbge	r3, r6, r1
 8008974:	ebc6 0303 	rsblt	r3, r6, r3
 8008978:	8066      	strh	r6, [r4, #2]
 800897a:	80a2      	strh	r2, [r4, #4]
 800897c:	80e3      	strh	r3, [r4, #6]
 800897e:	e7d4      	b.n	800892a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8008980:	4620      	mov	r0, r4
 8008982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008986 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8008986:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800898a:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800898e:	b383      	cbz	r3, 80089f2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8008990:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8008992:	b374      	cbz	r4, 80089f2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8008994:	f9b1 5000 	ldrsh.w	r5, [r1]
 8008998:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800899c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80089a0:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80089a4:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80089a8:	b303      	cbz	r3, 80089ec <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80089aa:	4668      	mov	r0, sp
 80089ac:	1d21      	adds	r1, r4, #4
 80089ae:	f8ad 5000 	strh.w	r5, [sp]
 80089b2:	f8ad 6002 	strh.w	r6, [sp, #2]
 80089b6:	f8ad 7004 	strh.w	r7, [sp, #4]
 80089ba:	f8ad 8006 	strh.w	r8, [sp, #6]
 80089be:	f7ff ff43 	bl	8008848 <_ZN8touchgfx4RectaNERKS0_>
 80089c2:	4668      	mov	r0, sp
 80089c4:	f7ff ff83 	bl	80088ce <_ZNK8touchgfx4Rect7isEmptyEv>
 80089c8:	b980      	cbnz	r0, 80089ec <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80089ca:	f8bd 3000 	ldrh.w	r3, [sp]
 80089ce:	88a2      	ldrh	r2, [r4, #4]
 80089d0:	1a9b      	subs	r3, r3, r2
 80089d2:	f8ad 3000 	strh.w	r3, [sp]
 80089d6:	88e2      	ldrh	r2, [r4, #6]
 80089d8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80089dc:	1a9b      	subs	r3, r3, r2
 80089de:	f8ad 3002 	strh.w	r3, [sp, #2]
 80089e2:	6823      	ldr	r3, [r4, #0]
 80089e4:	4669      	mov	r1, sp
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	4620      	mov	r0, r4
 80089ea:	4798      	blx	r3
 80089ec:	69a4      	ldr	r4, [r4, #24]
 80089ee:	2c00      	cmp	r4, #0
 80089f0:	d1d8      	bne.n	80089a4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80089f2:	b002      	add	sp, #8
 80089f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080089f8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80089f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80089fa:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 80089fe:	460d      	mov	r5, r1
 8008a00:	4616      	mov	r6, r2
 8008a02:	b323      	cbz	r3, 8008a4e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8008a04:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8008a06:	b314      	cbz	r4, 8008a4e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8008a08:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8008a0c:	b1eb      	cbz	r3, 8008a4a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8008a0e:	6828      	ldr	r0, [r5, #0]
 8008a10:	6869      	ldr	r1, [r5, #4]
 8008a12:	466b      	mov	r3, sp
 8008a14:	c303      	stmia	r3!, {r0, r1}
 8008a16:	4668      	mov	r0, sp
 8008a18:	1d21      	adds	r1, r4, #4
 8008a1a:	f7ff ff15 	bl	8008848 <_ZN8touchgfx4RectaNERKS0_>
 8008a1e:	4668      	mov	r0, sp
 8008a20:	f7ff ff55 	bl	80088ce <_ZNK8touchgfx4Rect7isEmptyEv>
 8008a24:	b988      	cbnz	r0, 8008a4a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8008a26:	f8bd 3000 	ldrh.w	r3, [sp]
 8008a2a:	88a2      	ldrh	r2, [r4, #4]
 8008a2c:	1a9b      	subs	r3, r3, r2
 8008a2e:	f8ad 3000 	strh.w	r3, [sp]
 8008a32:	88e2      	ldrh	r2, [r4, #6]
 8008a34:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8008a38:	1a9b      	subs	r3, r3, r2
 8008a3a:	f8ad 3002 	strh.w	r3, [sp, #2]
 8008a3e:	6823      	ldr	r3, [r4, #0]
 8008a40:	4632      	mov	r2, r6
 8008a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a44:	4669      	mov	r1, sp
 8008a46:	4620      	mov	r0, r4
 8008a48:	4798      	blx	r3
 8008a4a:	69a4      	ldr	r4, [r4, #24]
 8008a4c:	e7db      	b.n	8008a06 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8008a4e:	b002      	add	sp, #8
 8008a50:	bd70      	pop	{r4, r5, r6, pc}

08008a52 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8008a52:	b513      	push	{r0, r1, r4, lr}
 8008a54:	6803      	ldr	r3, [r0, #0]
 8008a56:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	e9cd 3300 	strd	r3, r3, [sp]
 8008a60:	466b      	mov	r3, sp
 8008a62:	47a0      	blx	r4
 8008a64:	b002      	add	sp, #8
 8008a66:	bd10      	pop	{r4, pc}

08008a68 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8008a68:	2301      	movs	r3, #1
 8008a6a:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8008a6e:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8008a72:	4770      	bx	lr

08008a74 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8008a74:	2301      	movs	r3, #1
 8008a76:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8008a7a:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8008a7e:	4770      	bx	lr

08008a80 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8008a80:	6843      	ldr	r3, [r0, #4]
 8008a82:	2201      	movs	r2, #1
 8008a84:	725a      	strb	r2, [r3, #9]
 8008a86:	6840      	ldr	r0, [r0, #4]
 8008a88:	6803      	ldr	r3, [r0, #0]
 8008a8a:	691b      	ldr	r3, [r3, #16]
 8008a8c:	4718      	bx	r3

08008a8e <_ZN8touchgfx3HAL8flushDMAEv>:
 8008a8e:	6840      	ldr	r0, [r0, #4]
 8008a90:	6803      	ldr	r3, [r0, #0]
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	4718      	bx	r3

08008a96 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8008a96:	b530      	push	{r4, r5, lr}
 8008a98:	b08b      	sub	sp, #44	@ 0x2c
 8008a9a:	6804      	ldr	r4, [r0, #0]
 8008a9c:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8008aa0:	9509      	str	r5, [sp, #36]	@ 0x24
 8008aa2:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8008aa6:	9508      	str	r5, [sp, #32]
 8008aa8:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8008aac:	9507      	str	r5, [sp, #28]
 8008aae:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 8008ab2:	9506      	str	r5, [sp, #24]
 8008ab4:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8008ab8:	9505      	str	r5, [sp, #20]
 8008aba:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8008abe:	9504      	str	r5, [sp, #16]
 8008ac0:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 8008ac4:	9503      	str	r5, [sp, #12]
 8008ac6:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 8008aca:	9502      	str	r5, [sp, #8]
 8008acc:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8008ad0:	e9cd 3500 	strd	r3, r5, [sp]
 8008ad4:	4613      	mov	r3, r2
 8008ad6:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 8008ad8:	2200      	movs	r2, #0
 8008ada:	47a0      	blx	r4
 8008adc:	b00b      	add	sp, #44	@ 0x2c
 8008ade:	bd30      	pop	{r4, r5, pc}

08008ae0 <_ZN8touchgfx3HAL10beginFrameEv>:
 8008ae0:	4b04      	ldr	r3, [pc, #16]	@ (8008af4 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	b123      	cbz	r3, 8008af0 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8008ae6:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 8008aea:	f080 0001 	eor.w	r0, r0, #1
 8008aee:	4770      	bx	lr
 8008af0:	2001      	movs	r0, #1
 8008af2:	4770      	bx	lr
 8008af4:	20012482 	.word	0x20012482

08008af8 <_ZN8touchgfx3HAL8endFrameEv>:
 8008af8:	b510      	push	{r4, lr}
 8008afa:	4604      	mov	r4, r0
 8008afc:	6840      	ldr	r0, [r0, #4]
 8008afe:	6803      	ldr	r3, [r0, #0]
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	4798      	blx	r3
 8008b04:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 8008b08:	b113      	cbz	r3, 8008b10 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8008b10:	bd10      	pop	{r4, pc}

08008b12 <_ZN8touchgfx3HAL10initializeEv>:
 8008b12:	b510      	push	{r4, lr}
 8008b14:	4604      	mov	r4, r0
 8008b16:	f7f7 ffaf 	bl	8000a78 <_ZN8touchgfx10OSWrappers10initializeEv>
 8008b1a:	f7f7 feb7 	bl	800088c <_ZN8touchgfx4GPIO4initEv>
 8008b1e:	6860      	ldr	r0, [r4, #4]
 8008b20:	6803      	ldr	r3, [r0, #0]
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	4798      	blx	r3
 8008b26:	68e0      	ldr	r0, [r4, #12]
 8008b28:	6803      	ldr	r3, [r0, #0]
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	4798      	blx	r3
 8008b2e:	6823      	ldr	r3, [r4, #0]
 8008b30:	4620      	mov	r0, r4
 8008b32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b38:	4718      	bx	r3
	...

08008b3c <_ZN8touchgfx3HAL4tickEv>:
 8008b3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008b3e:	6803      	ldr	r3, [r0, #0]
 8008b40:	4d5b      	ldr	r5, [pc, #364]	@ (8008cb0 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8008b42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008b46:	4604      	mov	r4, r0
 8008b48:	4798      	blx	r3
 8008b4a:	2800      	cmp	r0, #0
 8008b4c:	f000 8095 	beq.w	8008c7a <_ZN8touchgfx3HAL4tickEv+0x13e>
 8008b50:	2001      	movs	r0, #1
 8008b52:	f7f7 fe19 	bl	8000788 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8008b56:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 8008b5a:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8008b5e:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 8008b62:	2600      	movs	r6, #0
 8008b64:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 8008b68:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 8008b6c:	b133      	cbz	r3, 8008b7c <_ZN8touchgfx3HAL4tickEv+0x40>
 8008b6e:	6823      	ldr	r3, [r4, #0]
 8008b70:	4620      	mov	r0, r4
 8008b72:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008b76:	4798      	blx	r3
 8008b78:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8008b7c:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8008b80:	6862      	ldr	r2, [r4, #4]
 8008b82:	f083 0301 	eor.w	r3, r3, #1
 8008b86:	7253      	strb	r3, [r2, #9]
 8008b88:	2601      	movs	r6, #1
 8008b8a:	702e      	strb	r6, [r5, #0]
 8008b8c:	f002 f820 	bl	800abd0 <_ZN8touchgfx11Application11getInstanceEv>
 8008b90:	6803      	ldr	r3, [r0, #0]
 8008b92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b94:	4798      	blx	r3
 8008b96:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8008b9a:	b90b      	cbnz	r3, 8008ba0 <_ZN8touchgfx3HAL4tickEv+0x64>
 8008b9c:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 8008ba0:	f002 f816 	bl	800abd0 <_ZN8touchgfx11Application11getInstanceEv>
 8008ba4:	6803      	ldr	r3, [r0, #0]
 8008ba6:	695b      	ldr	r3, [r3, #20]
 8008ba8:	4798      	blx	r3
 8008baa:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8008bac:	6803      	ldr	r3, [r0, #0]
 8008bae:	691b      	ldr	r3, [r3, #16]
 8008bb0:	4798      	blx	r3
 8008bb2:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8008bb6:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 8008bba:	3b01      	subs	r3, #1
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8008bc2:	b10a      	cbz	r2, 8008bc8 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d1eb      	bne.n	8008ba0 <_ZN8touchgfx3HAL4tickEv+0x64>
 8008bc8:	4a3a      	ldr	r2, [pc, #232]	@ (8008cb4 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8008bca:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 8008bce:	7813      	ldrb	r3, [r2, #0]
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	b25b      	sxtb	r3, r3
 8008bd4:	4299      	cmp	r1, r3
 8008bd6:	7013      	strb	r3, [r2, #0]
 8008bd8:	dc10      	bgt.n	8008bfc <_ZN8touchgfx3HAL4tickEv+0xc0>
 8008bda:	68e0      	ldr	r0, [r4, #12]
 8008bdc:	2300      	movs	r3, #0
 8008bde:	7013      	strb	r3, [r2, #0]
 8008be0:	6803      	ldr	r3, [r0, #0]
 8008be2:	aa03      	add	r2, sp, #12
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	a902      	add	r1, sp, #8
 8008be8:	4798      	blx	r3
 8008bea:	6823      	ldr	r3, [r4, #0]
 8008bec:	2800      	cmp	r0, #0
 8008bee:	d050      	beq.n	8008c92 <_ZN8touchgfx3HAL4tickEv+0x156>
 8008bf0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008bf4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8008bf8:	4620      	mov	r0, r4
 8008bfa:	4798      	blx	r3
 8008bfc:	6960      	ldr	r0, [r4, #20]
 8008bfe:	2300      	movs	r3, #0
 8008c00:	f88d 3007 	strb.w	r3, [sp, #7]
 8008c04:	b158      	cbz	r0, 8008c1e <_ZN8touchgfx3HAL4tickEv+0xe2>
 8008c06:	6803      	ldr	r3, [r0, #0]
 8008c08:	f10d 0107 	add.w	r1, sp, #7
 8008c0c:	68db      	ldr	r3, [r3, #12]
 8008c0e:	4798      	blx	r3
 8008c10:	b128      	cbz	r0, 8008c1e <_ZN8touchgfx3HAL4tickEv+0xe2>
 8008c12:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8008c14:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8008c18:	6803      	ldr	r3, [r0, #0]
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	4798      	blx	r3
 8008c1e:	f104 001c 	add.w	r0, r4, #28
 8008c22:	f007 fa55 	bl	80100d0 <_ZN8touchgfx8Gestures4tickEv>
 8008c26:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8008c2a:	b30b      	cbz	r3, 8008c70 <_ZN8touchgfx3HAL4tickEv+0x134>
 8008c2c:	6920      	ldr	r0, [r4, #16]
 8008c2e:	6803      	ldr	r3, [r0, #0]
 8008c30:	691b      	ldr	r3, [r3, #16]
 8008c32:	4798      	blx	r3
 8008c34:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8008c36:	4606      	mov	r6, r0
 8008c38:	b903      	cbnz	r3, 8008c3c <_ZN8touchgfx3HAL4tickEv+0x100>
 8008c3a:	6760      	str	r0, [r4, #116]	@ 0x74
 8008c3c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8008c3e:	4a1e      	ldr	r2, [pc, #120]	@ (8008cb8 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8008c40:	1af3      	subs	r3, r6, r3
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d914      	bls.n	8008c70 <_ZN8touchgfx3HAL4tickEv+0x134>
 8008c46:	6920      	ldr	r0, [r4, #16]
 8008c48:	6803      	ldr	r3, [r0, #0]
 8008c4a:	699b      	ldr	r3, [r3, #24]
 8008c4c:	4798      	blx	r3
 8008c4e:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8008c50:	2264      	movs	r2, #100	@ 0x64
 8008c52:	1af3      	subs	r3, r6, r3
 8008c54:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c58:	fbb0 f0f3 	udiv	r0, r0, r3
 8008c5c:	2800      	cmp	r0, #0
 8008c5e:	dc1d      	bgt.n	8008c9c <_ZN8touchgfx3HAL4tickEv+0x160>
 8008c60:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 8008c64:	6920      	ldr	r0, [r4, #16]
 8008c66:	6803      	ldr	r3, [r0, #0]
 8008c68:	2100      	movs	r1, #0
 8008c6a:	69db      	ldr	r3, [r3, #28]
 8008c6c:	4798      	blx	r3
 8008c6e:	6766      	str	r6, [r4, #116]	@ 0x74
 8008c70:	f001 ffae 	bl	800abd0 <_ZN8touchgfx11Application11getInstanceEv>
 8008c74:	6803      	ldr	r3, [r0, #0]
 8008c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c78:	4798      	blx	r3
 8008c7a:	6823      	ldr	r3, [r4, #0]
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008c82:	4798      	blx	r3
 8008c84:	2001      	movs	r0, #1
 8008c86:	f7f7 fda9 	bl	80007dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	702b      	strb	r3, [r5, #0]
 8008c8e:	b004      	add	sp, #16
 8008c90:	bd70      	pop	{r4, r5, r6, pc}
 8008c92:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008c96:	4620      	mov	r0, r4
 8008c98:	4798      	blx	r3
 8008c9a:	e7af      	b.n	8008bfc <_ZN8touchgfx3HAL4tickEv+0xc0>
 8008c9c:	2863      	cmp	r0, #99	@ 0x63
 8008c9e:	bfcb      	itete	gt
 8008ca0:	2300      	movgt	r3, #0
 8008ca2:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 8008ca6:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 8008caa:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 8008cae:	e7d9      	b.n	8008c64 <_ZN8touchgfx3HAL4tickEv+0x128>
 8008cb0:	20012488 	.word	0x20012488
 8008cb4:	20012489 	.word	0x20012489
 8008cb8:	05f5e100 	.word	0x05f5e100

08008cbc <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8008cbc:	b510      	push	{r4, lr}
 8008cbe:	4604      	mov	r4, r0
 8008cc0:	f7f7 ff0a 	bl	8000ad8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8008cc4:	6863      	ldr	r3, [r4, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	729a      	strb	r2, [r3, #10]
 8008cca:	bd10      	pop	{r4, pc}

08008ccc <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8008ccc:	65c1      	str	r1, [r0, #92]	@ 0x5c
 8008cce:	301c      	adds	r0, #28
 8008cd0:	f007 b9fc 	b.w	80100cc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08008cd4 <_ZN8touchgfx3HAL5touchEll>:
 8008cd4:	b530      	push	{r4, r5, lr}
 8008cd6:	b087      	sub	sp, #28
 8008cd8:	4604      	mov	r4, r0
 8008cda:	a804      	add	r0, sp, #16
 8008cdc:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8008ce0:	f001 fd5e 	bl	800a7a0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8008ce4:	9b04      	ldr	r3, [sp, #16]
 8008ce6:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008cea:	a906      	add	r1, sp, #24
 8008cec:	9b05      	ldr	r3, [sp, #20]
 8008cee:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8008cf2:	a803      	add	r0, sp, #12
 8008cf4:	f001 fda6 	bl	800a844 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8008cf8:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 8008cfc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8008d00:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8008d04:	f104 001c 	add.w	r0, r4, #28
 8008d08:	b189      	cbz	r1, 8008d2e <_ZN8touchgfx3HAL5touchEll+0x5a>
 8008d0a:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 8008d0e:	9300      	str	r3, [sp, #0]
 8008d10:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 8008d14:	4613      	mov	r3, r2
 8008d16:	462a      	mov	r2, r5
 8008d18:	f007 f9e8 	bl	80100ec <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8008d1c:	b128      	cbz	r0, 8008d2a <_ZN8touchgfx3HAL5touchEll+0x56>
 8008d1e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8008d22:	6623      	str	r3, [r4, #96]	@ 0x60
 8008d24:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8008d28:	6663      	str	r3, [r4, #100]	@ 0x64
 8008d2a:	b007      	add	sp, #28
 8008d2c:	bd30      	pop	{r4, r5, pc}
 8008d2e:	f007 fa1d 	bl	801016c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8008d32:	2301      	movs	r3, #1
 8008d34:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8008d38:	e7f1      	b.n	8008d1e <_ZN8touchgfx3HAL5touchEll+0x4a>

08008d3a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8008d3a:	b510      	push	{r4, lr}
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d046      	beq.n	8008dce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8008d40:	ea81 0002 	eor.w	r0, r1, r2
 8008d44:	07c4      	lsls	r4, r0, #31
 8008d46:	d508      	bpl.n	8008d5a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8008d48:	440b      	add	r3, r1
 8008d4a:	3a01      	subs	r2, #1
 8008d4c:	428b      	cmp	r3, r1
 8008d4e:	d93e      	bls.n	8008dce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8008d50:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8008d54:	f801 0b01 	strb.w	r0, [r1], #1
 8008d58:	e7f8      	b.n	8008d4c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8008d5a:	07d0      	lsls	r0, r2, #31
 8008d5c:	bf42      	ittt	mi
 8008d5e:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8008d62:	f801 0b01 	strbmi.w	r0, [r1], #1
 8008d66:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d911      	bls.n	8008d92 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8008d6e:	ea81 0402 	eor.w	r4, r1, r2
 8008d72:	07a4      	lsls	r4, r4, #30
 8008d74:	4610      	mov	r0, r2
 8008d76:	d022      	beq.n	8008dbe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8008d78:	f023 0401 	bic.w	r4, r3, #1
 8008d7c:	440c      	add	r4, r1
 8008d7e:	428c      	cmp	r4, r1
 8008d80:	4602      	mov	r2, r0
 8008d82:	d904      	bls.n	8008d8e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8008d84:	8812      	ldrh	r2, [r2, #0]
 8008d86:	f821 2b02 	strh.w	r2, [r1], #2
 8008d8a:	3002      	adds	r0, #2
 8008d8c:	e7f7      	b.n	8008d7e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8008d8e:	f003 0301 	and.w	r3, r3, #1
 8008d92:	f023 0003 	bic.w	r0, r3, #3
 8008d96:	4408      	add	r0, r1
 8008d98:	4288      	cmp	r0, r1
 8008d9a:	4614      	mov	r4, r2
 8008d9c:	d904      	bls.n	8008da8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8008d9e:	6824      	ldr	r4, [r4, #0]
 8008da0:	f841 4b04 	str.w	r4, [r1], #4
 8008da4:	3204      	adds	r2, #4
 8008da6:	e7f7      	b.n	8008d98 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8008da8:	f003 0303 	and.w	r3, r3, #3
 8008dac:	440b      	add	r3, r1
 8008dae:	3a01      	subs	r2, #1
 8008db0:	428b      	cmp	r3, r1
 8008db2:	d90c      	bls.n	8008dce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8008db4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8008db8:	f801 0b01 	strb.w	r0, [r1], #1
 8008dbc:	e7f8      	b.n	8008db0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8008dbe:	0790      	lsls	r0, r2, #30
 8008dc0:	d0e7      	beq.n	8008d92 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8008dc2:	f832 0b02 	ldrh.w	r0, [r2], #2
 8008dc6:	f821 0b02 	strh.w	r0, [r1], #2
 8008dca:	3b02      	subs	r3, #2
 8008dcc:	e7e1      	b.n	8008d92 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8008dce:	2001      	movs	r0, #1
 8008dd0:	bd10      	pop	{r4, pc}

08008dd2 <_ZN8touchgfx3HAL7noTouchEv>:
 8008dd2:	b510      	push	{r4, lr}
 8008dd4:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 8008dd8:	4604      	mov	r4, r0
 8008dda:	b153      	cbz	r3, 8008df2 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8008ddc:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 8008de0:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 8008de4:	2101      	movs	r1, #1
 8008de6:	301c      	adds	r0, #28
 8008de8:	f007 f9c0 	bl	801016c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8008dec:	2300      	movs	r3, #0
 8008dee:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8008df2:	bd10      	pop	{r4, pc}

08008df4 <_ZN8touchgfx3HAL3lcdEv>:
 8008df4:	4b04      	ldr	r3, [pc, #16]	@ (8008e08 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8008dfc:	b10a      	cbz	r2, 8008e02 <_ZN8touchgfx3HAL3lcdEv+0xe>
 8008dfe:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8008e00:	b900      	cbnz	r0, 8008e04 <_ZN8touchgfx3HAL3lcdEv+0x10>
 8008e02:	6898      	ldr	r0, [r3, #8]
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop
 8008e08:	20012484 	.word	0x20012484

08008e0c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8008e0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e10:	b085      	sub	sp, #20
 8008e12:	ad04      	add	r5, sp, #16
 8008e14:	4604      	mov	r4, r0
 8008e16:	2000      	movs	r0, #0
 8008e18:	f845 0d04 	str.w	r0, [r5, #-4]!
 8008e1c:	69a0      	ldr	r0, [r4, #24]
 8008e1e:	6806      	ldr	r6, [r0, #0]
 8008e20:	9501      	str	r5, [sp, #4]
 8008e22:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8008e26:	9500      	str	r5, [sp, #0]
 8008e28:	6835      	ldr	r5, [r6, #0]
 8008e2a:	4699      	mov	r9, r3
 8008e2c:	460f      	mov	r7, r1
 8008e2e:	4690      	mov	r8, r2
 8008e30:	47a8      	blx	r5
 8008e32:	4d10      	ldr	r5, [pc, #64]	@ (8008e74 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8008e34:	4606      	mov	r6, r0
 8008e36:	f8a5 9000 	strh.w	r9, [r5]
 8008e3a:	f7ff ffdb 	bl	8008df4 <_ZN8touchgfx3HAL3lcdEv>
 8008e3e:	6803      	ldr	r3, [r0, #0]
 8008e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e42:	4798      	blx	r3
 8008e44:	b128      	cbz	r0, 8008e52 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8008e46:	2801      	cmp	r0, #1
 8008e48:	d00b      	beq.n	8008e62 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8008e4a:	4630      	mov	r0, r6
 8008e4c:	b005      	add	sp, #20
 8008e4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e52:	882b      	ldrh	r3, [r5, #0]
 8008e54:	fb08 7203 	mla	r2, r8, r3, r7
 8008e58:	9b03      	ldr	r3, [sp, #12]
 8008e5a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8008e5e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8008e60:	e7f3      	b.n	8008e4a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8008e62:	882a      	ldrh	r2, [r5, #0]
 8008e64:	9b03      	ldr	r3, [sp, #12]
 8008e66:	fb08 7202 	mla	r2, r8, r2, r7
 8008e6a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8008e6e:	1a9a      	subs	r2, r3, r2
 8008e70:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8008e72:	e7ea      	b.n	8008e4a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8008e74:	2001247e 	.word	0x2001247e

08008e78 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8008e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e7a:	b08b      	sub	sp, #44	@ 0x2c
 8008e7c:	4617      	mov	r7, r2
 8008e7e:	4604      	mov	r4, r0
 8008e80:	460e      	mov	r6, r1
 8008e82:	461d      	mov	r5, r3
 8008e84:	f7ff ffb6 	bl	8008df4 <_ZN8touchgfx3HAL3lcdEv>
 8008e88:	6803      	ldr	r3, [r0, #0]
 8008e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e8c:	4798      	blx	r3
 8008e8e:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8008e92:	9007      	str	r0, [sp, #28]
 8008e94:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8008e98:	4b0d      	ldr	r3, [pc, #52]	@ (8008ed0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8008e9a:	6822      	ldr	r2, [r4, #0]
 8008e9c:	881b      	ldrh	r3, [r3, #0]
 8008e9e:	9306      	str	r3, [sp, #24]
 8008ea0:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8008ea4:	9305      	str	r3, [sp, #20]
 8008ea6:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 8008eaa:	9304      	str	r3, [sp, #16]
 8008eac:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8008eb0:	9303      	str	r3, [sp, #12]
 8008eb2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8008eb6:	9302      	str	r3, [sp, #8]
 8008eb8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8008ebc:	e9cd 5300 	strd	r5, r3, [sp]
 8008ec0:	4631      	mov	r1, r6
 8008ec2:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 8008ec4:	463b      	mov	r3, r7
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	4620      	mov	r0, r4
 8008eca:	47a8      	blx	r5
 8008ecc:	b00b      	add	sp, #44	@ 0x2c
 8008ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ed0:	2001247e 	.word	0x2001247e

08008ed4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8008ed4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ed8:	4698      	mov	r8, r3
 8008eda:	6803      	ldr	r3, [r0, #0]
 8008edc:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 8008ede:	4b15      	ldr	r3, [pc, #84]	@ (8008f34 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8008ee0:	b08b      	sub	sp, #44	@ 0x2c
 8008ee2:	4617      	mov	r7, r2
 8008ee4:	f8b3 9000 	ldrh.w	r9, [r3]
 8008ee8:	460e      	mov	r6, r1
 8008eea:	4604      	mov	r4, r0
 8008eec:	f7ff ff82 	bl	8008df4 <_ZN8touchgfx3HAL3lcdEv>
 8008ef0:	6803      	ldr	r3, [r0, #0]
 8008ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ef4:	4798      	blx	r3
 8008ef6:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8008efa:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8008efe:	2302      	movs	r3, #2
 8008f00:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8008f04:	2301      	movs	r3, #1
 8008f06:	9305      	str	r3, [sp, #20]
 8008f08:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8008f0c:	9304      	str	r3, [sp, #16]
 8008f0e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8008f12:	9303      	str	r3, [sp, #12]
 8008f14:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8008f18:	9302      	str	r3, [sp, #8]
 8008f1a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8008f1e:	2200      	movs	r2, #0
 8008f20:	e9cd 8300 	strd	r8, r3, [sp]
 8008f24:	4631      	mov	r1, r6
 8008f26:	463b      	mov	r3, r7
 8008f28:	4620      	mov	r0, r4
 8008f2a:	47a8      	blx	r5
 8008f2c:	b00b      	add	sp, #44	@ 0x2c
 8008f2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f32:	bf00      	nop
 8008f34:	2001247e 	.word	0x2001247e

08008f38 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8008f38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f3c:	4698      	mov	r8, r3
 8008f3e:	6803      	ldr	r3, [r0, #0]
 8008f40:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 8008f42:	4b11      	ldr	r3, [pc, #68]	@ (8008f88 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8008f44:	b087      	sub	sp, #28
 8008f46:	f8b3 9000 	ldrh.w	r9, [r3]
 8008f4a:	460e      	mov	r6, r1
 8008f4c:	4617      	mov	r7, r2
 8008f4e:	4604      	mov	r4, r0
 8008f50:	f7ff ff50 	bl	8008df4 <_ZN8touchgfx3HAL3lcdEv>
 8008f54:	6803      	ldr	r3, [r0, #0]
 8008f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f58:	4798      	blx	r3
 8008f5a:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 8008f5e:	f8cd 900c 	str.w	r9, [sp, #12]
 8008f62:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8008f66:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 8008f6a:	9302      	str	r3, [sp, #8]
 8008f6c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8008f70:	9301      	str	r3, [sp, #4]
 8008f72:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8008f76:	9300      	str	r3, [sp, #0]
 8008f78:	463a      	mov	r2, r7
 8008f7a:	4643      	mov	r3, r8
 8008f7c:	4631      	mov	r1, r6
 8008f7e:	4620      	mov	r0, r4
 8008f80:	47a8      	blx	r5
 8008f82:	b007      	add	sp, #28
 8008f84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f88:	2001247e 	.word	0x2001247e

08008f8c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8008f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f90:	4604      	mov	r4, r0
 8008f92:	b08f      	sub	sp, #60	@ 0x3c
 8008f94:	4610      	mov	r0, r2
 8008f96:	460d      	mov	r5, r1
 8008f98:	4691      	mov	r9, r2
 8008f9a:	461e      	mov	r6, r3
 8008f9c:	f004 fa5a 	bl	800d454 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8008fa0:	2800      	cmp	r0, #0
 8008fa2:	f000 809d 	beq.w	80090e0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8008fa6:	6823      	ldr	r3, [r4, #0]
 8008fa8:	f8df b198 	ldr.w	fp, [pc, #408]	@ 8009144 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8008fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fae:	f8df a198 	ldr.w	sl, [pc, #408]	@ 8009148 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8008fb2:	4f61      	ldr	r7, [pc, #388]	@ (8009138 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8008fb4:	4620      	mov	r0, r4
 8008fb6:	4798      	blx	r3
 8008fb8:	6823      	ldr	r3, [r4, #0]
 8008fba:	4620      	mov	r0, r4
 8008fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fbe:	4798      	blx	r3
 8008fc0:	f8bb 3000 	ldrh.w	r3, [fp]
 8008fc4:	9301      	str	r3, [sp, #4]
 8008fc6:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8008fca:	f8ba 3000 	ldrh.w	r3, [sl]
 8008fce:	9302      	str	r3, [sp, #8]
 8008fd0:	883b      	ldrh	r3, [r7, #0]
 8008fd2:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8008fd6:	9303      	str	r3, [sp, #12]
 8008fd8:	4b58      	ldr	r3, [pc, #352]	@ (800913c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8008fda:	9305      	str	r3, [sp, #20]
 8008fdc:	881a      	ldrh	r2, [r3, #0]
 8008fde:	9204      	str	r2, [sp, #16]
 8008fe0:	4640      	mov	r0, r8
 8008fe2:	f004 facb 	bl	800d57c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8008fe6:	8038      	strh	r0, [r7, #0]
 8008fe8:	4640      	mov	r0, r8
 8008fea:	f004 fafb 	bl	800d5e4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8008fee:	9b05      	ldr	r3, [sp, #20]
 8008ff0:	b280      	uxth	r0, r0
 8008ff2:	8018      	strh	r0, [r3, #0]
 8008ff4:	4b52      	ldr	r3, [pc, #328]	@ (8009140 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d174      	bne.n	80090e6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8008ffc:	883b      	ldrh	r3, [r7, #0]
 8008ffe:	f8ab 3000 	strh.w	r3, [fp]
 8009002:	f8aa 0000 	strh.w	r0, [sl]
 8009006:	4648      	mov	r0, r9
 8009008:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 800900c:	f004 fa22 	bl	800d454 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8009010:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8009014:	2200      	movs	r2, #0
 8009016:	4611      	mov	r1, r2
 8009018:	4628      	mov	r0, r5
 800901a:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800901e:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8009022:	f7f9 fce6 	bl	80029f2 <_ZN8touchgfx8Drawable5setXYEss>
 8009026:	2301      	movs	r3, #1
 8009028:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 800902c:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8009030:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8009034:	2b00      	cmp	r3, #0
 8009036:	dd5c      	ble.n	80090f2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8009038:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800903c:	2b00      	cmp	r3, #0
 800903e:	dd58      	ble.n	80090f2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8009040:	462a      	mov	r2, r5
 8009042:	ab0a      	add	r3, sp, #40	@ 0x28
 8009044:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8009048:	6851      	ldr	r1, [r2, #4]
 800904a:	c303      	stmia	r3!, {r0, r1}
 800904c:	4631      	mov	r1, r6
 800904e:	a80a      	add	r0, sp, #40	@ 0x28
 8009050:	f7ff fbfa 	bl	8008848 <_ZN8touchgfx4RectaNERKS0_>
 8009054:	4b38      	ldr	r3, [pc, #224]	@ (8009138 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8009056:	f9b3 2000 	ldrsh.w	r2, [r3]
 800905a:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 800905e:	2100      	movs	r1, #0
 8009060:	aa0a      	add	r2, sp, #40	@ 0x28
 8009062:	4b36      	ldr	r3, [pc, #216]	@ (800913c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8009064:	910c      	str	r1, [sp, #48]	@ 0x30
 8009066:	e892 0003 	ldmia.w	r2, {r0, r1}
 800906a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800906e:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8009072:	ab08      	add	r3, sp, #32
 8009074:	e883 0003 	stmia.w	r3, {r0, r1}
 8009078:	4618      	mov	r0, r3
 800907a:	a90c      	add	r1, sp, #48	@ 0x30
 800907c:	f7ff fbe4 	bl	8008848 <_ZN8touchgfx4RectaNERKS0_>
 8009080:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8009082:	2b00      	cmp	r3, #0
 8009084:	d13c      	bne.n	8009100 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8009086:	2000      	movs	r0, #0
 8009088:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 800908c:	2600      	movs	r6, #0
 800908e:	682a      	ldr	r2, [r5, #0]
 8009090:	696b      	ldr	r3, [r5, #20]
 8009092:	616e      	str	r6, [r5, #20]
 8009094:	9305      	str	r3, [sp, #20]
 8009096:	6892      	ldr	r2, [r2, #8]
 8009098:	a908      	add	r1, sp, #32
 800909a:	4628      	mov	r0, r5
 800909c:	4790      	blx	r2
 800909e:	9b05      	ldr	r3, [sp, #20]
 80090a0:	616b      	str	r3, [r5, #20]
 80090a2:	4652      	mov	r2, sl
 80090a4:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 80090a8:	4649      	mov	r1, r9
 80090aa:	4628      	mov	r0, r5
 80090ac:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 80090b0:	f7f9 fc9f 	bl	80029f2 <_ZN8touchgfx8Drawable5setXYEss>
 80090b4:	4b23      	ldr	r3, [pc, #140]	@ (8009144 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 80090b6:	9a01      	ldr	r2, [sp, #4]
 80090b8:	801a      	strh	r2, [r3, #0]
 80090ba:	4b23      	ldr	r3, [pc, #140]	@ (8009148 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 80090bc:	9a02      	ldr	r2, [sp, #8]
 80090be:	801a      	strh	r2, [r3, #0]
 80090c0:	4b1d      	ldr	r3, [pc, #116]	@ (8009138 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80090c2:	9a03      	ldr	r2, [sp, #12]
 80090c4:	801a      	strh	r2, [r3, #0]
 80090c6:	4b1d      	ldr	r3, [pc, #116]	@ (800913c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80090c8:	9a04      	ldr	r2, [sp, #16]
 80090ca:	801a      	strh	r2, [r3, #0]
 80090cc:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 80090d0:	6823      	ldr	r3, [r4, #0]
 80090d2:	4620      	mov	r0, r4
 80090d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090d6:	4798      	blx	r3
 80090d8:	6823      	ldr	r3, [r4, #0]
 80090da:	4620      	mov	r0, r4
 80090dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090de:	4798      	blx	r3
 80090e0:	b00f      	add	sp, #60	@ 0x3c
 80090e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090e6:	883b      	ldrh	r3, [r7, #0]
 80090e8:	f8ab 0000 	strh.w	r0, [fp]
 80090ec:	f8aa 3000 	strh.w	r3, [sl]
 80090f0:	e789      	b.n	8009006 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 80090f2:	462a      	mov	r2, r5
 80090f4:	ab0a      	add	r3, sp, #40	@ 0x28
 80090f6:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80090fa:	6851      	ldr	r1, [r2, #4]
 80090fc:	c303      	stmia	r3!, {r0, r1}
 80090fe:	e7a9      	b.n	8009054 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8009100:	a807      	add	r0, sp, #28
 8009102:	f004 fbb1 	bl	800d868 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8009106:	4606      	mov	r6, r0
 8009108:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800910a:	6803      	ldr	r3, [r0, #0]
 800910c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800910e:	4798      	blx	r3
 8009110:	4286      	cmp	r6, r0
 8009112:	d1b8      	bne.n	8009086 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8009114:	f7ff fe6e 	bl	8008df4 <_ZN8touchgfx3HAL3lcdEv>
 8009118:	6803      	ldr	r3, [r0, #0]
 800911a:	4606      	mov	r6, r0
 800911c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800911e:	9305      	str	r3, [sp, #20]
 8009120:	a807      	add	r0, sp, #28
 8009122:	f004 fba1 	bl	800d868 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8009126:	9b05      	ldr	r3, [sp, #20]
 8009128:	4601      	mov	r1, r0
 800912a:	4630      	mov	r0, r6
 800912c:	4798      	blx	r3
 800912e:	f080 0001 	eor.w	r0, r0, #1
 8009132:	b2c0      	uxtb	r0, r0
 8009134:	e7a8      	b.n	8009088 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8009136:	bf00      	nop
 8009138:	20012478 	.word	0x20012478
 800913c:	2001247a 	.word	0x2001247a
 8009140:	2001247c 	.word	0x2001247c
 8009144:	2001247e 	.word	0x2001247e
 8009148:	20012480 	.word	0x20012480

0800914c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800914c:	b510      	push	{r4, lr}
 800914e:	4b07      	ldr	r3, [pc, #28]	@ (800916c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	4604      	mov	r4, r0
 8009154:	b13b      	cbz	r3, 8009166 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8009156:	6803      	ldr	r3, [r0, #0]
 8009158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800915a:	4798      	blx	r3
 800915c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800915e:	4283      	cmp	r3, r0
 8009160:	d101      	bne.n	8009166 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8009162:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8009164:	bd10      	pop	{r4, pc}
 8009166:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8009168:	e7fc      	b.n	8009164 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800916a:	bf00      	nop
 800916c:	20012482 	.word	0x20012482

08009170 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8009170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009174:	b08a      	sub	sp, #40	@ 0x28
 8009176:	461d      	mov	r5, r3
 8009178:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800917c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8009180:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8009184:	f8ad 3018 	strh.w	r3, [sp, #24]
 8009188:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800918c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8009190:	2400      	movs	r4, #0
 8009192:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8009196:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 800919a:	f8ad 301c 	strh.w	r3, [sp, #28]
 800919e:	4690      	mov	r8, r2
 80091a0:	4607      	mov	r7, r0
 80091a2:	9404      	str	r4, [sp, #16]
 80091a4:	f88d 4020 	strb.w	r4, [sp, #32]
 80091a8:	f7ff ffd0 	bl	800914c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80091ac:	fb06 8505 	mla	r5, r6, r5, r8
 80091b0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	9505      	str	r5, [sp, #20]
 80091b8:	f8ad 601e 	strh.w	r6, [sp, #30]
 80091bc:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 80091c0:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 80091c4:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 80091c8:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 80091cc:	6803      	ldr	r3, [r0, #0]
 80091ce:	a901      	add	r1, sp, #4
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	4798      	blx	r3
 80091d4:	b00a      	add	sp, #40	@ 0x28
 80091d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080091da <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 80091da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80091de:	b08b      	sub	sp, #44	@ 0x2c
 80091e0:	2400      	movs	r4, #0
 80091e2:	461d      	mov	r5, r3
 80091e4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80091e8:	4688      	mov	r8, r1
 80091ea:	4691      	mov	r9, r2
 80091ec:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 80091f0:	9404      	str	r4, [sp, #16]
 80091f2:	4607      	mov	r7, r0
 80091f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80091f8:	f7ff ffa8 	bl	800914c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80091fc:	fb06 9505 	mla	r5, r6, r5, r9
 8009200:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8009204:	f8ad 3018 	strh.w	r3, [sp, #24]
 8009208:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800920c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	9505      	str	r5, [sp, #20]
 8009214:	f8ad 301a 	strh.w	r3, [sp, #26]
 8009218:	f8ad 401c 	strh.w	r4, [sp, #28]
 800921c:	f8ad 601e 	strh.w	r6, [sp, #30]
 8009220:	f8cd 8010 	str.w	r8, [sp, #16]
 8009224:	f8ad 4020 	strh.w	r4, [sp, #32]
 8009228:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800922c:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8009230:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8009234:	6803      	ldr	r3, [r0, #0]
 8009236:	a901      	add	r1, sp, #4
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	4798      	blx	r3
 800923c:	b00b      	add	sp, #44	@ 0x2c
 800923e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08009244 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8009244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009248:	b08a      	sub	sp, #40	@ 0x28
 800924a:	4698      	mov	r8, r3
 800924c:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 8009250:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 8009254:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 8009258:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 800925c:	2300      	movs	r3, #0
 800925e:	2d0b      	cmp	r5, #11
 8009260:	4606      	mov	r6, r0
 8009262:	9304      	str	r3, [sp, #16]
 8009264:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8009268:	d138      	bne.n	80092dc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x98>
 800926a:	2380      	movs	r3, #128	@ 0x80
 800926c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8009270:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8009274:	f8ad 3018 	strh.w	r3, [sp, #24]
 8009278:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800927c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8009280:	f88d 0020 	strb.w	r0, [sp, #32]
 8009284:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8009288:	f8ad 301c 	strh.w	r3, [sp, #28]
 800928c:	4630      	mov	r0, r6
 800928e:	9203      	str	r2, [sp, #12]
 8009290:	f7ff ff5c 	bl	800914c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8009294:	2c0b      	cmp	r4, #11
 8009296:	bf98      	it	ls
 8009298:	4b1b      	ldrls	r3, [pc, #108]	@ (8009308 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 800929a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800929e:	bf98      	it	ls
 80092a0:	5d19      	ldrbls	r1, [r3, r4]
 80092a2:	f8ad 701e 	strh.w	r7, [sp, #30]
 80092a6:	bf88      	it	hi
 80092a8:	2100      	movhi	r1, #0
 80092aa:	fb02 8307 	mla	r3, r2, r7, r8
 80092ae:	10c9      	asrs	r1, r1, #3
 80092b0:	fb01 0003 	mla	r0, r1, r3, r0
 80092b4:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 80092b8:	9005      	str	r0, [sp, #20]
 80092ba:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 80092be:	6870      	ldr	r0, [r6, #4]
 80092c0:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 80092c4:	2300      	movs	r3, #0
 80092c6:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 80092ca:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80092ce:	6803      	ldr	r3, [r0, #0]
 80092d0:	a901      	add	r1, sp, #4
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	4798      	blx	r3
 80092d6:	b00a      	add	sp, #40	@ 0x28
 80092d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092dc:	2d02      	cmp	r5, #2
 80092de:	d109      	bne.n	80092f4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb0>
 80092e0:	28ff      	cmp	r0, #255	@ 0xff
 80092e2:	d105      	bne.n	80092f0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xac>
 80092e4:	f1bc 0f00 	cmp.w	ip, #0
 80092e8:	bf14      	ite	ne
 80092ea:	2340      	movne	r3, #64	@ 0x40
 80092ec:	2320      	moveq	r3, #32
 80092ee:	e7bd      	b.n	800926c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80092f0:	2340      	movs	r3, #64	@ 0x40
 80092f2:	e7bb      	b.n	800926c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80092f4:	28ff      	cmp	r0, #255	@ 0xff
 80092f6:	d105      	bne.n	8009304 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc0>
 80092f8:	f1bc 0f00 	cmp.w	ip, #0
 80092fc:	bf14      	ite	ne
 80092fe:	2304      	movne	r3, #4
 8009300:	2301      	moveq	r3, #1
 8009302:	e7b3      	b.n	800926c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8009304:	2304      	movs	r3, #4
 8009306:	e7b1      	b.n	800926c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8009308:	0801267c 	.word	0x0801267c

0800930c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800930c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009310:	b08b      	sub	sp, #44	@ 0x2c
 8009312:	461d      	mov	r5, r3
 8009314:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 8009318:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 800931c:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 8009320:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8009324:	bf14      	ite	ne
 8009326:	2308      	movne	r3, #8
 8009328:	2302      	moveq	r3, #2
 800932a:	2400      	movs	r4, #0
 800932c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009330:	4688      	mov	r8, r1
 8009332:	4693      	mov	fp, r2
 8009334:	9404      	str	r4, [sp, #16]
 8009336:	4607      	mov	r7, r0
 8009338:	f7ff ff08 	bl	800914c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800933c:	2e0b      	cmp	r6, #11
 800933e:	bf98      	it	ls
 8009340:	4b15      	ldrls	r3, [pc, #84]	@ (8009398 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8009342:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8009346:	bf98      	it	ls
 8009348:	5d9c      	ldrbls	r4, [r3, r6]
 800934a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800934e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8009352:	fb05 b50a 	mla	r5, r5, sl, fp
 8009356:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800935a:	f8ad 301a 	strh.w	r3, [sp, #26]
 800935e:	10e4      	asrs	r4, r4, #3
 8009360:	fb04 0405 	mla	r4, r4, r5, r0
 8009364:	2300      	movs	r3, #0
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	9405      	str	r4, [sp, #20]
 800936a:	f8ad 301c 	strh.w	r3, [sp, #28]
 800936e:	f8ad a01e 	strh.w	sl, [sp, #30]
 8009372:	f8cd 8010 	str.w	r8, [sp, #16]
 8009376:	f88d 9020 	strb.w	r9, [sp, #32]
 800937a:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 800937e:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8009382:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 8009386:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 800938a:	6803      	ldr	r3, [r0, #0]
 800938c:	a901      	add	r1, sp, #4
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	4798      	blx	r3
 8009392:	b00b      	add	sp, #44	@ 0x2c
 8009394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009398:	0801267c 	.word	0x0801267c

0800939c <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800939c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093a0:	461e      	mov	r6, r3
 80093a2:	4b0a      	ldr	r3, [pc, #40]	@ (80093cc <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 80093a4:	460f      	mov	r7, r1
 80093a6:	881d      	ldrh	r5, [r3, #0]
 80093a8:	4690      	mov	r8, r2
 80093aa:	f7ff fd23 	bl	8008df4 <_ZN8touchgfx3HAL3lcdEv>
 80093ae:	6803      	ldr	r3, [r0, #0]
 80093b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093b2:	4798      	blx	r3
 80093b4:	280b      	cmp	r0, #11
 80093b6:	bf9a      	itte	ls
 80093b8:	4b05      	ldrls	r3, [pc, #20]	@ (80093d0 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 80093ba:	5c1c      	ldrbls	r4, [r3, r0]
 80093bc:	2400      	movhi	r4, #0
 80093be:	fb08 7005 	mla	r0, r8, r5, r7
 80093c2:	10e4      	asrs	r4, r4, #3
 80093c4:	fb04 6000 	mla	r0, r4, r0, r6
 80093c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093cc:	2001247e 	.word	0x2001247e
 80093d0:	0801267c 	.word	0x0801267c

080093d4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 80093d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093d6:	b08b      	sub	sp, #44	@ 0x2c
 80093d8:	461f      	mov	r7, r3
 80093da:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 80093de:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80093e2:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 80093e6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80093ea:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80093ee:	f8ad 301a 	strh.w	r3, [sp, #26]
 80093f2:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80093f6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80093fa:	2500      	movs	r5, #0
 80093fc:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8009400:	f88d 3020 	strb.w	r3, [sp, #32]
 8009404:	4604      	mov	r4, r0
 8009406:	4616      	mov	r6, r2
 8009408:	9504      	str	r5, [sp, #16]
 800940a:	f7ff fe9f 	bl	800914c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800940e:	463a      	mov	r2, r7
 8009410:	4631      	mov	r1, r6
 8009412:	4603      	mov	r3, r0
 8009414:	4620      	mov	r0, r4
 8009416:	f7ff ffc1 	bl	800939c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800941a:	4b0e      	ldr	r3, [pc, #56]	@ (8009454 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 800941c:	9005      	str	r0, [sp, #20]
 800941e:	881b      	ldrh	r3, [r3, #0]
 8009420:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009424:	f7ff fce6 	bl	8008df4 <_ZN8touchgfx3HAL3lcdEv>
 8009428:	6803      	ldr	r3, [r0, #0]
 800942a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800942c:	4798      	blx	r3
 800942e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009430:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 8009434:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8009438:	9304      	str	r3, [sp, #16]
 800943a:	6860      	ldr	r0, [r4, #4]
 800943c:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8009440:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8009444:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 8009448:	6803      	ldr	r3, [r0, #0]
 800944a:	a901      	add	r1, sp, #4
 800944c:	685b      	ldr	r3, [r3, #4]
 800944e:	4798      	blx	r3
 8009450:	b00b      	add	sp, #44	@ 0x2c
 8009452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009454:	2001247e 	.word	0x2001247e

08009458 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8009458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800945a:	b08d      	sub	sp, #52	@ 0x34
 800945c:	466b      	mov	r3, sp
 800945e:	e883 0006 	stmia.w	r3, {r1, r2}
 8009462:	2300      	movs	r3, #0
 8009464:	9306      	str	r3, [sp, #24]
 8009466:	6803      	ldr	r3, [r0, #0]
 8009468:	f8bd 6000 	ldrh.w	r6, [sp]
 800946c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800946e:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8009472:	2501      	movs	r5, #1
 8009474:	9503      	str	r5, [sp, #12]
 8009476:	4604      	mov	r4, r0
 8009478:	4798      	blx	r3
 800947a:	463a      	mov	r2, r7
 800947c:	4631      	mov	r1, r6
 800947e:	4603      	mov	r3, r0
 8009480:	4620      	mov	r0, r4
 8009482:	f7ff ff8b 	bl	800939c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8009486:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009488:	9307      	str	r3, [sp, #28]
 800948a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800948e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009492:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009496:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800949a:	4b0f      	ldr	r3, [pc, #60]	@ (80094d8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 800949c:	9004      	str	r0, [sp, #16]
 800949e:	881b      	ldrh	r3, [r3, #0]
 80094a0:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 80094a4:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 80094a8:	f7ff fca4 	bl	8008df4 <_ZN8touchgfx3HAL3lcdEv>
 80094ac:	6803      	ldr	r3, [r0, #0]
 80094ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094b0:	4798      	blx	r3
 80094b2:	23ff      	movs	r3, #255	@ 0xff
 80094b4:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 80094b8:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 80094bc:	6860      	ldr	r0, [r4, #4]
 80094be:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 80094c2:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 80094c6:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 80094ca:	6803      	ldr	r3, [r0, #0]
 80094cc:	a903      	add	r1, sp, #12
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	4798      	blx	r3
 80094d2:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80094d4:	b00d      	add	sp, #52	@ 0x34
 80094d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094d8:	2001247e 	.word	0x2001247e

080094dc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80094dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094e0:	b08c      	sub	sp, #48	@ 0x30
 80094e2:	461e      	mov	r6, r3
 80094e4:	466d      	mov	r5, sp
 80094e6:	2300      	movs	r3, #0
 80094e8:	e885 0006 	stmia.w	r5, {r1, r2}
 80094ec:	9306      	str	r3, [sp, #24]
 80094ee:	6803      	ldr	r3, [r0, #0]
 80094f0:	f8bd 7000 	ldrh.w	r7, [sp]
 80094f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094f6:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 80094fa:	2501      	movs	r5, #1
 80094fc:	9503      	str	r5, [sp, #12]
 80094fe:	4604      	mov	r4, r0
 8009500:	4798      	blx	r3
 8009502:	4642      	mov	r2, r8
 8009504:	4639      	mov	r1, r7
 8009506:	4603      	mov	r3, r0
 8009508:	4620      	mov	r0, r4
 800950a:	f7ff ff47 	bl	800939c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800950e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8009512:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009516:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800951a:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800951e:	4b11      	ldr	r3, [pc, #68]	@ (8009564 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8009520:	9004      	str	r0, [sp, #16]
 8009522:	881b      	ldrh	r3, [r3, #0]
 8009524:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8009528:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800952a:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800952e:	9607      	str	r6, [sp, #28]
 8009530:	f7ff fc60 	bl	8008df4 <_ZN8touchgfx3HAL3lcdEv>
 8009534:	6803      	ldr	r3, [r0, #0]
 8009536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009538:	4798      	blx	r3
 800953a:	23ff      	movs	r3, #255	@ 0xff
 800953c:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8009540:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8009544:	6860      	ldr	r0, [r4, #4]
 8009546:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800954a:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800954e:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8009552:	6803      	ldr	r3, [r0, #0]
 8009554:	a903      	add	r1, sp, #12
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	4798      	blx	r3
 800955a:	4630      	mov	r0, r6
 800955c:	b00c      	add	sp, #48	@ 0x30
 800955e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009562:	bf00      	nop
 8009564:	2001247e 	.word	0x2001247e

08009568 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8009568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800956a:	b085      	sub	sp, #20
 800956c:	ac02      	add	r4, sp, #8
 800956e:	e884 0006 	stmia.w	r4, {r1, r2}
 8009572:	4605      	mov	r5, r0
 8009574:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8009578:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 800957c:	f7ff fde6 	bl	800914c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8009580:	463a      	mov	r2, r7
 8009582:	4603      	mov	r3, r0
 8009584:	4631      	mov	r1, r6
 8009586:	4628      	mov	r0, r5
 8009588:	f7ff ff08 	bl	800939c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800958c:	4a05      	ldr	r2, [pc, #20]	@ (80095a4 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 800958e:	682b      	ldr	r3, [r5, #0]
 8009590:	8812      	ldrh	r2, [r2, #0]
 8009592:	9200      	str	r2, [sp, #0]
 8009594:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8009596:	e894 0006 	ldmia.w	r4, {r1, r2}
 800959a:	4603      	mov	r3, r0
 800959c:	4628      	mov	r0, r5
 800959e:	47b0      	blx	r6
 80095a0:	b005      	add	sp, #20
 80095a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095a4:	2001247e 	.word	0x2001247e

080095a8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 80095a8:	b570      	push	{r4, r5, r6, lr}
 80095aa:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 80095ae:	4604      	mov	r4, r0
 80095b0:	b19b      	cbz	r3, 80095da <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80095b2:	2002      	movs	r0, #2
 80095b4:	f7f7 f93c 	bl	8000830 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 80095b8:	2300      	movs	r3, #0
 80095ba:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 80095be:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 80095c2:	6823      	ldr	r3, [r4, #0]
 80095c4:	4620      	mov	r0, r4
 80095c6:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 80095ca:	f7ff fdbf 	bl	800914c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80095ce:	462b      	mov	r3, r5
 80095d0:	4601      	mov	r1, r0
 80095d2:	4620      	mov	r0, r4
 80095d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80095d8:	4718      	bx	r3
 80095da:	bd70      	pop	{r4, r5, r6, pc}

080095dc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 80095dc:	b538      	push	{r3, r4, r5, lr}
 80095de:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 80095e2:	428b      	cmp	r3, r1
 80095e4:	4604      	mov	r4, r0
 80095e6:	460d      	mov	r5, r1
 80095e8:	d006      	beq.n	80095f8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 80095ea:	6803      	ldr	r3, [r0, #0]
 80095ec:	b929      	cbnz	r1, 80095fa <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 80095ee:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80095f2:	4798      	blx	r3
 80095f4:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 80095f8:	bd38      	pop	{r3, r4, r5, pc}
 80095fa:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80095fe:	e7f8      	b.n	80095f2 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08009600 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8009600:	b510      	push	{r4, lr}
 8009602:	4b0d      	ldr	r3, [pc, #52]	@ (8009638 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	4604      	mov	r4, r0
 8009608:	b95b      	cbnz	r3, 8009622 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800960a:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 800960e:	2b02      	cmp	r3, #2
 8009610:	d007      	beq.n	8009622 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8009612:	6840      	ldr	r0, [r0, #4]
 8009614:	f000 f912 	bl	800983c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8009618:	b118      	cbz	r0, 8009622 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800961a:	6862      	ldr	r2, [r4, #4]
 800961c:	7a53      	ldrb	r3, [r2, #9]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d0fc      	beq.n	800961c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8009622:	f7f7 fa51 	bl	8000ac8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8009626:	4620      	mov	r0, r4
 8009628:	2100      	movs	r1, #0
 800962a:	f7ff ffd7 	bl	80095dc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800962e:	4620      	mov	r0, r4
 8009630:	f7ff fd8c 	bl	800914c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8009634:	bd10      	pop	{r4, pc}
 8009636:	bf00      	nop
 8009638:	20012482 	.word	0x20012482

0800963c <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800963c:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8009640:	1a13      	subs	r3, r2, r0
 8009642:	4258      	negs	r0, r3
 8009644:	4158      	adcs	r0, r3
 8009646:	4770      	bx	lr

08009648 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8009648:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800964c:	1a9b      	subs	r3, r3, r2
 800964e:	2b00      	cmp	r3, #0
 8009650:	bfdc      	itt	le
 8009652:	6882      	ldrle	r2, [r0, #8]
 8009654:	189b      	addle	r3, r3, r2
 8009656:	2b01      	cmp	r3, #1
 8009658:	bfcc      	ite	gt
 800965a:	2000      	movgt	r0, #0
 800965c:	2001      	movle	r0, #1
 800965e:	4770      	bx	lr

08009660 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8009660:	6902      	ldr	r2, [r0, #16]
 8009662:	6843      	ldr	r3, [r0, #4]
 8009664:	2024      	movs	r0, #36	@ 0x24
 8009666:	fb00 3002 	mla	r0, r0, r2, r3
 800966a:	4770      	bx	lr

0800966c <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800966c:	6803      	ldr	r3, [r0, #0]
 800966e:	691b      	ldr	r3, [r3, #16]
 8009670:	4718      	bx	r3

08009672 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8009672:	b570      	push	{r4, r5, r6, lr}
 8009674:	2301      	movs	r3, #1
 8009676:	7203      	strb	r3, [r0, #8]
 8009678:	4604      	mov	r4, r0
 800967a:	6840      	ldr	r0, [r0, #4]
 800967c:	6803      	ldr	r3, [r0, #0]
 800967e:	699b      	ldr	r3, [r3, #24]
 8009680:	4798      	blx	r3
 8009682:	6803      	ldr	r3, [r0, #0]
 8009684:	2b40      	cmp	r3, #64	@ 0x40
 8009686:	4605      	mov	r5, r0
 8009688:	d00c      	beq.n	80096a4 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800968a:	d810      	bhi.n	80096ae <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 800968c:	2b04      	cmp	r3, #4
 800968e:	d01d      	beq.n	80096cc <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8009690:	d804      	bhi.n	800969c <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8009692:	2b01      	cmp	r3, #1
 8009694:	d006      	beq.n	80096a4 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8009696:	2b02      	cmp	r3, #2
 8009698:	d02c      	beq.n	80096f4 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800969a:	bd70      	pop	{r4, r5, r6, pc}
 800969c:	2b08      	cmp	r3, #8
 800969e:	d01d      	beq.n	80096dc <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 80096a0:	2b20      	cmp	r3, #32
 80096a2:	d1fa      	bne.n	800969a <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 80096a4:	6823      	ldr	r3, [r4, #0]
 80096a6:	4620      	mov	r0, r4
 80096a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096aa:	4798      	blx	r3
 80096ac:	e013      	b.n	80096d6 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 80096ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096b2:	d0f7      	beq.n	80096a4 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80096b4:	d804      	bhi.n	80096c0 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 80096b6:	2b80      	cmp	r3, #128	@ 0x80
 80096b8:	d0f4      	beq.n	80096a4 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80096ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096be:	e7f0      	b.n	80096a2 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 80096c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096c4:	d0ee      	beq.n	80096a4 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80096c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80096ca:	e7e5      	b.n	8009698 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 80096cc:	6823      	ldr	r3, [r4, #0]
 80096ce:	7f01      	ldrb	r1, [r0, #28]
 80096d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096d2:	4620      	mov	r0, r4
 80096d4:	4798      	blx	r3
 80096d6:	6823      	ldr	r3, [r4, #0]
 80096d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096da:	e006      	b.n	80096ea <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80096dc:	6823      	ldr	r3, [r4, #0]
 80096de:	7f01      	ldrb	r1, [r0, #28]
 80096e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096e2:	4620      	mov	r0, r4
 80096e4:	4798      	blx	r3
 80096e6:	6823      	ldr	r3, [r4, #0]
 80096e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096ea:	4629      	mov	r1, r5
 80096ec:	4620      	mov	r0, r4
 80096ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80096f2:	4718      	bx	r3
 80096f4:	6823      	ldr	r3, [r4, #0]
 80096f6:	4620      	mov	r0, r4
 80096f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096fa:	4798      	blx	r3
 80096fc:	e7f3      	b.n	80096e6 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

080096fe <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80096fe:	4770      	bx	lr

08009700 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8009700:	4770      	bx	lr

08009702 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 8009702:	4770      	bx	lr

08009704 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8009704:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8009708:	1ad2      	subs	r2, r2, r3
 800970a:	2a00      	cmp	r2, #0
 800970c:	b510      	push	{r4, lr}
 800970e:	bfdc      	itt	le
 8009710:	6884      	ldrle	r4, [r0, #8]
 8009712:	1912      	addle	r2, r2, r4
 8009714:	2a01      	cmp	r2, #1
 8009716:	dd16      	ble.n	8009746 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8009718:	6842      	ldr	r2, [r0, #4]
 800971a:	2424      	movs	r4, #36	@ 0x24
 800971c:	fb04 2303 	mla	r3, r4, r3, r2
 8009720:	f101 0220 	add.w	r2, r1, #32
 8009724:	f851 4b04 	ldr.w	r4, [r1], #4
 8009728:	f843 4b04 	str.w	r4, [r3], #4
 800972c:	4291      	cmp	r1, r2
 800972e:	d1f9      	bne.n	8009724 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8009730:	780a      	ldrb	r2, [r1, #0]
 8009732:	701a      	strb	r2, [r3, #0]
 8009734:	68c3      	ldr	r3, [r0, #12]
 8009736:	6882      	ldr	r2, [r0, #8]
 8009738:	f3bf 8f5b 	dmb	ish
 800973c:	3301      	adds	r3, #1
 800973e:	429a      	cmp	r2, r3
 8009740:	bfd8      	it	le
 8009742:	1a9b      	suble	r3, r3, r2
 8009744:	60c3      	str	r3, [r0, #12]
 8009746:	bd10      	pop	{r4, pc}

08009748 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8009748:	6903      	ldr	r3, [r0, #16]
 800974a:	6882      	ldr	r2, [r0, #8]
 800974c:	f3bf 8f5b 	dmb	ish
 8009750:	3301      	adds	r3, #1
 8009752:	429a      	cmp	r2, r3
 8009754:	bfd8      	it	le
 8009756:	1a9b      	suble	r3, r3, r2
 8009758:	6103      	str	r3, [r0, #16]
 800975a:	4770      	bx	lr

0800975c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800975c:	b570      	push	{r4, r5, r6, lr}
 800975e:	4604      	mov	r4, r0
 8009760:	460e      	mov	r6, r1
 8009762:	6860      	ldr	r0, [r4, #4]
 8009764:	6803      	ldr	r3, [r0, #0]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	4798      	blx	r3
 800976a:	2800      	cmp	r0, #0
 800976c:	d1f9      	bne.n	8009762 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800976e:	4d0d      	ldr	r5, [pc, #52]	@ (80097a4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8009770:	6828      	ldr	r0, [r5, #0]
 8009772:	6803      	ldr	r3, [r0, #0]
 8009774:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009776:	4798      	blx	r3
 8009778:	f7f7 f9b4 	bl	8000ae4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800977c:	6828      	ldr	r0, [r5, #0]
 800977e:	2101      	movs	r1, #1
 8009780:	f7ff ff2c 	bl	80095dc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8009784:	6860      	ldr	r0, [r4, #4]
 8009786:	6803      	ldr	r3, [r0, #0]
 8009788:	4631      	mov	r1, r6
 800978a:	689b      	ldr	r3, [r3, #8]
 800978c:	4798      	blx	r3
 800978e:	6823      	ldr	r3, [r4, #0]
 8009790:	4620      	mov	r0, r4
 8009792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009794:	4798      	blx	r3
 8009796:	6828      	ldr	r0, [r5, #0]
 8009798:	6803      	ldr	r3, [r0, #0]
 800979a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800979e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80097a0:	4718      	bx	r3
 80097a2:	bf00      	nop
 80097a4:	20012484 	.word	0x20012484

080097a8 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 80097a8:	b508      	push	{r3, lr}
 80097aa:	f7f7 f98d 	bl	8000ac8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80097ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80097b2:	f7f7 b991 	b.w	8000ad8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080097b6 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80097b6:	b510      	push	{r4, lr}
 80097b8:	2114      	movs	r1, #20
 80097ba:	4604      	mov	r4, r0
 80097bc:	f006 fd5c 	bl	8010278 <_ZdlPvj>
 80097c0:	4620      	mov	r0, r4
 80097c2:	bd10      	pop	{r4, pc}

080097c4 <_ZN8touchgfx13DMA_Interface5startEv>:
 80097c4:	b510      	push	{r4, lr}
 80097c6:	4604      	mov	r4, r0
 80097c8:	6840      	ldr	r0, [r0, #4]
 80097ca:	6803      	ldr	r3, [r0, #0]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4798      	blx	r3
 80097d0:	b948      	cbnz	r0, 80097e6 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80097d2:	7a63      	ldrb	r3, [r4, #9]
 80097d4:	b13b      	cbz	r3, 80097e6 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80097d6:	7a23      	ldrb	r3, [r4, #8]
 80097d8:	b92b      	cbnz	r3, 80097e6 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80097da:	6823      	ldr	r3, [r4, #0]
 80097dc:	4620      	mov	r0, r4
 80097de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097e4:	4718      	bx	r3
 80097e6:	bd10      	pop	{r4, pc}

080097e8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 80097e8:	b570      	push	{r4, r5, r6, lr}
 80097ea:	4604      	mov	r4, r0
 80097ec:	6840      	ldr	r0, [r0, #4]
 80097ee:	6803      	ldr	r3, [r0, #0]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4798      	blx	r3
 80097f4:	4605      	mov	r5, r0
 80097f6:	b930      	cbnz	r0, 8009806 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80097f8:	7a23      	ldrb	r3, [r4, #8]
 80097fa:	b123      	cbz	r3, 8009806 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80097fc:	6860      	ldr	r0, [r4, #4]
 80097fe:	6803      	ldr	r3, [r0, #0]
 8009800:	695b      	ldr	r3, [r3, #20]
 8009802:	4798      	blx	r3
 8009804:	7225      	strb	r5, [r4, #8]
 8009806:	6860      	ldr	r0, [r4, #4]
 8009808:	6803      	ldr	r3, [r0, #0]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4798      	blx	r3
 800980e:	b928      	cbnz	r0, 800981c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8009810:	6823      	ldr	r3, [r4, #0]
 8009812:	4620      	mov	r0, r4
 8009814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009816:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800981a:	4718      	bx	r3
 800981c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009820:	f7f7 b968 	b.w	8000af4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08009824 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8009824:	b510      	push	{r4, lr}
 8009826:	4c04      	ldr	r4, [pc, #16]	@ (8009838 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8009828:	6082      	str	r2, [r0, #8]
 800982a:	2200      	movs	r2, #0
 800982c:	e9c0 4100 	strd	r4, r1, [r0]
 8009830:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8009834:	bd10      	pop	{r4, pc}
 8009836:	bf00      	nop
 8009838:	08012690 	.word	0x08012690

0800983c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800983c:	6840      	ldr	r0, [r0, #4]
 800983e:	6803      	ldr	r3, [r0, #0]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4718      	bx	r3

08009844 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8009844:	2300      	movs	r3, #0
 8009846:	8083      	strh	r3, [r0, #4]
 8009848:	80c3      	strh	r3, [r0, #6]
 800984a:	8003      	strh	r3, [r0, #0]
 800984c:	8043      	strh	r3, [r0, #2]
 800984e:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 8009852:	2bff      	cmp	r3, #255	@ 0xff
 8009854:	bf01      	itttt	eq
 8009856:	890b      	ldrheq	r3, [r1, #8]
 8009858:	8083      	strheq	r3, [r0, #4]
 800985a:	894b      	ldrheq	r3, [r1, #10]
 800985c:	80c3      	strheq	r3, [r0, #6]
 800985e:	4770      	bx	lr

08009860 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8009860:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009862:	4604      	mov	r4, r0
 8009864:	6808      	ldr	r0, [r1, #0]
 8009866:	6849      	ldr	r1, [r1, #4]
 8009868:	466b      	mov	r3, sp
 800986a:	c303      	stmia	r3!, {r0, r1}
 800986c:	6823      	ldr	r3, [r4, #0]
 800986e:	4669      	mov	r1, sp
 8009870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009872:	4620      	mov	r0, r4
 8009874:	4798      	blx	r3
 8009876:	4b08      	ldr	r3, [pc, #32]	@ (8009898 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800987e:	b10a      	cbz	r2, 8009884 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8009880:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8009882:	b900      	cbnz	r0, 8009886 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8009884:	6898      	ldr	r0, [r3, #8]
 8009886:	6803      	ldr	r3, [r0, #0]
 8009888:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800988a:	6a1d      	ldr	r5, [r3, #32]
 800988c:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8009890:	4669      	mov	r1, sp
 8009892:	47a8      	blx	r5
 8009894:	b003      	add	sp, #12
 8009896:	bd30      	pop	{r4, r5, pc}
 8009898:	20012484 	.word	0x20012484

0800989c <_ZN8touchgfx3BoxD1Ev>:
 800989c:	4770      	bx	lr

0800989e <_ZN8touchgfx3BoxD0Ev>:
 800989e:	b510      	push	{r4, lr}
 80098a0:	212c      	movs	r1, #44	@ 0x2c
 80098a2:	4604      	mov	r4, r0
 80098a4:	f006 fce8 	bl	8010278 <_ZdlPvj>
 80098a8:	4620      	mov	r0, r4
 80098aa:	bd10      	pop	{r4, pc}

080098ac <_ZNK8touchgfx3Box17invalidateContentEv>:
 80098ac:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 80098b0:	b12a      	cbz	r2, 80098be <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80098b2:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80098b6:	b112      	cbz	r2, 80098be <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80098b8:	6803      	ldr	r3, [r0, #0]
 80098ba:	695b      	ldr	r3, [r3, #20]
 80098bc:	4718      	bx	r3
 80098be:	4770      	bx	lr

080098c0 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 80098c0:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 80098c4:	4770      	bx	lr

080098c6 <_ZN8touchgfx6ButtonD1Ev>:
 80098c6:	4770      	bx	lr

080098c8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 80098c8:	b570      	push	{r4, r5, r6, lr}
 80098ca:	880b      	ldrh	r3, [r1, #0]
 80098cc:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 80098ce:	4605      	mov	r5, r0
 80098d0:	8813      	ldrh	r3, [r2, #0]
 80098d2:	f825 3f30 	strh.w	r3, [r5, #48]!
 80098d6:	4604      	mov	r4, r0
 80098d8:	4628      	mov	r0, r5
 80098da:	f003 fe4f 	bl	800d57c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80098de:	4606      	mov	r6, r0
 80098e0:	4628      	mov	r0, r5
 80098e2:	f003 fe7f 	bl	800d5e4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80098e6:	6823      	ldr	r3, [r4, #0]
 80098e8:	4605      	mov	r5, r0
 80098ea:	4631      	mov	r1, r6
 80098ec:	4620      	mov	r0, r4
 80098ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098f0:	4798      	blx	r3
 80098f2:	6823      	ldr	r3, [r4, #0]
 80098f4:	4629      	mov	r1, r5
 80098f6:	4620      	mov	r0, r4
 80098f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80098fe:	4718      	bx	r3

08009900 <_ZN8touchgfx6ButtonD0Ev>:
 8009900:	b510      	push	{r4, lr}
 8009902:	2134      	movs	r1, #52	@ 0x34
 8009904:	4604      	mov	r4, r0
 8009906:	f006 fcb7 	bl	8010278 <_ZdlPvj>
 800990a:	4620      	mov	r0, r4
 800990c:	bd10      	pop	{r4, pc}

0800990e <_ZN8touchgfx14AbstractButton13executeActionEv>:
 800990e:	b510      	push	{r4, lr}
 8009910:	4604      	mov	r4, r0
 8009912:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8009914:	b150      	cbz	r0, 800992c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8009916:	6803      	ldr	r3, [r0, #0]
 8009918:	68db      	ldr	r3, [r3, #12]
 800991a:	4798      	blx	r3
 800991c:	b130      	cbz	r0, 800992c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800991e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8009920:	6803      	ldr	r3, [r0, #0]
 8009922:	4621      	mov	r1, r4
 8009924:	689b      	ldr	r3, [r3, #8]
 8009926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800992a:	4718      	bx	r3
 800992c:	bd10      	pop	{r4, pc}

0800992e <_ZNK8touchgfx6Button12getSolidRectEv>:
 800992e:	b510      	push	{r4, lr}
 8009930:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 8009934:	2bff      	cmp	r3, #255	@ 0xff
 8009936:	4604      	mov	r4, r0
 8009938:	d006      	beq.n	8009948 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 800993a:	2300      	movs	r3, #0
 800993c:	8003      	strh	r3, [r0, #0]
 800993e:	8043      	strh	r3, [r0, #2]
 8009940:	8083      	strh	r3, [r0, #4]
 8009942:	80c3      	strh	r3, [r0, #6]
 8009944:	4620      	mov	r0, r4
 8009946:	bd10      	pop	{r4, pc}
 8009948:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 800994c:	b11b      	cbz	r3, 8009956 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 800994e:	3130      	adds	r1, #48	@ 0x30
 8009950:	f003 fe7c 	bl	800d64c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8009954:	e7f6      	b.n	8009944 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8009956:	312e      	adds	r1, #46	@ 0x2e
 8009958:	e7fa      	b.n	8009950 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

0800995c <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 800995c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009960:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8009964:	b08a      	sub	sp, #40	@ 0x28
 8009966:	4604      	mov	r4, r0
 8009968:	4688      	mov	r8, r1
 800996a:	2b00      	cmp	r3, #0
 800996c:	d066      	beq.n	8009a3c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 800996e:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8009970:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009974:	a805      	add	r0, sp, #20
 8009976:	f003 fe01 	bl	800d57c <_ZNK8touchgfx6Bitmap8getWidthEv>
 800997a:	4607      	mov	r7, r0
 800997c:	a805      	add	r0, sp, #20
 800997e:	f003 fe31 	bl	800d5e4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8009982:	f9b8 6000 	ldrsh.w	r6, [r8]
 8009986:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 800998a:	4432      	add	r2, r6
 800998c:	b292      	uxth	r2, r2
 800998e:	2300      	movs	r3, #0
 8009990:	fa0f fc82 	sxth.w	ip, r2
 8009994:	459c      	cmp	ip, r3
 8009996:	9306      	str	r3, [sp, #24]
 8009998:	dd52      	ble.n	8009a40 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800999a:	42b7      	cmp	r7, r6
 800999c:	dd50      	ble.n	8009a40 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800999e:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 80099a2:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80099a6:	442b      	add	r3, r5
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	b219      	sxth	r1, r3
 80099ac:	2900      	cmp	r1, #0
 80099ae:	dd47      	ble.n	8009a40 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80099b0:	42a8      	cmp	r0, r5
 80099b2:	dd45      	ble.n	8009a40 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80099b4:	4567      	cmp	r7, ip
 80099b6:	bfb8      	it	lt
 80099b8:	b2ba      	uxthlt	r2, r7
 80099ba:	4288      	cmp	r0, r1
 80099bc:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 80099c0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80099c4:	bfb8      	it	lt
 80099c6:	b283      	uxthlt	r3, r0
 80099c8:	1b92      	subs	r2, r2, r6
 80099ca:	1b5b      	subs	r3, r3, r5
 80099cc:	f8ad 201c 	strh.w	r2, [sp, #28]
 80099d0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80099d4:	f8ad 6018 	strh.w	r6, [sp, #24]
 80099d8:	f8ad 501a 	strh.w	r5, [sp, #26]
 80099dc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80099e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d026      	beq.n	8009a36 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80099e8:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	dd22      	ble.n	8009a36 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80099f0:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	dd1e      	ble.n	8009a36 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80099f8:	2300      	movs	r3, #0
 80099fa:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80099fe:	6823      	ldr	r3, [r4, #0]
 8009a00:	a908      	add	r1, sp, #32
 8009a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a04:	4620      	mov	r0, r4
 8009a06:	4798      	blx	r3
 8009a08:	4b0f      	ldr	r3, [pc, #60]	@ (8009a48 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8009a10:	b10a      	cbz	r2, 8009a16 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 8009a12:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8009a14:	b900      	cbnz	r0, 8009a18 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 8009a16:	6898      	ldr	r0, [r3, #8]
 8009a18:	6801      	ldr	r1, [r0, #0]
 8009a1a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8009a1e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8009a22:	2501      	movs	r5, #1
 8009a24:	9502      	str	r5, [sp, #8]
 8009a26:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 8009a2a:	9401      	str	r4, [sp, #4]
 8009a2c:	ac06      	add	r4, sp, #24
 8009a2e:	9400      	str	r4, [sp, #0]
 8009a30:	688c      	ldr	r4, [r1, #8]
 8009a32:	a905      	add	r1, sp, #20
 8009a34:	47a0      	blx	r4
 8009a36:	b00a      	add	sp, #40	@ 0x28
 8009a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a3c:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8009a3e:	e797      	b.n	8009970 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8009a40:	2300      	movs	r3, #0
 8009a42:	9307      	str	r3, [sp, #28]
 8009a44:	e7ca      	b.n	80099dc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 8009a46:	bf00      	nop
 8009a48:	20012484 	.word	0x20012484

08009a4c <_ZNK8touchgfx6Button17invalidateContentEv>:
 8009a4c:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 8009a50:	b12a      	cbz	r2, 8009a5e <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8009a52:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8009a56:	b112      	cbz	r2, 8009a5e <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8009a58:	6803      	ldr	r3, [r0, #0]
 8009a5a:	695b      	ldr	r3, [r3, #20]
 8009a5c:	4718      	bx	r3
 8009a5e:	4770      	bx	lr

08009a60 <_ZN8touchgfx5ImageD1Ev>:
 8009a60:	4770      	bx	lr

08009a62 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8009a62:	b570      	push	{r4, r5, r6, lr}
 8009a64:	880b      	ldrh	r3, [r1, #0]
 8009a66:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8009a68:	4604      	mov	r4, r0
 8009a6a:	4608      	mov	r0, r1
 8009a6c:	460d      	mov	r5, r1
 8009a6e:	f003 fd85 	bl	800d57c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8009a72:	4606      	mov	r6, r0
 8009a74:	4628      	mov	r0, r5
 8009a76:	f003 fdb5 	bl	800d5e4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8009a7a:	6823      	ldr	r3, [r4, #0]
 8009a7c:	4605      	mov	r5, r0
 8009a7e:	4631      	mov	r1, r6
 8009a80:	4620      	mov	r0, r4
 8009a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a84:	4798      	blx	r3
 8009a86:	6823      	ldr	r3, [r4, #0]
 8009a88:	4629      	mov	r1, r5
 8009a8a:	4620      	mov	r0, r4
 8009a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009a92:	4718      	bx	r3

08009a94 <_ZN8touchgfx5ImageD0Ev>:
 8009a94:	b510      	push	{r4, lr}
 8009a96:	212c      	movs	r1, #44	@ 0x2c
 8009a98:	4604      	mov	r4, r0
 8009a9a:	f006 fbed 	bl	8010278 <_ZdlPvj>
 8009a9e:	4620      	mov	r0, r4
 8009aa0:	bd10      	pop	{r4, pc}

08009aa2 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8009aa2:	b510      	push	{r4, lr}
 8009aa4:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8009aa8:	2bff      	cmp	r3, #255	@ 0xff
 8009aaa:	4604      	mov	r4, r0
 8009aac:	d006      	beq.n	8009abc <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8009aae:	2300      	movs	r3, #0
 8009ab0:	8003      	strh	r3, [r0, #0]
 8009ab2:	8043      	strh	r3, [r0, #2]
 8009ab4:	8083      	strh	r3, [r0, #4]
 8009ab6:	80c3      	strh	r3, [r0, #6]
 8009ab8:	4620      	mov	r0, r4
 8009aba:	bd10      	pop	{r4, pc}
 8009abc:	3126      	adds	r1, #38	@ 0x26
 8009abe:	f003 fdc5 	bl	800d64c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8009ac2:	e7f9      	b.n	8009ab8 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08009ac4 <_ZNK8touchgfx5Image17invalidateContentEv>:
 8009ac4:	f890 2028 	ldrb.w	r2, [r0, #40]	@ 0x28
 8009ac8:	b12a      	cbz	r2, 8009ad6 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8009aca:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8009ace:	b112      	cbz	r2, 8009ad6 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8009ad0:	6803      	ldr	r3, [r0, #0]
 8009ad2:	695b      	ldr	r3, [r3, #20]
 8009ad4:	4718      	bx	r3
 8009ad6:	4770      	bx	lr

08009ad8 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8009ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009adc:	4604      	mov	r4, r0
 8009ade:	b088      	sub	sp, #32
 8009ae0:	f854 3b26 	ldr.w	r3, [r4], #38
 8009ae4:	2500      	movs	r5, #0
 8009ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ae8:	460f      	mov	r7, r1
 8009aea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009aee:	a904      	add	r1, sp, #16
 8009af0:	4606      	mov	r6, r0
 8009af2:	4798      	blx	r3
 8009af4:	4620      	mov	r0, r4
 8009af6:	f003 fd41 	bl	800d57c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8009afa:	4680      	mov	r8, r0
 8009afc:	4620      	mov	r0, r4
 8009afe:	f003 fd71 	bl	800d5e4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8009b02:	9506      	str	r5, [sp, #24]
 8009b04:	ad06      	add	r5, sp, #24
 8009b06:	f8ad 001e 	strh.w	r0, [sp, #30]
 8009b0a:	4639      	mov	r1, r7
 8009b0c:	4628      	mov	r0, r5
 8009b0e:	f8ad 801c 	strh.w	r8, [sp, #28]
 8009b12:	f7fe fe99 	bl	8008848 <_ZN8touchgfx4RectaNERKS0_>
 8009b16:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	dd19      	ble.n	8009b52 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8009b1e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	dd15      	ble.n	8009b52 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8009b26:	4b0c      	ldr	r3, [pc, #48]	@ (8009b58 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8009b2e:	b10a      	cbz	r2, 8009b34 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8009b30:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8009b32:	b900      	cbnz	r0, 8009b36 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8009b34:	6898      	ldr	r0, [r3, #8]
 8009b36:	6801      	ldr	r1, [r0, #0]
 8009b38:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8009b3c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8009b40:	2701      	movs	r7, #1
 8009b42:	9702      	str	r7, [sp, #8]
 8009b44:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 8009b48:	e9cd 5600 	strd	r5, r6, [sp]
 8009b4c:	688d      	ldr	r5, [r1, #8]
 8009b4e:	4621      	mov	r1, r4
 8009b50:	47a8      	blx	r5
 8009b52:	b008      	add	sp, #32
 8009b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b58:	20012484 	.word	0x20012484

08009b5c <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8009b5c:	b510      	push	{r4, lr}
 8009b5e:	6803      	ldr	r3, [r0, #0]
 8009b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b62:	460c      	mov	r4, r1
 8009b64:	4798      	blx	r3
 8009b66:	1b03      	subs	r3, r0, r4
 8009b68:	4258      	negs	r0, r3
 8009b6a:	4158      	adcs	r0, r3
 8009b6c:	bd10      	pop	{r4, pc}
	...

08009b70 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8009b70:	4b01      	ldr	r3, [pc, #4]	@ (8009b78 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8009b72:	6019      	str	r1, [r3, #0]
 8009b74:	4770      	bx	lr
 8009b76:	bf00      	nop
 8009b78:	2001248c 	.word	0x2001248c

08009b7c <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8009b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b80:	4696      	mov	lr, r2
 8009b82:	4605      	mov	r5, r0
 8009b84:	4614      	mov	r4, r2
 8009b86:	460e      	mov	r6, r1
 8009b88:	461f      	mov	r7, r3
 8009b8a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009b8e:	b097      	sub	sp, #92	@ 0x5c
 8009b90:	f10d 0c1c 	add.w	ip, sp, #28
 8009b94:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009b98:	f8de 3000 	ldr.w	r3, [lr]
 8009b9c:	f8cc 3000 	str.w	r3, [ip]
 8009ba0:	f104 0e14 	add.w	lr, r4, #20
 8009ba4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009ba8:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8009bac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009bb0:	f8de 3000 	ldr.w	r3, [lr]
 8009bb4:	f8cc 3000 	str.w	r3, [ip]
 8009bb8:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8009bbc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009bc0:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8009bc4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009bc8:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 8009bcc:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 8009bd0:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 8009bd4:	f8de 3000 	ldr.w	r3, [lr]
 8009bd8:	f8cc 3000 	str.w	r3, [ip]
 8009bdc:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009bde:	682b      	ldr	r3, [r5, #0]
 8009be0:	9201      	str	r2, [sp, #4]
 8009be2:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8009be6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009be8:	9200      	str	r2, [sp, #0]
 8009bea:	f8cd 8008 	str.w	r8, [sp, #8]
 8009bee:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 8009bf2:	aa07      	add	r2, sp, #28
 8009bf4:	463b      	mov	r3, r7
 8009bf6:	4631      	mov	r1, r6
 8009bf8:	4628      	mov	r0, r5
 8009bfa:	47d8      	blx	fp
 8009bfc:	46a6      	mov	lr, r4
 8009bfe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009c02:	f10d 0c1c 	add.w	ip, sp, #28
 8009c06:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009c0a:	f8de 3000 	ldr.w	r3, [lr]
 8009c0e:	f8cc 3000 	str.w	r3, [ip]
 8009c12:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8009c16:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009c1a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8009c1e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009c22:	343c      	adds	r4, #60	@ 0x3c
 8009c24:	f8de 3000 	ldr.w	r3, [lr]
 8009c28:	f8cc 3000 	str.w	r3, [ip]
 8009c2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009c2e:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8009c32:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009c36:	6823      	ldr	r3, [r4, #0]
 8009c38:	f8cc 3000 	str.w	r3, [ip]
 8009c3c:	682b      	ldr	r3, [r5, #0]
 8009c3e:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8009c42:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009c44:	9201      	str	r2, [sp, #4]
 8009c46:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009c48:	9200      	str	r2, [sp, #0]
 8009c4a:	f8cd 8008 	str.w	r8, [sp, #8]
 8009c4e:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8009c50:	aa07      	add	r2, sp, #28
 8009c52:	463b      	mov	r3, r7
 8009c54:	4631      	mov	r1, r6
 8009c56:	4628      	mov	r0, r5
 8009c58:	47a0      	blx	r4
 8009c5a:	b017      	add	sp, #92	@ 0x5c
 8009c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009c60 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8009c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c64:	b08d      	sub	sp, #52	@ 0x34
 8009c66:	4688      	mov	r8, r1
 8009c68:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8009c6a:	f8d3 c000 	ldr.w	ip, [r3]
 8009c6e:	680f      	ldr	r7, [r1, #0]
 8009c70:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 8009c74:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 8009c78:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 8009c7c:	edd3 6a07 	vldr	s13, [r3, #28]
 8009c80:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8009c82:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 8009c86:	f9b1 9000 	ldrsh.w	r9, [r1]
 8009c8a:	f9ba 1000 	ldrsh.w	r1, [sl]
 8009c8e:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 8009c92:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 8009c96:	eba7 070c 	sub.w	r7, r7, ip
 8009c9a:	42bc      	cmp	r4, r7
 8009c9c:	bfa8      	it	ge
 8009c9e:	463c      	movge	r4, r7
 8009ca0:	ee07 4a90 	vmov	s15, r4
 8009ca4:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8009ca8:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 8009cac:	ee25 4a04 	vmul.f32	s8, s10, s8
 8009cb0:	ee65 4a24 	vmul.f32	s9, s10, s9
 8009cb4:	ee25 5a27 	vmul.f32	s10, s10, s15
 8009cb8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009cbc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009cc0:	eb09 0e0c 	add.w	lr, r9, ip
 8009cc4:	4571      	cmp	r1, lr
 8009cc6:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8009cca:	ee32 1a05 	vadd.f32	s2, s4, s10
 8009cce:	ee36 0a84 	vadd.f32	s0, s13, s8
 8009cd2:	ee61 1a87 	vmul.f32	s3, s3, s14
 8009cd6:	ee22 2a07 	vmul.f32	s4, s4, s14
 8009cda:	f340 808d 	ble.w	8009df8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x198>
 8009cde:	eba1 060e 	sub.w	r6, r1, lr
 8009ce2:	fb96 f5f4 	sdiv	r5, r6, r4
 8009ce6:	ee07 5a10 	vmov	s14, r5
 8009cea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009cee:	2d00      	cmp	r5, #0
 8009cf0:	fb04 6615 	mls	r6, r4, r5, r6
 8009cf4:	eea7 0a04 	vfma.f32	s0, s14, s8
 8009cf8:	eee7 0a24 	vfma.f32	s1, s14, s9
 8009cfc:	eea7 1a05 	vfma.f32	s2, s14, s10
 8009d00:	dd13      	ble.n	8009d2a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca>
 8009d02:	ee70 6a44 	vsub.f32	s13, s0, s8
 8009d06:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8009d0a:	eef5 6a40 	vcmp.f32	s13, #0.0
 8009d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d12:	bf18      	it	ne
 8009d14:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8009d18:	ee31 2a45 	vsub.f32	s4, s2, s10
 8009d1c:	bf08      	it	eq
 8009d1e:	eeb0 7a67 	vmoveq.f32	s14, s15
 8009d22:	ee61 1a87 	vmul.f32	s3, s3, s14
 8009d26:	ee22 2a07 	vmul.f32	s4, s4, s14
 8009d2a:	fb05 f204 	mul.w	r2, r5, r4
 8009d2e:	1abf      	subs	r7, r7, r2
 8009d30:	4494      	add	ip, r2
 8009d32:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8009d36:	4411      	add	r1, r2
 8009d38:	eb09 020c 	add.w	r2, r9, ip
 8009d3c:	443a      	add	r2, r7
 8009d3e:	b209      	sxth	r1, r1
 8009d40:	428a      	cmp	r2, r1
 8009d42:	bfc4      	itt	gt
 8009d44:	eba1 0209 	subgt.w	r2, r1, r9
 8009d48:	eba2 070c 	subgt.w	r7, r2, ip
 8009d4c:	2f00      	cmp	r7, #0
 8009d4e:	dd50      	ble.n	8009df2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x192>
 8009d50:	fb97 f1f4 	sdiv	r1, r7, r4
 8009d54:	fb04 7211 	mls	r2, r4, r1, r7
 8009d58:	b90a      	cbnz	r2, 8009d5e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfe>
 8009d5a:	3901      	subs	r1, #1
 8009d5c:	4622      	mov	r2, r4
 8009d5e:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8009d62:	6840      	ldr	r0, [r0, #4]
 8009d64:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009d66:	f8d0 a000 	ldr.w	sl, [r0]
 8009d6a:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8009d6c:	9008      	str	r0, [sp, #32]
 8009d6e:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 8009d72:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8009d74:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8009d78:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8009d7c:	695b      	ldr	r3, [r3, #20]
 8009d7e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8009d80:	445b      	add	r3, fp
 8009d82:	eef0 6a42 	vmov.f32	s13, s4
 8009d86:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8009d8a:	ee21 3a23 	vmul.f32	s6, s2, s7
 8009d8e:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8009d92:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8009d96:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8009d9a:	9307      	str	r3, [sp, #28]
 8009d9c:	ee17 7a90 	vmov	r7, s15
 8009da0:	ee73 7a42 	vsub.f32	s15, s6, s4
 8009da4:	eeb0 7a61 	vmov.f32	s14, s3
 8009da8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8009dac:	ee16 3a90 	vmov	r3, s13
 8009db0:	fb97 f7f4 	sdiv	r7, r7, r4
 8009db4:	ee17 ca90 	vmov	ip, s15
 8009db8:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8009dbc:	fb9c fcf4 	sdiv	ip, ip, r4
 8009dc0:	fb0c 3306 	mla	r3, ip, r6, r3
 8009dc4:	9302      	str	r3, [sp, #8]
 8009dc6:	ee17 3a10 	vmov	r3, s14
 8009dca:	44b6      	add	lr, r6
 8009dcc:	fb04 e505 	mla	r5, r4, r5, lr
 8009dd0:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8009dd4:	fb07 3706 	mla	r7, r7, r6, r3
 8009dd8:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8009ddc:	e9cd 4700 	strd	r4, r7, [sp]
 8009de0:	2900      	cmp	r1, #0
 8009de2:	bfcc      	ite	gt
 8009de4:	46a1      	movgt	r9, r4
 8009de6:	4691      	movle	r9, r2
 8009de8:	eba9 0306 	sub.w	r3, r9, r6
 8009dec:	f8da 4008 	ldr.w	r4, [sl, #8]
 8009df0:	47a0      	blx	r4
 8009df2:	b00d      	add	sp, #52	@ 0x34
 8009df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009df8:	2500      	movs	r5, #0
 8009dfa:	462e      	mov	r6, r5
 8009dfc:	e799      	b.n	8009d32 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd2>
	...

08009e00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8009e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e04:	b0db      	sub	sp, #364	@ 0x16c
 8009e06:	461d      	mov	r5, r3
 8009e08:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 8009e0c:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e0e:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 8009e12:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e14:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 8009e18:	9310      	str	r3, [sp, #64]	@ 0x40
 8009e1a:	6803      	ldr	r3, [r0, #0]
 8009e1c:	910f      	str	r1, [sp, #60]	@ 0x3c
 8009e1e:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 8009e20:	9009      	str	r0, [sp, #36]	@ 0x24
 8009e22:	4614      	mov	r4, r2
 8009e24:	4629      	mov	r1, r5
 8009e26:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8009e2a:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 8009e2e:	47b8      	blx	r7
 8009e30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e32:	6058      	str	r0, [r3, #4]
 8009e34:	2800      	cmp	r0, #0
 8009e36:	f000 83a1 	beq.w	800a57c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8009e3a:	682b      	ldr	r3, [r5, #0]
 8009e3c:	9314      	str	r3, [sp, #80]	@ 0x50
 8009e3e:	686b      	ldr	r3, [r5, #4]
 8009e40:	9315      	str	r3, [sp, #84]	@ 0x54
 8009e42:	4bc4      	ldr	r3, [pc, #784]	@ (800a154 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8009e44:	ed94 7a02 	vldr	s14, [r4, #8]
 8009e48:	7819      	ldrb	r1, [r3, #0]
 8009e4a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8009e4e:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8009e52:	2900      	cmp	r1, #0
 8009e54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009e58:	bf16      	itet	ne
 8009e5a:	4619      	movne	r1, r3
 8009e5c:	4611      	moveq	r1, r2
 8009e5e:	4613      	movne	r3, r2
 8009e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e64:	9116      	str	r1, [sp, #88]	@ 0x58
 8009e66:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 8009e6a:	f240 8387 	bls.w	800a57c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8009e6e:	ed94 7a07 	vldr	s14, [r4, #28]
 8009e72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e7a:	f240 837f 	bls.w	800a57c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8009e7e:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 8009e82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e8a:	f240 8377 	bls.w	800a57c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8009e8e:	6822      	ldr	r2, [r4, #0]
 8009e90:	4bb1      	ldr	r3, [pc, #708]	@ (800a158 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8009e92:	429a      	cmp	r2, r3
 8009e94:	f2c0 8372 	blt.w	800a57c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8009e98:	49b0      	ldr	r1, [pc, #704]	@ (800a15c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8009e9a:	6963      	ldr	r3, [r4, #20]
 8009e9c:	428a      	cmp	r2, r1
 8009e9e:	f300 836d 	bgt.w	800a57c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8009ea2:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8009ea6:	48ae      	ldr	r0, [pc, #696]	@ (800a160 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8009ea8:	33ff      	adds	r3, #255	@ 0xff
 8009eaa:	4283      	cmp	r3, r0
 8009eac:	f200 8366 	bhi.w	800a57c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8009eb0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009eb2:	4dac      	ldr	r5, [pc, #688]	@ (800a164 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8009eb4:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8009eb8:	33ff      	adds	r3, #255	@ 0xff
 8009eba:	42ab      	cmp	r3, r5
 8009ebc:	f200 835e 	bhi.w	800a57c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8009ec0:	6862      	ldr	r2, [r4, #4]
 8009ec2:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 8009ec6:	33ff      	adds	r3, #255	@ 0xff
 8009ec8:	4283      	cmp	r3, r0
 8009eca:	f200 8357 	bhi.w	800a57c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8009ece:	69a1      	ldr	r1, [r4, #24]
 8009ed0:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 8009ed4:	33ff      	adds	r3, #255	@ 0xff
 8009ed6:	4283      	cmp	r3, r0
 8009ed8:	f200 8350 	bhi.w	800a57c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8009edc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009ede:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 8009ee2:	30ff      	adds	r0, #255	@ 0xff
 8009ee4:	42a8      	cmp	r0, r5
 8009ee6:	f200 8349 	bhi.w	800a57c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8009eea:	428a      	cmp	r2, r1
 8009eec:	f280 8110 	bge.w	800a110 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	f300 8119 	bgt.w	800a128 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8009ef6:	4299      	cmp	r1, r3
 8009ef8:	f280 811d 	bge.w	800a136 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8009efc:	2502      	movs	r5, #2
 8009efe:	2701      	movs	r7, #1
 8009f00:	46a9      	mov	r9, r5
 8009f02:	46b8      	mov	r8, r7
 8009f04:	f04f 0a00 	mov.w	sl, #0
 8009f08:	4621      	mov	r1, r4
 8009f0a:	a849      	add	r0, sp, #292	@ 0x124
 8009f0c:	f003 f86e 	bl	800cfec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8009f10:	4622      	mov	r2, r4
 8009f12:	4653      	mov	r3, sl
 8009f14:	a949      	add	r1, sp, #292	@ 0x124
 8009f16:	f8cd 9000 	str.w	r9, [sp]
 8009f1a:	a819      	add	r0, sp, #100	@ 0x64
 8009f1c:	f003 f996 	bl	800d24c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8009f20:	4622      	mov	r2, r4
 8009f22:	4653      	mov	r3, sl
 8009f24:	a949      	add	r1, sp, #292	@ 0x124
 8009f26:	f8cd 8000 	str.w	r8, [sp]
 8009f2a:	a829      	add	r0, sp, #164	@ 0xa4
 8009f2c:	f003 f98e 	bl	800d24c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8009f30:	4643      	mov	r3, r8
 8009f32:	4622      	mov	r2, r4
 8009f34:	a949      	add	r1, sp, #292	@ 0x124
 8009f36:	f8cd 9000 	str.w	r9, [sp]
 8009f3a:	a839      	add	r0, sp, #228	@ 0xe4
 8009f3c:	f003 f986 	bl	800d24c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8009f40:	42af      	cmp	r7, r5
 8009f42:	bfb5      	itete	lt
 8009f44:	2300      	movlt	r3, #0
 8009f46:	2301      	movge	r3, #1
 8009f48:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8009f4a:	930e      	strge	r3, [sp, #56]	@ 0x38
 8009f4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f4e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009f52:	af12      	add	r7, sp, #72	@ 0x48
 8009f54:	bfb9      	ittee	lt
 8009f56:	ad29      	addlt	r5, sp, #164	@ 0xa4
 8009f58:	ac19      	addlt	r4, sp, #100	@ 0x64
 8009f5a:	ad19      	addge	r5, sp, #100	@ 0x64
 8009f5c:	ac29      	addge	r4, sp, #164	@ 0xa4
 8009f5e:	e887 0003 	stmia.w	r7, {r0, r1}
 8009f62:	b928      	cbnz	r0, 8009f70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8009f64:	4b80      	ldr	r3, [pc, #512]	@ (800a168 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8009f66:	6818      	ldr	r0, [r3, #0]
 8009f68:	6803      	ldr	r3, [r0, #0]
 8009f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f6c:	4798      	blx	r3
 8009f6e:	6038      	str	r0, [r7, #0]
 8009f70:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8009f72:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8009f76:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009f7a:	930c      	str	r3, [sp, #48]	@ 0x30
 8009f7c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009f7e:	6963      	ldr	r3, [r4, #20]
 8009f80:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8009f82:	440b      	add	r3, r1
 8009f84:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8009f88:	4408      	add	r0, r1
 8009f8a:	b200      	sxth	r0, r0
 8009f8c:	4283      	cmp	r3, r0
 8009f8e:	900d      	str	r0, [sp, #52]	@ 0x34
 8009f90:	f280 80dd 	bge.w	800a14e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8009f94:	428b      	cmp	r3, r1
 8009f96:	da08      	bge.n	8009faa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8009f98:	2a00      	cmp	r2, #0
 8009f9a:	dd06      	ble.n	8009faa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8009f9c:	1acb      	subs	r3, r1, r3
 8009f9e:	429a      	cmp	r2, r3
 8009fa0:	f2c0 80e4 	blt.w	800a16c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	f300 80e2 	bgt.w	800a16e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8009faa:	6967      	ldr	r7, [r4, #20]
 8009fac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009fae:	443b      	add	r3, r7
 8009fb0:	461f      	mov	r7, r3
 8009fb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009fb4:	1bdf      	subs	r7, r3, r7
 8009fb6:	4297      	cmp	r7, r2
 8009fb8:	bfa8      	it	ge
 8009fba:	4617      	movge	r7, r2
 8009fbc:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8009fc0:	2f00      	cmp	r7, #0
 8009fc2:	f340 8166 	ble.w	800a292 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8009fc6:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8009fc8:	6829      	ldr	r1, [r5, #0]
 8009fca:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009fce:	f9bb 3000 	ldrsh.w	r3, [fp]
 8009fd2:	6820      	ldr	r0, [r4, #0]
 8009fd4:	4411      	add	r1, r2
 8009fd6:	4299      	cmp	r1, r3
 8009fd8:	dd1a      	ble.n	800a010 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8009fda:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8009fde:	440b      	add	r3, r1
 8009fe0:	4402      	add	r2, r0
 8009fe2:	b21b      	sxth	r3, r3
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	dc13      	bgt.n	800a010 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8009fe8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fea:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	9206      	str	r2, [sp, #24]
 8009ff0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009ff2:	9205      	str	r2, [sp, #20]
 8009ff4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009ff6:	9500      	str	r5, [sp, #0]
 8009ff8:	e9cd b203 	strd	fp, r2, [sp, #12]
 8009ffc:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8009ffe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a000:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800a004:	a912      	add	r1, sp, #72	@ 0x48
 800a006:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 800a00a:	aa49      	add	r2, sp, #292	@ 0x124
 800a00c:	4623      	mov	r3, r4
 800a00e:	47c8      	blx	r9
 800a010:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a014:	441a      	add	r2, r3
 800a016:	6963      	ldr	r3, [r4, #20]
 800a018:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 800a01c:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 800a020:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 800a024:	68a1      	ldr	r1, [r4, #8]
 800a026:	ed94 6a08 	vldr	s12, [r4, #32]
 800a02a:	6022      	str	r2, [r4, #0]
 800a02c:	3301      	adds	r3, #1
 800a02e:	6163      	str	r3, [r4, #20]
 800a030:	69a3      	ldr	r3, [r4, #24]
 800a032:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a036:	3b01      	subs	r3, #1
 800a038:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 800a03c:	61a3      	str	r3, [r4, #24]
 800a03e:	6923      	ldr	r3, [r4, #16]
 800a040:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800a044:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a048:	edd4 6a07 	vldr	s13, [r4, #28]
 800a04c:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800a050:	440b      	add	r3, r1
 800a052:	68e1      	ldr	r1, [r4, #12]
 800a054:	6123      	str	r3, [r4, #16]
 800a056:	ee76 6a86 	vadd.f32	s13, s13, s12
 800a05a:	428b      	cmp	r3, r1
 800a05c:	edc4 6a07 	vstr	s13, [r4, #28]
 800a060:	db15      	blt.n	800a08e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 800a062:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 800a066:	ee76 6a26 	vadd.f32	s13, s12, s13
 800a06a:	3201      	adds	r2, #1
 800a06c:	edc4 6a07 	vstr	s13, [r4, #28]
 800a070:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 800a074:	6022      	str	r2, [r4, #0]
 800a076:	ee36 7a87 	vadd.f32	s14, s13, s14
 800a07a:	1a5b      	subs	r3, r3, r1
 800a07c:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800a080:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 800a084:	6123      	str	r3, [r4, #16]
 800a086:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a08a:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800a08e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a092:	441a      	add	r2, r3
 800a094:	696b      	ldr	r3, [r5, #20]
 800a096:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 800a09a:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 800a09e:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 800a0a2:	68a9      	ldr	r1, [r5, #8]
 800a0a4:	ed95 6a08 	vldr	s12, [r5, #32]
 800a0a8:	602a      	str	r2, [r5, #0]
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	616b      	str	r3, [r5, #20]
 800a0ae:	69ab      	ldr	r3, [r5, #24]
 800a0b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a0b4:	3b01      	subs	r3, #1
 800a0b6:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 800a0ba:	61ab      	str	r3, [r5, #24]
 800a0bc:	692b      	ldr	r3, [r5, #16]
 800a0be:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800a0c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0c6:	edd5 6a07 	vldr	s13, [r5, #28]
 800a0ca:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800a0ce:	440b      	add	r3, r1
 800a0d0:	68e9      	ldr	r1, [r5, #12]
 800a0d2:	612b      	str	r3, [r5, #16]
 800a0d4:	ee76 6a86 	vadd.f32	s13, s13, s12
 800a0d8:	428b      	cmp	r3, r1
 800a0da:	edc5 6a07 	vstr	s13, [r5, #28]
 800a0de:	db15      	blt.n	800a10c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 800a0e0:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 800a0e4:	ee76 6a26 	vadd.f32	s13, s12, s13
 800a0e8:	3201      	adds	r2, #1
 800a0ea:	edc5 6a07 	vstr	s13, [r5, #28]
 800a0ee:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 800a0f2:	602a      	str	r2, [r5, #0]
 800a0f4:	ee36 7a87 	vadd.f32	s14, s13, s14
 800a0f8:	1a5b      	subs	r3, r3, r1
 800a0fa:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800a0fe:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 800a102:	612b      	str	r3, [r5, #16]
 800a104:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a108:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800a10c:	3f01      	subs	r7, #1
 800a10e:	e757      	b.n	8009fc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 800a110:	4299      	cmp	r1, r3
 800a112:	dc13      	bgt.n	800a13c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 800a114:	429a      	cmp	r2, r3
 800a116:	da14      	bge.n	800a142 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 800a118:	2502      	movs	r5, #2
 800a11a:	2703      	movs	r7, #3
 800a11c:	46a9      	mov	r9, r5
 800a11e:	f04f 0800 	mov.w	r8, #0
 800a122:	f04f 0a01 	mov.w	sl, #1
 800a126:	e6ef      	b.n	8009f08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800a128:	2501      	movs	r5, #1
 800a12a:	2700      	movs	r7, #0
 800a12c:	46a9      	mov	r9, r5
 800a12e:	46b8      	mov	r8, r7
 800a130:	f04f 0a02 	mov.w	sl, #2
 800a134:	e6e8      	b.n	8009f08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800a136:	2501      	movs	r5, #1
 800a138:	2702      	movs	r7, #2
 800a13a:	e6e1      	b.n	8009f00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 800a13c:	2500      	movs	r5, #0
 800a13e:	2701      	movs	r7, #1
 800a140:	e7f4      	b.n	800a12c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 800a142:	2702      	movs	r7, #2
 800a144:	2503      	movs	r5, #3
 800a146:	f04f 0900 	mov.w	r9, #0
 800a14a:	46b8      	mov	r8, r7
 800a14c:	e7e9      	b.n	800a122 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 800a14e:	4613      	mov	r3, r2
 800a150:	e728      	b.n	8009fa4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 800a152:	bf00      	nop
 800a154:	2001247c 	.word	0x2001247c
 800a158:	fffd8f01 	.word	0xfffd8f01
 800a15c:	00027100 	.word	0x00027100
 800a160:	0004e1ff 	.word	0x0004e1ff
 800a164:	0004e1fe 	.word	0x0004e1fe
 800a168:	20012484 	.word	0x20012484
 800a16c:	4613      	mov	r3, r2
 800a16e:	992b      	ldr	r1, [sp, #172]	@ 0xac
 800a170:	9111      	str	r1, [sp, #68]	@ 0x44
 800a172:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 800a176:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 800a17a:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 800a17c:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 800a180:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 800a184:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 800a188:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 800a18c:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 800a190:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800a194:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 800a198:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 800a19c:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 800a1a0:	469e      	mov	lr, r3
 800a1a2:	469c      	mov	ip, r3
 800a1a4:	f04f 0900 	mov.w	r9, #0
 800a1a8:	f1bc 0f00 	cmp.w	ip, #0
 800a1ac:	d147      	bne.n	800a23e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 800a1ae:	eb03 0c07 	add.w	ip, r3, r7
 800a1b2:	1ad7      	subs	r7, r2, r3
 800a1b4:	f1b9 0f00 	cmp.w	r9, #0
 800a1b8:	d009      	beq.n	800a1ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 800a1ba:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 800a1be:	9029      	str	r0, [sp, #164]	@ 0xa4
 800a1c0:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 800a1c4:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 800a1c8:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 800a1cc:	912d      	str	r1, [sp, #180]	@ 0xb4
 800a1ce:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800a1d0:	9111      	str	r1, [sp, #68]	@ 0x44
 800a1d2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 800a1d6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 800a1da:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 800a1de:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 800a1e2:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 800a1e6:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 800a1ea:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 800a1ee:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 800a1f2:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 800a1f6:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 800a1fa:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 800a1fe:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 800a202:	f04f 0800 	mov.w	r8, #0
 800a206:	f1be 0f00 	cmp.w	lr, #0
 800a20a:	d031      	beq.n	800a270 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 800a20c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800a20e:	4431      	add	r1, r6
 800a210:	4549      	cmp	r1, r9
 800a212:	4450      	add	r0, sl
 800a214:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800a218:	ee37 7a04 	vadd.f32	s14, s14, s8
 800a21c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800a220:	db08      	blt.n	800a234 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 800a222:	ee77 7a85 	vadd.f32	s15, s15, s10
 800a226:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800a22a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a22e:	3001      	adds	r0, #1
 800a230:	eba1 0109 	sub.w	r1, r1, r9
 800a234:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a238:	f04f 0801 	mov.w	r8, #1
 800a23c:	e7e3      	b.n	800a206 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 800a23e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800a240:	4431      	add	r1, r6
 800a242:	4541      	cmp	r1, r8
 800a244:	4450      	add	r0, sl
 800a246:	ee37 7a24 	vadd.f32	s14, s14, s9
 800a24a:	ee77 7a84 	vadd.f32	s15, s15, s8
 800a24e:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800a252:	db08      	blt.n	800a266 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 800a254:	ee76 6a85 	vadd.f32	s13, s13, s10
 800a258:	ee37 7a25 	vadd.f32	s14, s14, s11
 800a25c:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a260:	3001      	adds	r0, #1
 800a262:	eba1 0108 	sub.w	r1, r1, r8
 800a266:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a26a:	f04f 0901 	mov.w	r9, #1
 800a26e:	e79b      	b.n	800a1a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 800a270:	449c      	add	ip, r3
 800a272:	1aff      	subs	r7, r7, r3
 800a274:	f1b8 0f00 	cmp.w	r8, #0
 800a278:	d009      	beq.n	800a28e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 800a27a:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 800a27e:	9019      	str	r0, [sp, #100]	@ 0x64
 800a280:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 800a284:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 800a288:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 800a28c:	911d      	str	r1, [sp, #116]	@ 0x74
 800a28e:	1ad2      	subs	r2, r2, r3
 800a290:	e68b      	b.n	8009faa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800a292:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a294:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 800a296:	2b00      	cmp	r3, #0
 800a298:	f000 80d1 	beq.w	800a43e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 800a29c:	ad19      	add	r5, sp, #100	@ 0x64
 800a29e:	ac39      	add	r4, sp, #228	@ 0xe4
 800a2a0:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800a2a2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800a2a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a2aa:	930c      	str	r3, [sp, #48]	@ 0x30
 800a2ac:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a2ae:	6963      	ldr	r3, [r4, #20]
 800a2b0:	440b      	add	r3, r1
 800a2b2:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800a2b6:	4408      	add	r0, r1
 800a2b8:	b200      	sxth	r0, r0
 800a2ba:	4283      	cmp	r3, r0
 800a2bc:	900d      	str	r0, [sp, #52]	@ 0x34
 800a2be:	f280 80c1 	bge.w	800a444 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 800a2c2:	428b      	cmp	r3, r1
 800a2c4:	da08      	bge.n	800a2d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800a2c6:	2a00      	cmp	r2, #0
 800a2c8:	dd06      	ble.n	800a2d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800a2ca:	1acb      	subs	r3, r1, r3
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	f2c0 80bb 	blt.w	800a448 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	f300 80b9 	bgt.w	800a44a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 800a2d8:	6967      	ldr	r7, [r4, #20]
 800a2da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a2dc:	443b      	add	r3, r7
 800a2de:	461f      	mov	r7, r3
 800a2e0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a2e2:	1bdf      	subs	r7, r3, r7
 800a2e4:	4297      	cmp	r7, r2
 800a2e6:	bfa8      	it	ge
 800a2e8:	4617      	movge	r7, r2
 800a2ea:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 800a2ee:	2f00      	cmp	r7, #0
 800a2f0:	f340 813c 	ble.w	800a56c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 800a2f4:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800a2f6:	6829      	ldr	r1, [r5, #0]
 800a2f8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a2fc:	f9bb 3000 	ldrsh.w	r3, [fp]
 800a300:	6820      	ldr	r0, [r4, #0]
 800a302:	4411      	add	r1, r2
 800a304:	4299      	cmp	r1, r3
 800a306:	dd1a      	ble.n	800a33e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800a308:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800a30c:	440b      	add	r3, r1
 800a30e:	4402      	add	r2, r0
 800a310:	b21b      	sxth	r3, r3
 800a312:	429a      	cmp	r2, r3
 800a314:	dc13      	bgt.n	800a33e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800a316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a318:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	9206      	str	r2, [sp, #24]
 800a31e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a320:	9205      	str	r2, [sp, #20]
 800a322:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a324:	9500      	str	r5, [sp, #0]
 800a326:	e9cd b203 	strd	fp, r2, [sp, #12]
 800a32a:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 800a32c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a32e:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800a332:	a912      	add	r1, sp, #72	@ 0x48
 800a334:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 800a338:	aa49      	add	r2, sp, #292	@ 0x124
 800a33a:	4623      	mov	r3, r4
 800a33c:	47c8      	blx	r9
 800a33e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a342:	441a      	add	r2, r3
 800a344:	6963      	ldr	r3, [r4, #20]
 800a346:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 800a34a:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 800a34e:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 800a352:	68a1      	ldr	r1, [r4, #8]
 800a354:	ed94 6a08 	vldr	s12, [r4, #32]
 800a358:	6022      	str	r2, [r4, #0]
 800a35a:	3301      	adds	r3, #1
 800a35c:	6163      	str	r3, [r4, #20]
 800a35e:	69a3      	ldr	r3, [r4, #24]
 800a360:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a364:	3b01      	subs	r3, #1
 800a366:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 800a36a:	61a3      	str	r3, [r4, #24]
 800a36c:	6923      	ldr	r3, [r4, #16]
 800a36e:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800a372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a376:	edd4 6a07 	vldr	s13, [r4, #28]
 800a37a:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800a37e:	440b      	add	r3, r1
 800a380:	68e1      	ldr	r1, [r4, #12]
 800a382:	6123      	str	r3, [r4, #16]
 800a384:	ee76 6a86 	vadd.f32	s13, s13, s12
 800a388:	428b      	cmp	r3, r1
 800a38a:	edc4 6a07 	vstr	s13, [r4, #28]
 800a38e:	db15      	blt.n	800a3bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 800a390:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 800a394:	ee76 6a26 	vadd.f32	s13, s12, s13
 800a398:	3201      	adds	r2, #1
 800a39a:	edc4 6a07 	vstr	s13, [r4, #28]
 800a39e:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 800a3a2:	6022      	str	r2, [r4, #0]
 800a3a4:	ee36 7a87 	vadd.f32	s14, s13, s14
 800a3a8:	1a5b      	subs	r3, r3, r1
 800a3aa:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800a3ae:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 800a3b2:	6123      	str	r3, [r4, #16]
 800a3b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a3b8:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800a3bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a3c0:	441a      	add	r2, r3
 800a3c2:	696b      	ldr	r3, [r5, #20]
 800a3c4:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 800a3c8:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 800a3cc:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 800a3d0:	68a9      	ldr	r1, [r5, #8]
 800a3d2:	ed95 6a08 	vldr	s12, [r5, #32]
 800a3d6:	602a      	str	r2, [r5, #0]
 800a3d8:	3301      	adds	r3, #1
 800a3da:	616b      	str	r3, [r5, #20]
 800a3dc:	69ab      	ldr	r3, [r5, #24]
 800a3de:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a3e2:	3b01      	subs	r3, #1
 800a3e4:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 800a3e8:	61ab      	str	r3, [r5, #24]
 800a3ea:	692b      	ldr	r3, [r5, #16]
 800a3ec:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800a3f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3f4:	edd5 6a07 	vldr	s13, [r5, #28]
 800a3f8:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800a3fc:	440b      	add	r3, r1
 800a3fe:	68e9      	ldr	r1, [r5, #12]
 800a400:	612b      	str	r3, [r5, #16]
 800a402:	ee76 6a86 	vadd.f32	s13, s13, s12
 800a406:	428b      	cmp	r3, r1
 800a408:	edc5 6a07 	vstr	s13, [r5, #28]
 800a40c:	db15      	blt.n	800a43a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 800a40e:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 800a412:	ee76 6a26 	vadd.f32	s13, s12, s13
 800a416:	3201      	adds	r2, #1
 800a418:	edc5 6a07 	vstr	s13, [r5, #28]
 800a41c:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 800a420:	602a      	str	r2, [r5, #0]
 800a422:	ee36 7a87 	vadd.f32	s14, s13, s14
 800a426:	1a5b      	subs	r3, r3, r1
 800a428:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800a42c:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 800a430:	612b      	str	r3, [r5, #16]
 800a432:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a436:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800a43a:	3f01      	subs	r7, #1
 800a43c:	e757      	b.n	800a2ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 800a43e:	ad39      	add	r5, sp, #228	@ 0xe4
 800a440:	ac19      	add	r4, sp, #100	@ 0x64
 800a442:	e72d      	b.n	800a2a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 800a444:	4613      	mov	r3, r2
 800a446:	e744      	b.n	800a2d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 800a448:	4613      	mov	r3, r2
 800a44a:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 800a44e:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 800a450:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 800a454:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 800a458:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 800a45c:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 800a460:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 800a464:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 800a468:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 800a46c:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 800a46e:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 800a472:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 800a476:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 800a47a:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 800a47e:	960e      	str	r6, [sp, #56]	@ 0x38
 800a480:	469e      	mov	lr, r3
 800a482:	461f      	mov	r7, r3
 800a484:	f04f 0900 	mov.w	r9, #0
 800a488:	2f00      	cmp	r7, #0
 800a48a:	d146      	bne.n	800a51a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 800a48c:	449c      	add	ip, r3
 800a48e:	1ad7      	subs	r7, r2, r3
 800a490:	f1b9 0f00 	cmp.w	r9, #0
 800a494:	d009      	beq.n	800a4aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 800a496:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 800a49a:	9039      	str	r0, [sp, #228]	@ 0xe4
 800a49c:	913d      	str	r1, [sp, #244]	@ 0xf4
 800a49e:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 800a4a2:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 800a4a6:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 800a4aa:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800a4ac:	910e      	str	r1, [sp, #56]	@ 0x38
 800a4ae:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 800a4b2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 800a4b6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 800a4ba:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 800a4be:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 800a4c2:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 800a4c6:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 800a4ca:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 800a4ce:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 800a4d2:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 800a4d6:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 800a4da:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 800a4de:	f04f 0800 	mov.w	r8, #0
 800a4e2:	f1be 0f00 	cmp.w	lr, #0
 800a4e6:	d030      	beq.n	800a54a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 800a4e8:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800a4ea:	4431      	add	r1, r6
 800a4ec:	4549      	cmp	r1, r9
 800a4ee:	4450      	add	r0, sl
 800a4f0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800a4f4:	ee37 7a04 	vadd.f32	s14, s14, s8
 800a4f8:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800a4fc:	db08      	blt.n	800a510 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 800a4fe:	ee77 7a85 	vadd.f32	s15, s15, s10
 800a502:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800a506:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a50a:	3001      	adds	r0, #1
 800a50c:	eba1 0109 	sub.w	r1, r1, r9
 800a510:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a514:	f04f 0801 	mov.w	r8, #1
 800a518:	e7e3      	b.n	800a4e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 800a51a:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800a51c:	4431      	add	r1, r6
 800a51e:	4541      	cmp	r1, r8
 800a520:	4450      	add	r0, sl
 800a522:	ee37 7a24 	vadd.f32	s14, s14, s9
 800a526:	ee77 7a84 	vadd.f32	s15, s15, s8
 800a52a:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800a52e:	db08      	blt.n	800a542 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 800a530:	ee76 6a85 	vadd.f32	s13, s13, s10
 800a534:	ee37 7a25 	vadd.f32	s14, s14, s11
 800a538:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a53c:	3001      	adds	r0, #1
 800a53e:	eba1 0108 	sub.w	r1, r1, r8
 800a542:	3f01      	subs	r7, #1
 800a544:	f04f 0901 	mov.w	r9, #1
 800a548:	e79e      	b.n	800a488 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 800a54a:	449c      	add	ip, r3
 800a54c:	1aff      	subs	r7, r7, r3
 800a54e:	f1b8 0f00 	cmp.w	r8, #0
 800a552:	d009      	beq.n	800a568 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 800a554:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 800a558:	9019      	str	r0, [sp, #100]	@ 0x64
 800a55a:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 800a55e:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 800a562:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 800a566:	911d      	str	r1, [sp, #116]	@ 0x74
 800a568:	1ad2      	subs	r2, r2, r3
 800a56a:	e6b5      	b.n	800a2d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800a56c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	b923      	cbnz	r3, 800a57c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800a572:	4b04      	ldr	r3, [pc, #16]	@ (800a584 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 800a574:	6818      	ldr	r0, [r3, #0]
 800a576:	6803      	ldr	r3, [r0, #0]
 800a578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a57a:	4798      	blx	r3
 800a57c:	b05b      	add	sp, #364	@ 0x16c
 800a57e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a582:	bf00      	nop
 800a584:	20012484 	.word	0x20012484

0800a588 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 800a588:	2b03      	cmp	r3, #3
 800a58a:	d818      	bhi.n	800a5be <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 800a58c:	e8df f003 	tbb	[pc, r3]
 800a590:	130d0602 	.word	0x130d0602
 800a594:	f9b0 2000 	ldrsh.w	r2, [r0]
 800a598:	1850      	adds	r0, r2, r1
 800a59a:	4770      	bx	lr
 800a59c:	8803      	ldrh	r3, [r0, #0]
 800a59e:	8880      	ldrh	r0, [r0, #4]
 800a5a0:	4418      	add	r0, r3
 800a5a2:	b200      	sxth	r0, r0
 800a5a4:	1a80      	subs	r0, r0, r2
 800a5a6:	3801      	subs	r0, #1
 800a5a8:	4770      	bx	lr
 800a5aa:	8803      	ldrh	r3, [r0, #0]
 800a5ac:	8880      	ldrh	r0, [r0, #4]
 800a5ae:	4418      	add	r0, r3
 800a5b0:	b200      	sxth	r0, r0
 800a5b2:	1a40      	subs	r0, r0, r1
 800a5b4:	e7f7      	b.n	800a5a6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 800a5b6:	f9b0 0000 	ldrsh.w	r0, [r0]
 800a5ba:	4410      	add	r0, r2
 800a5bc:	4770      	bx	lr
 800a5be:	2000      	movs	r0, #0
 800a5c0:	4770      	bx	lr

0800a5c2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 800a5c2:	2b03      	cmp	r3, #3
 800a5c4:	d817      	bhi.n	800a5f6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 800a5c6:	e8df f003 	tbb	[pc, r3]
 800a5ca:	0602      	.short	0x0602
 800a5cc:	1009      	.short	0x1009
 800a5ce:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800a5d2:	1850      	adds	r0, r2, r1
 800a5d4:	4770      	bx	lr
 800a5d6:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800a5da:	e7fa      	b.n	800a5d2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 800a5dc:	8843      	ldrh	r3, [r0, #2]
 800a5de:	88c0      	ldrh	r0, [r0, #6]
 800a5e0:	4418      	add	r0, r3
 800a5e2:	b200      	sxth	r0, r0
 800a5e4:	1a80      	subs	r0, r0, r2
 800a5e6:	3801      	subs	r0, #1
 800a5e8:	4770      	bx	lr
 800a5ea:	8843      	ldrh	r3, [r0, #2]
 800a5ec:	88c0      	ldrh	r0, [r0, #6]
 800a5ee:	4418      	add	r0, r3
 800a5f0:	b200      	sxth	r0, r0
 800a5f2:	1a40      	subs	r0, r0, r1
 800a5f4:	e7f7      	b.n	800a5e6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 800a5f6:	2000      	movs	r0, #0
 800a5f8:	4770      	bx	lr
	...

0800a5fc <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 800a5fc:	4b01      	ldr	r3, [pc, #4]	@ (800a604 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800a5fe:	2200      	movs	r2, #0
 800a600:	601a      	str	r2, [r3, #0]
 800a602:	4770      	bx	lr
 800a604:	2001248c 	.word	0x2001248c

0800a608 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 800a608:	4603      	mov	r3, r0
 800a60a:	b1c8      	cbz	r0, 800a640 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 800a60c:	0c02      	lsrs	r2, r0, #16
 800a60e:	0412      	lsls	r2, r2, #16
 800a610:	b9a2      	cbnz	r2, 800a63c <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 800a612:	0403      	lsls	r3, r0, #16
 800a614:	2010      	movs	r0, #16
 800a616:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 800a61a:	bf04      	itt	eq
 800a61c:	021b      	lsleq	r3, r3, #8
 800a61e:	3008      	addeq	r0, #8
 800a620:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 800a624:	bf04      	itt	eq
 800a626:	011b      	lsleq	r3, r3, #4
 800a628:	3004      	addeq	r0, #4
 800a62a:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 800a62e:	bf04      	itt	eq
 800a630:	009b      	lsleq	r3, r3, #2
 800a632:	3002      	addeq	r0, #2
 800a634:	2b00      	cmp	r3, #0
 800a636:	db04      	blt.n	800a642 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 800a638:	3001      	adds	r0, #1
 800a63a:	4770      	bx	lr
 800a63c:	2000      	movs	r0, #0
 800a63e:	e7ea      	b.n	800a616 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 800a640:	2020      	movs	r0, #32
 800a642:	4770      	bx	lr

0800a644 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 800a644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a648:	b087      	sub	sp, #28
 800a64a:	460d      	mov	r5, r1
 800a64c:	4616      	mov	r6, r2
 800a64e:	4698      	mov	r8, r3
 800a650:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 800a654:	4601      	mov	r1, r0
 800a656:	b120      	cbz	r0, 800a662 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800a658:	b11a      	cbz	r2, 800a662 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800a65a:	2d1f      	cmp	r5, #31
 800a65c:	d801      	bhi.n	800a662 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800a65e:	2b1f      	cmp	r3, #31
 800a660:	d904      	bls.n	800a66c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 800a662:	2000      	movs	r0, #0
 800a664:	6038      	str	r0, [r7, #0]
 800a666:	b007      	add	sp, #28
 800a668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a66c:	b97d      	cbnz	r5, 800a68e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 800a66e:	b143      	cbz	r3, 800a682 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 800a670:	4602      	mov	r2, r0
 800a672:	e9cd 4700 	strd	r4, r7, [sp]
 800a676:	462b      	mov	r3, r5
 800a678:	4641      	mov	r1, r8
 800a67a:	4630      	mov	r0, r6
 800a67c:	f7ff ffe2 	bl	800a644 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800a680:	e7f1      	b.n	800a666 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800a682:	f04f 33ff 	mov.w	r3, #4294967295
 800a686:	603b      	str	r3, [r7, #0]
 800a688:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 800a68c:	e7eb      	b.n	800a666 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800a68e:	fa32 fa05 	lsrs.w	sl, r2, r5
 800a692:	d106      	bne.n	800a6a2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 800a694:	4346      	muls	r6, r0
 800a696:	fbb6 f0f4 	udiv	r0, r6, r4
 800a69a:	fb04 6610 	mls	r6, r4, r0, r6
 800a69e:	603e      	str	r6, [r7, #0]
 800a6a0:	e7e1      	b.n	800a666 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	40aa      	lsls	r2, r5
 800a6a6:	3a01      	subs	r2, #1
 800a6a8:	4016      	ands	r6, r2
 800a6aa:	fa00 fb05 	lsl.w	fp, r0, r5
 800a6ae:	4630      	mov	r0, r6
 800a6b0:	fbbb f9f4 	udiv	r9, fp, r4
 800a6b4:	fb0a f309 	mul.w	r3, sl, r9
 800a6b8:	9303      	str	r3, [sp, #12]
 800a6ba:	f7ff ffa5 	bl	800a608 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800a6be:	462b      	mov	r3, r5
 800a6c0:	460a      	mov	r2, r1
 800a6c2:	e9cd 4700 	strd	r4, r7, [sp]
 800a6c6:	4601      	mov	r1, r0
 800a6c8:	4630      	mov	r0, r6
 800a6ca:	f7ff ffbb 	bl	800a644 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800a6ce:	fb04 b919 	mls	r9, r4, r9, fp
 800a6d2:	4606      	mov	r6, r0
 800a6d4:	4648      	mov	r0, r9
 800a6d6:	eb05 0108 	add.w	r1, r5, r8
 800a6da:	f7ff ff95 	bl	800a608 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800a6de:	ab05      	add	r3, sp, #20
 800a6e0:	e9cd 4300 	strd	r4, r3, [sp]
 800a6e4:	464a      	mov	r2, r9
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	4650      	mov	r0, sl
 800a6ea:	f7ff ffab 	bl	800a644 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800a6ee:	6839      	ldr	r1, [r7, #0]
 800a6f0:	9a05      	ldr	r2, [sp, #20]
 800a6f2:	9b03      	ldr	r3, [sp, #12]
 800a6f4:	4411      	add	r1, r2
 800a6f6:	fbb1 f2f4 	udiv	r2, r1, r4
 800a6fa:	18d3      	adds	r3, r2, r3
 800a6fc:	441e      	add	r6, r3
 800a6fe:	fb04 1412 	mls	r4, r4, r2, r1
 800a702:	4430      	add	r0, r6
 800a704:	603c      	str	r4, [r7, #0]
 800a706:	e7ae      	b.n	800a666 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

0800a708 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 800a708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a70c:	b085      	sub	sp, #20
 800a70e:	f1b0 0900 	subs.w	r9, r0, #0
 800a712:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800a714:	461d      	mov	r5, r3
 800a716:	bfbf      	itttt	lt
 800a718:	6823      	ldrlt	r3, [r4, #0]
 800a71a:	425b      	neglt	r3, r3
 800a71c:	f1c9 0900 	rsblt	r9, r9, #0
 800a720:	6023      	strlt	r3, [r4, #0]
 800a722:	bfb4      	ite	lt
 800a724:	f04f 36ff 	movlt.w	r6, #4294967295
 800a728:	2601      	movge	r6, #1
 800a72a:	2a00      	cmp	r2, #0
 800a72c:	4617      	mov	r7, r2
 800a72e:	da04      	bge.n	800a73a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 800a730:	6823      	ldr	r3, [r4, #0]
 800a732:	425b      	negs	r3, r3
 800a734:	4257      	negs	r7, r2
 800a736:	4276      	negs	r6, r6
 800a738:	6023      	str	r3, [r4, #0]
 800a73a:	2d00      	cmp	r5, #0
 800a73c:	4638      	mov	r0, r7
 800a73e:	bfba      	itte	lt
 800a740:	426d      	neglt	r5, r5
 800a742:	f04f 38ff 	movlt.w	r8, #4294967295
 800a746:	f04f 0801 	movge.w	r8, #1
 800a74a:	f7ff ff5d 	bl	800a608 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800a74e:	ab03      	add	r3, sp, #12
 800a750:	e9cd 5300 	strd	r5, r3, [sp]
 800a754:	463a      	mov	r2, r7
 800a756:	4603      	mov	r3, r0
 800a758:	4648      	mov	r0, r9
 800a75a:	f7ff ff73 	bl	800a644 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800a75e:	6823      	ldr	r3, [r4, #0]
 800a760:	9a03      	ldr	r2, [sp, #12]
 800a762:	4546      	cmp	r6, r8
 800a764:	441a      	add	r2, r3
 800a766:	fb92 f3f5 	sdiv	r3, r2, r5
 800a76a:	4418      	add	r0, r3
 800a76c:	bf18      	it	ne
 800a76e:	4240      	negne	r0, r0
 800a770:	fb05 2313 	mls	r3, r5, r3, r2
 800a774:	1c72      	adds	r2, r6, #1
 800a776:	6023      	str	r3, [r4, #0]
 800a778:	d105      	bne.n	800a786 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	f1c3 0200 	rsb	r2, r3, #0
 800a780:	db0b      	blt.n	800a79a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 800a782:	6022      	str	r2, [r4, #0]
 800a784:	e006      	b.n	800a794 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800a786:	2e01      	cmp	r6, #1
 800a788:	d104      	bne.n	800a794 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	da02      	bge.n	800a794 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800a78e:	442b      	add	r3, r5
 800a790:	3801      	subs	r0, #1
 800a792:	6023      	str	r3, [r4, #0]
 800a794:	b005      	add	sp, #20
 800a796:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a79a:	3801      	subs	r0, #1
 800a79c:	1b52      	subs	r2, r2, r5
 800a79e:	e7f0      	b.n	800a782 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

0800a7a0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 800a7a0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800a7a4:	4c1c      	ldr	r4, [pc, #112]	@ (800a818 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 800a7a6:	6807      	ldr	r7, [r0, #0]
 800a7a8:	69a3      	ldr	r3, [r4, #24]
 800a7aa:	4605      	mov	r5, r0
 800a7ac:	b92b      	cbnz	r3, 800a7ba <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 800a7ae:	6840      	ldr	r0, [r0, #4]
 800a7b0:	e9c5 7000 	strd	r7, r0, [r5]
 800a7b4:	b004      	add	sp, #16
 800a7b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7ba:	68a2      	ldr	r2, [r4, #8]
 800a7bc:	6820      	ldr	r0, [r4, #0]
 800a7be:	ae04      	add	r6, sp, #16
 800a7c0:	f04f 0802 	mov.w	r8, #2
 800a7c4:	fb93 f1f8 	sdiv	r1, r3, r8
 800a7c8:	440a      	add	r2, r1
 800a7ca:	f846 2d04 	str.w	r2, [r6, #-4]!
 800a7ce:	69e1      	ldr	r1, [r4, #28]
 800a7d0:	9600      	str	r6, [sp, #0]
 800a7d2:	463a      	mov	r2, r7
 800a7d4:	f7ff ff98 	bl	800a708 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800a7d8:	69a3      	ldr	r3, [r4, #24]
 800a7da:	686a      	ldr	r2, [r5, #4]
 800a7dc:	6a21      	ldr	r1, [r4, #32]
 800a7de:	9600      	str	r6, [sp, #0]
 800a7e0:	4607      	mov	r7, r0
 800a7e2:	6860      	ldr	r0, [r4, #4]
 800a7e4:	f7ff ff90 	bl	800a708 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800a7e8:	6962      	ldr	r2, [r4, #20]
 800a7ea:	69a3      	ldr	r3, [r4, #24]
 800a7ec:	fb93 f8f8 	sdiv	r8, r3, r8
 800a7f0:	4442      	add	r2, r8
 800a7f2:	9203      	str	r2, [sp, #12]
 800a7f4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800a7f6:	682a      	ldr	r2, [r5, #0]
 800a7f8:	9600      	str	r6, [sp, #0]
 800a7fa:	4407      	add	r7, r0
 800a7fc:	68e0      	ldr	r0, [r4, #12]
 800a7fe:	f7ff ff83 	bl	800a708 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800a802:	9600      	str	r6, [sp, #0]
 800a804:	4680      	mov	r8, r0
 800a806:	69a3      	ldr	r3, [r4, #24]
 800a808:	686a      	ldr	r2, [r5, #4]
 800a80a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800a80c:	6920      	ldr	r0, [r4, #16]
 800a80e:	f7ff ff7b 	bl	800a708 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800a812:	4440      	add	r0, r8
 800a814:	e7cc      	b.n	800a7b0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 800a816:	bf00      	nop
 800a818:	20012490 	.word	0x20012490

0800a81c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 800a81c:	4b07      	ldr	r3, [pc, #28]	@ (800a83c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 800a81e:	781b      	ldrb	r3, [r3, #0]
 800a820:	2b01      	cmp	r3, #1
 800a822:	d109      	bne.n	800a838 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 800a824:	f9b1 3000 	ldrsh.w	r3, [r1]
 800a828:	f9b0 2000 	ldrsh.w	r2, [r0]
 800a82c:	8003      	strh	r3, [r0, #0]
 800a82e:	4b04      	ldr	r3, [pc, #16]	@ (800a840 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 800a830:	881b      	ldrh	r3, [r3, #0]
 800a832:	3b01      	subs	r3, #1
 800a834:	1a9b      	subs	r3, r3, r2
 800a836:	800b      	strh	r3, [r1, #0]
 800a838:	4770      	bx	lr
 800a83a:	bf00      	nop
 800a83c:	2001247c 	.word	0x2001247c
 800a840:	20012478 	.word	0x20012478

0800a844 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 800a844:	b510      	push	{r4, lr}
 800a846:	4b07      	ldr	r3, [pc, #28]	@ (800a864 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 800a848:	781b      	ldrb	r3, [r3, #0]
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	d108      	bne.n	800a860 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 800a84e:	4b06      	ldr	r3, [pc, #24]	@ (800a868 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 800a850:	880c      	ldrh	r4, [r1, #0]
 800a852:	881b      	ldrh	r3, [r3, #0]
 800a854:	f9b0 2000 	ldrsh.w	r2, [r0]
 800a858:	3b01      	subs	r3, #1
 800a85a:	1b1b      	subs	r3, r3, r4
 800a85c:	8003      	strh	r3, [r0, #0]
 800a85e:	800a      	strh	r2, [r1, #0]
 800a860:	bd10      	pop	{r4, pc}
 800a862:	bf00      	nop
 800a864:	2001247c 	.word	0x2001247c
 800a868:	20012478 	.word	0x20012478

0800a86c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 800a86c:	b510      	push	{r4, lr}
 800a86e:	4b0a      	ldr	r3, [pc, #40]	@ (800a898 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 800a870:	781b      	ldrb	r3, [r3, #0]
 800a872:	2b01      	cmp	r3, #1
 800a874:	d10e      	bne.n	800a894 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 800a876:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800a87a:	8843      	ldrh	r3, [r0, #2]
 800a87c:	f9b0 4000 	ldrsh.w	r4, [r0]
 800a880:	8044      	strh	r4, [r0, #2]
 800a882:	18ca      	adds	r2, r1, r3
 800a884:	4b05      	ldr	r3, [pc, #20]	@ (800a89c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 800a886:	881b      	ldrh	r3, [r3, #0]
 800a888:	1a9b      	subs	r3, r3, r2
 800a88a:	8003      	strh	r3, [r0, #0]
 800a88c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800a890:	80c3      	strh	r3, [r0, #6]
 800a892:	8081      	strh	r1, [r0, #4]
 800a894:	bd10      	pop	{r4, pc}
 800a896:	bf00      	nop
 800a898:	2001247c 	.word	0x2001247c
 800a89c:	20012478 	.word	0x20012478

0800a8a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 800a8a0:	4b08      	ldr	r3, [pc, #32]	@ (800a8c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 800a8a2:	781b      	ldrb	r3, [r3, #0]
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	d10c      	bne.n	800a8c2 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 800a8a8:	8803      	ldrh	r3, [r0, #0]
 800a8aa:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 800a8ae:	8842      	ldrh	r2, [r0, #2]
 800a8b0:	8002      	strh	r2, [r0, #0]
 800a8b2:	185a      	adds	r2, r3, r1
 800a8b4:	4b04      	ldr	r3, [pc, #16]	@ (800a8c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 800a8b6:	881b      	ldrh	r3, [r3, #0]
 800a8b8:	1a9b      	subs	r3, r3, r2
 800a8ba:	8043      	strh	r3, [r0, #2]
 800a8bc:	88c3      	ldrh	r3, [r0, #6]
 800a8be:	8083      	strh	r3, [r0, #4]
 800a8c0:	80c1      	strh	r1, [r0, #6]
 800a8c2:	4770      	bx	lr
 800a8c4:	2001247c 	.word	0x2001247c
 800a8c8:	20012478 	.word	0x20012478

0800a8cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 800a8cc:	b510      	push	{r4, lr}
 800a8ce:	4b07      	ldr	r3, [pc, #28]	@ (800a8ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	2b01      	cmp	r3, #1
 800a8d4:	d108      	bne.n	800a8e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 800a8d6:	f9b1 3000 	ldrsh.w	r3, [r1]
 800a8da:	f9b0 4000 	ldrsh.w	r4, [r0]
 800a8de:	8003      	strh	r3, [r0, #0]
 800a8e0:	8893      	ldrh	r3, [r2, #4]
 800a8e2:	3b01      	subs	r3, #1
 800a8e4:	1b1b      	subs	r3, r3, r4
 800a8e6:	800b      	strh	r3, [r1, #0]
 800a8e8:	bd10      	pop	{r4, pc}
 800a8ea:	bf00      	nop
 800a8ec:	2001247c 	.word	0x2001247c

0800a8f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 800a8f0:	b510      	push	{r4, lr}
 800a8f2:	4b0a      	ldr	r3, [pc, #40]	@ (800a91c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 800a8f4:	781b      	ldrb	r3, [r3, #0]
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	460a      	mov	r2, r1
 800a8fa:	d10d      	bne.n	800a918 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 800a8fc:	8881      	ldrh	r1, [r0, #4]
 800a8fe:	8803      	ldrh	r3, [r0, #0]
 800a900:	440b      	add	r3, r1
 800a902:	4601      	mov	r1, r0
 800a904:	3b01      	subs	r3, #1
 800a906:	f821 3b02 	strh.w	r3, [r1], #2
 800a90a:	f7ff ffdf 	bl	800a8cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 800a90e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800a912:	88c2      	ldrh	r2, [r0, #6]
 800a914:	8082      	strh	r2, [r0, #4]
 800a916:	80c3      	strh	r3, [r0, #6]
 800a918:	bd10      	pop	{r4, pc}
 800a91a:	bf00      	nop
 800a91c:	2001247c 	.word	0x2001247c

0800a920 <_ZN8touchgfx11Application13requestRedrawEv>:
 800a920:	4b06      	ldr	r3, [pc, #24]	@ (800a93c <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 800a922:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a926:	4b06      	ldr	r3, [pc, #24]	@ (800a940 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 800a928:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 800a92c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a930:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 800a934:	2100      	movs	r1, #0
 800a936:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 800a93a:	4770      	bx	lr
 800a93c:	20012478 	.word	0x20012478
 800a940:	2001247a 	.word	0x2001247a

0800a944 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 800a944:	4b03      	ldr	r3, [pc, #12]	@ (800a954 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 800a946:	6818      	ldr	r0, [r3, #0]
 800a948:	b110      	cbz	r0, 800a950 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 800a94a:	6803      	ldr	r3, [r0, #0]
 800a94c:	699b      	ldr	r3, [r3, #24]
 800a94e:	4718      	bx	r3
 800a950:	4770      	bx	lr
 800a952:	bf00      	nop
 800a954:	200124c0 	.word	0x200124c0

0800a958 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 800a958:	4770      	bx	lr
	...

0800a95c <_ZN8touchgfx11Application4drawEv>:
 800a95c:	b507      	push	{r0, r1, r2, lr}
 800a95e:	4b09      	ldr	r3, [pc, #36]	@ (800a984 <_ZN8touchgfx11Application4drawEv+0x28>)
 800a960:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a964:	4b08      	ldr	r3, [pc, #32]	@ (800a988 <_ZN8touchgfx11Application4drawEv+0x2c>)
 800a966:	f8ad 2004 	strh.w	r2, [sp, #4]
 800a96a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a96e:	f8ad 3006 	strh.w	r3, [sp, #6]
 800a972:	6803      	ldr	r3, [r0, #0]
 800a974:	2100      	movs	r1, #0
 800a976:	9100      	str	r1, [sp, #0]
 800a978:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a97a:	4669      	mov	r1, sp
 800a97c:	4798      	blx	r3
 800a97e:	b003      	add	sp, #12
 800a980:	f85d fb04 	ldr.w	pc, [sp], #4
 800a984:	20012478 	.word	0x20012478
 800a988:	2001247a 	.word	0x2001247a

0800a98c <_ZN8touchgfx11Application10invalidateEv>:
 800a98c:	4b09      	ldr	r3, [pc, #36]	@ (800a9b4 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 800a98e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a992:	4b09      	ldr	r3, [pc, #36]	@ (800a9b8 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 800a994:	b082      	sub	sp, #8
 800a996:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a99a:	f8ad 2004 	strh.w	r2, [sp, #4]
 800a99e:	2100      	movs	r1, #0
 800a9a0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800a9a4:	9100      	str	r1, [sp, #0]
 800a9a6:	6803      	ldr	r3, [r0, #0]
 800a9a8:	aa02      	add	r2, sp, #8
 800a9aa:	e912 0006 	ldmdb	r2, {r1, r2}
 800a9ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9b0:	b002      	add	sp, #8
 800a9b2:	4718      	bx	r3
 800a9b4:	20012478 	.word	0x20012478
 800a9b8:	2001247a 	.word	0x2001247a

0800a9bc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 800a9bc:	4b03      	ldr	r3, [pc, #12]	@ (800a9cc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 800a9be:	6818      	ldr	r0, [r3, #0]
 800a9c0:	b110      	cbz	r0, 800a9c8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 800a9c2:	6803      	ldr	r3, [r0, #0]
 800a9c4:	69db      	ldr	r3, [r3, #28]
 800a9c6:	4718      	bx	r3
 800a9c8:	4770      	bx	lr
 800a9ca:	bf00      	nop
 800a9cc:	200124c0 	.word	0x200124c0

0800a9d0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 800a9d0:	4b03      	ldr	r3, [pc, #12]	@ (800a9e0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 800a9d2:	6818      	ldr	r0, [r3, #0]
 800a9d4:	b110      	cbz	r0, 800a9dc <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 800a9d6:	6803      	ldr	r3, [r0, #0]
 800a9d8:	6a1b      	ldr	r3, [r3, #32]
 800a9da:	4718      	bx	r3
 800a9dc:	4770      	bx	lr
 800a9de:	bf00      	nop
 800a9e0:	200124c0 	.word	0x200124c0

0800a9e4 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 800a9ea:	4770      	bx	lr

0800a9ec <_ZN8touchgfx11Application14handleKeyEventEh>:
 800a9ec:	4b03      	ldr	r3, [pc, #12]	@ (800a9fc <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 800a9ee:	6818      	ldr	r0, [r3, #0]
 800a9f0:	b110      	cbz	r0, 800a9f8 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 800a9f2:	6803      	ldr	r3, [r0, #0]
 800a9f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9f6:	4718      	bx	r3
 800a9f8:	4770      	bx	lr
 800a9fa:	bf00      	nop
 800a9fc:	200124c0 	.word	0x200124c0

0800aa00 <_ZN8touchgfx11ApplicationD1Ev>:
 800aa00:	4770      	bx	lr

0800aa02 <_ZN8touchgfx11ApplicationD0Ev>:
 800aa02:	b510      	push	{r4, lr}
 800aa04:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 800aa08:	4604      	mov	r4, r0
 800aa0a:	f005 fc35 	bl	8010278 <_ZdlPvj>
 800aa0e:	4620      	mov	r0, r4
 800aa10:	bd10      	pop	{r4, pc}

0800aa12 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 800aa12:	b510      	push	{r4, lr}
 800aa14:	f9b1 4000 	ldrsh.w	r4, [r1]
 800aa18:	888a      	ldrh	r2, [r1, #4]
 800aa1a:	f9b0 3000 	ldrsh.w	r3, [r0]
 800aa1e:	4422      	add	r2, r4
 800aa20:	b212      	sxth	r2, r2
 800aa22:	4293      	cmp	r3, r2
 800aa24:	da15      	bge.n	800aa52 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800aa26:	8882      	ldrh	r2, [r0, #4]
 800aa28:	4413      	add	r3, r2
 800aa2a:	b21b      	sxth	r3, r3
 800aa2c:	429c      	cmp	r4, r3
 800aa2e:	da10      	bge.n	800aa52 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800aa30:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800aa34:	88c9      	ldrh	r1, [r1, #6]
 800aa36:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800aa3a:	4419      	add	r1, r3
 800aa3c:	b209      	sxth	r1, r1
 800aa3e:	428a      	cmp	r2, r1
 800aa40:	da07      	bge.n	800aa52 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800aa42:	88c0      	ldrh	r0, [r0, #6]
 800aa44:	4410      	add	r0, r2
 800aa46:	b200      	sxth	r0, r0
 800aa48:	4283      	cmp	r3, r0
 800aa4a:	bfac      	ite	ge
 800aa4c:	2000      	movge	r0, #0
 800aa4e:	2001      	movlt	r0, #1
 800aa50:	bd10      	pop	{r4, pc}
 800aa52:	2000      	movs	r0, #0
 800aa54:	e7fc      	b.n	800aa50 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0800aa56 <_ZN8touchgfx4Rect10restrictToEss>:
 800aa56:	f9b0 3000 	ldrsh.w	r3, [r0]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	b510      	push	{r4, lr}
 800aa5e:	da04      	bge.n	800aa6a <_ZN8touchgfx4Rect10restrictToEss+0x14>
 800aa60:	8884      	ldrh	r4, [r0, #4]
 800aa62:	4423      	add	r3, r4
 800aa64:	8083      	strh	r3, [r0, #4]
 800aa66:	2300      	movs	r3, #0
 800aa68:	8003      	strh	r3, [r0, #0]
 800aa6a:	f9b0 4000 	ldrsh.w	r4, [r0]
 800aa6e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800aa72:	1b09      	subs	r1, r1, r4
 800aa74:	428b      	cmp	r3, r1
 800aa76:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800aa7a:	bfc8      	it	gt
 800aa7c:	8081      	strhgt	r1, [r0, #4]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	da04      	bge.n	800aa8c <_ZN8touchgfx4Rect10restrictToEss+0x36>
 800aa82:	88c1      	ldrh	r1, [r0, #6]
 800aa84:	440b      	add	r3, r1
 800aa86:	80c3      	strh	r3, [r0, #6]
 800aa88:	2300      	movs	r3, #0
 800aa8a:	8043      	strh	r3, [r0, #2]
 800aa8c:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800aa90:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800aa94:	1a52      	subs	r2, r2, r1
 800aa96:	4293      	cmp	r3, r2
 800aa98:	bfc8      	it	gt
 800aa9a:	80c2      	strhgt	r2, [r0, #6]
 800aa9c:	bd10      	pop	{r4, pc}
	...

0800aaa0 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 800aaa0:	b510      	push	{r4, lr}
 800aaa2:	4b10      	ldr	r3, [pc, #64]	@ (800aae4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 800aaa4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800aaa8:	4b0f      	ldr	r3, [pc, #60]	@ (800aae8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 800aaaa:	460c      	mov	r4, r1
 800aaac:	4620      	mov	r0, r4
 800aaae:	f9b3 1000 	ldrsh.w	r1, [r3]
 800aab2:	f7ff ffd0 	bl	800aa56 <_ZN8touchgfx4Rect10restrictToEss>
 800aab6:	4b0d      	ldr	r3, [pc, #52]	@ (800aaec <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 800aab8:	6818      	ldr	r0, [r3, #0]
 800aaba:	b190      	cbz	r0, 800aae2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 800aabc:	6803      	ldr	r3, [r0, #0]
 800aabe:	4621      	mov	r1, r4
 800aac0:	689b      	ldr	r3, [r3, #8]
 800aac2:	4798      	blx	r3
 800aac4:	4b0a      	ldr	r3, [pc, #40]	@ (800aaf0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 800aac6:	6818      	ldr	r0, [r3, #0]
 800aac8:	b118      	cbz	r0, 800aad2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 800aaca:	6803      	ldr	r3, [r0, #0]
 800aacc:	4621      	mov	r1, r4
 800aace:	689b      	ldr	r3, [r3, #8]
 800aad0:	4798      	blx	r3
 800aad2:	4b08      	ldr	r3, [pc, #32]	@ (800aaf4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 800aad4:	6818      	ldr	r0, [r3, #0]
 800aad6:	6803      	ldr	r3, [r0, #0]
 800aad8:	4621      	mov	r1, r4
 800aada:	69db      	ldr	r3, [r3, #28]
 800aadc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aae0:	4718      	bx	r3
 800aae2:	bd10      	pop	{r4, pc}
 800aae4:	2001247a 	.word	0x2001247a
 800aae8:	20012478 	.word	0x20012478
 800aaec:	200124c0 	.word	0x200124c0
 800aaf0:	200124bc 	.word	0x200124bc
 800aaf4:	20012484 	.word	0x20012484

0800aaf8 <_ZNK8touchgfx4Rect8includesERKS0_>:
 800aaf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aafa:	4606      	mov	r6, r0
 800aafc:	4608      	mov	r0, r1
 800aafe:	460f      	mov	r7, r1
 800ab00:	f7fd fee5 	bl	80088ce <_ZNK8touchgfx4Rect7isEmptyEv>
 800ab04:	b9e8      	cbnz	r0, 800ab42 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800ab06:	f9b7 5000 	ldrsh.w	r5, [r7]
 800ab0a:	f9b6 4000 	ldrsh.w	r4, [r6]
 800ab0e:	42a5      	cmp	r5, r4
 800ab10:	db17      	blt.n	800ab42 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800ab12:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800ab16:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	db11      	blt.n	800ab42 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800ab1e:	88b9      	ldrh	r1, [r7, #4]
 800ab20:	440d      	add	r5, r1
 800ab22:	88b1      	ldrh	r1, [r6, #4]
 800ab24:	440c      	add	r4, r1
 800ab26:	b22d      	sxth	r5, r5
 800ab28:	b224      	sxth	r4, r4
 800ab2a:	42a5      	cmp	r5, r4
 800ab2c:	dc09      	bgt.n	800ab42 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800ab2e:	88f8      	ldrh	r0, [r7, #6]
 800ab30:	4410      	add	r0, r2
 800ab32:	88f2      	ldrh	r2, [r6, #6]
 800ab34:	4413      	add	r3, r2
 800ab36:	b200      	sxth	r0, r0
 800ab38:	b21b      	sxth	r3, r3
 800ab3a:	4298      	cmp	r0, r3
 800ab3c:	bfcc      	ite	gt
 800ab3e:	2000      	movgt	r0, #0
 800ab40:	2001      	movle	r0, #1
 800ab42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ab44 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 800ab44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab46:	4604      	mov	r4, r0
 800ab48:	4608      	mov	r0, r1
 800ab4a:	460d      	mov	r5, r1
 800ab4c:	f7fd febf 	bl	80088ce <_ZNK8touchgfx4Rect7isEmptyEv>
 800ab50:	b978      	cbnz	r0, 800ab72 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 800ab52:	4620      	mov	r0, r4
 800ab54:	f7fd febb 	bl	80088ce <_ZNK8touchgfx4Rect7isEmptyEv>
 800ab58:	f9b5 6000 	ldrsh.w	r6, [r5]
 800ab5c:	b150      	cbz	r0, 800ab74 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 800ab5e:	8026      	strh	r6, [r4, #0]
 800ab60:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800ab64:	8063      	strh	r3, [r4, #2]
 800ab66:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800ab6a:	80a3      	strh	r3, [r4, #4]
 800ab6c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800ab70:	80e3      	strh	r3, [r4, #6]
 800ab72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab74:	f9b4 1000 	ldrsh.w	r1, [r4]
 800ab78:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800ab7c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800ab80:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800ab84:	88ed      	ldrh	r5, [r5, #6]
 800ab86:	42b1      	cmp	r1, r6
 800ab88:	460f      	mov	r7, r1
 800ab8a:	bfa8      	it	ge
 800ab8c:	4637      	movge	r7, r6
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	4618      	mov	r0, r3
 800ab92:	4466      	add	r6, ip
 800ab94:	bfa8      	it	ge
 800ab96:	4610      	movge	r0, r2
 800ab98:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800ab9c:	8027      	strh	r7, [r4, #0]
 800ab9e:	442a      	add	r2, r5
 800aba0:	88e5      	ldrh	r5, [r4, #6]
 800aba2:	8060      	strh	r0, [r4, #2]
 800aba4:	4461      	add	r1, ip
 800aba6:	442b      	add	r3, r5
 800aba8:	b236      	sxth	r6, r6
 800abaa:	b209      	sxth	r1, r1
 800abac:	b212      	sxth	r2, r2
 800abae:	b21b      	sxth	r3, r3
 800abb0:	428e      	cmp	r6, r1
 800abb2:	bfac      	ite	ge
 800abb4:	ebc7 0106 	rsbge	r1, r7, r6
 800abb8:	ebc7 0101 	rsblt	r1, r7, r1
 800abbc:	429a      	cmp	r2, r3
 800abbe:	bfac      	ite	ge
 800abc0:	ebc0 0202 	rsbge	r2, r0, r2
 800abc4:	ebc0 0203 	rsblt	r2, r0, r3
 800abc8:	80a1      	strh	r1, [r4, #4]
 800abca:	80e2      	strh	r2, [r4, #6]
 800abcc:	e7d1      	b.n	800ab72 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0800abd0 <_ZN8touchgfx11Application11getInstanceEv>:
 800abd0:	4b01      	ldr	r3, [pc, #4]	@ (800abd8 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 800abd2:	6818      	ldr	r0, [r3, #0]
 800abd4:	4770      	bx	lr
 800abd6:	bf00      	nop
 800abd8:	200124d0 	.word	0x200124d0

0800abdc <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>:
 800abdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abde:	4b10      	ldr	r3, [pc, #64]	@ (800ac20 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x44>)
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	4605      	mov	r5, r0
 800abe4:	b1d3      	cbz	r3, 800ac1c <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x40>
 800abe6:	4b0f      	ldr	r3, [pc, #60]	@ (800ac24 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x48>)
 800abe8:	4f0f      	ldr	r7, [pc, #60]	@ (800ac28 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x4c>)
 800abea:	881c      	ldrh	r4, [r3, #0]
 800abec:	f100 06ee 	add.w	r6, r0, #238	@ 0xee
 800abf0:	f8b5 312e 	ldrh.w	r3, [r5, #302]	@ 0x12e
 800abf4:	42a3      	cmp	r3, r4
 800abf6:	d90e      	bls.n	800ac16 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x3a>
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800abfe:	b10a      	cbz	r2, 800ac04 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x28>
 800ac00:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800ac02:	b900      	cbnz	r0, 800ac06 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x2a>
 800ac04:	6898      	ldr	r0, [r3, #8]
 800ac06:	6803      	ldr	r3, [r0, #0]
 800ac08:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
 800ac0c:	69db      	ldr	r3, [r3, #28]
 800ac0e:	3401      	adds	r4, #1
 800ac10:	4798      	blx	r3
 800ac12:	b2a4      	uxth	r4, r4
 800ac14:	e7ec      	b.n	800abf0 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x14>
 800ac16:	2300      	movs	r3, #0
 800ac18:	f8a5 312e 	strh.w	r3, [r5, #302]	@ 0x12e
 800ac1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac1e:	bf00      	nop
 800ac20:	20012482 	.word	0x20012482
 800ac24:	2000008c 	.word	0x2000008c
 800ac28:	20012484 	.word	0x20012484

0800ac2c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 800ac2c:	b510      	push	{r4, lr}
 800ac2e:	2300      	movs	r3, #0
 800ac30:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 800ac34:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 800ac38:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 800ac3c:	4604      	mov	r4, r0
 800ac3e:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 800ac42:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d90e      	bls.n	800ac68 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 800ac4a:	18e2      	adds	r2, r4, r3
 800ac4c:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 800ac50:	b122      	cbz	r2, 800ac5c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 800ac52:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800ac56:	6803      	ldr	r3, [r0, #0]
 800ac58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac5a:	4798      	blx	r3
 800ac5c:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 800ac60:	3301      	adds	r3, #1
 800ac62:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 800ac66:	e7ea      	b.n	800ac3e <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 800ac68:	bd10      	pop	{r4, pc}

0800ac6a <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 800ac70:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 800ac74:	30a4      	adds	r0, #164	@ 0xa4
 800ac76:	f802 3b01 	strb.w	r3, [r2], #1
 800ac7a:	4282      	cmp	r2, r0
 800ac7c:	d1fb      	bne.n	800ac76 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 800ac7e:	4770      	bx	lr

0800ac80 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 800ac80:	b570      	push	{r4, r5, r6, lr}
 800ac82:	4c0b      	ldr	r4, [pc, #44]	@ (800acb0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 800ac84:	4605      	mov	r5, r0
 800ac86:	6820      	ldr	r0, [r4, #0]
 800ac88:	460e      	mov	r6, r1
 800ac8a:	b110      	cbz	r0, 800ac92 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 800ac8c:	6803      	ldr	r3, [r0, #0]
 800ac8e:	695b      	ldr	r3, [r3, #20]
 800ac90:	4798      	blx	r3
 800ac92:	1d28      	adds	r0, r5, #4
 800ac94:	f7ff ffe9 	bl	800ac6a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800ac98:	6026      	str	r6, [r4, #0]
 800ac9a:	6833      	ldr	r3, [r6, #0]
 800ac9c:	4630      	mov	r0, r6
 800ac9e:	68db      	ldr	r3, [r3, #12]
 800aca0:	4798      	blx	r3
 800aca2:	682b      	ldr	r3, [r5, #0]
 800aca4:	4628      	mov	r0, r5
 800aca6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aca8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800acac:	4718      	bx	r3
 800acae:	bf00      	nop
 800acb0:	200124c0 	.word	0x200124c0

0800acb4 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 800acb4:	2300      	movs	r3, #0
 800acb6:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 800acba:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 800acbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acc0:	461a      	mov	r2, r3
 800acc2:	461c      	mov	r4, r3
 800acc4:	461d      	mov	r5, r3
 800acc6:	459c      	cmp	ip, r3
 800acc8:	dd1a      	ble.n	800ad00 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 800acca:	18c6      	adds	r6, r0, r3
 800accc:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 800acd0:	b16e      	cbz	r6, 800acee <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 800acd2:	429a      	cmp	r2, r3
 800acd4:	d008      	beq.n	800ace8 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 800acd6:	fa1f fe82 	uxth.w	lr, r2
 800acda:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 800acde:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 800ace2:	1887      	adds	r7, r0, r2
 800ace4:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 800ace8:	3201      	adds	r2, #1
 800acea:	3301      	adds	r3, #1
 800acec:	e7eb      	b.n	800acc6 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 800acee:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 800acf2:	4299      	cmp	r1, r3
 800acf4:	bfa8      	it	ge
 800acf6:	3501      	addge	r5, #1
 800acf8:	429e      	cmp	r6, r3
 800acfa:	bfc8      	it	gt
 800acfc:	3401      	addgt	r4, #1
 800acfe:	e7f4      	b.n	800acea <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 800ad00:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 800ad04:	1b49      	subs	r1, r1, r5
 800ad06:	1b1b      	subs	r3, r3, r4
 800ad08:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 800ad0c:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 800ad10:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 800ad14:	4293      	cmp	r3, r2
 800ad16:	dd03      	ble.n	800ad20 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 800ad18:	3b01      	subs	r3, #1
 800ad1a:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 800ad1e:	e7f7      	b.n	800ad10 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 800ad20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800ad24 <_ZN8touchgfx11Application15handleTickEventEv>:
 800ad24:	b570      	push	{r4, r5, r6, lr}
 800ad26:	4d16      	ldr	r5, [pc, #88]	@ (800ad80 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 800ad28:	4604      	mov	r4, r0
 800ad2a:	6828      	ldr	r0, [r5, #0]
 800ad2c:	b140      	cbz	r0, 800ad40 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800ad2e:	7a03      	ldrb	r3, [r0, #8]
 800ad30:	b933      	cbnz	r3, 800ad40 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800ad32:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 800ad36:	6803      	ldr	r3, [r0, #0]
 800ad38:	689b      	ldr	r3, [r3, #8]
 800ad3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ad3e:	4718      	bx	r3
 800ad40:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 800ad44:	4e0f      	ldr	r6, [pc, #60]	@ (800ad84 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 800ad46:	b973      	cbnz	r3, 800ad66 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800ad48:	b168      	cbz	r0, 800ad66 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800ad4a:	7a03      	ldrb	r3, [r0, #8]
 800ad4c:	b15b      	cbz	r3, 800ad66 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800ad4e:	6830      	ldr	r0, [r6, #0]
 800ad50:	b110      	cbz	r0, 800ad58 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 800ad52:	6803      	ldr	r3, [r0, #0]
 800ad54:	691b      	ldr	r3, [r3, #16]
 800ad56:	4798      	blx	r3
 800ad58:	6828      	ldr	r0, [r5, #0]
 800ad5a:	6803      	ldr	r3, [r0, #0]
 800ad5c:	68db      	ldr	r3, [r3, #12]
 800ad5e:	4798      	blx	r3
 800ad60:	2301      	movs	r3, #1
 800ad62:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 800ad66:	3404      	adds	r4, #4
 800ad68:	4620      	mov	r0, r4
 800ad6a:	f7ff ff5f 	bl	800ac2c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 800ad6e:	4620      	mov	r0, r4
 800ad70:	f7ff ffa0 	bl	800acb4 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 800ad74:	6830      	ldr	r0, [r6, #0]
 800ad76:	b110      	cbz	r0, 800ad7e <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 800ad78:	6803      	ldr	r3, [r0, #0]
 800ad7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad7c:	e7dd      	b.n	800ad3a <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 800ad7e:	bd70      	pop	{r4, r5, r6, pc}
 800ad80:	200124c4 	.word	0x200124c4
 800ad84:	200124c0 	.word	0x200124c0

0800ad88 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 800ad88:	4603      	mov	r3, r0
 800ad8a:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 800ad8e:	2200      	movs	r2, #0
 800ad90:	801a      	strh	r2, [r3, #0]
 800ad92:	805a      	strh	r2, [r3, #2]
 800ad94:	809a      	strh	r2, [r3, #4]
 800ad96:	80da      	strh	r2, [r3, #6]
 800ad98:	3308      	adds	r3, #8
 800ad9a:	428b      	cmp	r3, r1
 800ad9c:	d1f8      	bne.n	800ad90 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 800ad9e:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 800ada2:	4770      	bx	lr

0800ada4 <_ZN8touchgfx11ApplicationC1Ev>:
 800ada4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ada6:	4606      	mov	r6, r0
 800ada8:	4b1c      	ldr	r3, [pc, #112]	@ (800ae1c <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 800adaa:	f846 3b04 	str.w	r3, [r6], #4
 800adae:	4604      	mov	r4, r0
 800adb0:	2500      	movs	r5, #0
 800adb2:	22a8      	movs	r2, #168	@ 0xa8
 800adb4:	2100      	movs	r1, #0
 800adb6:	4630      	mov	r0, r6
 800adb8:	f005 fc93 	bl	80106e2 <memset>
 800adbc:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 800adc0:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 800adc4:	f7ff ffe0 	bl	800ad88 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800adc8:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 800adcc:	f7ff ffdc 	bl	800ad88 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800add0:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 800add4:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 800add8:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 800addc:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 800ade0:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 800ade4:	490e      	ldr	r1, [pc, #56]	@ (800ae20 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 800ade6:	480f      	ldr	r0, [pc, #60]	@ (800ae24 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 800ade8:	4f0f      	ldr	r7, [pc, #60]	@ (800ae28 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 800adea:	f005 f8fd 	bl	800ffe8 <CRC_Lock>
 800adee:	4b0f      	ldr	r3, [pc, #60]	@ (800ae2c <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 800adf0:	b158      	cbz	r0, 800ae0a <_ZN8touchgfx11ApplicationC1Ev+0x66>
 800adf2:	801d      	strh	r5, [r3, #0]
 800adf4:	4a0e      	ldr	r2, [pc, #56]	@ (800ae30 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 800adf6:	2300      	movs	r3, #0
 800adf8:	6013      	str	r3, [r2, #0]
 800adfa:	4a0e      	ldr	r2, [pc, #56]	@ (800ae34 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 800adfc:	603b      	str	r3, [r7, #0]
 800adfe:	4630      	mov	r0, r6
 800ae00:	6013      	str	r3, [r2, #0]
 800ae02:	f7ff ff32 	bl	800ac6a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800ae06:	4620      	mov	r0, r4
 800ae08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ae0e:	2002      	movs	r0, #2
 800ae10:	801a      	strh	r2, [r3, #0]
 800ae12:	6038      	str	r0, [r7, #0]
 800ae14:	f001 fa5a 	bl	800c2cc <_ZN8touchgfx6Screen4drawEv>
 800ae18:	e7ec      	b.n	800adf4 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 800ae1a:	bf00      	nop
 800ae1c:	080127fc 	.word	0x080127fc
 800ae20:	b5e8b5cd 	.word	0xb5e8b5cd
 800ae24:	f407a5c2 	.word	0xf407a5c2
 800ae28:	200124c0 	.word	0x200124c0
 800ae2c:	2000008c 	.word	0x2000008c
 800ae30:	200124d0 	.word	0x200124d0
 800ae34:	200124c4 	.word	0x200124c4

0800ae38 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 800ae38:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 800ae3c:	3b01      	subs	r3, #1
 800ae3e:	b29b      	uxth	r3, r3
 800ae40:	428b      	cmp	r3, r1
 800ae42:	b510      	push	{r4, lr}
 800ae44:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 800ae48:	d908      	bls.n	800ae5c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 800ae4a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800ae4e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 800ae52:	681a      	ldr	r2, [r3, #0]
 800ae54:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 800ae58:	685a      	ldr	r2, [r3, #4]
 800ae5a:	6062      	str	r2, [r4, #4]
 800ae5c:	bd10      	pop	{r4, pc}
	...

0800ae60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 800ae60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae64:	4b8f      	ldr	r3, [pc, #572]	@ (800b0a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 800ae66:	b08f      	sub	sp, #60	@ 0x3c
 800ae68:	ac0a      	add	r4, sp, #40	@ 0x28
 800ae6a:	e884 0006 	stmia.w	r4, {r1, r2}
 800ae6e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ae72:	4b8d      	ldr	r3, [pc, #564]	@ (800b0a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 800ae74:	4683      	mov	fp, r0
 800ae76:	f9b3 1000 	ldrsh.w	r1, [r3]
 800ae7a:	4620      	mov	r0, r4
 800ae7c:	f7ff fdeb 	bl	800aa56 <_ZN8touchgfx4Rect10restrictToEss>
 800ae80:	4620      	mov	r0, r4
 800ae82:	f7fd fd24 	bl	80088ce <_ZNK8touchgfx4Rect7isEmptyEv>
 800ae86:	2800      	cmp	r0, #0
 800ae88:	d16a      	bne.n	800af60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800ae8a:	9403      	str	r4, [sp, #12]
 800ae8c:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 800ae90:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 800ae94:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 800ae98:	35a4      	adds	r5, #164	@ 0xa4
 800ae9a:	9301      	str	r3, [sp, #4]
 800ae9c:	b15c      	cbz	r4, 800aeb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 800ae9e:	4629      	mov	r1, r5
 800aea0:	9803      	ldr	r0, [sp, #12]
 800aea2:	f7ff fe29 	bl	800aaf8 <_ZNK8touchgfx4Rect8includesERKS0_>
 800aea6:	3c01      	subs	r4, #1
 800aea8:	b118      	cbz	r0, 800aeb2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 800aeaa:	b2a1      	uxth	r1, r4
 800aeac:	9801      	ldr	r0, [sp, #4]
 800aeae:	f7ff ffc3 	bl	800ae38 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800aeb2:	3d08      	subs	r5, #8
 800aeb4:	e7f2      	b.n	800ae9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 800aeb6:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 800aeba:	f8cd a010 	str.w	sl, [sp, #16]
 800aebe:	f10a 33ff 	add.w	r3, sl, #4294967295
 800aec2:	9302      	str	r3, [sp, #8]
 800aec4:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800aec8:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 800aecc:	9306      	str	r3, [sp, #24]
 800aece:	445c      	add	r4, fp
 800aed0:	2500      	movs	r5, #0
 800aed2:	4626      	mov	r6, r4
 800aed4:	f8cd a014 	str.w	sl, [sp, #20]
 800aed8:	462f      	mov	r7, r5
 800aeda:	9b05      	ldr	r3, [sp, #20]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d073      	beq.n	800afc8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 800aee0:	9903      	ldr	r1, [sp, #12]
 800aee2:	4630      	mov	r0, r6
 800aee4:	f7ff fd95 	bl	800aa12 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800aee8:	b350      	cbz	r0, 800af40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 800aeea:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 800aeee:	f9b6 c000 	ldrsh.w	ip, [r6]
 800aef2:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 800aef6:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 800aefa:	45e6      	cmp	lr, ip
 800aefc:	db33      	blt.n	800af66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 800aefe:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800af02:	88b3      	ldrh	r3, [r6, #4]
 800af04:	4472      	add	r2, lr
 800af06:	4463      	add	r3, ip
 800af08:	b212      	sxth	r2, r2
 800af0a:	b21b      	sxth	r3, r3
 800af0c:	429a      	cmp	r2, r3
 800af0e:	dc2a      	bgt.n	800af66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 800af10:	88f3      	ldrh	r3, [r6, #6]
 800af12:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 800af16:	fa1f f289 	uxth.w	r2, r9
 800af1a:	4413      	add	r3, r2
 800af1c:	b29b      	uxth	r3, r3
 800af1e:	45c8      	cmp	r8, r9
 800af20:	fa1f fc88 	uxth.w	ip, r8
 800af24:	fa0f fe83 	sxth.w	lr, r3
 800af28:	db0f      	blt.n	800af4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 800af2a:	eba3 030c 	sub.w	r3, r3, ip
 800af2e:	1ac9      	subs	r1, r1, r3
 800af30:	b209      	sxth	r1, r1
 800af32:	2900      	cmp	r1, #0
 800af34:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800af38:	dd12      	ble.n	800af60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800af3a:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 800af3e:	4605      	mov	r5, r0
 800af40:	9b05      	ldr	r3, [sp, #20]
 800af42:	3b01      	subs	r3, #1
 800af44:	9305      	str	r3, [sp, #20]
 800af46:	3e08      	subs	r6, #8
 800af48:	e7c7      	b.n	800aeda <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 800af4a:	4461      	add	r1, ip
 800af4c:	b209      	sxth	r1, r1
 800af4e:	4571      	cmp	r1, lr
 800af50:	dc38      	bgt.n	800afc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800af52:	eba2 020c 	sub.w	r2, r2, ip
 800af56:	b212      	sxth	r2, r2
 800af58:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 800af5c:	2a00      	cmp	r2, #0
 800af5e:	dcee      	bgt.n	800af3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 800af60:	b00f      	add	sp, #60	@ 0x3c
 800af62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af66:	45c8      	cmp	r8, r9
 800af68:	db2c      	blt.n	800afc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800af6a:	88f3      	ldrh	r3, [r6, #6]
 800af6c:	4499      	add	r9, r3
 800af6e:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 800af72:	4498      	add	r8, r3
 800af74:	fa0f f989 	sxth.w	r9, r9
 800af78:	fa0f f888 	sxth.w	r8, r8
 800af7c:	45c1      	cmp	r9, r8
 800af7e:	db21      	blt.n	800afc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800af80:	88b3      	ldrh	r3, [r6, #4]
 800af82:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 800af86:	fa1f f28c 	uxth.w	r2, ip
 800af8a:	4413      	add	r3, r2
 800af8c:	b29b      	uxth	r3, r3
 800af8e:	45e6      	cmp	lr, ip
 800af90:	fa1f f88e 	uxth.w	r8, lr
 800af94:	fa0f f983 	sxth.w	r9, r3
 800af98:	db0a      	blt.n	800afb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 800af9a:	eba3 0308 	sub.w	r3, r3, r8
 800af9e:	1ac9      	subs	r1, r1, r3
 800afa0:	b209      	sxth	r1, r1
 800afa2:	2900      	cmp	r1, #0
 800afa4:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 800afa8:	ddda      	ble.n	800af60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800afaa:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 800afae:	e7c6      	b.n	800af3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 800afb0:	4441      	add	r1, r8
 800afb2:	b209      	sxth	r1, r1
 800afb4:	4549      	cmp	r1, r9
 800afb6:	dc05      	bgt.n	800afc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800afb8:	eba2 0208 	sub.w	r2, r2, r8
 800afbc:	b212      	sxth	r2, r2
 800afbe:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 800afc2:	e7cb      	b.n	800af5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 800afc4:	4607      	mov	r7, r0
 800afc6:	e7bb      	b.n	800af40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 800afc8:	2d00      	cmp	r5, #0
 800afca:	d181      	bne.n	800aed0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 800afcc:	2f00      	cmp	r7, #0
 800afce:	f000 81dd 	beq.w	800b38c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800afd2:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 800afd6:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 800afda:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 800afde:	b2b3      	uxth	r3, r6
 800afe0:	9305      	str	r3, [sp, #20]
 800afe2:	9a05      	ldr	r2, [sp, #20]
 800afe4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 800afe8:	4413      	add	r3, r2
 800afea:	b2ba      	uxth	r2, r7
 800afec:	4492      	add	sl, r2
 800afee:	b29b      	uxth	r3, r3
 800aff0:	fa1f fa8a 	uxth.w	sl, sl
 800aff4:	fa0f f883 	sxth.w	r8, r3
 800aff8:	fa0f f98a 	sxth.w	r9, sl
 800affc:	e9cd 2307 	strd	r2, r3, [sp, #28]
 800b000:	9b04      	ldr	r3, [sp, #16]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d052      	beq.n	800b0ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 800b006:	9903      	ldr	r1, [sp, #12]
 800b008:	4620      	mov	r0, r4
 800b00a:	f7ff fd02 	bl	800aa12 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800b00e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b012:	b1c0      	cbz	r0, 800b046 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800b014:	f9b4 e000 	ldrsh.w	lr, [r4]
 800b018:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800b01c:	4576      	cmp	r6, lr
 800b01e:	dc22      	bgt.n	800b066 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 800b020:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800b024:	44f4      	add	ip, lr
 800b026:	fa0f fc8c 	sxth.w	ip, ip
 800b02a:	45e0      	cmp	r8, ip
 800b02c:	db1b      	blt.n	800b066 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 800b02e:	428f      	cmp	r7, r1
 800b030:	fa1f fc81 	uxth.w	ip, r1
 800b034:	88e1      	ldrh	r1, [r4, #6]
 800b036:	dc0d      	bgt.n	800b054 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 800b038:	ebaa 0c0c 	sub.w	ip, sl, ip
 800b03c:	eba1 010c 	sub.w	r1, r1, ip
 800b040:	f8a4 9002 	strh.w	r9, [r4, #2]
 800b044:	80e1      	strh	r1, [r4, #6]
 800b046:	4628      	mov	r0, r5
 800b048:	9904      	ldr	r1, [sp, #16]
 800b04a:	3901      	subs	r1, #1
 800b04c:	9104      	str	r1, [sp, #16]
 800b04e:	3c08      	subs	r4, #8
 800b050:	4605      	mov	r5, r0
 800b052:	e7d3      	b.n	800affc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 800b054:	4461      	add	r1, ip
 800b056:	b209      	sxth	r1, r1
 800b058:	4549      	cmp	r1, r9
 800b05a:	dcf5      	bgt.n	800b048 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 800b05c:	eba2 0c0c 	sub.w	ip, r2, ip
 800b060:	f8a4 c006 	strh.w	ip, [r4, #6]
 800b064:	e7ef      	b.n	800b046 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800b066:	428f      	cmp	r7, r1
 800b068:	dcee      	bgt.n	800b048 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 800b06a:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 800b06e:	4461      	add	r1, ip
 800b070:	b209      	sxth	r1, r1
 800b072:	4589      	cmp	r9, r1
 800b074:	dbe8      	blt.n	800b048 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 800b076:	4576      	cmp	r6, lr
 800b078:	fa1f fc8e 	uxth.w	ip, lr
 800b07c:	88a1      	ldrh	r1, [r4, #4]
 800b07e:	dc07      	bgt.n	800b090 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 800b080:	eba3 0c0c 	sub.w	ip, r3, ip
 800b084:	eba1 010c 	sub.w	r1, r1, ip
 800b088:	f8a4 8000 	strh.w	r8, [r4]
 800b08c:	80a1      	strh	r1, [r4, #4]
 800b08e:	e7da      	b.n	800b046 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800b090:	4461      	add	r1, ip
 800b092:	b209      	sxth	r1, r1
 800b094:	4588      	cmp	r8, r1
 800b096:	dbd7      	blt.n	800b048 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 800b098:	9905      	ldr	r1, [sp, #20]
 800b09a:	eba1 0c0c 	sub.w	ip, r1, ip
 800b09e:	f8a4 c004 	strh.w	ip, [r4, #4]
 800b0a2:	e7d0      	b.n	800b046 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800b0a4:	2001247a 	.word	0x2001247a
 800b0a8:	20012478 	.word	0x20012478
 800b0ac:	2d00      	cmp	r5, #0
 800b0ae:	f000 816d 	beq.w	800b38c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800b0b2:	9b06      	ldr	r3, [sp, #24]
 800b0b4:	445b      	add	r3, fp
 800b0b6:	461c      	mov	r4, r3
 800b0b8:	9b02      	ldr	r3, [sp, #8]
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	f000 8166 	beq.w	800b38c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800b0c0:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 800b0c4:	4629      	mov	r1, r5
 800b0c6:	9803      	ldr	r0, [sp, #12]
 800b0c8:	f7ff fd16 	bl	800aaf8 <_ZNK8touchgfx4Rect8includesERKS0_>
 800b0cc:	b120      	cbz	r0, 800b0d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 800b0ce:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800b0d2:	9801      	ldr	r0, [sp, #4]
 800b0d4:	f7ff feb0 	bl	800ae38 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800b0d8:	9903      	ldr	r1, [sp, #12]
 800b0da:	4628      	mov	r0, r5
 800b0dc:	f7ff fc99 	bl	800aa12 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800b0e0:	2800      	cmp	r0, #0
 800b0e2:	f000 809c 	beq.w	800b21e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 800b0e6:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 800b0ea:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 800b0ee:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 800b0f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0f4:	fa1f f189 	uxth.w	r1, r9
 800b0f8:	eb01 0c03 	add.w	ip, r1, r3
 800b0fc:	fa1f fa8c 	uxth.w	sl, ip
 800b100:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 800b104:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 800b108:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 800b10c:	b283      	uxth	r3, r0
 800b10e:	eb03 050c 	add.w	r5, r3, ip
 800b112:	b2ad      	uxth	r5, r5
 800b114:	9505      	str	r5, [sp, #20]
 800b116:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 800b11a:	9504      	str	r5, [sp, #16]
 800b11c:	4548      	cmp	r0, r9
 800b11e:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 800b122:	f340 8099 	ble.w	800b258 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 800b126:	1a5b      	subs	r3, r3, r1
 800b128:	b29b      	uxth	r3, r3
 800b12a:	4596      	cmp	lr, r2
 800b12c:	fa0f f08a 	sxth.w	r0, sl
 800b130:	b21e      	sxth	r6, r3
 800b132:	dd2e      	ble.n	800b192 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 800b134:	9f02      	ldr	r7, [sp, #8]
 800b136:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 800b13a:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 800b13e:	9f04      	ldr	r7, [sp, #16]
 800b140:	1a3f      	subs	r7, r7, r0
 800b142:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 800b146:	fa1f fe8e 	uxth.w	lr, lr
 800b14a:	b292      	uxth	r2, r2
 800b14c:	ebae 0102 	sub.w	r1, lr, r2
 800b150:	44a6      	add	lr, r4
 800b152:	4402      	add	r2, r0
 800b154:	b289      	uxth	r1, r1
 800b156:	fa0f fe8e 	sxth.w	lr, lr
 800b15a:	b212      	sxth	r2, r2
 800b15c:	b20d      	sxth	r5, r1
 800b15e:	ebae 0202 	sub.w	r2, lr, r2
 800b162:	436f      	muls	r7, r5
 800b164:	4372      	muls	r2, r6
 800b166:	4297      	cmp	r7, r2
 800b168:	db09      	blt.n	800b17e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 800b16a:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 800b16e:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 800b172:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800b176:	449c      	add	ip, r3
 800b178:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 800b17c:	e686      	b.n	800ae8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800b17e:	4421      	add	r1, r4
 800b180:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 800b184:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 800b188:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800b18c:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800b190:	e67c      	b.n	800ae8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800b192:	9f04      	ldr	r7, [sp, #16]
 800b194:	42b8      	cmp	r0, r7
 800b196:	da27      	bge.n	800b1e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 800b198:	9902      	ldr	r1, [sp, #8]
 800b19a:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 800b19e:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 800b1a2:	eb05 010e 	add.w	r1, r5, lr
 800b1a6:	fa1f f881 	uxth.w	r8, r1
 800b1aa:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 800b1ae:	4411      	add	r1, r2
 800b1b0:	eba1 0108 	sub.w	r1, r1, r8
 800b1b4:	b289      	uxth	r1, r1
 800b1b6:	fa0f f988 	sxth.w	r9, r8
 800b1ba:	eba2 020e 	sub.w	r2, r2, lr
 800b1be:	fa0f f881 	sxth.w	r8, r1
 800b1c2:	1a3f      	subs	r7, r7, r0
 800b1c4:	4372      	muls	r2, r6
 800b1c6:	fb08 f707 	mul.w	r7, r8, r7
 800b1ca:	42ba      	cmp	r2, r7
 800b1cc:	dc06      	bgt.n	800b1dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 800b1ce:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 800b1d2:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 800b1d6:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 800b1da:	e7ca      	b.n	800b172 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 800b1dc:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 800b1e0:	4429      	add	r1, r5
 800b1e2:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800b1e6:	e651      	b.n	800ae8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800b1e8:	9805      	ldr	r0, [sp, #20]
 800b1ea:	ebaa 0000 	sub.w	r0, sl, r0
 800b1ee:	b280      	uxth	r0, r0
 800b1f0:	2d06      	cmp	r5, #6
 800b1f2:	fa0f fe80 	sxth.w	lr, r0
 800b1f6:	d817      	bhi.n	800b228 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 800b1f8:	9b04      	ldr	r3, [sp, #16]
 800b1fa:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 800b1fe:	1c6b      	adds	r3, r5, #1
 800b200:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 800b204:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 800b208:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 800b20c:	9b01      	ldr	r3, [sp, #4]
 800b20e:	9801      	ldr	r0, [sp, #4]
 800b210:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b214:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 800b218:	805a      	strh	r2, [r3, #2]
 800b21a:	809e      	strh	r6, [r3, #4]
 800b21c:	80d9      	strh	r1, [r3, #6]
 800b21e:	9b02      	ldr	r3, [sp, #8]
 800b220:	3b01      	subs	r3, #1
 800b222:	9302      	str	r3, [sp, #8]
 800b224:	3c08      	subs	r4, #8
 800b226:	e747      	b.n	800b0b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 800b228:	9a02      	ldr	r2, [sp, #8]
 800b22a:	45b6      	cmp	lr, r6
 800b22c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800b230:	db0d      	blt.n	800b24e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 800b232:	449c      	add	ip, r3
 800b234:	fa1f fc8c 	uxth.w	ip, ip
 800b238:	445a      	add	r2, fp
 800b23a:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 800b23e:	448c      	add	ip, r1
 800b240:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 800b244:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 800b248:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 800b24c:	e61e      	b.n	800ae8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800b24e:	445a      	add	r2, fp
 800b250:	4484      	add	ip, r0
 800b252:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 800b256:	e78f      	b.n	800b178 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800b258:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 800b25c:	fa1f f18e 	uxth.w	r1, lr
 800b260:	eb01 0806 	add.w	r8, r1, r6
 800b264:	b293      	uxth	r3, r2
 800b266:	fa1f f888 	uxth.w	r8, r8
 800b26a:	9306      	str	r3, [sp, #24]
 800b26c:	fa0f f388 	sxth.w	r3, r8
 800b270:	9307      	str	r3, [sp, #28]
 800b272:	9f06      	ldr	r7, [sp, #24]
 800b274:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 800b278:	443b      	add	r3, r7
 800b27a:	b29b      	uxth	r3, r3
 800b27c:	4596      	cmp	lr, r2
 800b27e:	9308      	str	r3, [sp, #32]
 800b280:	da24      	bge.n	800b2cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 800b282:	9905      	ldr	r1, [sp, #20]
 800b284:	eba3 0308 	sub.w	r3, r3, r8
 800b288:	ebaa 0401 	sub.w	r4, sl, r1
 800b28c:	b2a4      	uxth	r4, r4
 800b28e:	b29b      	uxth	r3, r3
 800b290:	b225      	sxth	r5, r4
 800b292:	b219      	sxth	r1, r3
 800b294:	eba2 020e 	sub.w	r2, r2, lr
 800b298:	eba9 0000 	sub.w	r0, r9, r0
 800b29c:	436a      	muls	r2, r5
 800b29e:	4348      	muls	r0, r1
 800b2a0:	4282      	cmp	r2, r0
 800b2a2:	9a02      	ldr	r2, [sp, #8]
 800b2a4:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800b2a8:	445a      	add	r2, fp
 800b2aa:	dc06      	bgt.n	800b2ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 800b2ac:	9b07      	ldr	r3, [sp, #28]
 800b2ae:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 800b2b2:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 800b2b6:	44a4      	add	ip, r4
 800b2b8:	e75e      	b.n	800b178 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800b2ba:	9904      	ldr	r1, [sp, #16]
 800b2bc:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 800b2c0:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 800b2c4:	4433      	add	r3, r6
 800b2c6:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800b2ca:	e5df      	b.n	800ae8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800b2cc:	9f06      	ldr	r7, [sp, #24]
 800b2ce:	9b04      	ldr	r3, [sp, #16]
 800b2d0:	1bc9      	subs	r1, r1, r7
 800b2d2:	fa0f f78a 	sxth.w	r7, sl
 800b2d6:	b289      	uxth	r1, r1
 800b2d8:	429f      	cmp	r7, r3
 800b2da:	fa0f fe81 	sxth.w	lr, r1
 800b2de:	dd23      	ble.n	800b328 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 800b2e0:	9a05      	ldr	r2, [sp, #20]
 800b2e2:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800b2e6:	9d07      	ldr	r5, [sp, #28]
 800b2e8:	ebaa 0202 	sub.w	r2, sl, r2
 800b2ec:	b292      	uxth	r2, r2
 800b2ee:	eba5 0a03 	sub.w	sl, r5, r3
 800b2f2:	b214      	sxth	r4, r2
 800b2f4:	eba9 0000 	sub.w	r0, r9, r0
 800b2f8:	9b02      	ldr	r3, [sp, #8]
 800b2fa:	fb0e f000 	mul.w	r0, lr, r0
 800b2fe:	fb04 fa0a 	mul.w	sl, r4, sl
 800b302:	00db      	lsls	r3, r3, #3
 800b304:	4550      	cmp	r0, sl
 800b306:	445b      	add	r3, fp
 800b308:	db03      	blt.n	800b312 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 800b30a:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 800b30e:	4494      	add	ip, r2
 800b310:	e732      	b.n	800b178 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800b312:	9a04      	ldr	r2, [sp, #16]
 800b314:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 800b318:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 800b31c:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 800b320:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800b324:	4431      	add	r1, r6
 800b326:	e75c      	b.n	800b1e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 800b328:	9b08      	ldr	r3, [sp, #32]
 800b32a:	eba3 0308 	sub.w	r3, r3, r8
 800b32e:	b29b      	uxth	r3, r3
 800b330:	2d06      	cmp	r5, #6
 800b332:	b218      	sxth	r0, r3
 800b334:	d813      	bhi.n	800b35e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 800b336:	9b07      	ldr	r3, [sp, #28]
 800b338:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 800b33c:	1c6b      	adds	r3, r5, #1
 800b33e:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 800b342:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 800b346:	9b01      	ldr	r3, [sp, #4]
 800b348:	9901      	ldr	r1, [sp, #4]
 800b34a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b34e:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 800b352:	805a      	strh	r2, [r3, #2]
 800b354:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b356:	809a      	strh	r2, [r3, #4]
 800b358:	f8a3 e006 	strh.w	lr, [r3, #6]
 800b35c:	e75f      	b.n	800b21e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 800b35e:	9c02      	ldr	r4, [sp, #8]
 800b360:	4570      	cmp	r0, lr
 800b362:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800b366:	db0d      	blt.n	800b384 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 800b368:	4431      	add	r1, r6
 800b36a:	9b06      	ldr	r3, [sp, #24]
 800b36c:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 800b370:	b289      	uxth	r1, r1
 800b372:	445c      	add	r4, fp
 800b374:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800b378:	4419      	add	r1, r3
 800b37a:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 800b37e:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 800b382:	e583      	b.n	800ae8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800b384:	445c      	add	r4, fp
 800b386:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 800b38a:	e79b      	b.n	800b2c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 800b38c:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 800b390:	1e65      	subs	r5, r4, #1
 800b392:	b2ad      	uxth	r5, r5
 800b394:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 800b398:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 800b39c:	42b5      	cmp	r5, r6
 800b39e:	d044      	beq.n	800b42a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 800b3a0:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 800b3a4:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 800b3a8:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 800b3ac:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 800b3b0:	4282      	cmp	r2, r0
 800b3b2:	d11f      	bne.n	800b3f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 800b3b4:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 800b3b8:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 800b3bc:	459c      	cmp	ip, r3
 800b3be:	d119      	bne.n	800b3f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 800b3c0:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 800b3c4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800b3c8:	19d8      	adds	r0, r3, r7
 800b3ca:	b200      	sxth	r0, r0
 800b3cc:	4288      	cmp	r0, r1
 800b3ce:	d109      	bne.n	800b3e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 800b3d0:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 800b3d4:	4413      	add	r3, r2
 800b3d6:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 800b3da:	4629      	mov	r1, r5
 800b3dc:	9801      	ldr	r0, [sp, #4]
 800b3de:	f7ff fd2b 	bl	800ae38 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800b3e2:	e003      	b.n	800b3ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 800b3e4:	4411      	add	r1, r2
 800b3e6:	b209      	sxth	r1, r1
 800b3e8:	42b9      	cmp	r1, r7
 800b3ea:	d0f3      	beq.n	800b3d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 800b3ec:	3d01      	subs	r5, #1
 800b3ee:	b2ad      	uxth	r5, r5
 800b3f0:	3c08      	subs	r4, #8
 800b3f2:	e7d3      	b.n	800b39c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 800b3f4:	42b9      	cmp	r1, r7
 800b3f6:	d1f9      	bne.n	800b3ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 800b3f8:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 800b3fc:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 800b400:	4299      	cmp	r1, r3
 800b402:	d1f3      	bne.n	800b3ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 800b404:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 800b408:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 800b40c:	181f      	adds	r7, r3, r0
 800b40e:	b23f      	sxth	r7, r7
 800b410:	42ba      	cmp	r2, r7
 800b412:	d105      	bne.n	800b420 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 800b414:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 800b418:	440b      	add	r3, r1
 800b41a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800b41e:	e7dc      	b.n	800b3da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 800b420:	440a      	add	r2, r1
 800b422:	b212      	sxth	r2, r2
 800b424:	4290      	cmp	r0, r2
 800b426:	d1e1      	bne.n	800b3ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 800b428:	e7f6      	b.n	800b418 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 800b42a:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 800b42e:	2e07      	cmp	r6, #7
 800b430:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 800b434:	d812      	bhi.n	800b45c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 800b436:	1c75      	adds	r5, r6, #1
 800b438:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 800b43c:	9d01      	ldr	r5, [sp, #4]
 800b43e:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 800b442:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 800b446:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 800b44a:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 800b44e:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 800b452:	442c      	add	r4, r5
 800b454:	8061      	strh	r1, [r4, #2]
 800b456:	80a2      	strh	r2, [r4, #4]
 800b458:	80e3      	strh	r3, [r4, #6]
 800b45a:	e581      	b.n	800af60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800b45c:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 800b460:	3e01      	subs	r6, #1
 800b462:	445c      	add	r4, fp
 800b464:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 800b468:	f04f 37ff 	mov.w	r7, #4294967295
 800b46c:	2500      	movs	r5, #0
 800b46e:	9305      	str	r3, [sp, #20]
 800b470:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 800b474:	9302      	str	r3, [sp, #8]
 800b476:	1e72      	subs	r2, r6, #1
 800b478:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 800b47c:	9304      	str	r3, [sp, #16]
 800b47e:	4691      	mov	r9, r2
 800b480:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 800b484:	f1b9 3fff 	cmp.w	r9, #4294967295
 800b488:	bf14      	ite	ne
 800b48a:	9905      	ldrne	r1, [sp, #20]
 800b48c:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 800b490:	6818      	ldr	r0, [r3, #0]
 800b492:	9207      	str	r2, [sp, #28]
 800b494:	bf18      	it	ne
 800b496:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 800b49a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800b49e:	f8be 1006 	ldrh.w	r1, [lr, #6]
 800b4a2:	f8be 8004 	ldrh.w	r8, [lr, #4]
 800b4a6:	9306      	str	r3, [sp, #24]
 800b4a8:	fb18 f801 	smulbb	r8, r8, r1
 800b4ac:	6859      	ldr	r1, [r3, #4]
 800b4ae:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800b4b2:	4671      	mov	r1, lr
 800b4b4:	a80c      	add	r0, sp, #48	@ 0x30
 800b4b6:	f7ff fb45 	bl	800ab44 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800b4ba:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 800b4be:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 800b4c2:	9b04      	ldr	r3, [sp, #16]
 800b4c4:	9a02      	ldr	r2, [sp, #8]
 800b4c6:	fb10 f001 	smulbb	r0, r0, r1
 800b4ca:	fb02 8803 	mla	r8, r2, r3, r8
 800b4ce:	eba0 0108 	sub.w	r1, r0, r8
 800b4d2:	f04f 0c08 	mov.w	ip, #8
 800b4d6:	fb90 f0fc 	sdiv	r0, r0, ip
 800b4da:	4288      	cmp	r0, r1
 800b4dc:	dc20      	bgt.n	800b520 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c0>
 800b4de:	4551      	cmp	r1, sl
 800b4e0:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b4e4:	da03      	bge.n	800b4ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68e>
 800b4e6:	b1d9      	cbz	r1, 800b520 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c0>
 800b4e8:	468a      	mov	sl, r1
 800b4ea:	464f      	mov	r7, r9
 800b4ec:	4635      	mov	r5, r6
 800b4ee:	f109 39ff 	add.w	r9, r9, #4294967295
 800b4f2:	f119 0f02 	cmn.w	r9, #2
 800b4f6:	d1c5      	bne.n	800b484 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 800b4f8:	4616      	mov	r6, r2
 800b4fa:	3201      	adds	r2, #1
 800b4fc:	f1a4 0408 	sub.w	r4, r4, #8
 800b500:	d1b6      	bne.n	800b470 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 800b502:	9b01      	ldr	r3, [sp, #4]
 800b504:	b2ac      	uxth	r4, r5
 800b506:	00ed      	lsls	r5, r5, #3
 800b508:	1958      	adds	r0, r3, r5
 800b50a:	1c7b      	adds	r3, r7, #1
 800b50c:	d10b      	bne.n	800b526 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c6>
 800b50e:	4601      	mov	r1, r0
 800b510:	9803      	ldr	r0, [sp, #12]
 800b512:	f7ff fb17 	bl	800ab44 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800b516:	4621      	mov	r1, r4
 800b518:	9801      	ldr	r0, [sp, #4]
 800b51a:	f7ff fc8d 	bl	800ae38 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800b51e:	e4b5      	b.n	800ae8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800b520:	464f      	mov	r7, r9
 800b522:	4635      	mov	r5, r6
 800b524:	e7ed      	b.n	800b502 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a2>
 800b526:	9b01      	ldr	r3, [sp, #4]
 800b528:	00ff      	lsls	r7, r7, #3
 800b52a:	19d9      	adds	r1, r3, r7
 800b52c:	f7ff fb0a 	bl	800ab44 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800b530:	9b03      	ldr	r3, [sp, #12]
 800b532:	cb03      	ldmia	r3!, {r0, r1}
 800b534:	445f      	add	r7, fp
 800b536:	445d      	add	r5, fp
 800b538:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 800b53c:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 800b540:	f855 0fac 	ldr.w	r0, [r5, #172]!
 800b544:	9b03      	ldr	r3, [sp, #12]
 800b546:	6869      	ldr	r1, [r5, #4]
 800b548:	c303      	stmia	r3!, {r0, r1}
 800b54a:	e7e4      	b.n	800b516 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b6>

0800b54c <_ZN8touchgfx11Application15drawCachedAreasEv>:
 800b54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b550:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 800b554:	b09b      	sub	sp, #108	@ 0x6c
 800b556:	4604      	mov	r4, r0
 800b558:	4630      	mov	r0, r6
 800b55a:	f7fd f9b8 	bl	80088ce <_ZNK8touchgfx4Rect7isEmptyEv>
 800b55e:	4605      	mov	r5, r0
 800b560:	b948      	cbnz	r0, 800b576 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 800b562:	6823      	ldr	r3, [r4, #0]
 800b564:	e896 0006 	ldmia.w	r6, {r1, r2}
 800b568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b56a:	4620      	mov	r0, r4
 800b56c:	4798      	blx	r3
 800b56e:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 800b572:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 800b576:	4bc6      	ldr	r3, [pc, #792]	@ (800b890 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d03f      	beq.n	800b5fe <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 800b57e:	4dc5      	ldr	r5, [pc, #788]	@ (800b894 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 800b580:	4628      	mov	r0, r5
 800b582:	f7fd f9a4 	bl	80088ce <_ZNK8touchgfx4Rect7isEmptyEv>
 800b586:	4606      	mov	r6, r0
 800b588:	2800      	cmp	r0, #0
 800b58a:	d138      	bne.n	800b5fe <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 800b58c:	4628      	mov	r0, r5
 800b58e:	f7ff f96d 	bl	800a86c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800b592:	6823      	ldr	r3, [r4, #0]
 800b594:	6829      	ldr	r1, [r5, #0]
 800b596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b598:	686a      	ldr	r2, [r5, #4]
 800b59a:	4620      	mov	r0, r4
 800b59c:	4798      	blx	r3
 800b59e:	802e      	strh	r6, [r5, #0]
 800b5a0:	806e      	strh	r6, [r5, #2]
 800b5a2:	80ae      	strh	r6, [r5, #4]
 800b5a4:	80ee      	strh	r6, [r5, #6]
 800b5a6:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 800b5aa:	4dbb      	ldr	r5, [pc, #748]	@ (800b898 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 800b5ac:	4640      	mov	r0, r8
 800b5ae:	f7ff fbeb 	bl	800ad88 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800b5b2:	882e      	ldrh	r6, [r5, #0]
 800b5b4:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 800b5b8:	4633      	mov	r3, r6
 800b5ba:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 800b5be:	42bb      	cmp	r3, r7
 800b5c0:	d224      	bcs.n	800b60c <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 800b5c2:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 800b5c6:	2907      	cmp	r1, #7
 800b5c8:	d816      	bhi.n	800b5f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 800b5ca:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 800b5ce:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 800b5d2:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 800b5d6:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 800b5da:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 800b5de:	1c4a      	adds	r2, r1, #1
 800b5e0:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 800b5e4:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 800b5e8:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 800b5ec:	f8a2 a002 	strh.w	sl, [r2, #2]
 800b5f0:	f8a2 e004 	strh.w	lr, [r2, #4]
 800b5f4:	f8a2 c006 	strh.w	ip, [r2, #6]
 800b5f8:	3301      	adds	r3, #1
 800b5fa:	b29b      	uxth	r3, r3
 800b5fc:	e7df      	b.n	800b5be <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 800b5fe:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 800b602:	2b00      	cmp	r3, #0
 800b604:	d1cf      	bne.n	800b5a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 800b606:	b01b      	add	sp, #108	@ 0x6c
 800b608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b60c:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 800b610:	42b3      	cmp	r3, r6
 800b612:	d90c      	bls.n	800b62e <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 800b614:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800b618:	6822      	ldr	r2, [r4, #0]
 800b61a:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 800b61e:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 800b620:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 800b624:	4620      	mov	r0, r4
 800b626:	3601      	adds	r6, #1
 800b628:	47b8      	blx	r7
 800b62a:	b2b6      	uxth	r6, r6
 800b62c:	e7ee      	b.n	800b60c <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 800b62e:	4a9b      	ldr	r2, [pc, #620]	@ (800b89c <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 800b630:	6813      	ldr	r3, [r2, #0]
 800b632:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800b636:	2b01      	cmp	r3, #1
 800b638:	4691      	mov	r9, r2
 800b63a:	f040 80e2 	bne.w	800b802 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 800b63e:	8829      	ldrh	r1, [r5, #0]
 800b640:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 800b644:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 800b648:	33ae      	adds	r3, #174	@ 0xae
 800b64a:	2600      	movs	r6, #0
 800b64c:	428f      	cmp	r7, r1
 800b64e:	f103 0308 	add.w	r3, r3, #8
 800b652:	dd0a      	ble.n	800b66a <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 800b654:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 800b658:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 800b65c:	4402      	add	r2, r0
 800b65e:	b212      	sxth	r2, r2
 800b660:	4296      	cmp	r6, r2
 800b662:	bfb8      	it	lt
 800b664:	4616      	movlt	r6, r2
 800b666:	3101      	adds	r1, #1
 800b668:	e7f0      	b.n	800b64c <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 800b66a:	4b8d      	ldr	r3, [pc, #564]	@ (800b8a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 800b66c:	f8df 922c 	ldr.w	r9, [pc, #556]	@ 800b89c <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>
 800b670:	881b      	ldrh	r3, [r3, #0]
 800b672:	2b0f      	cmp	r3, #15
 800b674:	bf88      	it	hi
 800b676:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 800b67a:	f04f 0300 	mov.w	r3, #0
 800b67e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800b682:	bf98      	it	ls
 800b684:	f04f 0b01 	movls.w	fp, #1
 800b688:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 800b68c:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 800b690:	4b82      	ldr	r3, [pc, #520]	@ (800b89c <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 800b692:	4438      	add	r0, r7
 800b694:	b207      	sxth	r7, r0
 800b696:	6818      	ldr	r0, [r3, #0]
 800b698:	42b7      	cmp	r7, r6
 800b69a:	6803      	ldr	r3, [r0, #0]
 800b69c:	f280 8083 	bge.w	800b7a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 800b6a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b6a4:	4798      	blx	r3
 800b6a6:	eb07 030b 	add.w	r3, r7, fp
 800b6aa:	4298      	cmp	r0, r3
 800b6ac:	da07      	bge.n	800b6be <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 800b6ae:	42b0      	cmp	r0, r6
 800b6b0:	da05      	bge.n	800b6be <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 800b6b2:	4287      	cmp	r7, r0
 800b6b4:	dd6c      	ble.n	800b790 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 800b6b6:	2f00      	cmp	r7, #0
 800b6b8:	dd6a      	ble.n	800b790 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 800b6ba:	4630      	mov	r0, r6
 800b6bc:	e004      	b.n	800b6c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 800b6be:	4287      	cmp	r7, r0
 800b6c0:	dcfb      	bgt.n	800b6ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 800b6c2:	42b0      	cmp	r0, r6
 800b6c4:	bfa8      	it	ge
 800b6c6:	4630      	movge	r0, r6
 800b6c8:	4b76      	ldr	r3, [pc, #472]	@ (800b8a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 800b6ca:	f8ad 7016 	strh.w	r7, [sp, #22]
 800b6ce:	1bc0      	subs	r0, r0, r7
 800b6d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b6d4:	882f      	ldrh	r7, [r5, #0]
 800b6d6:	f8ad 3018 	strh.w	r3, [sp, #24]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	f8ad 2014 	strh.w	r2, [sp, #20]
 800b6e0:	f8ad 001a 	strh.w	r0, [sp, #26]
 800b6e4:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 800b6e8:	42bb      	cmp	r3, r7
 800b6ea:	d9cd      	bls.n	800b688 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 800b6ec:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 800b6f0:	ab07      	add	r3, sp, #28
 800b6f2:	f852 0fac 	ldr.w	r0, [r2, #172]!
 800b6f6:	6851      	ldr	r1, [r2, #4]
 800b6f8:	c303      	stmia	r3!, {r0, r1}
 800b6fa:	a905      	add	r1, sp, #20
 800b6fc:	a807      	add	r0, sp, #28
 800b6fe:	f7ff f988 	bl	800aa12 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800b702:	2800      	cmp	r0, #0
 800b704:	d04c      	beq.n	800b7a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x254>
 800b706:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 800b70a:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 800b70e:	f8bd a020 	ldrh.w	sl, [sp, #32]
 800b712:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 800b716:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800b71a:	9302      	str	r3, [sp, #8]
 800b71c:	4686      	mov	lr, r0
 800b71e:	4290      	cmp	r0, r2
 800b720:	4450      	add	r0, sl
 800b722:	f8bd a018 	ldrh.w	sl, [sp, #24]
 800b726:	bfb8      	it	lt
 800b728:	4696      	movlt	lr, r2
 800b72a:	4452      	add	r2, sl
 800b72c:	4299      	cmp	r1, r3
 800b72e:	b280      	uxth	r0, r0
 800b730:	b292      	uxth	r2, r2
 800b732:	468c      	mov	ip, r1
 800b734:	fa0f fa82 	sxth.w	sl, r2
 800b738:	bfb8      	it	lt
 800b73a:	469c      	movlt	ip, r3
 800b73c:	b203      	sxth	r3, r0
 800b73e:	4553      	cmp	r3, sl
 800b740:	bfb8      	it	lt
 800b742:	4602      	movlt	r2, r0
 800b744:	eba2 020e 	sub.w	r2, r2, lr
 800b748:	f8ad 2020 	strh.w	r2, [sp, #32]
 800b74c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 800b750:	9b02      	ldr	r3, [sp, #8]
 800b752:	f8ad e01c 	strh.w	lr, [sp, #28]
 800b756:	4411      	add	r1, r2
 800b758:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800b75c:	f8ad c01e 	strh.w	ip, [sp, #30]
 800b760:	4413      	add	r3, r2
 800b762:	b289      	uxth	r1, r1
 800b764:	b29b      	uxth	r3, r3
 800b766:	b208      	sxth	r0, r1
 800b768:	b21a      	sxth	r2, r3
 800b76a:	4290      	cmp	r0, r2
 800b76c:	bfb8      	it	lt
 800b76e:	460b      	movlt	r3, r1
 800b770:	eba3 030c 	sub.w	r3, r3, ip
 800b774:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800b778:	a807      	add	r0, sp, #28
 800b77a:	f7fd f8a8 	bl	80088ce <_ZNK8touchgfx4Rect7isEmptyEv>
 800b77e:	b920      	cbnz	r0, 800b78a <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 800b780:	6823      	ldr	r3, [r4, #0]
 800b782:	a907      	add	r1, sp, #28
 800b784:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b786:	4620      	mov	r0, r4
 800b788:	4798      	blx	r3
 800b78a:	3701      	adds	r7, #1
 800b78c:	b2bf      	uxth	r7, r7
 800b78e:	e7a9      	b.n	800b6e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x198>
 800b790:	f8d9 0000 	ldr.w	r0, [r9]
 800b794:	6803      	ldr	r3, [r0, #0]
 800b796:	2101      	movs	r1, #1
 800b798:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b79c:	4798      	blx	r3
 800b79e:	e773      	b.n	800b688 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 800b7a0:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800b7a4:	e7e8      	b.n	800b778 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 800b7a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7a8:	4798      	blx	r3
 800b7aa:	4b3f      	ldr	r3, [pc, #252]	@ (800b8a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 800b7ac:	781b      	ldrb	r3, [r3, #0]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	f43f af29 	beq.w	800b606 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 800b7ba:	882b      	ldrh	r3, [r5, #0]
 800b7bc:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 800b7c0:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 800b7c4:	42ab      	cmp	r3, r5
 800b7c6:	f4bf af1e 	bcs.w	800b606 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 800b7ca:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 800b7ce:	2907      	cmp	r1, #7
 800b7d0:	d814      	bhi.n	800b7fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 800b7d2:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 800b7d6:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 800b7da:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 800b7de:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 800b7e2:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 800b7e6:	1c4a      	adds	r2, r1, #1
 800b7e8:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 800b7ec:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 800b7f0:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 800b7f4:	f8a2 c002 	strh.w	ip, [r2, #2]
 800b7f8:	8097      	strh	r7, [r2, #4]
 800b7fa:	80d6      	strh	r6, [r2, #6]
 800b7fc:	3301      	adds	r3, #1
 800b7fe:	b29b      	uxth	r3, r3
 800b800:	e7e0      	b.n	800b7c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x278>
 800b802:	2b02      	cmp	r3, #2
 800b804:	f040 8133 	bne.w	800ba6e <_ZN8touchgfx11Application15drawCachedAreasEv+0x522>
 800b808:	4b28      	ldr	r3, [pc, #160]	@ (800b8ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 800b80a:	781b      	ldrb	r3, [r3, #0]
 800b80c:	2b01      	cmp	r3, #1
 800b80e:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 800b812:	f000 8098 	beq.w	800b946 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 800b816:	882a      	ldrh	r2, [r5, #0]
 800b818:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 800b81c:	3201      	adds	r2, #1
 800b81e:	b292      	uxth	r2, r2
 800b820:	2900      	cmp	r1, #0
 800b822:	d0c2      	beq.n	800b7aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 800b824:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 800b828:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 800b82c:	441e      	add	r6, r3
 800b82e:	b236      	sxth	r6, r6
 800b830:	4694      	mov	ip, r2
 800b832:	f04f 0900 	mov.w	r9, #0
 800b836:	fa1f f38c 	uxth.w	r3, ip
 800b83a:	4299      	cmp	r1, r3
 800b83c:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 800b840:	f240 80bf 	bls.w	800b9c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x476>
 800b844:	4427      	add	r7, r4
 800b846:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 800b84a:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 800b84e:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 800b852:	4283      	cmp	r3, r0
 800b854:	f340 80a1 	ble.w	800b99a <_ZN8touchgfx11Application15drawCachedAreasEv+0x44e>
 800b858:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 800b85c:	4406      	add	r6, r0
 800b85e:	b236      	sxth	r6, r6
 800b860:	429e      	cmp	r6, r3
 800b862:	bfa8      	it	ge
 800b864:	461e      	movge	r6, r3
 800b866:	46e1      	mov	r9, ip
 800b868:	f10c 0c01 	add.w	ip, ip, #1
 800b86c:	e7e3      	b.n	800b836 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ea>
 800b86e:	d10a      	bne.n	800b886 <_ZN8touchgfx11Application15drawCachedAreasEv+0x33a>
 800b870:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 800b874:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 800b878:	4562      	cmp	r2, ip
 800b87a:	bfb8      	it	lt
 800b87c:	4662      	movlt	r2, ip
 800b87e:	4288      	cmp	r0, r1
 800b880:	bfb8      	it	lt
 800b882:	461f      	movlt	r7, r3
 800b884:	e087      	b.n	800b996 <_ZN8touchgfx11Application15drawCachedAreasEv+0x44a>
 800b886:	428a      	cmp	r2, r1
 800b888:	bfb8      	it	lt
 800b88a:	460a      	movlt	r2, r1
 800b88c:	e083      	b.n	800b996 <_ZN8touchgfx11Application15drawCachedAreasEv+0x44a>
 800b88e:	bf00      	nop
 800b890:	200124bc 	.word	0x200124bc
 800b894:	200124c8 	.word	0x200124c8
 800b898:	2000008c 	.word	0x2000008c
 800b89c:	20012484 	.word	0x20012484
 800b8a0:	2001247a 	.word	0x2001247a
 800b8a4:	20012478 	.word	0x20012478
 800b8a8:	20012482 	.word	0x20012482
 800b8ac:	2001247c 	.word	0x2001247c
 800b8b0:	19a1      	adds	r1, r4, r6
 800b8b2:	ab07      	add	r3, sp, #28
 800b8b4:	f851 0fac 	ldr.w	r0, [r1, #172]!
 800b8b8:	6849      	ldr	r1, [r1, #4]
 800b8ba:	c303      	stmia	r3!, {r0, r1}
 800b8bc:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800b8c0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800b8c4:	2b13      	cmp	r3, #19
 800b8c6:	bfd8      	it	le
 800b8c8:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 800b8cc:	f8ad 201c 	strh.w	r2, [sp, #28]
 800b8d0:	440b      	add	r3, r1
 800b8d2:	1a9b      	subs	r3, r3, r2
 800b8d4:	a807      	add	r0, sp, #28
 800b8d6:	f8ad 3020 	strh.w	r3, [sp, #32]
 800b8da:	f7fe ffe1 	bl	800a8a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800b8de:	a807      	add	r0, sp, #28
 800b8e0:	f7fc fff5 	bl	80088ce <_ZNK8touchgfx4Rect7isEmptyEv>
 800b8e4:	bb78      	cbnz	r0, 800b946 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 800b8e6:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 800b8ea:	f8d9 0000 	ldr.w	r0, [r9]
 800b8ee:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800b8f2:	f8d0 e000 	ldr.w	lr, [r0]
 800b8f6:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800b8fa:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800b8fe:	f1bc 0f14 	cmp.w	ip, #20
 800b902:	bfa8      	it	ge
 800b904:	f04f 0c14 	movge.w	ip, #20
 800b908:	fa1f fc8c 	uxth.w	ip, ip
 800b90c:	f8cd c000 	str.w	ip, [sp]
 800b910:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 800b914:	47d8      	blx	fp
 800b916:	4683      	mov	fp, r0
 800b918:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 800b91c:	a807      	add	r0, sp, #28
 800b91e:	f7fe ffa5 	bl	800a86c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800b922:	6823      	ldr	r3, [r4, #0]
 800b924:	4426      	add	r6, r4
 800b926:	4620      	mov	r0, r4
 800b928:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b92a:	a907      	add	r1, sp, #28
 800b92c:	4798      	blx	r3
 800b92e:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 800b932:	eba0 000b 	sub.w	r0, r0, fp
 800b936:	b200      	sxth	r0, r0
 800b938:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 800b93c:	b918      	cbnz	r0, 800b946 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 800b93e:	b2b9      	uxth	r1, r7
 800b940:	4650      	mov	r0, sl
 800b942:	f7ff fa79 	bl	800ae38 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800b946:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 800b94a:	f1bb 0f00 	cmp.w	fp, #0
 800b94e:	f43f af2c 	beq.w	800b7aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 800b952:	882b      	ldrh	r3, [r5, #0]
 800b954:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 800b958:	3301      	adds	r3, #1
 800b95a:	b29b      	uxth	r3, r3
 800b95c:	2700      	movs	r7, #0
 800b95e:	b299      	uxth	r1, r3
 800b960:	458b      	cmp	fp, r1
 800b962:	ea4f 06c7 	mov.w	r6, r7, lsl #3
 800b966:	d9a3      	bls.n	800b8b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>
 800b968:	4426      	add	r6, r4
 800b96a:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 800b96e:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 800b972:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 800b976:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 800b97a:	4408      	add	r0, r1
 800b97c:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 800b980:	4461      	add	r1, ip
 800b982:	b200      	sxth	r0, r0
 800b984:	b209      	sxth	r1, r1
 800b986:	4288      	cmp	r0, r1
 800b988:	f6bf af71 	bge.w	800b86e <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 800b98c:	4584      	cmp	ip, r0
 800b98e:	4662      	mov	r2, ip
 800b990:	461f      	mov	r7, r3
 800b992:	bfb8      	it	lt
 800b994:	4602      	movlt	r2, r0
 800b996:	3301      	adds	r3, #1
 800b998:	e7e1      	b.n	800b95e <_ZN8touchgfx11Application15drawCachedAreasEv+0x412>
 800b99a:	d10e      	bne.n	800b9ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x46e>
 800b99c:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 800b9a0:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 800b9a4:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 800b9a8:	4473      	add	r3, lr
 800b9aa:	b21b      	sxth	r3, r3
 800b9ac:	429e      	cmp	r6, r3
 800b9ae:	bfa8      	it	ge
 800b9b0:	461e      	movge	r6, r3
 800b9b2:	4287      	cmp	r7, r0
 800b9b4:	bfb8      	it	lt
 800b9b6:	46e1      	movlt	r9, ip
 800b9b8:	e756      	b.n	800b868 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 800b9ba:	4286      	cmp	r6, r0
 800b9bc:	bfa8      	it	ge
 800b9be:	4606      	movge	r6, r0
 800b9c0:	e752      	b.n	800b868 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 800b9c2:	eb0a 0007 	add.w	r0, sl, r7
 800b9c6:	4427      	add	r7, r4
 800b9c8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800b9cc:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 800b9d0:	f1bb 0f13 	cmp.w	fp, #19
 800b9d4:	bfde      	ittt	le
 800b9d6:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 800b9da:	445e      	addle	r6, fp
 800b9dc:	b236      	sxthle	r6, r6
 800b9de:	f7fc ff76 	bl	80088ce <_ZNK8touchgfx4Rect7isEmptyEv>
 800b9e2:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b9e6:	2800      	cmp	r0, #0
 800b9e8:	f47f af1a 	bne.w	800b820 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d4>
 800b9ec:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 800b9f0:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 800b9f4:	482a      	ldr	r0, [pc, #168]	@ (800baa0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x554>)
 800b9f6:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 800b9fa:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 800b9fe:	6800      	ldr	r0, [r0, #0]
 800ba00:	f8ad 101c 	strh.w	r1, [sp, #28]
 800ba04:	1ab6      	subs	r6, r6, r2
 800ba06:	2e14      	cmp	r6, #20
 800ba08:	f8ad 201e 	strh.w	r2, [sp, #30]
 800ba0c:	f8ad 3020 	strh.w	r3, [sp, #32]
 800ba10:	bfa8      	it	ge
 800ba12:	2614      	movge	r6, #20
 800ba14:	f8d0 c000 	ldr.w	ip, [r0]
 800ba18:	b2b6      	uxth	r6, r6
 800ba1a:	fa1f fb8b 	uxth.w	fp, fp
 800ba1e:	455e      	cmp	r6, fp
 800ba20:	bf94      	ite	ls
 800ba22:	9600      	strls	r6, [sp, #0]
 800ba24:	f8cd b000 	strhi.w	fp, [sp]
 800ba28:	b292      	uxth	r2, r2
 800ba2a:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 800ba2e:	b29b      	uxth	r3, r3
 800ba30:	b289      	uxth	r1, r1
 800ba32:	47b0      	blx	r6
 800ba34:	6823      	ldr	r3, [r4, #0]
 800ba36:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 800ba3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ba3c:	a907      	add	r1, sp, #28
 800ba3e:	4620      	mov	r0, r4
 800ba40:	4798      	blx	r3
 800ba42:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 800ba46:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800ba4a:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 800ba4e:	1a5b      	subs	r3, r3, r1
 800ba50:	440a      	add	r2, r1
 800ba52:	b21b      	sxth	r3, r3
 800ba54:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 800ba58:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	f47f aeda 	bne.w	800b816 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 800ba62:	fa1f f189 	uxth.w	r1, r9
 800ba66:	4650      	mov	r0, sl
 800ba68:	f7ff f9e6 	bl	800ae38 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800ba6c:	e6d3      	b.n	800b816 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 800ba6e:	882e      	ldrh	r6, [r5, #0]
 800ba70:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 800ba74:	42b3      	cmp	r3, r6
 800ba76:	f67f ae98 	bls.w	800b7aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 800ba7a:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 800ba7e:	ab07      	add	r3, sp, #28
 800ba80:	f852 0fac 	ldr.w	r0, [r2, #172]!
 800ba84:	6851      	ldr	r1, [r2, #4]
 800ba86:	c303      	stmia	r3!, {r0, r1}
 800ba88:	a807      	add	r0, sp, #28
 800ba8a:	f7fc ff20 	bl	80088ce <_ZNK8touchgfx4Rect7isEmptyEv>
 800ba8e:	b920      	cbnz	r0, 800ba9a <_ZN8touchgfx11Application15drawCachedAreasEv+0x54e>
 800ba90:	6823      	ldr	r3, [r4, #0]
 800ba92:	a907      	add	r1, sp, #28
 800ba94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ba96:	4620      	mov	r0, r4
 800ba98:	4798      	blx	r3
 800ba9a:	3601      	adds	r6, #1
 800ba9c:	b2b6      	uxth	r6, r6
 800ba9e:	e7e7      	b.n	800ba70 <_ZN8touchgfx11Application15drawCachedAreasEv+0x524>
 800baa0:	20012484 	.word	0x20012484

0800baa4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 800baa4:	4b03      	ldr	r3, [pc, #12]	@ (800bab4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 800baa6:	2200      	movs	r2, #0
 800baa8:	801a      	strh	r2, [r3, #0]
 800baaa:	805a      	strh	r2, [r3, #2]
 800baac:	809a      	strh	r2, [r3, #4]
 800baae:	80da      	strh	r2, [r3, #6]
 800bab0:	4770      	bx	lr
 800bab2:	bf00      	nop
 800bab4:	200124c8 	.word	0x200124c8

0800bab8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 800bab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800babc:	4606      	mov	r6, r0
 800babe:	b09d      	sub	sp, #116	@ 0x74
 800bac0:	a803      	add	r0, sp, #12
 800bac2:	4614      	mov	r4, r2
 800bac4:	468a      	mov	sl, r1
 800bac6:	461d      	mov	r5, r3
 800bac8:	f000 fdad 	bl	800c626 <_ZN8touchgfx12TextProviderC1Ev>
 800bacc:	6833      	ldr	r3, [r6, #0]
 800bace:	4630      	mov	r0, r6
 800bad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bad2:	4798      	blx	r3
 800bad4:	6833      	ldr	r3, [r6, #0]
 800bad6:	4607      	mov	r7, r0
 800bad8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bada:	4630      	mov	r0, r6
 800badc:	4798      	blx	r3
 800bade:	462a      	mov	r2, r5
 800bae0:	9000      	str	r0, [sp, #0]
 800bae2:	4621      	mov	r1, r4
 800bae4:	463b      	mov	r3, r7
 800bae6:	a803      	add	r0, sp, #12
 800bae8:	f000 fdf0 	bl	800c6cc <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800baec:	2500      	movs	r5, #0
 800baee:	462c      	mov	r4, r5
 800baf0:	46a9      	mov	r9, r5
 800baf2:	46a8      	mov	r8, r5
 800baf4:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 800baf8:	2300      	movs	r3, #0
 800bafa:	9302      	str	r3, [sp, #8]
 800bafc:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800bb00:	429c      	cmp	r4, r3
 800bb02:	d002      	beq.n	800bb0a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 800bb04:	455c      	cmp	r4, fp
 800bb06:	bf18      	it	ne
 800bb08:	4625      	movne	r5, r4
 800bb0a:	ab02      	add	r3, sp, #8
 800bb0c:	4632      	mov	r2, r6
 800bb0e:	4651      	mov	r1, sl
 800bb10:	a803      	add	r0, sp, #12
 800bb12:	f001 f8cd 	bl	800ccb0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800bb16:	4604      	mov	r4, r0
 800bb18:	b108      	cbz	r0, 800bb1e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 800bb1a:	280a      	cmp	r0, #10
 800bb1c:	d10a      	bne.n	800bb34 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 800bb1e:	45c1      	cmp	r9, r8
 800bb20:	bf38      	it	cc
 800bb22:	46c1      	movcc	r9, r8
 800bb24:	f04f 0800 	mov.w	r8, #0
 800bb28:	2c00      	cmp	r4, #0
 800bb2a:	d1e5      	bne.n	800baf8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800bb2c:	4648      	mov	r0, r9
 800bb2e:	b01d      	add	sp, #116	@ 0x74
 800bb30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb34:	9a02      	ldr	r2, [sp, #8]
 800bb36:	2a00      	cmp	r2, #0
 800bb38:	d0de      	beq.n	800baf8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 800bb3a:	7b57      	ldrb	r7, [r2, #13]
 800bb3c:	6833      	ldr	r3, [r6, #0]
 800bb3e:	8894      	ldrh	r4, [r2, #4]
 800bb40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb42:	007f      	lsls	r7, r7, #1
 800bb44:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 800bb48:	7a97      	ldrb	r7, [r2, #10]
 800bb4a:	4629      	mov	r1, r5
 800bb4c:	4307      	orrs	r7, r0
 800bb4e:	4630      	mov	r0, r6
 800bb50:	4798      	blx	r3
 800bb52:	4438      	add	r0, r7
 800bb54:	4480      	add	r8, r0
 800bb56:	fa1f f888 	uxth.w	r8, r8
 800bb5a:	e7e5      	b.n	800bb28 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0800bb5c <_ZNK8touchgfx4Font12getCharWidthEt>:
 800bb5c:	b508      	push	{r3, lr}
 800bb5e:	6803      	ldr	r3, [r0, #0]
 800bb60:	68db      	ldr	r3, [r3, #12]
 800bb62:	4798      	blx	r3
 800bb64:	b128      	cbz	r0, 800bb72 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 800bb66:	7b43      	ldrb	r3, [r0, #13]
 800bb68:	7a80      	ldrb	r0, [r0, #10]
 800bb6a:	005b      	lsls	r3, r3, #1
 800bb6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb70:	4318      	orrs	r0, r3
 800bb72:	bd08      	pop	{r3, pc}

0800bb74 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 800bb74:	b40e      	push	{r1, r2, r3}
 800bb76:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb78:	b09e      	sub	sp, #120	@ 0x78
 800bb7a:	ab23      	add	r3, sp, #140	@ 0x8c
 800bb7c:	4605      	mov	r5, r0
 800bb7e:	f853 4b04 	ldr.w	r4, [r3], #4
 800bb82:	9303      	str	r3, [sp, #12]
 800bb84:	a805      	add	r0, sp, #20
 800bb86:	f000 fd4e 	bl	800c626 <_ZN8touchgfx12TextProviderC1Ev>
 800bb8a:	682b      	ldr	r3, [r5, #0]
 800bb8c:	4628      	mov	r0, r5
 800bb8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb90:	4798      	blx	r3
 800bb92:	682b      	ldr	r3, [r5, #0]
 800bb94:	4606      	mov	r6, r0
 800bb96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb98:	4628      	mov	r0, r5
 800bb9a:	4798      	blx	r3
 800bb9c:	4633      	mov	r3, r6
 800bb9e:	ae1e      	add	r6, sp, #120	@ 0x78
 800bba0:	4621      	mov	r1, r4
 800bba2:	9000      	str	r0, [sp, #0]
 800bba4:	9a03      	ldr	r2, [sp, #12]
 800bba6:	2400      	movs	r4, #0
 800bba8:	a805      	add	r0, sp, #20
 800bbaa:	f000 fd8f 	bl	800c6cc <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800bbae:	f846 4d68 	str.w	r4, [r6, #-104]!
 800bbb2:	462a      	mov	r2, r5
 800bbb4:	4633      	mov	r3, r6
 800bbb6:	4621      	mov	r1, r4
 800bbb8:	a805      	add	r0, sp, #20
 800bbba:	f001 f879 	bl	800ccb0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800bbbe:	b1f0      	cbz	r0, 800bbfe <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 800bbc0:	280a      	cmp	r0, #10
 800bbc2:	d018      	beq.n	800bbf6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 800bbc4:	9f04      	ldr	r7, [sp, #16]
 800bbc6:	b1b7      	cbz	r7, 800bbf6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 800bbc8:	7b78      	ldrb	r0, [r7, #13]
 800bbca:	7a3b      	ldrb	r3, [r7, #8]
 800bbcc:	88ea      	ldrh	r2, [r5, #6]
 800bbce:	00c1      	lsls	r1, r0, #3
 800bbd0:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800bbd4:	4319      	orrs	r1, r3
 800bbd6:	0643      	lsls	r3, r0, #25
 800bbd8:	bf44      	itt	mi
 800bbda:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 800bbde:	b219      	sxthmi	r1, r3
 800bbe0:	0100      	lsls	r0, r0, #4
 800bbe2:	79fb      	ldrb	r3, [r7, #7]
 800bbe4:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 800bbe8:	4303      	orrs	r3, r0
 800bbea:	4413      	add	r3, r2
 800bbec:	1a5b      	subs	r3, r3, r1
 800bbee:	b21b      	sxth	r3, r3
 800bbf0:	429c      	cmp	r4, r3
 800bbf2:	bfb8      	it	lt
 800bbf4:	461c      	movlt	r4, r3
 800bbf6:	4633      	mov	r3, r6
 800bbf8:	462a      	mov	r2, r5
 800bbfa:	2100      	movs	r1, #0
 800bbfc:	e7dc      	b.n	800bbb8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 800bbfe:	b2a0      	uxth	r0, r4
 800bc00:	b01e      	add	sp, #120	@ 0x78
 800bc02:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bc06:	b003      	add	sp, #12
 800bc08:	4770      	bx	lr

0800bc0a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 800bc0a:	7a43      	ldrb	r3, [r0, #9]
 800bc0c:	8880      	ldrh	r0, [r0, #4]
 800bc0e:	4418      	add	r0, r3
 800bc10:	b280      	uxth	r0, r0
 800bc12:	4770      	bx	lr

0800bc14 <_ZNK8touchgfx4Font13getFontHeightEv>:
 800bc14:	6803      	ldr	r3, [r0, #0]
 800bc16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc18:	4718      	bx	r3

0800bc1a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 800bc1a:	b40e      	push	{r1, r2, r3}
 800bc1c:	b570      	push	{r4, r5, r6, lr}
 800bc1e:	b09d      	sub	sp, #116	@ 0x74
 800bc20:	ab21      	add	r3, sp, #132	@ 0x84
 800bc22:	4604      	mov	r4, r0
 800bc24:	f853 5b04 	ldr.w	r5, [r3], #4
 800bc28:	9302      	str	r3, [sp, #8]
 800bc2a:	a803      	add	r0, sp, #12
 800bc2c:	f000 fcfb 	bl	800c626 <_ZN8touchgfx12TextProviderC1Ev>
 800bc30:	6823      	ldr	r3, [r4, #0]
 800bc32:	4620      	mov	r0, r4
 800bc34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc36:	4798      	blx	r3
 800bc38:	6823      	ldr	r3, [r4, #0]
 800bc3a:	4606      	mov	r6, r0
 800bc3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc3e:	4620      	mov	r0, r4
 800bc40:	4798      	blx	r3
 800bc42:	4633      	mov	r3, r6
 800bc44:	9000      	str	r0, [sp, #0]
 800bc46:	9a02      	ldr	r2, [sp, #8]
 800bc48:	4629      	mov	r1, r5
 800bc4a:	a803      	add	r0, sp, #12
 800bc4c:	f000 fd3e 	bl	800c6cc <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800bc50:	a803      	add	r0, sp, #12
 800bc52:	f001 f8af 	bl	800cdb4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800bc56:	2401      	movs	r4, #1
 800bc58:	b2a3      	uxth	r3, r4
 800bc5a:	b140      	cbz	r0, 800bc6e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 800bc5c:	280a      	cmp	r0, #10
 800bc5e:	bf08      	it	eq
 800bc60:	3301      	addeq	r3, #1
 800bc62:	a803      	add	r0, sp, #12
 800bc64:	bf08      	it	eq
 800bc66:	b21c      	sxtheq	r4, r3
 800bc68:	f001 f8a4 	bl	800cdb4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800bc6c:	e7f4      	b.n	800bc58 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 800bc6e:	4618      	mov	r0, r3
 800bc70:	b01d      	add	sp, #116	@ 0x74
 800bc72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bc76:	b003      	add	sp, #12
 800bc78:	4770      	bx	lr

0800bc7a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 800bc7a:	b40e      	push	{r1, r2, r3}
 800bc7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc7e:	b09e      	sub	sp, #120	@ 0x78
 800bc80:	ab23      	add	r3, sp, #140	@ 0x8c
 800bc82:	4604      	mov	r4, r0
 800bc84:	f853 5b04 	ldr.w	r5, [r3], #4
 800bc88:	9303      	str	r3, [sp, #12]
 800bc8a:	a805      	add	r0, sp, #20
 800bc8c:	f000 fccb 	bl	800c626 <_ZN8touchgfx12TextProviderC1Ev>
 800bc90:	6823      	ldr	r3, [r4, #0]
 800bc92:	4620      	mov	r0, r4
 800bc94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc96:	4798      	blx	r3
 800bc98:	6823      	ldr	r3, [r4, #0]
 800bc9a:	4606      	mov	r6, r0
 800bc9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc9e:	4620      	mov	r0, r4
 800bca0:	4798      	blx	r3
 800bca2:	4633      	mov	r3, r6
 800bca4:	4629      	mov	r1, r5
 800bca6:	9000      	str	r0, [sp, #0]
 800bca8:	9a03      	ldr	r2, [sp, #12]
 800bcaa:	a805      	add	r0, sp, #20
 800bcac:	ad1e      	add	r5, sp, #120	@ 0x78
 800bcae:	f000 fd0d 	bl	800c6cc <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800bcb2:	2100      	movs	r1, #0
 800bcb4:	f845 1d68 	str.w	r1, [r5, #-104]!
 800bcb8:	4622      	mov	r2, r4
 800bcba:	462b      	mov	r3, r5
 800bcbc:	a805      	add	r0, sp, #20
 800bcbe:	f000 fff7 	bl	800ccb0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800bcc2:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 800bcc6:	b1d8      	cbz	r0, 800bd00 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 800bcc8:	280a      	cmp	r0, #10
 800bcca:	d012      	beq.n	800bcf2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800bccc:	9804      	ldr	r0, [sp, #16]
 800bcce:	b180      	cbz	r0, 800bcf2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800bcd0:	7b47      	ldrb	r7, [r0, #13]
 800bcd2:	88e2      	ldrh	r2, [r4, #6]
 800bcd4:	00fb      	lsls	r3, r7, #3
 800bcd6:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800bcda:	7a03      	ldrb	r3, [r0, #8]
 800bcdc:	430b      	orrs	r3, r1
 800bcde:	0679      	lsls	r1, r7, #25
 800bce0:	bf44      	itt	mi
 800bce2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800bce6:	b21b      	sxthmi	r3, r3
 800bce8:	1ad3      	subs	r3, r2, r3
 800bcea:	b21b      	sxth	r3, r3
 800bcec:	429e      	cmp	r6, r3
 800bcee:	bfa8      	it	ge
 800bcf0:	461e      	movge	r6, r3
 800bcf2:	462b      	mov	r3, r5
 800bcf4:	4622      	mov	r2, r4
 800bcf6:	2100      	movs	r1, #0
 800bcf8:	a805      	add	r0, sp, #20
 800bcfa:	f000 ffd9 	bl	800ccb0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800bcfe:	e7e2      	b.n	800bcc6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 800bd00:	4630      	mov	r0, r6
 800bd02:	b01e      	add	sp, #120	@ 0x78
 800bd04:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bd08:	b003      	add	sp, #12
 800bd0a:	4770      	bx	lr

0800bd0c <_ZNK8touchgfx8Drawable10invalidateEv>:
 800bd0c:	b513      	push	{r0, r1, r4, lr}
 800bd0e:	6803      	ldr	r3, [r0, #0]
 800bd10:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800bd14:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800bd18:	f8ad 1004 	strh.w	r1, [sp, #4]
 800bd1c:	2400      	movs	r4, #0
 800bd1e:	9400      	str	r4, [sp, #0]
 800bd20:	f8ad 2006 	strh.w	r2, [sp, #6]
 800bd24:	691b      	ldr	r3, [r3, #16]
 800bd26:	4669      	mov	r1, sp
 800bd28:	4798      	blx	r3
 800bd2a:	b002      	add	sp, #8
 800bd2c:	bd10      	pop	{r4, pc}

0800bd2e <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 800bd2e:	b538      	push	{r3, r4, r5, lr}
 800bd30:	680b      	ldr	r3, [r1, #0]
 800bd32:	460c      	mov	r4, r1
 800bd34:	68db      	ldr	r3, [r3, #12]
 800bd36:	4605      	mov	r5, r0
 800bd38:	4798      	blx	r3
 800bd3a:	6823      	ldr	r3, [r4, #0]
 800bd3c:	4620      	mov	r0, r4
 800bd3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd40:	4629      	mov	r1, r5
 800bd42:	4798      	blx	r3
 800bd44:	4628      	mov	r0, r5
 800bd46:	bd38      	pop	{r3, r4, r5, pc}

0800bd48 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 800bd48:	b410      	push	{r4}
 800bd4a:	880a      	ldrh	r2, [r1, #0]
 800bd4c:	8884      	ldrh	r4, [r0, #4]
 800bd4e:	4422      	add	r2, r4
 800bd50:	800a      	strh	r2, [r1, #0]
 800bd52:	88c4      	ldrh	r4, [r0, #6]
 800bd54:	884a      	ldrh	r2, [r1, #2]
 800bd56:	4422      	add	r2, r4
 800bd58:	804a      	strh	r2, [r1, #2]
 800bd5a:	6940      	ldr	r0, [r0, #20]
 800bd5c:	b120      	cbz	r0, 800bd68 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 800bd5e:	6803      	ldr	r3, [r0, #0]
 800bd60:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd66:	4718      	bx	r3
 800bd68:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd6c:	4770      	bx	lr

0800bd6e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 800bd6e:	b570      	push	{r4, r5, r6, lr}
 800bd70:	8882      	ldrh	r2, [r0, #4]
 800bd72:	880b      	ldrh	r3, [r1, #0]
 800bd74:	4413      	add	r3, r2
 800bd76:	800b      	strh	r3, [r1, #0]
 800bd78:	88c2      	ldrh	r2, [r0, #6]
 800bd7a:	884b      	ldrh	r3, [r1, #2]
 800bd7c:	460c      	mov	r4, r1
 800bd7e:	4413      	add	r3, r2
 800bd80:	804b      	strh	r3, [r1, #2]
 800bd82:	4605      	mov	r5, r0
 800bd84:	1d01      	adds	r1, r0, #4
 800bd86:	4620      	mov	r0, r4
 800bd88:	f7fc fd5e 	bl	8008848 <_ZN8touchgfx4RectaNERKS0_>
 800bd8c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	dd0b      	ble.n	800bdac <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800bd94:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	dd07      	ble.n	800bdac <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800bd9c:	6968      	ldr	r0, [r5, #20]
 800bd9e:	b128      	cbz	r0, 800bdac <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800bda0:	6803      	ldr	r3, [r0, #0]
 800bda2:	4621      	mov	r1, r4
 800bda4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bda6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bdaa:	4718      	bx	r3
 800bdac:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bdb0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 800bdb0:	b570      	push	{r4, r5, r6, lr}
 800bdb2:	8882      	ldrh	r2, [r0, #4]
 800bdb4:	880b      	ldrh	r3, [r1, #0]
 800bdb6:	4413      	add	r3, r2
 800bdb8:	800b      	strh	r3, [r1, #0]
 800bdba:	88c2      	ldrh	r2, [r0, #6]
 800bdbc:	884b      	ldrh	r3, [r1, #2]
 800bdbe:	460c      	mov	r4, r1
 800bdc0:	4413      	add	r3, r2
 800bdc2:	804b      	strh	r3, [r1, #2]
 800bdc4:	4605      	mov	r5, r0
 800bdc6:	1d01      	adds	r1, r0, #4
 800bdc8:	4620      	mov	r0, r4
 800bdca:	f7fc fd3d 	bl	8008848 <_ZN8touchgfx4RectaNERKS0_>
 800bdce:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	dd19      	ble.n	800be0a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 800bdd6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	dd15      	ble.n	800be0a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 800bdde:	6968      	ldr	r0, [r5, #20]
 800bde0:	b128      	cbz	r0, 800bdee <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 800bde2:	6803      	ldr	r3, [r0, #0]
 800bde4:	4621      	mov	r1, r4
 800bde6:	691b      	ldr	r3, [r3, #16]
 800bde8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bdec:	4718      	bx	r3
 800bdee:	4b07      	ldr	r3, [pc, #28]	@ (800be0c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	3304      	adds	r3, #4
 800bdf4:	429d      	cmp	r5, r3
 800bdf6:	d108      	bne.n	800be0a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 800bdf8:	f7fe feea 	bl	800abd0 <_ZN8touchgfx11Application11getInstanceEv>
 800bdfc:	6803      	ldr	r3, [r0, #0]
 800bdfe:	6821      	ldr	r1, [r4, #0]
 800be00:	6862      	ldr	r2, [r4, #4]
 800be02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800be08:	4718      	bx	r3
 800be0a:	bd70      	pop	{r4, r5, r6, pc}
 800be0c:	200124c0 	.word	0x200124c0

0800be10 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 800be10:	b570      	push	{r4, r5, r6, lr}
 800be12:	4604      	mov	r4, r0
 800be14:	4616      	mov	r6, r2
 800be16:	460d      	mov	r5, r1
 800be18:	b901      	cbnz	r1, 800be1c <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 800be1a:	b192      	cbz	r2, 800be42 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 800be1c:	6823      	ldr	r3, [r4, #0]
 800be1e:	4620      	mov	r0, r4
 800be20:	699b      	ldr	r3, [r3, #24]
 800be22:	4798      	blx	r3
 800be24:	88e2      	ldrh	r2, [r4, #6]
 800be26:	88a1      	ldrh	r1, [r4, #4]
 800be28:	4432      	add	r2, r6
 800be2a:	4429      	add	r1, r5
 800be2c:	4620      	mov	r0, r4
 800be2e:	b212      	sxth	r2, r2
 800be30:	b209      	sxth	r1, r1
 800be32:	f7f6 fdde 	bl	80029f2 <_ZN8touchgfx8Drawable5setXYEss>
 800be36:	6823      	ldr	r3, [r4, #0]
 800be38:	4620      	mov	r0, r4
 800be3a:	699b      	ldr	r3, [r3, #24]
 800be3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800be40:	4718      	bx	r3
 800be42:	bd70      	pop	{r4, r5, r6, pc}

0800be44 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 800be44:	b510      	push	{r4, lr}
 800be46:	4604      	mov	r4, r0
 800be48:	4608      	mov	r0, r1
 800be4a:	2300      	movs	r3, #0
 800be4c:	8023      	strh	r3, [r4, #0]
 800be4e:	8063      	strh	r3, [r4, #2]
 800be50:	6803      	ldr	r3, [r0, #0]
 800be52:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800be56:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 800be5a:	80a1      	strh	r1, [r4, #4]
 800be5c:	80e2      	strh	r2, [r4, #6]
 800be5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be60:	4621      	mov	r1, r4
 800be62:	4798      	blx	r3
 800be64:	4620      	mov	r0, r4
 800be66:	bd10      	pop	{r4, pc}

0800be68 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 800be68:	b530      	push	{r4, r5, lr}
 800be6a:	8083      	strh	r3, [r0, #4]
 800be6c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800be70:	80c3      	strh	r3, [r0, #6]
 800be72:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800be76:	7203      	strb	r3, [r0, #8]
 800be78:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800be7c:	f89d 5018 	ldrb.w	r5, [sp, #24]
 800be80:	7243      	strb	r3, [r0, #9]
 800be82:	7a83      	ldrb	r3, [r0, #10]
 800be84:	6141      	str	r1, [r0, #20]
 800be86:	f365 0306 	bfi	r3, r5, #0, #7
 800be8a:	f89d 501c 	ldrb.w	r5, [sp, #28]
 800be8e:	8302      	strh	r2, [r0, #24]
 800be90:	f365 13c7 	bfi	r3, r5, #7, #1
 800be94:	7283      	strb	r3, [r0, #10]
 800be96:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800be9a:	72c3      	strb	r3, [r0, #11]
 800be9c:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800bea0:	7303      	strb	r3, [r0, #12]
 800bea2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 800bea6:	81c3      	strh	r3, [r0, #14]
 800bea8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 800beac:	8203      	strh	r3, [r0, #16]
 800beae:	4b01      	ldr	r3, [pc, #4]	@ (800beb4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 800beb0:	6003      	str	r3, [r0, #0]
 800beb2:	bd30      	pop	{r4, r5, pc}
 800beb4:	080128b8 	.word	0x080128b8

0800beb8 <_ZNK8touchgfx9ConstFont4findEt>:
 800beb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800beba:	6944      	ldr	r4, [r0, #20]
 800bebc:	b3bc      	cbz	r4, 800bf2e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800bebe:	88a3      	ldrh	r3, [r4, #4]
 800bec0:	8b02      	ldrh	r2, [r0, #24]
 800bec2:	1acb      	subs	r3, r1, r3
 800bec4:	f102 32ff 	add.w	r2, r2, #4294967295
 800bec8:	d431      	bmi.n	800bf2e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800beca:	4293      	cmp	r3, r2
 800becc:	dd0c      	ble.n	800bee8 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 800bece:	230e      	movs	r3, #14
 800bed0:	fb03 4302 	mla	r3, r3, r2, r4
 800bed4:	889b      	ldrh	r3, [r3, #4]
 800bed6:	1a5b      	subs	r3, r3, r1
 800bed8:	1ad3      	subs	r3, r2, r3
 800beda:	429a      	cmp	r2, r3
 800bedc:	db27      	blt.n	800bf2e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800bede:	2b00      	cmp	r3, #0
 800bee0:	bfbc      	itt	lt
 800bee2:	2302      	movlt	r3, #2
 800bee4:	fb92 f3f3 	sdivlt	r3, r2, r3
 800bee8:	2500      	movs	r5, #0
 800beea:	260e      	movs	r6, #14
 800beec:	4295      	cmp	r5, r2
 800beee:	dc1e      	bgt.n	800bf2e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800bef0:	fb06 4003 	mla	r0, r6, r3, r4
 800bef4:	8887      	ldrh	r7, [r0, #4]
 800bef6:	42b9      	cmp	r1, r7
 800bef8:	d01a      	beq.n	800bf30 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 800befa:	d20d      	bcs.n	800bf18 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 800befc:	1e5a      	subs	r2, r3, #1
 800befe:	4295      	cmp	r5, r2
 800bf00:	dc15      	bgt.n	800bf2e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800bf02:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 800bf06:	1a5b      	subs	r3, r3, r1
 800bf08:	1ad3      	subs	r3, r2, r3
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	db0f      	blt.n	800bf2e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800bf0e:	429d      	cmp	r5, r3
 800bf10:	ddec      	ble.n	800beec <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800bf12:	1953      	adds	r3, r2, r5
 800bf14:	105b      	asrs	r3, r3, #1
 800bf16:	e7e9      	b.n	800beec <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800bf18:	1c5d      	adds	r5, r3, #1
 800bf1a:	42aa      	cmp	r2, r5
 800bf1c:	db07      	blt.n	800bf2e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800bf1e:	8a43      	ldrh	r3, [r0, #18]
 800bf20:	1acb      	subs	r3, r1, r3
 800bf22:	442b      	add	r3, r5
 800bf24:	429d      	cmp	r5, r3
 800bf26:	dc02      	bgt.n	800bf2e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800bf28:	429a      	cmp	r2, r3
 800bf2a:	dadf      	bge.n	800beec <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800bf2c:	e7f1      	b.n	800bf12 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 800bf2e:	2000      	movs	r0, #0
 800bf30:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bf32 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 800bf32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf34:	4604      	mov	r4, r0
 800bf36:	4617      	mov	r7, r2
 800bf38:	461e      	mov	r6, r3
 800bf3a:	b911      	cbnz	r1, 800bf42 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 800bf3c:	2500      	movs	r5, #0
 800bf3e:	4628      	mov	r0, r5
 800bf40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf42:	290a      	cmp	r1, #10
 800bf44:	d0fa      	beq.n	800bf3c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800bf46:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 800bf4a:	4291      	cmp	r1, r2
 800bf4c:	d0f6      	beq.n	800bf3c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800bf4e:	f242 020b 	movw	r2, #8203	@ 0x200b
 800bf52:	4291      	cmp	r1, r2
 800bf54:	d0f2      	beq.n	800bf3c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800bf56:	f7ff ffaf 	bl	800beb8 <_ZNK8touchgfx9ConstFont4findEt>
 800bf5a:	4605      	mov	r5, r0
 800bf5c:	b950      	cbnz	r0, 800bf74 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 800bf5e:	6823      	ldr	r3, [r4, #0]
 800bf60:	4620      	mov	r0, r4
 800bf62:	691b      	ldr	r3, [r3, #16]
 800bf64:	4798      	blx	r3
 800bf66:	4601      	mov	r1, r0
 800bf68:	4620      	mov	r0, r4
 800bf6a:	f7ff ffa5 	bl	800beb8 <_ZNK8touchgfx9ConstFont4findEt>
 800bf6e:	4605      	mov	r5, r0
 800bf70:	2800      	cmp	r0, #0
 800bf72:	d0e3      	beq.n	800bf3c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800bf74:	6823      	ldr	r3, [r4, #0]
 800bf76:	4629      	mov	r1, r5
 800bf78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bf7a:	4620      	mov	r0, r4
 800bf7c:	4798      	blx	r3
 800bf7e:	6038      	str	r0, [r7, #0]
 800bf80:	6823      	ldr	r3, [r4, #0]
 800bf82:	4620      	mov	r0, r4
 800bf84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf86:	4798      	blx	r3
 800bf88:	7030      	strb	r0, [r6, #0]
 800bf8a:	e7d8      	b.n	800bf3e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0800bf8c <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 800bf8c:	2000      	movs	r0, #0
 800bf8e:	4770      	bx	lr

0800bf90 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 800bf90:	2001      	movs	r0, #1
 800bf92:	4770      	bx	lr

0800bf94 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 800bf94:	2002      	movs	r0, #2
 800bf96:	4770      	bx	lr

0800bf98 <_ZN8touchgfx6ScreenD1Ev>:
 800bf98:	4770      	bx	lr

0800bf9a <_ZN8touchgfx12GestureEventD1Ev>:
 800bf9a:	4770      	bx	lr

0800bf9c <_ZN8touchgfx9DragEventD1Ev>:
 800bf9c:	4770      	bx	lr

0800bf9e <_ZN8touchgfx10ClickEventD1Ev>:
 800bf9e:	4770      	bx	lr

0800bfa0 <_ZN8touchgfx10ClickEventD0Ev>:
 800bfa0:	b510      	push	{r4, lr}
 800bfa2:	210c      	movs	r1, #12
 800bfa4:	4604      	mov	r4, r0
 800bfa6:	f004 f967 	bl	8010278 <_ZdlPvj>
 800bfaa:	4620      	mov	r0, r4
 800bfac:	bd10      	pop	{r4, pc}

0800bfae <_ZN8touchgfx9DragEventD0Ev>:
 800bfae:	b510      	push	{r4, lr}
 800bfb0:	2110      	movs	r1, #16
 800bfb2:	4604      	mov	r4, r0
 800bfb4:	f004 f960 	bl	8010278 <_ZdlPvj>
 800bfb8:	4620      	mov	r0, r4
 800bfba:	bd10      	pop	{r4, pc}

0800bfbc <_ZN8touchgfx12GestureEventD0Ev>:
 800bfbc:	b510      	push	{r4, lr}
 800bfbe:	210c      	movs	r1, #12
 800bfc0:	4604      	mov	r4, r0
 800bfc2:	f004 f959 	bl	8010278 <_ZdlPvj>
 800bfc6:	4620      	mov	r0, r4
 800bfc8:	bd10      	pop	{r4, pc}

0800bfca <_ZN8touchgfx6ScreenD0Ev>:
 800bfca:	b510      	push	{r4, lr}
 800bfcc:	213c      	movs	r1, #60	@ 0x3c
 800bfce:	4604      	mov	r4, r0
 800bfd0:	f004 f952 	bl	8010278 <_ZdlPvj>
 800bfd4:	4620      	mov	r0, r4
 800bfd6:	bd10      	pop	{r4, pc}

0800bfd8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 800bfd8:	b530      	push	{r4, r5, lr}
 800bfda:	460d      	mov	r5, r1
 800bfdc:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800bfde:	b087      	sub	sp, #28
 800bfe0:	4604      	mov	r4, r0
 800bfe2:	b301      	cbz	r1, 800c026 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 800bfe4:	a801      	add	r0, sp, #4
 800bfe6:	f7ff ff2d 	bl	800be44 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800bfea:	892a      	ldrh	r2, [r5, #8]
 800bfec:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800bff0:	7928      	ldrb	r0, [r5, #4]
 800bff2:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 800bff6:	f88d 0010 	strb.w	r0, [sp, #16]
 800bffa:	1ad2      	subs	r2, r2, r3
 800bffc:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800bffe:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800c000:	f8ad 1012 	strh.w	r1, [sp, #18]
 800c004:	441a      	add	r2, r3
 800c006:	896b      	ldrh	r3, [r5, #10]
 800c008:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 800c00c:	f8ad 2014 	strh.w	r2, [sp, #20]
 800c010:	1b5b      	subs	r3, r3, r5
 800c012:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 800c014:	442b      	add	r3, r5
 800c016:	4d05      	ldr	r5, [pc, #20]	@ (800c02c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 800c018:	9503      	str	r5, [sp, #12]
 800c01a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c01e:	6803      	ldr	r3, [r0, #0]
 800c020:	a903      	add	r1, sp, #12
 800c022:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c024:	4798      	blx	r3
 800c026:	b007      	add	sp, #28
 800c028:	bd30      	pop	{r4, r5, pc}
 800c02a:	bf00      	nop
 800c02c:	08012948 	.word	0x08012948

0800c030 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 800c030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c034:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c036:	b08a      	sub	sp, #40	@ 0x28
 800c038:	4604      	mov	r4, r0
 800c03a:	460d      	mov	r5, r1
 800c03c:	b113      	cbz	r3, 800c044 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 800c03e:	790b      	ldrb	r3, [r1, #4]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d044      	beq.n	800c0ce <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800c044:	f104 0804 	add.w	r8, r4, #4
 800c048:	4641      	mov	r1, r8
 800c04a:	a803      	add	r0, sp, #12
 800c04c:	f7ff fefa 	bl	800be44 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800c050:	792b      	ldrb	r3, [r5, #4]
 800c052:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 800c056:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 800c05a:	b983      	cbnz	r3, 800c07e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 800c05c:	892a      	ldrh	r2, [r5, #8]
 800c05e:	88e9      	ldrh	r1, [r5, #6]
 800c060:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 800c064:	1b92      	subs	r2, r2, r6
 800c066:	1bc9      	subs	r1, r1, r7
 800c068:	9301      	str	r3, [sp, #4]
 800c06a:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 800c06e:	9300      	str	r3, [sp, #0]
 800c070:	b212      	sxth	r2, r2
 800c072:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 800c076:	b209      	sxth	r1, r1
 800c078:	4640      	mov	r0, r8
 800c07a:	f7fc fb01 	bl	8008680 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 800c07e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c080:	b329      	cbz	r1, 800c0ce <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800c082:	a805      	add	r0, sp, #20
 800c084:	f7ff fede 	bl	800be44 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800c088:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800c08c:	792b      	ldrb	r3, [r5, #4]
 800c08e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800c090:	f88d 3020 	strb.w	r3, [sp, #32]
 800c094:	1abf      	subs	r7, r7, r2
 800c096:	88ea      	ldrh	r2, [r5, #6]
 800c098:	4417      	add	r7, r2
 800c09a:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 800c09c:	4417      	add	r7, r2
 800c09e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800c0a2:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 800c0a6:	1ab6      	subs	r6, r6, r2
 800c0a8:	892a      	ldrh	r2, [r5, #8]
 800c0aa:	4416      	add	r6, r2
 800c0ac:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800c0ae:	4416      	add	r6, r2
 800c0b0:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 800c0b4:	4a07      	ldr	r2, [pc, #28]	@ (800c0d4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 800c0b6:	9207      	str	r2, [sp, #28]
 800c0b8:	2600      	movs	r6, #0
 800c0ba:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 800c0be:	6803      	ldr	r3, [r0, #0]
 800c0c0:	a907      	add	r1, sp, #28
 800c0c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0c4:	4798      	blx	r3
 800c0c6:	792b      	ldrb	r3, [r5, #4]
 800c0c8:	b10b      	cbz	r3, 800c0ce <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800c0ca:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 800c0ce:	b00a      	add	sp, #40	@ 0x28
 800c0d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0d4:	08012920 	.word	0x08012920

0800c0d8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 800c0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0dc:	460c      	mov	r4, r1
 800c0de:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800c0e0:	b088      	sub	sp, #32
 800c0e2:	4605      	mov	r5, r0
 800c0e4:	2900      	cmp	r1, #0
 800c0e6:	d06d      	beq.n	800c1c4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 800c0e8:	4668      	mov	r0, sp
 800c0ea:	f7ff feab 	bl	800be44 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800c0ee:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 800c0f0:	88e3      	ldrh	r3, [r4, #6]
 800c0f2:	f9bd 8000 	ldrsh.w	r8, [sp]
 800c0f6:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 800c0fa:	440b      	add	r3, r1
 800c0fc:	b21b      	sxth	r3, r3
 800c0fe:	4543      	cmp	r3, r8
 800c100:	db31      	blt.n	800c166 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800c102:	f8bd c004 	ldrh.w	ip, [sp, #4]
 800c106:	44c4      	add	ip, r8
 800c108:	fa0f fc8c 	sxth.w	ip, ip
 800c10c:	4563      	cmp	r3, ip
 800c10e:	da2a      	bge.n	800c166 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800c110:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 800c112:	8926      	ldrh	r6, [r4, #8]
 800c114:	4416      	add	r6, r2
 800c116:	b236      	sxth	r6, r6
 800c118:	42be      	cmp	r6, r7
 800c11a:	db24      	blt.n	800c166 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800c11c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800c120:	4438      	add	r0, r7
 800c122:	b200      	sxth	r0, r0
 800c124:	4286      	cmp	r6, r0
 800c126:	da1e      	bge.n	800c166 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800c128:	8963      	ldrh	r3, [r4, #10]
 800c12a:	4419      	add	r1, r3
 800c12c:	b209      	sxth	r1, r1
 800c12e:	4541      	cmp	r1, r8
 800c130:	db08      	blt.n	800c144 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800c132:	4561      	cmp	r1, ip
 800c134:	da06      	bge.n	800c144 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800c136:	89a3      	ldrh	r3, [r4, #12]
 800c138:	441a      	add	r2, r3
 800c13a:	b212      	sxth	r2, r2
 800c13c:	42ba      	cmp	r2, r7
 800c13e:	db01      	blt.n	800c144 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800c140:	4282      	cmp	r2, r0
 800c142:	db10      	blt.n	800c166 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800c144:	4b21      	ldr	r3, [pc, #132]	@ (800c1cc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 800c146:	9304      	str	r3, [sp, #16]
 800c148:	2302      	movs	r3, #2
 800c14a:	f88d 3014 	strb.w	r3, [sp, #20]
 800c14e:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800c150:	2300      	movs	r3, #0
 800c152:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c156:	f8ad 3018 	strh.w	r3, [sp, #24]
 800c15a:	f8ad 301a 	strh.w	r3, [sp, #26]
 800c15e:	6803      	ldr	r3, [r0, #0]
 800c160:	a904      	add	r1, sp, #16
 800c162:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c164:	4798      	blx	r3
 800c166:	1d29      	adds	r1, r5, #4
 800c168:	a802      	add	r0, sp, #8
 800c16a:	f7ff fe6b 	bl	800be44 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800c16e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800c172:	88e0      	ldrh	r0, [r4, #6]
 800c174:	7921      	ldrb	r1, [r4, #4]
 800c176:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 800c17a:	8922      	ldrh	r2, [r4, #8]
 800c17c:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 800c17e:	f88d 1014 	strb.w	r1, [sp, #20]
 800c182:	eba3 0808 	sub.w	r8, r3, r8
 800c186:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800c18a:	1bdf      	subs	r7, r3, r7
 800c18c:	b2bb      	uxth	r3, r7
 800c18e:	fa1f f888 	uxth.w	r8, r8
 800c192:	8967      	ldrh	r7, [r4, #10]
 800c194:	89a4      	ldrh	r4, [r4, #12]
 800c196:	4440      	add	r0, r8
 800c198:	4460      	add	r0, ip
 800c19a:	441a      	add	r2, r3
 800c19c:	44b8      	add	r8, r7
 800c19e:	4423      	add	r3, r4
 800c1a0:	f8ad 0016 	strh.w	r0, [sp, #22]
 800c1a4:	4433      	add	r3, r6
 800c1a6:	4432      	add	r2, r6
 800c1a8:	44e0      	add	r8, ip
 800c1aa:	4c09      	ldr	r4, [pc, #36]	@ (800c1d0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 800c1ac:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800c1ae:	9404      	str	r4, [sp, #16]
 800c1b0:	f8ad 2018 	strh.w	r2, [sp, #24]
 800c1b4:	f8ad 801a 	strh.w	r8, [sp, #26]
 800c1b8:	f8ad 301c 	strh.w	r3, [sp, #28]
 800c1bc:	6803      	ldr	r3, [r0, #0]
 800c1be:	a904      	add	r1, sp, #16
 800c1c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c1c2:	4798      	blx	r3
 800c1c4:	b008      	add	sp, #32
 800c1c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1ca:	bf00      	nop
 800c1cc:	08012920 	.word	0x08012920
 800c1d0:	08012934 	.word	0x08012934

0800c1d4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 800c1d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c1d6:	4604      	mov	r4, r0
 800c1d8:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 800c1dc:	3201      	adds	r2, #1
 800c1de:	d112      	bne.n	800c206 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 800c1e0:	6803      	ldr	r3, [r0, #0]
 800c1e2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800c1e6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800c1ea:	f8ad 1004 	strh.w	r1, [sp, #4]
 800c1ee:	2500      	movs	r5, #0
 800c1f0:	9500      	str	r5, [sp, #0]
 800c1f2:	466d      	mov	r5, sp
 800c1f4:	4629      	mov	r1, r5
 800c1f6:	f8ad 2006 	strh.w	r2, [sp, #6]
 800c1fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1fc:	4798      	blx	r3
 800c1fe:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c202:	e884 0003 	stmia.w	r4, {r0, r1}
 800c206:	4620      	mov	r0, r4
 800c208:	b003      	add	sp, #12
 800c20a:	bd30      	pop	{r4, r5, pc}

0800c20c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 800c20c:	b513      	push	{r0, r1, r4, lr}
 800c20e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 800c212:	3301      	adds	r3, #1
 800c214:	4604      	mov	r4, r0
 800c216:	d109      	bne.n	800c22c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 800c218:	4601      	mov	r1, r0
 800c21a:	4668      	mov	r0, sp
 800c21c:	f7ff fe12 	bl	800be44 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800c220:	f8bd 3000 	ldrh.w	r3, [sp]
 800c224:	8423      	strh	r3, [r4, #32]
 800c226:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800c22a:	8463      	strh	r3, [r4, #34]	@ 0x22
 800c22c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 800c230:	b002      	add	sp, #8
 800c232:	bd10      	pop	{r4, pc}

0800c234 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 800c234:	b513      	push	{r0, r1, r4, lr}
 800c236:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 800c23a:	3301      	adds	r3, #1
 800c23c:	4604      	mov	r4, r0
 800c23e:	d109      	bne.n	800c254 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 800c240:	4601      	mov	r1, r0
 800c242:	4668      	mov	r0, sp
 800c244:	f7ff fdfe 	bl	800be44 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800c248:	f8bd 3000 	ldrh.w	r3, [sp]
 800c24c:	8423      	strh	r3, [r4, #32]
 800c24e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800c252:	8463      	strh	r3, [r4, #34]	@ 0x22
 800c254:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 800c258:	b002      	add	sp, #8
 800c25a:	bd10      	pop	{r4, pc}

0800c25c <_ZN8touchgfx6ScreenC1Ev>:
 800c25c:	b570      	push	{r4, r5, r6, lr}
 800c25e:	4605      	mov	r5, r0
 800c260:	4b16      	ldr	r3, [pc, #88]	@ (800c2bc <_ZN8touchgfx6ScreenC1Ev+0x60>)
 800c262:	f845 3b04 	str.w	r3, [r5], #4
 800c266:	2300      	movs	r3, #0
 800c268:	8103      	strh	r3, [r0, #8]
 800c26a:	8143      	strh	r3, [r0, #10]
 800c26c:	8183      	strh	r3, [r0, #12]
 800c26e:	81c3      	strh	r3, [r0, #14]
 800c270:	8203      	strh	r3, [r0, #16]
 800c272:	8243      	strh	r3, [r0, #18]
 800c274:	8283      	strh	r3, [r0, #20]
 800c276:	82c3      	strh	r3, [r0, #22]
 800c278:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800c27c:	6203      	str	r3, [r0, #32]
 800c27e:	8483      	strh	r3, [r0, #36]	@ 0x24
 800c280:	84c3      	strh	r3, [r0, #38]	@ 0x26
 800c282:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 800c286:	4a0e      	ldr	r2, [pc, #56]	@ (800c2c0 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 800c288:	6343      	str	r3, [r0, #52]	@ 0x34
 800c28a:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 800c28e:	4b0d      	ldr	r3, [pc, #52]	@ (800c2c4 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 800c290:	6042      	str	r2, [r0, #4]
 800c292:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c296:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800c298:	4a0b      	ldr	r2, [pc, #44]	@ (800c2c8 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 800c29a:	4604      	mov	r4, r0
 800c29c:	2101      	movs	r1, #1
 800c29e:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 800c2a2:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800c2a6:	f9b2 1000 	ldrsh.w	r1, [r2]
 800c2aa:	4628      	mov	r0, r5
 800c2ac:	4798      	blx	r3
 800c2ae:	6863      	ldr	r3, [r4, #4]
 800c2b0:	4628      	mov	r0, r5
 800c2b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2b4:	4631      	mov	r1, r6
 800c2b6:	4798      	blx	r3
 800c2b8:	4620      	mov	r0, r4
 800c2ba:	bd70      	pop	{r4, r5, r6, pc}
 800c2bc:	0801295c 	.word	0x0801295c
 800c2c0:	080125f4 	.word	0x080125f4
 800c2c4:	2001247a 	.word	0x2001247a
 800c2c8:	20012478 	.word	0x20012478

0800c2cc <_ZN8touchgfx6Screen4drawEv>:
 800c2cc:	b507      	push	{r0, r1, r2, lr}
 800c2ce:	4b09      	ldr	r3, [pc, #36]	@ (800c2f4 <_ZN8touchgfx6Screen4drawEv+0x28>)
 800c2d0:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c2d4:	4b08      	ldr	r3, [pc, #32]	@ (800c2f8 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 800c2d6:	f8ad 2004 	strh.w	r2, [sp, #4]
 800c2da:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c2de:	f8ad 3006 	strh.w	r3, [sp, #6]
 800c2e2:	6803      	ldr	r3, [r0, #0]
 800c2e4:	2100      	movs	r1, #0
 800c2e6:	9100      	str	r1, [sp, #0]
 800c2e8:	689b      	ldr	r3, [r3, #8]
 800c2ea:	4669      	mov	r1, sp
 800c2ec:	4798      	blx	r3
 800c2ee:	b003      	add	sp, #12
 800c2f0:	f85d fb04 	ldr.w	pc, [sp], #4
 800c2f4:	20012478 	.word	0x20012478
 800c2f8:	2001247a 	.word	0x2001247a

0800c2fc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 800c2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c300:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800c304:	2b00      	cmp	r3, #0
 800c306:	b089      	sub	sp, #36	@ 0x24
 800c308:	4680      	mov	r8, r0
 800c30a:	460c      	mov	r4, r1
 800c30c:	4615      	mov	r5, r2
 800c30e:	dd0e      	ble.n	800c32e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800c310:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800c314:	2b00      	cmp	r3, #0
 800c316:	dd0a      	ble.n	800c32e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800c318:	4628      	mov	r0, r5
 800c31a:	f7ff ff5b 	bl	800c1d4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800c31e:	4621      	mov	r1, r4
 800c320:	f7fe fb77 	bl	800aa12 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800c324:	69eb      	ldr	r3, [r5, #28]
 800c326:	b928      	cbnz	r0, 800c334 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 800c328:	461d      	mov	r5, r3
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d1f4      	bne.n	800c318 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 800c32e:	b009      	add	sp, #36	@ 0x24
 800c330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c334:	ae04      	add	r6, sp, #16
 800c336:	2b00      	cmp	r3, #0
 800c338:	f000 80b5 	beq.w	800c4a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800c33c:	682b      	ldr	r3, [r5, #0]
 800c33e:	4629      	mov	r1, r5
 800c340:	68db      	ldr	r3, [r3, #12]
 800c342:	a802      	add	r0, sp, #8
 800c344:	4798      	blx	r3
 800c346:	4628      	mov	r0, r5
 800c348:	f7ff ff60 	bl	800c20c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800c34c:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 800c350:	4407      	add	r7, r0
 800c352:	4628      	mov	r0, r5
 800c354:	f7ff ff6e 	bl	800c234 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800c358:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800c35c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 800c360:	f8ad 2014 	strh.w	r2, [sp, #20]
 800c364:	4418      	add	r0, r3
 800c366:	4621      	mov	r1, r4
 800c368:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800c36c:	f8ad 0012 	strh.w	r0, [sp, #18]
 800c370:	b23f      	sxth	r7, r7
 800c372:	4630      	mov	r0, r6
 800c374:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c378:	f8ad 7010 	strh.w	r7, [sp, #16]
 800c37c:	f7fc fa64 	bl	8008848 <_ZN8touchgfx4RectaNERKS0_>
 800c380:	4628      	mov	r0, r5
 800c382:	f7ff ff27 	bl	800c1d4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800c386:	4602      	mov	r2, r0
 800c388:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c38c:	ab06      	add	r3, sp, #24
 800c38e:	e883 0003 	stmia.w	r3, {r0, r1}
 800c392:	4611      	mov	r1, r2
 800c394:	4618      	mov	r0, r3
 800c396:	f7fc fa57 	bl	8008848 <_ZN8touchgfx4RectaNERKS0_>
 800c39a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800c39e:	f9b4 1000 	ldrsh.w	r1, [r4]
 800c3a2:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 800c3a6:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 800c3aa:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 800c3ae:	4299      	cmp	r1, r3
 800c3b0:	d10b      	bne.n	800c3ca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800c3b2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800c3b6:	4552      	cmp	r2, sl
 800c3b8:	d107      	bne.n	800c3ca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800c3ba:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800c3be:	455a      	cmp	r2, fp
 800c3c0:	d103      	bne.n	800c3ca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800c3c2:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800c3c6:	454a      	cmp	r2, r9
 800c3c8:	d06d      	beq.n	800c4a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800c3ca:	f1bb 0f00 	cmp.w	fp, #0
 800c3ce:	dd65      	ble.n	800c49c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800c3d0:	f1b9 0f00 	cmp.w	r9, #0
 800c3d4:	dd62      	ble.n	800c49c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800c3d6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800c3da:	fa1f f08a 	uxth.w	r0, sl
 800c3de:	4552      	cmp	r2, sl
 800c3e0:	9000      	str	r0, [sp, #0]
 800c3e2:	da12      	bge.n	800c40a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 800c3e4:	9301      	str	r3, [sp, #4]
 800c3e6:	9b00      	ldr	r3, [sp, #0]
 800c3e8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800c3ec:	f8ad 2012 	strh.w	r2, [sp, #18]
 800c3f0:	1a9a      	subs	r2, r3, r2
 800c3f2:	f8ad 1010 	strh.w	r1, [sp, #16]
 800c3f6:	f8ad 0014 	strh.w	r0, [sp, #20]
 800c3fa:	f8ad 2016 	strh.w	r2, [sp, #22]
 800c3fe:	69ea      	ldr	r2, [r5, #28]
 800c400:	4631      	mov	r1, r6
 800c402:	4640      	mov	r0, r8
 800c404:	f7ff ff7a 	bl	800c2fc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800c408:	9b01      	ldr	r3, [sp, #4]
 800c40a:	f9b4 2000 	ldrsh.w	r2, [r4]
 800c40e:	429a      	cmp	r2, r3
 800c410:	b29f      	uxth	r7, r3
 800c412:	da0d      	bge.n	800c430 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 800c414:	f8ad 2010 	strh.w	r2, [sp, #16]
 800c418:	1aba      	subs	r2, r7, r2
 800c41a:	f8ad a012 	strh.w	sl, [sp, #18]
 800c41e:	f8ad 2014 	strh.w	r2, [sp, #20]
 800c422:	f8ad 9016 	strh.w	r9, [sp, #22]
 800c426:	69ea      	ldr	r2, [r5, #28]
 800c428:	4631      	mov	r1, r6
 800c42a:	4640      	mov	r0, r8
 800c42c:	f7ff ff66 	bl	800c2fc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800c430:	8822      	ldrh	r2, [r4, #0]
 800c432:	88a3      	ldrh	r3, [r4, #4]
 800c434:	445f      	add	r7, fp
 800c436:	4413      	add	r3, r2
 800c438:	b29b      	uxth	r3, r3
 800c43a:	b2bf      	uxth	r7, r7
 800c43c:	b23a      	sxth	r2, r7
 800c43e:	b219      	sxth	r1, r3
 800c440:	4291      	cmp	r1, r2
 800c442:	dd0d      	ble.n	800c460 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 800c444:	1bdb      	subs	r3, r3, r7
 800c446:	f8ad 2010 	strh.w	r2, [sp, #16]
 800c44a:	f8ad a012 	strh.w	sl, [sp, #18]
 800c44e:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c452:	f8ad 9016 	strh.w	r9, [sp, #22]
 800c456:	69ea      	ldr	r2, [r5, #28]
 800c458:	4631      	mov	r1, r6
 800c45a:	4640      	mov	r0, r8
 800c45c:	f7ff ff4e 	bl	800c2fc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800c460:	88e2      	ldrh	r2, [r4, #6]
 800c462:	8863      	ldrh	r3, [r4, #2]
 800c464:	4413      	add	r3, r2
 800c466:	9a00      	ldr	r2, [sp, #0]
 800c468:	444a      	add	r2, r9
 800c46a:	b29b      	uxth	r3, r3
 800c46c:	fa1f f982 	uxth.w	r9, r2
 800c470:	fa0f f289 	sxth.w	r2, r9
 800c474:	b219      	sxth	r1, r3
 800c476:	428a      	cmp	r2, r1
 800c478:	da15      	bge.n	800c4a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800c47a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800c47e:	f9b4 0000 	ldrsh.w	r0, [r4]
 800c482:	f8ad 1014 	strh.w	r1, [sp, #20]
 800c486:	eba3 0309 	sub.w	r3, r3, r9
 800c48a:	f8ad 0010 	strh.w	r0, [sp, #16]
 800c48e:	f8ad 2012 	strh.w	r2, [sp, #18]
 800c492:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c496:	69ea      	ldr	r2, [r5, #28]
 800c498:	4631      	mov	r1, r6
 800c49a:	e001      	b.n	800c4a0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 800c49c:	69ea      	ldr	r2, [r5, #28]
 800c49e:	4621      	mov	r1, r4
 800c4a0:	4640      	mov	r0, r8
 800c4a2:	f7ff ff2b 	bl	800c2fc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800c4a6:	4628      	mov	r0, r5
 800c4a8:	f7ff fe94 	bl	800c1d4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800c4ac:	6861      	ldr	r1, [r4, #4]
 800c4ae:	4602      	mov	r2, r0
 800c4b0:	6820      	ldr	r0, [r4, #0]
 800c4b2:	4633      	mov	r3, r6
 800c4b4:	c303      	stmia	r3!, {r0, r1}
 800c4b6:	4611      	mov	r1, r2
 800c4b8:	4630      	mov	r0, r6
 800c4ba:	f7fc f9c5 	bl	8008848 <_ZN8touchgfx4RectaNERKS0_>
 800c4be:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	f77f af33 	ble.w	800c32e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800c4c8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	f77f af2e 	ble.w	800c32e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800c4d2:	4628      	mov	r0, r5
 800c4d4:	f7ff fe9a 	bl	800c20c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800c4d8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800c4dc:	1a18      	subs	r0, r3, r0
 800c4de:	f8ad 0010 	strh.w	r0, [sp, #16]
 800c4e2:	4628      	mov	r0, r5
 800c4e4:	f7ff fea6 	bl	800c234 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800c4e8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800c4ec:	1a18      	subs	r0, r3, r0
 800c4ee:	f8ad 0012 	strh.w	r0, [sp, #18]
 800c4f2:	682b      	ldr	r3, [r5, #0]
 800c4f4:	4631      	mov	r1, r6
 800c4f6:	689b      	ldr	r3, [r3, #8]
 800c4f8:	4628      	mov	r0, r5
 800c4fa:	4798      	blx	r3
 800c4fc:	e717      	b.n	800c32e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0800c4fe <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 800c4fe:	b570      	push	{r4, r5, r6, lr}
 800c500:	460c      	mov	r4, r1
 800c502:	b086      	sub	sp, #24
 800c504:	1d06      	adds	r6, r0, #4
 800c506:	2300      	movs	r3, #0
 800c508:	4631      	mov	r1, r6
 800c50a:	4605      	mov	r5, r0
 800c50c:	a802      	add	r0, sp, #8
 800c50e:	9301      	str	r3, [sp, #4]
 800c510:	f7ff fc98 	bl	800be44 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800c514:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800c518:	8822      	ldrh	r2, [r4, #0]
 800c51a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800c51e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800c522:	f8ad 0014 	strh.w	r0, [sp, #20]
 800c526:	1ad2      	subs	r2, r2, r3
 800c528:	8863      	ldrh	r3, [r4, #2]
 800c52a:	f8ad 2010 	strh.w	r2, [sp, #16]
 800c52e:	1a5b      	subs	r3, r3, r1
 800c530:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 800c534:	f8ad 1016 	strh.w	r1, [sp, #22]
 800c538:	aa01      	add	r2, sp, #4
 800c53a:	a904      	add	r1, sp, #16
 800c53c:	4630      	mov	r0, r6
 800c53e:	f8ad 3012 	strh.w	r3, [sp, #18]
 800c542:	f7fc fa59 	bl	80089f8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 800c546:	9a01      	ldr	r2, [sp, #4]
 800c548:	b11a      	cbz	r2, 800c552 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 800c54a:	4621      	mov	r1, r4
 800c54c:	4628      	mov	r0, r5
 800c54e:	f7ff fed5 	bl	800c2fc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800c552:	b006      	add	sp, #24
 800c554:	bd70      	pop	{r4, r5, r6, pc}

0800c556 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 800c556:	b530      	push	{r4, r5, lr}
 800c558:	4602      	mov	r2, r0
 800c55a:	4604      	mov	r4, r0
 800c55c:	f852 0f08 	ldr.w	r0, [r2, #8]!
 800c560:	b085      	sub	sp, #20
 800c562:	460d      	mov	r5, r1
 800c564:	6851      	ldr	r1, [r2, #4]
 800c566:	466b      	mov	r3, sp
 800c568:	c303      	stmia	r3!, {r0, r1}
 800c56a:	4629      	mov	r1, r5
 800c56c:	4668      	mov	r0, sp
 800c56e:	f7fc f96b 	bl	8008848 <_ZN8touchgfx4RectaNERKS0_>
 800c572:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800c576:	b12b      	cbz	r3, 800c584 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 800c578:	4669      	mov	r1, sp
 800c57a:	4620      	mov	r0, r4
 800c57c:	f7ff ffbf 	bl	800c4fe <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 800c580:	b005      	add	sp, #20
 800c582:	bd30      	pop	{r4, r5, pc}
 800c584:	3404      	adds	r4, #4
 800c586:	4621      	mov	r1, r4
 800c588:	a802      	add	r0, sp, #8
 800c58a:	f7ff fc5b 	bl	800be44 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800c58e:	f8bd 3000 	ldrh.w	r3, [sp]
 800c592:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800c596:	1a9b      	subs	r3, r3, r2
 800c598:	f8ad 3000 	strh.w	r3, [sp]
 800c59c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800c5a0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800c5a4:	4669      	mov	r1, sp
 800c5a6:	1a9b      	subs	r3, r3, r2
 800c5a8:	4620      	mov	r0, r4
 800c5aa:	f8ad 3002 	strh.w	r3, [sp, #2]
 800c5ae:	f7fc f9ea 	bl	8008986 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 800c5b2:	e7e5      	b.n	800c580 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0800c5b4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 800c5b4:	680a      	ldr	r2, [r1, #0]
 800c5b6:	460b      	mov	r3, r1
 800c5b8:	6992      	ldr	r2, [r2, #24]
 800c5ba:	1d01      	adds	r1, r0, #4
 800c5bc:	4618      	mov	r0, r3
 800c5be:	4710      	bx	r2

0800c5c0 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 800c5c0:	4298      	cmp	r0, r3
 800c5c2:	d200      	bcs.n	800c5c6 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 800c5c4:	b913      	cbnz	r3, 800c5cc <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 800c5c6:	440a      	add	r2, r1
 800c5c8:	b210      	sxth	r0, r2
 800c5ca:	4770      	bx	lr
 800c5cc:	ee07 0a90 	vmov	s15, r0
 800c5d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5d4:	ee07 3a90 	vmov	s15, r3
 800c5d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c5dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c5e4:	ee37 7a66 	vsub.f32	s14, s14, s13
 800c5e8:	ee07 2a90 	vmov	s15, r2
 800c5ec:	ee67 5a07 	vmul.f32	s11, s14, s14
 800c5f0:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800c5f4:	eee5 6a87 	vfma.f32	s13, s11, s14
 800c5f8:	ee07 1a90 	vmov	s15, r1
 800c5fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c600:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800c604:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c608:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c60c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c610:	bfcc      	ite	gt
 800c612:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 800c616:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 800c61a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c61e:	ee17 3a90 	vmov	r3, s15
 800c622:	b218      	sxth	r0, r3
 800c624:	4770      	bx	lr

0800c626 <_ZN8touchgfx12TextProviderC1Ev>:
 800c626:	b538      	push	{r3, r4, r5, lr}
 800c628:	2500      	movs	r5, #0
 800c62a:	2302      	movs	r3, #2
 800c62c:	4604      	mov	r4, r0
 800c62e:	e9c0 5500 	strd	r5, r5, [r0]
 800c632:	7403      	strb	r3, [r0, #16]
 800c634:	6145      	str	r5, [r0, #20]
 800c636:	7605      	strb	r5, [r0, #24]
 800c638:	83c5      	strh	r5, [r0, #30]
 800c63a:	8405      	strh	r5, [r0, #32]
 800c63c:	86c5      	strh	r5, [r0, #54]	@ 0x36
 800c63e:	8705      	strh	r5, [r0, #56]	@ 0x38
 800c640:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 800c642:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 800c646:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 800c64a:	220e      	movs	r2, #14
 800c64c:	4629      	mov	r1, r5
 800c64e:	304c      	adds	r0, #76	@ 0x4c
 800c650:	f004 f847 	bl	80106e2 <memset>
 800c654:	2301      	movs	r3, #1
 800c656:	4620      	mov	r0, r4
 800c658:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 800c65c:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800c660:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 800c664:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 800c668:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 800c66c:	f7f6 fd7c 	bl	8003168 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 800c670:	4620      	mov	r0, r4
 800c672:	bd38      	pop	{r3, r4, r5, pc}

0800c674 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 800c674:	b530      	push	{r4, r5, lr}
 800c676:	2500      	movs	r5, #0
 800c678:	2401      	movs	r4, #1
 800c67a:	6843      	ldr	r3, [r0, #4]
 800c67c:	b913      	cbnz	r3, 800c684 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 800c67e:	6803      	ldr	r3, [r0, #0]
 800c680:	b313      	cbz	r3, 800c6c8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800c682:	6043      	str	r3, [r0, #4]
 800c684:	7e03      	ldrb	r3, [r0, #24]
 800c686:	b143      	cbz	r3, 800c69a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 800c688:	6943      	ldr	r3, [r0, #20]
 800c68a:	b12b      	cbz	r3, 800c698 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800c68c:	881a      	ldrh	r2, [r3, #0]
 800c68e:	b11a      	cbz	r2, 800c698 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800c690:	1c9a      	adds	r2, r3, #2
 800c692:	6142      	str	r2, [r0, #20]
 800c694:	8818      	ldrh	r0, [r3, #0]
 800c696:	bd30      	pop	{r4, r5, pc}
 800c698:	7605      	strb	r5, [r0, #24]
 800c69a:	6843      	ldr	r3, [r0, #4]
 800c69c:	8819      	ldrh	r1, [r3, #0]
 800c69e:	b199      	cbz	r1, 800c6c8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800c6a0:	1c9a      	adds	r2, r3, #2
 800c6a2:	2902      	cmp	r1, #2
 800c6a4:	6042      	str	r2, [r0, #4]
 800c6a6:	d1f5      	bne.n	800c694 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 800c6a8:	7c03      	ldrb	r3, [r0, #16]
 800c6aa:	2b01      	cmp	r3, #1
 800c6ac:	d8e5      	bhi.n	800c67a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800c6ae:	1c5a      	adds	r2, r3, #1
 800c6b0:	3302      	adds	r3, #2
 800c6b2:	7402      	strb	r2, [r0, #16]
 800c6b4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800c6b8:	6143      	str	r3, [r0, #20]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d0dd      	beq.n	800c67a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800c6be:	881b      	ldrh	r3, [r3, #0]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d0da      	beq.n	800c67a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800c6c4:	7604      	strb	r4, [r0, #24]
 800c6c6:	e7d8      	b.n	800c67a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800c6c8:	2000      	movs	r0, #0
 800c6ca:	e7e4      	b.n	800c696 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0800c6cc <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 800c6cc:	b430      	push	{r4, r5}
 800c6ce:	6001      	str	r1, [r0, #0]
 800c6d0:	2100      	movs	r1, #0
 800c6d2:	6041      	str	r1, [r0, #4]
 800c6d4:	6815      	ldr	r5, [r2, #0]
 800c6d6:	6085      	str	r5, [r0, #8]
 800c6d8:	6852      	ldr	r2, [r2, #4]
 800c6da:	6443      	str	r3, [r0, #68]	@ 0x44
 800c6dc:	9b02      	ldr	r3, [sp, #8]
 800c6de:	60c2      	str	r2, [r0, #12]
 800c6e0:	7401      	strb	r1, [r0, #16]
 800c6e2:	6141      	str	r1, [r0, #20]
 800c6e4:	7601      	strb	r1, [r0, #24]
 800c6e6:	8701      	strh	r1, [r0, #56]	@ 0x38
 800c6e8:	8401      	strh	r1, [r0, #32]
 800c6ea:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 800c6ee:	6483      	str	r3, [r0, #72]	@ 0x48
 800c6f0:	bc30      	pop	{r4, r5}
 800c6f2:	f7f6 bd39 	b.w	8003168 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0800c6f6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 800c6f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6f8:	4605      	mov	r5, r0
 800c6fa:	4608      	mov	r0, r1
 800c6fc:	b1e9      	cbz	r1, 800c73a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 800c6fe:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 800c702:	460b      	mov	r3, r1
 800c704:	f101 0708 	add.w	r7, r1, #8
 800c708:	4622      	mov	r2, r4
 800c70a:	6818      	ldr	r0, [r3, #0]
 800c70c:	6859      	ldr	r1, [r3, #4]
 800c70e:	4626      	mov	r6, r4
 800c710:	c603      	stmia	r6!, {r0, r1}
 800c712:	3308      	adds	r3, #8
 800c714:	42bb      	cmp	r3, r7
 800c716:	4634      	mov	r4, r6
 800c718:	d1f7      	bne.n	800c70a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 800c71a:	6818      	ldr	r0, [r3, #0]
 800c71c:	6030      	str	r0, [r6, #0]
 800c71e:	889b      	ldrh	r3, [r3, #4]
 800c720:	80b3      	strh	r3, [r6, #4]
 800c722:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 800c726:	015b      	lsls	r3, r3, #5
 800c728:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800c72c:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 800c730:	430b      	orrs	r3, r1
 800c732:	425b      	negs	r3, r3
 800c734:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 800c738:	4610      	mov	r0, r2
 800c73a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c73c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 800c73c:	b538      	push	{r3, r4, r5, lr}
 800c73e:	460c      	mov	r4, r1
 800c740:	6811      	ldr	r1, [r2, #0]
 800c742:	4610      	mov	r0, r2
 800c744:	68cd      	ldr	r5, [r1, #12]
 800c746:	4619      	mov	r1, r3
 800c748:	47a8      	blx	r5
 800c74a:	2800      	cmp	r0, #0
 800c74c:	bf08      	it	eq
 800c74e:	4620      	moveq	r0, r4
 800c750:	bd38      	pop	{r3, r4, r5, pc}
	...

0800c754 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 800c754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c758:	468c      	mov	ip, r1
 800c75a:	4604      	mov	r4, r0
 800c75c:	4615      	mov	r5, r2
 800c75e:	b942      	cbnz	r2, 800c772 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 800c760:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 800c764:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 800c768:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 800c76c:	4628      	mov	r0, r5
 800c76e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c772:	7b50      	ldrb	r0, [r2, #13]
 800c774:	8893      	ldrh	r3, [r2, #4]
 800c776:	0106      	lsls	r6, r0, #4
 800c778:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 800c77c:	79ee      	ldrb	r6, [r5, #7]
 800c77e:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 800c782:	4316      	orrs	r6, r2
 800c784:	185a      	adds	r2, r3, r1
 800c786:	b291      	uxth	r1, r2
 800c788:	291d      	cmp	r1, #29
 800c78a:	b2b7      	uxth	r7, r6
 800c78c:	d87e      	bhi.n	800c88c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x138>
 800c78e:	2201      	movs	r2, #1
 800c790:	408a      	lsls	r2, r1
 800c792:	4975      	ldr	r1, [pc, #468]	@ (800c968 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 800c794:	420a      	tst	r2, r1
 800c796:	ea4f 06e6 	mov.w	r6, r6, asr #3
 800c79a:	d12d      	bne.n	800c7f8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 800c79c:	f412 7f60 	tst.w	r2, #896	@ 0x380
 800c7a0:	d074      	beq.n	800c88c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x138>
 800c7a2:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 800c7a6:	462b      	mov	r3, r5
 800c7a8:	f105 0e08 	add.w	lr, r5, #8
 800c7ac:	4615      	mov	r5, r2
 800c7ae:	6818      	ldr	r0, [r3, #0]
 800c7b0:	6859      	ldr	r1, [r3, #4]
 800c7b2:	4694      	mov	ip, r2
 800c7b4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800c7b8:	3308      	adds	r3, #8
 800c7ba:	4573      	cmp	r3, lr
 800c7bc:	4662      	mov	r2, ip
 800c7be:	d1f6      	bne.n	800c7ae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 800c7c0:	6818      	ldr	r0, [r3, #0]
 800c7c2:	f8cc 0000 	str.w	r0, [ip]
 800c7c6:	889b      	ldrh	r3, [r3, #4]
 800c7c8:	f8ac 3004 	strh.w	r3, [ip, #4]
 800c7cc:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 800c7d0:	f894 0059 	ldrb.w	r0, [r4, #89]	@ 0x59
 800c7d4:	b2b3      	uxth	r3, r6
 800c7d6:	1aca      	subs	r2, r1, r3
 800c7d8:	b292      	uxth	r2, r2
 800c7da:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 800c7de:	10d2      	asrs	r2, r2, #3
 800c7e0:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 800c7e4:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 800c7e8:	4302      	orrs	r2, r0
 800c7ea:	1bcf      	subs	r7, r1, r7
 800c7ec:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 800c7f0:	1afb      	subs	r3, r7, r3
 800c7f2:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 800c7f6:	e7b9      	b.n	800c76c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 800c7f8:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 800c7fc:	462b      	mov	r3, r5
 800c7fe:	f105 0808 	add.w	r8, r5, #8
 800c802:	4615      	mov	r5, r2
 800c804:	6818      	ldr	r0, [r3, #0]
 800c806:	6859      	ldr	r1, [r3, #4]
 800c808:	4696      	mov	lr, r2
 800c80a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800c80e:	3308      	adds	r3, #8
 800c810:	4543      	cmp	r3, r8
 800c812:	4672      	mov	r2, lr
 800c814:	d1f6      	bne.n	800c804 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 800c816:	6818      	ldr	r0, [r3, #0]
 800c818:	f8ce 0000 	str.w	r0, [lr]
 800c81c:	889b      	ldrh	r3, [r3, #4]
 800c81e:	f8ae 3004 	strh.w	r3, [lr, #4]
 800c822:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800c824:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800c828:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 800c82a:	f640 6333 	movw	r3, #3635	@ 0xe33
 800c82e:	4299      	cmp	r1, r3
 800c830:	d111      	bne.n	800c856 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 800c832:	f8dc 3000 	ldr.w	r3, [ip]
 800c836:	4660      	mov	r0, ip
 800c838:	68db      	ldr	r3, [r3, #12]
 800c83a:	4798      	blx	r3
 800c83c:	7b41      	ldrb	r1, [r0, #13]
 800c83e:	00cb      	lsls	r3, r1, #3
 800c840:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800c844:	7a03      	ldrb	r3, [r0, #8]
 800c846:	4313      	orrs	r3, r2
 800c848:	064a      	lsls	r2, r1, #25
 800c84a:	bf44      	itt	mi
 800c84c:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800c850:	b21b      	sxthmi	r3, r3
 800c852:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800c856:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 800c85a:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 800c85e:	443b      	add	r3, r7
 800c860:	4433      	add	r3, r6
 800c862:	b29b      	uxth	r3, r3
 800c864:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800c868:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800c86c:	10db      	asrs	r3, r3, #3
 800c86e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800c872:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c876:	4313      	orrs	r3, r2
 800c878:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 800c87c:	f894 205e 	ldrb.w	r2, [r4, #94]	@ 0x5e
 800c880:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 800c884:	1a9b      	subs	r3, r3, r2
 800c886:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
 800c88a:	e76f      	b.n	800c76c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 800c88c:	f023 0204 	bic.w	r2, r3, #4
 800c890:	f640 611b 	movw	r1, #3611	@ 0xe1b
 800c894:	428a      	cmp	r2, r1
 800c896:	d003      	beq.n	800c8a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14c>
 800c898:	f640 621d 	movw	r2, #3613	@ 0xe1d
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d120      	bne.n	800c8e2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18e>
 800c8a0:	3b01      	subs	r3, #1
 800c8a2:	b29b      	uxth	r3, r3
 800c8a4:	4662      	mov	r2, ip
 800c8a6:	4629      	mov	r1, r5
 800c8a8:	4620      	mov	r0, r4
 800c8aa:	f7ff ff47 	bl	800c73c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800c8ae:	7b41      	ldrb	r1, [r0, #13]
 800c8b0:	00cb      	lsls	r3, r1, #3
 800c8b2:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800c8b6:	7a03      	ldrb	r3, [r0, #8]
 800c8b8:	0648      	lsls	r0, r1, #25
 800c8ba:	ea43 0302 	orr.w	r3, r3, r2
 800c8be:	bf44      	itt	mi
 800c8c0:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800c8c4:	b21b      	sxthmi	r3, r3
 800c8c6:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800c8ca:	7b6b      	ldrb	r3, [r5, #13]
 800c8cc:	7aaa      	ldrb	r2, [r5, #10]
 800c8ce:	005b      	lsls	r3, r3, #1
 800c8d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c8d4:	4313      	orrs	r3, r2
 800c8d6:	115a      	asrs	r2, r3, #5
 800c8d8:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 800c8dc:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 800c8e0:	e032      	b.n	800c948 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 800c8e2:	00c2      	lsls	r2, r0, #3
 800c8e4:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 800c8e8:	7a2a      	ldrb	r2, [r5, #8]
 800c8ea:	430a      	orrs	r2, r1
 800c8ec:	0641      	lsls	r1, r0, #25
 800c8ee:	bf44      	itt	mi
 800c8f0:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 800c8f4:	b212      	sxthmi	r2, r2
 800c8f6:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 800c8fa:	f640 6109 	movw	r1, #3593	@ 0xe09
 800c8fe:	f023 0210 	bic.w	r2, r3, #16
 800c902:	428a      	cmp	r2, r1
 800c904:	d003      	beq.n	800c90e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 800c906:	f640 6213 	movw	r2, #3603	@ 0xe13
 800c90a:	4293      	cmp	r3, r2
 800c90c:	d129      	bne.n	800c962 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 800c90e:	7b6e      	ldrb	r6, [r5, #13]
 800c910:	0076      	lsls	r6, r6, #1
 800c912:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 800c916:	7aae      	ldrb	r6, [r5, #10]
 800c918:	4316      	orrs	r6, r2
 800c91a:	f640 6213 	movw	r2, #3603	@ 0xe13
 800c91e:	4293      	cmp	r3, r2
 800c920:	bf1a      	itte	ne
 800c922:	f103 33ff 	addne.w	r3, r3, #4294967295
 800c926:	b29b      	uxthne	r3, r3
 800c928:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 800c92c:	4662      	mov	r2, ip
 800c92e:	4629      	mov	r1, r5
 800c930:	4620      	mov	r0, r4
 800c932:	f7ff ff03 	bl	800c73c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800c936:	7b43      	ldrb	r3, [r0, #13]
 800c938:	7a82      	ldrb	r2, [r0, #10]
 800c93a:	005b      	lsls	r3, r3, #1
 800c93c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c940:	4313      	orrs	r3, r2
 800c942:	1af6      	subs	r6, r6, r3
 800c944:	f8a4 605e 	strh.w	r6, [r4, #94]	@ 0x5e
 800c948:	7b69      	ldrb	r1, [r5, #13]
 800c94a:	00cb      	lsls	r3, r1, #3
 800c94c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800c950:	7a2b      	ldrb	r3, [r5, #8]
 800c952:	4313      	orrs	r3, r2
 800c954:	064a      	lsls	r2, r1, #25
 800c956:	bf44      	itt	mi
 800c958:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800c95c:	b21b      	sxthmi	r3, r3
 800c95e:	1bdb      	subs	r3, r3, r7
 800c960:	e747      	b.n	800c7f2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 800c962:	2300      	movs	r3, #0
 800c964:	e7ba      	b.n	800c8dc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 800c966:	bf00      	nop
 800c968:	3fc00079 	.word	0x3fc00079

0800c96c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 800c96c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c970:	4604      	mov	r4, r0
 800c972:	b942      	cbnz	r2, 800c986 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 800c974:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c978:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 800c97c:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 800c980:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 800c984:	e047      	b.n	800ca16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800c986:	7b51      	ldrb	r1, [r2, #13]
 800c988:	8893      	ldrh	r3, [r2, #4]
 800c98a:	010d      	lsls	r5, r1, #4
 800c98c:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 800c990:	79d5      	ldrb	r5, [r2, #7]
 800c992:	4305      	orrs	r5, r0
 800c994:	2d04      	cmp	r5, #4
 800c996:	bfcc      	ite	gt
 800c998:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 800c99c:	f04f 0e01 	movle.w	lr, #1
 800c9a0:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 800c9a4:	f200 80ab 	bhi.w	800cafe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 800c9a8:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 800c9ac:	4283      	cmp	r3, r0
 800c9ae:	d216      	bcs.n	800c9de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800c9b0:	f240 605b 	movw	r0, #1627	@ 0x65b
 800c9b4:	4283      	cmp	r3, r0
 800c9b6:	d859      	bhi.n	800ca6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 800c9b8:	f240 6057 	movw	r0, #1623	@ 0x657
 800c9bc:	4283      	cmp	r3, r0
 800c9be:	d20e      	bcs.n	800c9de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800c9c0:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 800c9c4:	d24a      	bcs.n	800ca5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 800c9c6:	f240 604e 	movw	r0, #1614	@ 0x64e
 800c9ca:	4283      	cmp	r3, r0
 800c9cc:	d207      	bcs.n	800c9de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800c9ce:	f240 601a 	movw	r0, #1562	@ 0x61a
 800c9d2:	4283      	cmp	r3, r0
 800c9d4:	d02a      	beq.n	800ca2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800c9d6:	d821      	bhi.n	800ca1c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 800c9d8:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 800c9dc:	d35b      	bcc.n	800ca96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800c9de:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 800c9e2:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800c9e6:	f040 80d0 	bne.w	800cb8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800c9ea:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 800c9ee:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800c9f2:	f040 80ca 	bne.w	800cb8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800c9f6:	00cb      	lsls	r3, r1, #3
 800c9f8:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800c9fc:	7a13      	ldrb	r3, [r2, #8]
 800c9fe:	0649      	lsls	r1, r1, #25
 800ca00:	ea43 0300 	orr.w	r3, r3, r0
 800ca04:	bf44      	itt	mi
 800ca06:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800ca0a:	b21b      	sxthmi	r3, r3
 800ca0c:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800ca10:	1b5d      	subs	r5, r3, r5
 800ca12:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800ca16:	4610      	mov	r0, r2
 800ca18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca1c:	f240 604b 	movw	r0, #1611	@ 0x64b
 800ca20:	4283      	cmp	r3, r0
 800ca22:	d338      	bcc.n	800ca96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800ca24:	f240 604c 	movw	r0, #1612	@ 0x64c
 800ca28:	4283      	cmp	r3, r0
 800ca2a:	d9d8      	bls.n	800c9de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ca2c:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 800ca30:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 800ca34:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800ca38:	f040 80f2 	bne.w	800cc20 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 800ca3c:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800ca40:	f040 80ee 	bne.w	800cc20 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 800ca44:	00cb      	lsls	r3, r1, #3
 800ca46:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800ca4a:	7a13      	ldrb	r3, [r2, #8]
 800ca4c:	064e      	lsls	r6, r1, #25
 800ca4e:	ea43 0300 	orr.w	r3, r3, r0
 800ca52:	bf44      	itt	mi
 800ca54:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800ca58:	b21b      	sxthmi	r3, r3
 800ca5a:	e7d9      	b.n	800ca10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 800ca5c:	f240 6054 	movw	r0, #1620	@ 0x654
 800ca60:	4283      	cmp	r3, r0
 800ca62:	d8e3      	bhi.n	800ca2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ca64:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 800ca68:	d9e0      	bls.n	800ca2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ca6a:	e7b8      	b.n	800c9de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ca6c:	f240 6074 	movw	r0, #1652	@ 0x674
 800ca70:	4283      	cmp	r3, r0
 800ca72:	d0b4      	beq.n	800c9de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ca74:	d82d      	bhi.n	800cad2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 800ca76:	f240 605e 	movw	r0, #1630	@ 0x65e
 800ca7a:	4283      	cmp	r3, r0
 800ca7c:	d804      	bhi.n	800ca88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 800ca7e:	f240 605d 	movw	r0, #1629	@ 0x65d
 800ca82:	4283      	cmp	r3, r0
 800ca84:	d3d2      	bcc.n	800ca2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ca86:	e7aa      	b.n	800c9de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ca88:	f240 605f 	movw	r0, #1631	@ 0x65f
 800ca8c:	4283      	cmp	r3, r0
 800ca8e:	d0cd      	beq.n	800ca2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800ca90:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 800ca94:	d0a3      	beq.n	800c9de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800ca96:	00cb      	lsls	r3, r1, #3
 800ca98:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800ca9c:	7a13      	ldrb	r3, [r2, #8]
 800ca9e:	0649      	lsls	r1, r1, #25
 800caa0:	ea43 0300 	orr.w	r3, r3, r0
 800caa4:	bf44      	itt	mi
 800caa6:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800caaa:	b21b      	sxthmi	r3, r3
 800caac:	1b5d      	subs	r5, r3, r5
 800caae:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800cab2:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800cab6:	7b53      	ldrb	r3, [r2, #13]
 800cab8:	015b      	lsls	r3, r3, #5
 800caba:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800cabe:	7993      	ldrb	r3, [r2, #6]
 800cac0:	430b      	orrs	r3, r1
 800cac2:	005b      	lsls	r3, r3, #1
 800cac4:	2105      	movs	r1, #5
 800cac6:	fb93 f3f1 	sdiv	r3, r3, r1
 800caca:	f992 1009 	ldrsb.w	r1, [r2, #9]
 800cace:	440b      	add	r3, r1
 800cad0:	e756      	b.n	800c980 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 800cad2:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 800cad6:	4283      	cmp	r3, r0
 800cad8:	d809      	bhi.n	800caee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 800cada:	f240 60df 	movw	r0, #1759	@ 0x6df
 800cade:	4283      	cmp	r3, r0
 800cae0:	f4bf af7d 	bcs.w	800c9de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800cae4:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 800cae8:	2b05      	cmp	r3, #5
 800caea:	d8d4      	bhi.n	800ca96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800caec:	e777      	b.n	800c9de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800caee:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 800caf2:	4283      	cmp	r3, r0
 800caf4:	d09a      	beq.n	800ca2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800caf6:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 800cafa:	4283      	cmp	r3, r0
 800cafc:	e7ca      	b.n	800ca94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800cafe:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 800cb02:	d22b      	bcs.n	800cb5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 800cb04:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 800cb08:	4283      	cmp	r3, r0
 800cb0a:	d28f      	bcs.n	800ca2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800cb0c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800cb10:	4283      	cmp	r3, r0
 800cb12:	d816      	bhi.n	800cb42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 800cb14:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 800cb18:	4283      	cmp	r3, r0
 800cb1a:	f4bf af60 	bcs.w	800c9de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800cb1e:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 800cb22:	4283      	cmp	r3, r0
 800cb24:	d80a      	bhi.n	800cb3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 800cb26:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 800cb2a:	4283      	cmp	r3, r0
 800cb2c:	f4bf af57 	bcs.w	800c9de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800cb30:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 800cb34:	4283      	cmp	r3, r0
 800cb36:	f43f af79 	beq.w	800ca2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800cb3a:	e7ac      	b.n	800ca96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800cb3c:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 800cb40:	e7f8      	b.n	800cb34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 800cb42:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 800cb46:	4283      	cmp	r3, r0
 800cb48:	d802      	bhi.n	800cb50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 800cb4a:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800cb4e:	e798      	b.n	800ca82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 800cb50:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 800cb54:	4283      	cmp	r3, r0
 800cb56:	f47f af42 	bne.w	800c9de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800cb5a:	e767      	b.n	800ca2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800cb5c:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 800cb60:	4283      	cmp	r3, r0
 800cb62:	f43f af63 	beq.w	800ca2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800cb66:	d802      	bhi.n	800cb6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 800cb68:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 800cb6c:	e7f2      	b.n	800cb54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 800cb6e:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 800cb72:	4283      	cmp	r3, r0
 800cb74:	d805      	bhi.n	800cb82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 800cb76:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 800cb7a:	4283      	cmp	r3, r0
 800cb7c:	f4ff af2f 	bcc.w	800c9de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800cb80:	e754      	b.n	800ca2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800cb82:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 800cb86:	4283      	cmp	r3, r0
 800cb88:	e7af      	b.n	800caea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 800cb8a:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 800cb8e:	4617      	mov	r7, r2
 800cb90:	f102 0808 	add.w	r8, r2, #8
 800cb94:	4666      	mov	r6, ip
 800cb96:	6838      	ldr	r0, [r7, #0]
 800cb98:	6879      	ldr	r1, [r7, #4]
 800cb9a:	46e6      	mov	lr, ip
 800cb9c:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800cba0:	3708      	adds	r7, #8
 800cba2:	4547      	cmp	r7, r8
 800cba4:	46f4      	mov	ip, lr
 800cba6:	d1f6      	bne.n	800cb96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 800cba8:	6838      	ldr	r0, [r7, #0]
 800cbaa:	f8ce 0000 	str.w	r0, [lr]
 800cbae:	88b9      	ldrh	r1, [r7, #4]
 800cbb0:	f8ae 1004 	strh.w	r1, [lr, #4]
 800cbb4:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 800cbb8:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800cbbc:	d009      	beq.n	800cbd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 800cbbe:	7b51      	ldrb	r1, [r2, #13]
 800cbc0:	7992      	ldrb	r2, [r2, #6]
 800cbc2:	0149      	lsls	r1, r1, #5
 800cbc4:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800cbc8:	4311      	orrs	r1, r2
 800cbca:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800cbce:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 800cbd2:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800cbd6:	b2ad      	uxth	r5, r5
 800cbd8:	d00d      	beq.n	800cbf6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 800cbda:	442b      	add	r3, r5
 800cbdc:	b29b      	uxth	r3, r3
 800cbde:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 800cbe2:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800cbe6:	10db      	asrs	r3, r3, #3
 800cbe8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800cbec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cbf0:	4313      	orrs	r3, r2
 800cbf2:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 800cbf6:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 800cbfa:	00cb      	lsls	r3, r1, #3
 800cbfc:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800cc00:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 800cc04:	064f      	lsls	r7, r1, #25
 800cc06:	ea43 0302 	orr.w	r3, r3, r2
 800cc0a:	bf44      	itt	mi
 800cc0c:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800cc10:	b21b      	sxthmi	r3, r3
 800cc12:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800cc16:	1b5b      	subs	r3, r3, r5
 800cc18:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 800cc1c:	4632      	mov	r2, r6
 800cc1e:	e6fa      	b.n	800ca16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800cc20:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 800cc24:	4617      	mov	r7, r2
 800cc26:	f102 0908 	add.w	r9, r2, #8
 800cc2a:	4666      	mov	r6, ip
 800cc2c:	6838      	ldr	r0, [r7, #0]
 800cc2e:	6879      	ldr	r1, [r7, #4]
 800cc30:	46e0      	mov	r8, ip
 800cc32:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 800cc36:	3708      	adds	r7, #8
 800cc38:	454f      	cmp	r7, r9
 800cc3a:	46c4      	mov	ip, r8
 800cc3c:	d1f6      	bne.n	800cc2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 800cc3e:	6838      	ldr	r0, [r7, #0]
 800cc40:	f8c8 0000 	str.w	r0, [r8]
 800cc44:	88b9      	ldrh	r1, [r7, #4]
 800cc46:	f8a8 1004 	strh.w	r1, [r8, #4]
 800cc4a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 800cc4e:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800cc52:	d009      	beq.n	800cc68 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 800cc54:	7b51      	ldrb	r1, [r2, #13]
 800cc56:	7992      	ldrb	r2, [r2, #6]
 800cc58:	0149      	lsls	r1, r1, #5
 800cc5a:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800cc5e:	4311      	orrs	r1, r2
 800cc60:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800cc64:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 800cc68:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800cc6c:	d00e      	beq.n	800cc8c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 800cc6e:	eba3 030e 	sub.w	r3, r3, lr
 800cc72:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 800cc76:	b29b      	uxth	r3, r3
 800cc78:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800cc7c:	10db      	asrs	r3, r3, #3
 800cc7e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cc82:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800cc86:	4313      	orrs	r3, r2
 800cc88:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 800cc8c:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 800cc90:	00cb      	lsls	r3, r1, #3
 800cc92:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800cc96:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 800cc9a:	0648      	lsls	r0, r1, #25
 800cc9c:	ea43 0302 	orr.w	r3, r3, r2
 800cca0:	bf44      	itt	mi
 800cca2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800cca6:	b21b      	sxthmi	r3, r3
 800cca8:	1b5d      	subs	r5, r3, r5
 800ccaa:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800ccae:	e7b5      	b.n	800cc1c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

0800ccb0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 800ccb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccb4:	461e      	mov	r6, r3
 800ccb6:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800ccb8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800ccbc:	4604      	mov	r4, r0
 800ccbe:	4617      	mov	r7, r2
 800ccc0:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 800ccc4:	f7f6 fa0e 	bl	80030e4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800ccc8:	4605      	mov	r5, r0
 800ccca:	b918      	cbnz	r0, 800ccd4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 800cccc:	6030      	str	r0, [r6, #0]
 800ccce:	4628      	mov	r0, r5
 800ccd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	4601      	mov	r1, r0
 800ccd8:	68db      	ldr	r3, [r3, #12]
 800ccda:	4638      	mov	r0, r7
 800ccdc:	4798      	blx	r3
 800ccde:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 800cce2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cce6:	4602      	mov	r2, r0
 800cce8:	6030      	str	r0, [r6, #0]
 800ccea:	d213      	bcs.n	800cd14 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 800ccec:	4643      	mov	r3, r8
 800ccee:	4639      	mov	r1, r7
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	f7ff fe3b 	bl	800c96c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 800ccf6:	6030      	str	r0, [r6, #0]
 800ccf8:	6833      	ldr	r3, [r6, #0]
 800ccfa:	b143      	cbz	r3, 800cd0e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 800ccfc:	7b5a      	ldrb	r2, [r3, #13]
 800ccfe:	7a9b      	ldrb	r3, [r3, #10]
 800cd00:	0052      	lsls	r2, r2, #1
 800cd02:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800cd06:	4313      	orrs	r3, r2
 800cd08:	bf0c      	ite	eq
 800cd0a:	2301      	moveq	r3, #1
 800cd0c:	2300      	movne	r3, #0
 800cd0e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 800cd12:	e7dc      	b.n	800ccce <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 800cd14:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 800cd18:	b29b      	uxth	r3, r3
 800cd1a:	2b7f      	cmp	r3, #127	@ 0x7f
 800cd1c:	d804      	bhi.n	800cd28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 800cd1e:	4639      	mov	r1, r7
 800cd20:	4620      	mov	r0, r4
 800cd22:	f7ff fd17 	bl	800c754 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 800cd26:	e7e6      	b.n	800ccf6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 800cd28:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d0e3      	beq.n	800ccf8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800cd30:	f640 1302 	movw	r3, #2306	@ 0x902
 800cd34:	429d      	cmp	r5, r3
 800cd36:	d1df      	bne.n	800ccf8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800cd38:	4601      	mov	r1, r0
 800cd3a:	4620      	mov	r0, r4
 800cd3c:	f7ff fcdb 	bl	800c6f6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 800cd40:	e7d9      	b.n	800ccf6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0800cd42 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 800cd42:	b510      	push	{r4, lr}
 800cd44:	4604      	mov	r4, r0
 800cd46:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 800cd4a:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800cd4c:	b1f1      	cbz	r1, 800cd8c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 800cd4e:	2b0a      	cmp	r3, #10
 800cd50:	d02f      	beq.n	800cdb2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 800cd52:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800cd54:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800cd58:	3901      	subs	r1, #1
 800cd5a:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 800cd5c:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 800cd60:	1c51      	adds	r1, r2, #1
 800cd62:	b289      	uxth	r1, r1
 800cd64:	2901      	cmp	r1, #1
 800cd66:	bf84      	itt	hi
 800cd68:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800cd6c:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 800cd6e:	f103 0201 	add.w	r2, r3, #1
 800cd72:	8722      	strh	r2, [r4, #56]	@ 0x38
 800cd74:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800cd76:	bf98      	it	ls
 800cd78:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 800cd7a:	4413      	add	r3, r2
 800cd7c:	b29b      	uxth	r3, r3
 800cd7e:	2b09      	cmp	r3, #9
 800cd80:	bf88      	it	hi
 800cd82:	3b0a      	subhi	r3, #10
 800cd84:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800cd88:	8458      	strh	r0, [r3, #34]	@ 0x22
 800cd8a:	e7dc      	b.n	800cd46 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 800cd8c:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800cd8e:	2b0a      	cmp	r3, #10
 800cd90:	d00f      	beq.n	800cdb2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 800cd92:	4620      	mov	r0, r4
 800cd94:	f7ff fc6e 	bl	800c674 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 800cd98:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800cd9a:	1c5a      	adds	r2, r3, #1
 800cd9c:	8722      	strh	r2, [r4, #56]	@ 0x38
 800cd9e:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800cda0:	4413      	add	r3, r2
 800cda2:	b29b      	uxth	r3, r3
 800cda4:	2b09      	cmp	r3, #9
 800cda6:	bf88      	it	hi
 800cda8:	3b0a      	subhi	r3, #10
 800cdaa:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800cdae:	8458      	strh	r0, [r3, #34]	@ 0x22
 800cdb0:	e7ec      	b.n	800cd8c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 800cdb2:	bd10      	pop	{r4, pc}

0800cdb4 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 800cdb4:	b538      	push	{r3, r4, r5, lr}
 800cdb6:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800cdb8:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 800cdbc:	4604      	mov	r4, r0
 800cdbe:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 800cdc0:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 800cdc2:	3a01      	subs	r2, #1
 800cdc4:	8702      	strh	r2, [r0, #56]	@ 0x38
 800cdc6:	1c5a      	adds	r2, r3, #1
 800cdc8:	b292      	uxth	r2, r2
 800cdca:	2a09      	cmp	r2, #9
 800cdcc:	bf86      	itte	hi
 800cdce:	3b09      	subhi	r3, #9
 800cdd0:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 800cdd2:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 800cdd4:	f7ff ffb5 	bl	800cd42 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 800cdd8:	8c23      	ldrh	r3, [r4, #32]
 800cdda:	2b01      	cmp	r3, #1
 800cddc:	bf9c      	itt	ls
 800cdde:	3301      	addls	r3, #1
 800cde0:	8423      	strhls	r3, [r4, #32]
 800cde2:	8be3      	ldrh	r3, [r4, #30]
 800cde4:	b90b      	cbnz	r3, 800cdea <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 800cde6:	2302      	movs	r3, #2
 800cde8:	83e3      	strh	r3, [r4, #30]
 800cdea:	8be3      	ldrh	r3, [r4, #30]
 800cdec:	3b01      	subs	r3, #1
 800cdee:	b29b      	uxth	r3, r3
 800cdf0:	83e3      	strh	r3, [r4, #30]
 800cdf2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800cdf6:	4628      	mov	r0, r5
 800cdf8:	8365      	strh	r5, [r4, #26]
 800cdfa:	bd38      	pop	{r3, r4, r5, pc}

0800cdfc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 800cdfc:	428a      	cmp	r2, r1
 800cdfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce02:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 800ce04:	d931      	bls.n	800ce6a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 800ce06:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 800ce08:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 800ce0c:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 800ce10:	19ee      	adds	r6, r5, r7
 800ce12:	1a54      	subs	r4, r2, r1
 800ce14:	3e01      	subs	r6, #1
 800ce16:	fa1f fe84 	uxth.w	lr, r4
 800ce1a:	b2b4      	uxth	r4, r6
 800ce1c:	eba4 090e 	sub.w	r9, r4, lr
 800ce20:	fa1f f989 	uxth.w	r9, r9
 800ce24:	2c09      	cmp	r4, #9
 800ce26:	4626      	mov	r6, r4
 800ce28:	bf88      	it	hi
 800ce2a:	f1a4 060a 	subhi.w	r6, r4, #10
 800ce2e:	f1bc 0f00 	cmp.w	ip, #0
 800ce32:	bf08      	it	eq
 800ce34:	f04f 0c02 	moveq.w	ip, #2
 800ce38:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800ce3c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ce40:	fa1f fc8c 	uxth.w	ip, ip
 800ce44:	3c01      	subs	r4, #1
 800ce46:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 800ce4a:	b2a4      	uxth	r4, r4
 800ce4c:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 800ce50:	454c      	cmp	r4, r9
 800ce52:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 800ce56:	d1e5      	bne.n	800ce24 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 800ce58:	eba5 050e 	sub.w	r5, r5, lr
 800ce5c:	eb0e 0408 	add.w	r4, lr, r8
 800ce60:	8705      	strh	r5, [r0, #56]	@ 0x38
 800ce62:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 800ce66:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 800ce6a:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 800ce6c:	1a64      	subs	r4, r4, r1
 800ce6e:	4439      	add	r1, r7
 800ce70:	b289      	uxth	r1, r1
 800ce72:	2909      	cmp	r1, #9
 800ce74:	bf88      	it	hi
 800ce76:	390a      	subhi	r1, #10
 800ce78:	8704      	strh	r4, [r0, #56]	@ 0x38
 800ce7a:	86c1      	strh	r1, [r0, #54]	@ 0x36
 800ce7c:	250a      	movs	r5, #10
 800ce7e:	b18a      	cbz	r2, 800cea4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 800ce80:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 800ce82:	3a01      	subs	r2, #1
 800ce84:	b292      	uxth	r2, r2
 800ce86:	3101      	adds	r1, #1
 800ce88:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 800ce8c:	8701      	strh	r1, [r0, #56]	@ 0x38
 800ce8e:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 800ce90:	b901      	cbnz	r1, 800ce94 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 800ce92:	86c5      	strh	r5, [r0, #54]	@ 0x36
 800ce94:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 800ce96:	3901      	subs	r1, #1
 800ce98:	b289      	uxth	r1, r1
 800ce9a:	86c1      	strh	r1, [r0, #54]	@ 0x36
 800ce9c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800cea0:	844c      	strh	r4, [r1, #34]	@ 0x22
 800cea2:	e7ec      	b.n	800ce7e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 800cea4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cea8:	f7ff bf4b 	b.w	800cd42 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0800ceac <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 800ceac:	b570      	push	{r4, r5, r6, lr}
 800ceae:	2500      	movs	r5, #0
 800ceb0:	4295      	cmp	r5, r2
 800ceb2:	d011      	beq.n	800ced8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 800ceb4:	8bc4      	ldrh	r4, [r0, #30]
 800ceb6:	f831 6b02 	ldrh.w	r6, [r1], #2
 800ceba:	4414      	add	r4, r2
 800cebc:	3c01      	subs	r4, #1
 800cebe:	1b64      	subs	r4, r4, r5
 800cec0:	b2a4      	uxth	r4, r4
 800cec2:	2c01      	cmp	r4, #1
 800cec4:	bf88      	it	hi
 800cec6:	3c02      	subhi	r4, #2
 800cec8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800cecc:	8b64      	ldrh	r4, [r4, #26]
 800cece:	42b4      	cmp	r4, r6
 800ced0:	d117      	bne.n	800cf02 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 800ced2:	3501      	adds	r5, #1
 800ced4:	b2ad      	uxth	r5, r5
 800ced6:	e7eb      	b.n	800ceb0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 800ced8:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800cedc:	2400      	movs	r4, #0
 800cede:	4413      	add	r3, r2
 800cee0:	b2a2      	uxth	r2, r4
 800cee2:	429a      	cmp	r2, r3
 800cee4:	da0f      	bge.n	800cf06 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 800cee6:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 800cee8:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 800ceec:	4432      	add	r2, r6
 800ceee:	b292      	uxth	r2, r2
 800cef0:	2a09      	cmp	r2, #9
 800cef2:	bf88      	it	hi
 800cef4:	3a0a      	subhi	r2, #10
 800cef6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800cefa:	3401      	adds	r4, #1
 800cefc:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 800cefe:	42aa      	cmp	r2, r5
 800cf00:	d0ee      	beq.n	800cee0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 800cf02:	2000      	movs	r0, #0
 800cf04:	bd70      	pop	{r4, r5, r6, pc}
 800cf06:	2001      	movs	r0, #1
 800cf08:	e7fc      	b.n	800cf04 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0800cf0a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 800cf0a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf0e:	4605      	mov	r5, r0
 800cf10:	4616      	mov	r6, r2
 800cf12:	1c8c      	adds	r4, r1, #2
 800cf14:	8809      	ldrh	r1, [r1, #0]
 800cf16:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 800cf1a:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 800cf1e:	42b3      	cmp	r3, r6
 800cf20:	d124      	bne.n	800cf6c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 800cf22:	f3c1 2903 	ubfx	r9, r1, #8, #4
 800cf26:	f3c1 1803 	ubfx	r8, r1, #4, #4
 800cf2a:	f001 070f 	and.w	r7, r1, #15
 800cf2e:	f8cd 8000 	str.w	r8, [sp]
 800cf32:	464b      	mov	r3, r9
 800cf34:	4652      	mov	r2, sl
 800cf36:	4621      	mov	r1, r4
 800cf38:	4628      	mov	r0, r5
 800cf3a:	f7ff ffb7 	bl	800ceac <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 800cf3e:	4683      	mov	fp, r0
 800cf40:	b168      	cbz	r0, 800cf5e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 800cf42:	eb0a 0109 	add.w	r1, sl, r9
 800cf46:	4441      	add	r1, r8
 800cf48:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 800cf4c:	463a      	mov	r2, r7
 800cf4e:	4649      	mov	r1, r9
 800cf50:	4628      	mov	r0, r5
 800cf52:	f7ff ff53 	bl	800cdfc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 800cf56:	4658      	mov	r0, fp
 800cf58:	b003      	add	sp, #12
 800cf5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf5e:	eb07 010a 	add.w	r1, r7, sl
 800cf62:	4449      	add	r1, r9
 800cf64:	4441      	add	r1, r8
 800cf66:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800cf6a:	e7d2      	b.n	800cf12 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 800cf6c:	f04f 0b00 	mov.w	fp, #0
 800cf70:	e7f1      	b.n	800cf56 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0800cf72 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 800cf72:	b570      	push	{r4, r5, r6, lr}
 800cf74:	8810      	ldrh	r0, [r2, #0]
 800cf76:	4298      	cmp	r0, r3
 800cf78:	d817      	bhi.n	800cfaa <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800cf7a:	1e48      	subs	r0, r1, #1
 800cf7c:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 800cf80:	4298      	cmp	r0, r3
 800cf82:	d312      	bcc.n	800cfaa <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800cf84:	2400      	movs	r4, #0
 800cf86:	428c      	cmp	r4, r1
 800cf88:	d20f      	bcs.n	800cfaa <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800cf8a:	1860      	adds	r0, r4, r1
 800cf8c:	1040      	asrs	r0, r0, #1
 800cf8e:	0085      	lsls	r5, r0, #2
 800cf90:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 800cf94:	42b3      	cmp	r3, r6
 800cf96:	d902      	bls.n	800cf9e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 800cf98:	3001      	adds	r0, #1
 800cf9a:	b284      	uxth	r4, r0
 800cf9c:	e7f3      	b.n	800cf86 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800cf9e:	d201      	bcs.n	800cfa4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 800cfa0:	b281      	uxth	r1, r0
 800cfa2:	e7f0      	b.n	800cf86 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800cfa4:	442a      	add	r2, r5
 800cfa6:	8850      	ldrh	r0, [r2, #2]
 800cfa8:	bd70      	pop	{r4, r5, r6, pc}
 800cfaa:	2000      	movs	r0, #0
 800cfac:	e7fc      	b.n	800cfa8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0800cfae <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 800cfae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfb2:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 800cfb4:	886f      	ldrh	r7, [r5, #2]
 800cfb6:	4604      	mov	r4, r0
 800cfb8:	087f      	lsrs	r7, r7, #1
 800cfba:	260b      	movs	r6, #11
 800cfbc:	3e01      	subs	r6, #1
 800cfbe:	d013      	beq.n	800cfe8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800cfc0:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800cfc2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800cfc6:	462a      	mov	r2, r5
 800cfc8:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 800cfcc:	4639      	mov	r1, r7
 800cfce:	4643      	mov	r3, r8
 800cfd0:	4620      	mov	r0, r4
 800cfd2:	f7ff ffce 	bl	800cf72 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 800cfd6:	b138      	cbz	r0, 800cfe8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800cfd8:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 800cfdc:	4642      	mov	r2, r8
 800cfde:	4620      	mov	r0, r4
 800cfe0:	f7ff ff93 	bl	800cf0a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 800cfe4:	2800      	cmp	r0, #0
 800cfe6:	d1e9      	bne.n	800cfbc <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 800cfe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cfec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 800cfec:	b570      	push	{r4, r5, r6, lr}
 800cfee:	694a      	ldr	r2, [r1, #20]
 800cff0:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800cff2:	684b      	ldr	r3, [r1, #4]
 800cff4:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 800cff6:	1b54      	subs	r4, r2, r5
 800cff8:	f000 8106 	beq.w	800d208 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 800cffc:	1b9b      	subs	r3, r3, r6
 800cffe:	d003      	beq.n	800d008 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 800d000:	4363      	muls	r3, r4
 800d002:	2210      	movs	r2, #16
 800d004:	fb93 f3f2 	sdiv	r3, r3, r2
 800d008:	680c      	ldr	r4, [r1, #0]
 800d00a:	698a      	ldr	r2, [r1, #24]
 800d00c:	1b65      	subs	r5, r4, r5
 800d00e:	f000 80fd 	beq.w	800d20c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 800d012:	1b92      	subs	r2, r2, r6
 800d014:	d003      	beq.n	800d01e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 800d016:	436a      	muls	r2, r5
 800d018:	2410      	movs	r4, #16
 800d01a:	fb92 f2f4 	sdiv	r2, r2, r4
 800d01e:	1a9b      	subs	r3, r3, r2
 800d020:	ee07 3a90 	vmov	s15, r3
 800d024:	ed9f 4a88 	vldr	s8, [pc, #544]	@ 800d248 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 800d028:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d02c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d030:	ee67 7a84 	vmul.f32	s15, s15, s8
 800d034:	460a      	mov	r2, r1
 800d036:	ee87 3a27 	vdiv.f32	s6, s14, s15
 800d03a:	4603      	mov	r3, r0
 800d03c:	f100 040c 	add.w	r4, r0, #12
 800d040:	eeb1 6a43 	vneg.f32	s12, s6
 800d044:	edd2 7a02 	vldr	s15, [r2, #8]
 800d048:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d04c:	3214      	adds	r2, #20
 800d04e:	ece3 6a01 	vstmia	r3!, {s13}
 800d052:	ed52 7a02 	vldr	s15, [r2, #-8]
 800d056:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d05a:	429c      	cmp	r4, r3
 800d05c:	edc3 7a02 	vstr	s15, [r3, #8]
 800d060:	ed52 7a01 	vldr	s15, [r2, #-4]
 800d064:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d068:	edc3 7a05 	vstr	s15, [r3, #20]
 800d06c:	d1ea      	bne.n	800d044 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 800d06e:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800d070:	698b      	ldr	r3, [r1, #24]
 800d072:	edd0 4a02 	vldr	s9, [r0, #8]
 800d076:	edd0 3a00 	vldr	s7, [r0]
 800d07a:	edd0 6a01 	vldr	s13, [r0, #4]
 800d07e:	ed90 5a05 	vldr	s10, [r0, #20]
 800d082:	ed90 2a03 	vldr	s4, [r0, #12]
 800d086:	edd0 5a04 	vldr	s11, [r0, #16]
 800d08a:	ed90 1a07 	vldr	s2, [r0, #28]
 800d08e:	edd0 2a06 	vldr	s5, [r0, #24]
 800d092:	1a9b      	subs	r3, r3, r2
 800d094:	ee07 3a90 	vmov	s15, r3
 800d098:	684b      	ldr	r3, [r1, #4]
 800d09a:	1a9b      	subs	r3, r3, r2
 800d09c:	ee07 3a10 	vmov	s14, r3
 800d0a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d0a4:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800d0a8:	ee67 7a84 	vmul.f32	s15, s15, s8
 800d0ac:	ee73 4ae4 	vsub.f32	s9, s7, s9
 800d0b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d0b4:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 800d0b8:	ee27 7a04 	vmul.f32	s14, s14, s8
 800d0bc:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800d0c0:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d0c4:	ee32 5a45 	vsub.f32	s10, s4, s10
 800d0c8:	ee67 7a83 	vmul.f32	s15, s15, s6
 800d0cc:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 800d0d0:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800d0d2:	694a      	ldr	r2, [r1, #20]
 800d0d4:	1b13      	subs	r3, r2, r4
 800d0d6:	ee07 3a10 	vmov	s14, r3
 800d0da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d0de:	680b      	ldr	r3, [r1, #0]
 800d0e0:	ee27 7a04 	vmul.f32	s14, s14, s8
 800d0e4:	1b1b      	subs	r3, r3, r4
 800d0e6:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 800d0ea:	ee07 3a10 	vmov	s14, r3
 800d0ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d0f2:	ee27 7a04 	vmul.f32	s14, s14, s8
 800d0f6:	eee6 4a87 	vfma.f32	s9, s13, s14
 800d0fa:	ee64 4a86 	vmul.f32	s9, s9, s12
 800d0fe:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 800d102:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800d104:	698b      	ldr	r3, [r1, #24]
 800d106:	1a9b      	subs	r3, r3, r2
 800d108:	ee06 3a90 	vmov	s13, r3
 800d10c:	684b      	ldr	r3, [r1, #4]
 800d10e:	1a9b      	subs	r3, r3, r2
 800d110:	ee07 3a10 	vmov	s14, r3
 800d114:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800d118:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d11c:	ee66 6a84 	vmul.f32	s13, s13, s8
 800d120:	ee27 7a04 	vmul.f32	s14, s14, s8
 800d124:	ee65 6a66 	vnmul.f32	s13, s10, s13
 800d128:	eee5 6a87 	vfma.f32	s13, s11, s14
 800d12c:	ee66 6a83 	vmul.f32	s13, s13, s6
 800d130:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 800d134:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800d136:	694a      	ldr	r2, [r1, #20]
 800d138:	1b13      	subs	r3, r2, r4
 800d13a:	ee07 3a10 	vmov	s14, r3
 800d13e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d142:	680b      	ldr	r3, [r1, #0]
 800d144:	ee27 7a04 	vmul.f32	s14, s14, s8
 800d148:	1b1b      	subs	r3, r3, r4
 800d14a:	ee25 5a47 	vnmul.f32	s10, s10, s14
 800d14e:	ee07 3a10 	vmov	s14, r3
 800d152:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d156:	ee27 7a04 	vmul.f32	s14, s14, s8
 800d15a:	eea5 5a87 	vfma.f32	s10, s11, s14
 800d15e:	edd0 5a08 	vldr	s11, [r0, #32]
 800d162:	ee25 5a06 	vmul.f32	s10, s10, s12
 800d166:	ee31 1a65 	vsub.f32	s2, s2, s11
 800d16a:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 800d16e:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800d170:	698b      	ldr	r3, [r1, #24]
 800d172:	1a9b      	subs	r3, r3, r2
 800d174:	ee07 3a10 	vmov	s14, r3
 800d178:	684b      	ldr	r3, [r1, #4]
 800d17a:	1a9b      	subs	r3, r3, r2
 800d17c:	ee01 3a90 	vmov	s3, r3
 800d180:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d184:	ee72 5ae5 	vsub.f32	s11, s5, s11
 800d188:	ee27 7a04 	vmul.f32	s14, s14, s8
 800d18c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 800d190:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 800d194:	ee61 1a84 	vmul.f32	s3, s3, s8
 800d198:	eea1 7a21 	vfma.f32	s14, s2, s3
 800d19c:	ee27 7a03 	vmul.f32	s14, s14, s6
 800d1a0:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 800d1a4:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800d1a6:	694a      	ldr	r2, [r1, #20]
 800d1a8:	1b13      	subs	r3, r2, r4
 800d1aa:	ee03 3a10 	vmov	s6, r3
 800d1ae:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 800d1b2:	680b      	ldr	r3, [r1, #0]
 800d1b4:	ee23 3a04 	vmul.f32	s6, s6, s8
 800d1b8:	1b1b      	subs	r3, r3, r4
 800d1ba:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 800d1be:	ee03 3a10 	vmov	s6, r3
 800d1c2:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 800d1c6:	ee23 4a04 	vmul.f32	s8, s6, s8
 800d1ca:	eee1 5a04 	vfma.f32	s11, s2, s8
 800d1ce:	ee25 6a86 	vmul.f32	s12, s11, s12
 800d1d2:	ee62 5a67 	vnmul.f32	s11, s4, s15
 800d1d6:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 800d1da:	eee3 5aa6 	vfma.f32	s11, s7, s13
 800d1de:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800d1e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1e6:	dd13      	ble.n	800d210 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 800d1e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d1ec:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 800d1f0:	63c3      	str	r3, [r0, #60]	@ 0x3c
 800d1f2:	eee3 7a87 	vfma.f32	s15, s7, s14
 800d1f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d1fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1fe:	dd15      	ble.n	800d22c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 800d200:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d204:	6403      	str	r3, [r0, #64]	@ 0x40
 800d206:	bd70      	pop	{r4, r5, r6, pc}
 800d208:	4623      	mov	r3, r4
 800d20a:	e6fd      	b.n	800d008 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 800d20c:	462a      	mov	r2, r5
 800d20e:	e706      	b.n	800d01e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 800d210:	d502      	bpl.n	800d218 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 800d212:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800d216:	e7e9      	b.n	800d1ec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 800d218:	ee22 2a64 	vnmul.f32	s4, s4, s9
 800d21c:	eea3 2a85 	vfma.f32	s4, s7, s10
 800d220:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 800d224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d228:	dade      	bge.n	800d1e8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 800d22a:	e7f2      	b.n	800d212 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 800d22c:	d502      	bpl.n	800d234 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 800d22e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800d232:	e7e7      	b.n	800d204 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 800d234:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 800d238:	eee3 4a86 	vfma.f32	s9, s7, s12
 800d23c:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 800d240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d244:	dadc      	bge.n	800d200 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 800d246:	e7f2      	b.n	800d22e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 800d248:	3d800000 	.word	0x3d800000

0800d24c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 800d24c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d250:	2714      	movs	r7, #20
 800d252:	435f      	muls	r7, r3
 800d254:	eb02 0c07 	add.w	ip, r2, r7
 800d258:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800d25c:	f115 0e0f 	adds.w	lr, r5, #15
 800d260:	f100 80a2 	bmi.w	800d3a8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 800d264:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 800d268:	9c08      	ldr	r4, [sp, #32]
 800d26a:	f8c0 e014 	str.w	lr, [r0, #20]
 800d26e:	2614      	movs	r6, #20
 800d270:	4366      	muls	r6, r4
 800d272:	eb02 0806 	add.w	r8, r2, r6
 800d276:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d27a:	f115 040f 	adds.w	r4, r5, #15
 800d27e:	f100 809f 	bmi.w	800d3c0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 800d282:	1124      	asrs	r4, r4, #4
 800d284:	eba4 040e 	sub.w	r4, r4, lr
 800d288:	6184      	str	r4, [r0, #24]
 800d28a:	2c00      	cmp	r4, #0
 800d28c:	f000 808a 	beq.w	800d3a4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 800d290:	f8dc 9004 	ldr.w	r9, [ip, #4]
 800d294:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800d298:	5995      	ldr	r5, [r2, r6]
 800d29a:	eba4 0809 	sub.w	r8, r4, r9
 800d29e:	59d4      	ldr	r4, [r2, r7]
 800d2a0:	eba5 0a04 	sub.w	sl, r5, r4
 800d2a4:	ea4f 150a 	mov.w	r5, sl, lsl #4
 800d2a8:	fb0e fe05 	mul.w	lr, lr, r5
 800d2ac:	fb0a ee19 	mls	lr, sl, r9, lr
 800d2b0:	fb08 e404 	mla	r4, r8, r4, lr
 800d2b4:	ea4f 1608 	mov.w	r6, r8, lsl #4
 800d2b8:	3c01      	subs	r4, #1
 800d2ba:	19a4      	adds	r4, r4, r6
 800d2bc:	f100 808c 	bmi.w	800d3d8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 800d2c0:	fb94 fef6 	sdiv	lr, r4, r6
 800d2c4:	f8c0 e000 	str.w	lr, [r0]
 800d2c8:	fb06 441e 	mls	r4, r6, lr, r4
 800d2cc:	6104      	str	r4, [r0, #16]
 800d2ce:	2d00      	cmp	r5, #0
 800d2d0:	f2c0 8095 	blt.w	800d3fe <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 800d2d4:	fb95 f4f6 	sdiv	r4, r5, r6
 800d2d8:	6044      	str	r4, [r0, #4]
 800d2da:	fb06 5514 	mls	r5, r6, r4, r5
 800d2de:	6085      	str	r5, [r0, #8]
 800d2e0:	60c6      	str	r6, [r0, #12]
 800d2e2:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800d2e6:	6945      	ldr	r5, [r0, #20]
 800d2e8:	59d2      	ldr	r2, [r2, r7]
 800d2ea:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 800d420 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 800d2ee:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 800d2f2:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 800d2f6:	ee07 4a10 	vmov	s14, r4
 800d2fa:	6804      	ldr	r4, [r0, #0]
 800d2fc:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 800d300:	ee07 2a90 	vmov	s15, r2
 800d304:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d308:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d30c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800d310:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d314:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d318:	edd3 6a00 	vldr	s13, [r3]
 800d31c:	eee6 6a07 	vfma.f32	s13, s12, s14
 800d320:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 800d324:	eee6 6a27 	vfma.f32	s13, s12, s15
 800d328:	edc0 6a07 	vstr	s13, [r0, #28]
 800d32c:	edd0 6a01 	vldr	s13, [r0, #4]
 800d330:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 800d334:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 800d338:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800d33c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800d340:	ed80 6a08 	vstr	s12, [r0, #32]
 800d344:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 800d346:	6242      	str	r2, [r0, #36]	@ 0x24
 800d348:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 800d34c:	ed93 6a03 	vldr	s12, [r3, #12]
 800d350:	eea5 6a87 	vfma.f32	s12, s11, s14
 800d354:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 800d358:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800d35c:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 800d360:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 800d364:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 800d368:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800d36c:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 800d370:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800d372:	6302      	str	r2, [r0, #48]	@ 0x30
 800d374:	ed93 6a06 	vldr	s12, [r3, #24]
 800d378:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 800d37c:	eea5 6a87 	vfma.f32	s12, s11, s14
 800d380:	eeb0 7a46 	vmov.f32	s14, s12
 800d384:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 800d388:	eea6 7a27 	vfma.f32	s14, s12, s15
 800d38c:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 800d390:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 800d394:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 800d398:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d39c:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 800d3a0:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800d3a2:	63c3      	str	r3, [r0, #60]	@ 0x3c
 800d3a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3a8:	f1c5 0501 	rsb	r5, r5, #1
 800d3ac:	f015 050f 	ands.w	r5, r5, #15
 800d3b0:	bf18      	it	ne
 800d3b2:	2501      	movne	r5, #1
 800d3b4:	2410      	movs	r4, #16
 800d3b6:	fb9e fef4 	sdiv	lr, lr, r4
 800d3ba:	ebae 0e05 	sub.w	lr, lr, r5
 800d3be:	e753      	b.n	800d268 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 800d3c0:	f1c5 0501 	rsb	r5, r5, #1
 800d3c4:	f015 050f 	ands.w	r5, r5, #15
 800d3c8:	bf18      	it	ne
 800d3ca:	2501      	movne	r5, #1
 800d3cc:	f04f 0910 	mov.w	r9, #16
 800d3d0:	fb94 f4f9 	sdiv	r4, r4, r9
 800d3d4:	1b64      	subs	r4, r4, r5
 800d3d6:	e755      	b.n	800d284 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 800d3d8:	4264      	negs	r4, r4
 800d3da:	fb94 fef6 	sdiv	lr, r4, r6
 800d3de:	f1ce 0800 	rsb	r8, lr, #0
 800d3e2:	fb06 441e 	mls	r4, r6, lr, r4
 800d3e6:	f8c0 8000 	str.w	r8, [r0]
 800d3ea:	6104      	str	r4, [r0, #16]
 800d3ec:	2c00      	cmp	r4, #0
 800d3ee:	f43f af6e 	beq.w	800d2ce <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 800d3f2:	ea6f 0e0e 	mvn.w	lr, lr
 800d3f6:	f8c0 e000 	str.w	lr, [r0]
 800d3fa:	1b34      	subs	r4, r6, r4
 800d3fc:	e766      	b.n	800d2cc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 800d3fe:	426d      	negs	r5, r5
 800d400:	fb95 f4f6 	sdiv	r4, r5, r6
 800d404:	f1c4 0e00 	rsb	lr, r4, #0
 800d408:	fb06 5514 	mls	r5, r6, r4, r5
 800d40c:	f8c0 e004 	str.w	lr, [r0, #4]
 800d410:	6085      	str	r5, [r0, #8]
 800d412:	2d00      	cmp	r5, #0
 800d414:	f43f af64 	beq.w	800d2e0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 800d418:	43e4      	mvns	r4, r4
 800d41a:	6044      	str	r4, [r0, #4]
 800d41c:	1b75      	subs	r5, r6, r5
 800d41e:	e75e      	b.n	800d2de <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 800d420:	3d800000 	.word	0x3d800000

0800d424 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 800d424:	4b01      	ldr	r3, [pc, #4]	@ (800d42c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 800d426:	6018      	str	r0, [r3, #0]
 800d428:	4770      	bx	lr
 800d42a:	bf00      	nop
 800d42c:	200124e4 	.word	0x200124e4

0800d430 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 800d430:	4b06      	ldr	r3, [pc, #24]	@ (800d44c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 800d432:	881a      	ldrh	r2, [r3, #0]
 800d434:	4282      	cmp	r2, r0
 800d436:	d807      	bhi.n	800d448 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 800d438:	4b05      	ldr	r3, [pc, #20]	@ (800d450 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 800d43a:	881b      	ldrh	r3, [r3, #0]
 800d43c:	4413      	add	r3, r2
 800d43e:	4298      	cmp	r0, r3
 800d440:	bfac      	ite	ge
 800d442:	2000      	movge	r0, #0
 800d444:	2001      	movlt	r0, #1
 800d446:	4770      	bx	lr
 800d448:	2000      	movs	r0, #0
 800d44a:	4770      	bx	lr
 800d44c:	20012504 	.word	0x20012504
 800d450:	20012508 	.word	0x20012508

0800d454 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 800d454:	b508      	push	{r3, lr}
 800d456:	4601      	mov	r1, r0
 800d458:	f7ff ffea 	bl	800d430 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 800d45c:	b118      	cbz	r0, 800d466 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 800d45e:	4b02      	ldr	r3, [pc, #8]	@ (800d468 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800d466:	bd08      	pop	{r3, pc}
 800d468:	200124e8 	.word	0x200124e8

0800d46c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 800d46c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d46e:	4c24      	ldr	r4, [pc, #144]	@ (800d500 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 800d470:	6823      	ldr	r3, [r4, #0]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d042      	beq.n	800d4fc <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 800d476:	4a23      	ldr	r2, [pc, #140]	@ (800d504 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 800d478:	4d23      	ldr	r5, [pc, #140]	@ (800d508 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 800d47a:	8811      	ldrh	r1, [r2, #0]
 800d47c:	f8b5 c000 	ldrh.w	ip, [r5]
 800d480:	4822      	ldr	r0, [pc, #136]	@ (800d50c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 800d482:	4461      	add	r1, ip
 800d484:	1c4a      	adds	r2, r1, #1
 800d486:	f022 0201 	bic.w	r2, r2, #1
 800d48a:	008f      	lsls	r7, r1, #2
 800d48c:	0412      	lsls	r2, r2, #16
 800d48e:	19de      	adds	r6, r3, r7
 800d490:	0c12      	lsrs	r2, r2, #16
 800d492:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 800d496:	6006      	str	r6, [r0, #0]
 800d498:	4e1d      	ldr	r6, [pc, #116]	@ (800d510 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 800d49a:	19da      	adds	r2, r3, r7
 800d49c:	6032      	str	r2, [r6, #0]
 800d49e:	220e      	movs	r2, #14
 800d4a0:	fb02 f20c 	mul.w	r2, r2, ip
 800d4a4:	3203      	adds	r2, #3
 800d4a6:	f022 0203 	bic.w	r2, r2, #3
 800d4aa:	443a      	add	r2, r7
 800d4ac:	4f19      	ldr	r7, [pc, #100]	@ (800d514 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 800d4ae:	4413      	add	r3, r2
 800d4b0:	603b      	str	r3, [r7, #0]
 800d4b2:	4f19      	ldr	r7, [pc, #100]	@ (800d518 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	803b      	strh	r3, [r7, #0]
 800d4b8:	4f18      	ldr	r7, [pc, #96]	@ (800d51c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 800d4ba:	683f      	ldr	r7, [r7, #0]
 800d4bc:	1aba      	subs	r2, r7, r2
 800d4be:	4f18      	ldr	r7, [pc, #96]	@ (800d520 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 800d4c0:	603a      	str	r2, [r7, #0]
 800d4c2:	4a18      	ldr	r2, [pc, #96]	@ (800d524 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 800d4c4:	469c      	mov	ip, r3
 800d4c6:	8013      	strh	r3, [r2, #0]
 800d4c8:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 800d4cc:	428b      	cmp	r3, r1
 800d4ce:	d10d      	bne.n	800d4ec <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 800d4d0:	882d      	ldrh	r5, [r5, #0]
 800d4d2:	6830      	ldr	r0, [r6, #0]
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	240e      	movs	r4, #14
 800d4d8:	429d      	cmp	r5, r3
 800d4da:	d90f      	bls.n	800d4fc <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 800d4dc:	fb04 0203 	mla	r2, r4, r3, r0
 800d4e0:	3301      	adds	r3, #1
 800d4e2:	7b11      	ldrb	r1, [r2, #12]
 800d4e4:	f36f 1145 	bfc	r1, #5, #1
 800d4e8:	7311      	strb	r1, [r2, #12]
 800d4ea:	e7f5      	b.n	800d4d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 800d4ec:	6822      	ldr	r2, [r4, #0]
 800d4ee:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 800d4f2:	6802      	ldr	r2, [r0, #0]
 800d4f4:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 800d4f8:	3301      	adds	r3, #1
 800d4fa:	e7e7      	b.n	800d4cc <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 800d4fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4fe:	bf00      	nop
 800d500:	200124e8 	.word	0x200124e8
 800d504:	20012504 	.word	0x20012504
 800d508:	20012508 	.word	0x20012508
 800d50c:	200124fc 	.word	0x200124fc
 800d510:	200124ec 	.word	0x200124ec
 800d514:	200124f4 	.word	0x200124f4
 800d518:	20012506 	.word	0x20012506
 800d51c:	200124f0 	.word	0x200124f0
 800d520:	20012500 	.word	0x20012500
 800d524:	200124f8 	.word	0x200124f8

0800d528 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 800d528:	4b06      	ldr	r3, [pc, #24]	@ (800d544 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	b943      	cbnz	r3, 800d540 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 800d52e:	b139      	cbz	r1, 800d540 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 800d530:	4b05      	ldr	r3, [pc, #20]	@ (800d548 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 800d532:	801a      	strh	r2, [r3, #0]
 800d534:	4b05      	ldr	r3, [pc, #20]	@ (800d54c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 800d536:	6019      	str	r1, [r3, #0]
 800d538:	4b05      	ldr	r3, [pc, #20]	@ (800d550 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 800d53a:	6018      	str	r0, [r3, #0]
 800d53c:	f7ff bf96 	b.w	800d46c <_ZN8touchgfx6Bitmap10clearCacheEv>
 800d540:	4770      	bx	lr
 800d542:	bf00      	nop
 800d544:	200124f4 	.word	0x200124f4
 800d548:	20012508 	.word	0x20012508
 800d54c:	200124f0 	.word	0x200124f0
 800d550:	200124e8 	.word	0x200124e8

0800d554 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 800d554:	b470      	push	{r4, r5, r6}
 800d556:	4c07      	ldr	r4, [pc, #28]	@ (800d574 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 800d558:	6826      	ldr	r6, [r4, #0]
 800d55a:	4605      	mov	r5, r0
 800d55c:	4610      	mov	r0, r2
 800d55e:	9a03      	ldr	r2, [sp, #12]
 800d560:	b936      	cbnz	r6, 800d570 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 800d562:	6025      	str	r5, [r4, #0]
 800d564:	4c04      	ldr	r4, [pc, #16]	@ (800d578 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 800d566:	8021      	strh	r1, [r4, #0]
 800d568:	bc70      	pop	{r4, r5, r6}
 800d56a:	4619      	mov	r1, r3
 800d56c:	f7ff bfdc 	b.w	800d528 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 800d570:	bc70      	pop	{r4, r5, r6}
 800d572:	4770      	bx	lr
 800d574:	2001250c 	.word	0x2001250c
 800d578:	20012504 	.word	0x20012504

0800d57c <_ZNK8touchgfx6Bitmap8getWidthEv>:
 800d57c:	4a12      	ldr	r2, [pc, #72]	@ (800d5c8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 800d57e:	8803      	ldrh	r3, [r0, #0]
 800d580:	8812      	ldrh	r2, [r2, #0]
 800d582:	4293      	cmp	r3, r2
 800d584:	d207      	bcs.n	800d596 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 800d586:	4a11      	ldr	r2, [pc, #68]	@ (800d5cc <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 800d588:	6812      	ldr	r2, [r2, #0]
 800d58a:	2114      	movs	r1, #20
 800d58c:	fb01 2303 	mla	r3, r1, r3, r2
 800d590:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 800d594:	4770      	bx	lr
 800d596:	490e      	ldr	r1, [pc, #56]	@ (800d5d0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 800d598:	8809      	ldrh	r1, [r1, #0]
 800d59a:	4411      	add	r1, r2
 800d59c:	428b      	cmp	r3, r1
 800d59e:	da04      	bge.n	800d5aa <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 800d5a0:	1a9b      	subs	r3, r3, r2
 800d5a2:	4a0c      	ldr	r2, [pc, #48]	@ (800d5d4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 800d5a4:	210e      	movs	r1, #14
 800d5a6:	6812      	ldr	r2, [r2, #0]
 800d5a8:	e7f0      	b.n	800d58c <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 800d5aa:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d5ae:	4293      	cmp	r3, r2
 800d5b0:	d108      	bne.n	800d5c4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 800d5b2:	4b09      	ldr	r3, [pc, #36]	@ (800d5d8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 800d5b4:	781b      	ldrb	r3, [r3, #0]
 800d5b6:	b91b      	cbnz	r3, 800d5c0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 800d5b8:	4b08      	ldr	r3, [pc, #32]	@ (800d5dc <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 800d5ba:	f9b3 0000 	ldrsh.w	r0, [r3]
 800d5be:	4770      	bx	lr
 800d5c0:	4b07      	ldr	r3, [pc, #28]	@ (800d5e0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 800d5c2:	e7fa      	b.n	800d5ba <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 800d5c4:	2000      	movs	r0, #0
 800d5c6:	4770      	bx	lr
 800d5c8:	20012504 	.word	0x20012504
 800d5cc:	2001250c 	.word	0x2001250c
 800d5d0:	20012508 	.word	0x20012508
 800d5d4:	200124ec 	.word	0x200124ec
 800d5d8:	2001247c 	.word	0x2001247c
 800d5dc:	2001247e 	.word	0x2001247e
 800d5e0:	20012480 	.word	0x20012480

0800d5e4 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 800d5e4:	4a12      	ldr	r2, [pc, #72]	@ (800d630 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 800d5e6:	8803      	ldrh	r3, [r0, #0]
 800d5e8:	8812      	ldrh	r2, [r2, #0]
 800d5ea:	4293      	cmp	r3, r2
 800d5ec:	d207      	bcs.n	800d5fe <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 800d5ee:	4a11      	ldr	r2, [pc, #68]	@ (800d634 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 800d5f0:	6812      	ldr	r2, [r2, #0]
 800d5f2:	2114      	movs	r1, #20
 800d5f4:	fb01 2303 	mla	r3, r1, r3, r2
 800d5f8:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 800d5fc:	4770      	bx	lr
 800d5fe:	490e      	ldr	r1, [pc, #56]	@ (800d638 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 800d600:	8809      	ldrh	r1, [r1, #0]
 800d602:	4411      	add	r1, r2
 800d604:	428b      	cmp	r3, r1
 800d606:	da04      	bge.n	800d612 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 800d608:	1a9b      	subs	r3, r3, r2
 800d60a:	4a0c      	ldr	r2, [pc, #48]	@ (800d63c <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 800d60c:	210e      	movs	r1, #14
 800d60e:	6812      	ldr	r2, [r2, #0]
 800d610:	e7f0      	b.n	800d5f4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 800d612:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d616:	4293      	cmp	r3, r2
 800d618:	d108      	bne.n	800d62c <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 800d61a:	4b09      	ldr	r3, [pc, #36]	@ (800d640 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 800d61c:	781b      	ldrb	r3, [r3, #0]
 800d61e:	b91b      	cbnz	r3, 800d628 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 800d620:	4b08      	ldr	r3, [pc, #32]	@ (800d644 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 800d622:	f9b3 0000 	ldrsh.w	r0, [r3]
 800d626:	4770      	bx	lr
 800d628:	4b07      	ldr	r3, [pc, #28]	@ (800d648 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 800d62a:	e7fa      	b.n	800d622 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 800d62c:	2000      	movs	r0, #0
 800d62e:	4770      	bx	lr
 800d630:	20012504 	.word	0x20012504
 800d634:	2001250c 	.word	0x2001250c
 800d638:	20012508 	.word	0x20012508
 800d63c:	200124ec 	.word	0x200124ec
 800d640:	2001247c 	.word	0x2001247c
 800d644:	20012480 	.word	0x20012480
 800d648:	2001247e 	.word	0x2001247e

0800d64c <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 800d64c:	b530      	push	{r4, r5, lr}
 800d64e:	4a22      	ldr	r2, [pc, #136]	@ (800d6d8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 800d650:	880b      	ldrh	r3, [r1, #0]
 800d652:	8812      	ldrh	r2, [r2, #0]
 800d654:	4293      	cmp	r3, r2
 800d656:	d213      	bcs.n	800d680 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 800d658:	4a20      	ldr	r2, [pc, #128]	@ (800d6dc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 800d65a:	6812      	ldr	r2, [r2, #0]
 800d65c:	2114      	movs	r1, #20
 800d65e:	fb01 2303 	mla	r3, r1, r3, r2
 800d662:	8a1a      	ldrh	r2, [r3, #16]
 800d664:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 800d668:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 800d66c:	8a5b      	ldrh	r3, [r3, #18]
 800d66e:	8004      	strh	r4, [r0, #0]
 800d670:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800d674:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d678:	8041      	strh	r1, [r0, #2]
 800d67a:	8082      	strh	r2, [r0, #4]
 800d67c:	80c3      	strh	r3, [r0, #6]
 800d67e:	e024      	b.n	800d6ca <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 800d680:	4917      	ldr	r1, [pc, #92]	@ (800d6e0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 800d682:	8809      	ldrh	r1, [r1, #0]
 800d684:	4411      	add	r1, r2
 800d686:	428b      	cmp	r3, r1
 800d688:	da10      	bge.n	800d6ac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 800d68a:	1a9b      	subs	r3, r3, r2
 800d68c:	220e      	movs	r2, #14
 800d68e:	4353      	muls	r3, r2
 800d690:	4a14      	ldr	r2, [pc, #80]	@ (800d6e4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 800d692:	6811      	ldr	r1, [r2, #0]
 800d694:	18ca      	adds	r2, r1, r3
 800d696:	5ecd      	ldrsh	r5, [r1, r3]
 800d698:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 800d69c:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 800d6a0:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 800d6a4:	8005      	strh	r5, [r0, #0]
 800d6a6:	8044      	strh	r4, [r0, #2]
 800d6a8:	8081      	strh	r1, [r0, #4]
 800d6aa:	e7e7      	b.n	800d67c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 800d6ac:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d6b0:	4293      	cmp	r3, r2
 800d6b2:	d10b      	bne.n	800d6cc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 800d6b4:	4b0c      	ldr	r3, [pc, #48]	@ (800d6e8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 800d6b6:	f9b3 1000 	ldrsh.w	r1, [r3]
 800d6ba:	4b0c      	ldr	r3, [pc, #48]	@ (800d6ec <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 800d6bc:	8081      	strh	r1, [r0, #4]
 800d6be:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d6c2:	80c2      	strh	r2, [r0, #6]
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	8003      	strh	r3, [r0, #0]
 800d6c8:	8043      	strh	r3, [r0, #2]
 800d6ca:	bd30      	pop	{r4, r5, pc}
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	8003      	strh	r3, [r0, #0]
 800d6d0:	8043      	strh	r3, [r0, #2]
 800d6d2:	8083      	strh	r3, [r0, #4]
 800d6d4:	e7d2      	b.n	800d67c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 800d6d6:	bf00      	nop
 800d6d8:	20012504 	.word	0x20012504
 800d6dc:	2001250c 	.word	0x2001250c
 800d6e0:	20012508 	.word	0x20012508
 800d6e4:	200124ec 	.word	0x200124ec
 800d6e8:	20012478 	.word	0x20012478
 800d6ec:	2001247a 	.word	0x2001247a

0800d6f0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 800d6f0:	4a17      	ldr	r2, [pc, #92]	@ (800d750 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 800d6f2:	8803      	ldrh	r3, [r0, #0]
 800d6f4:	8812      	ldrh	r2, [r2, #0]
 800d6f6:	4293      	cmp	r3, r2
 800d6f8:	d213      	bcs.n	800d722 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 800d6fa:	4a16      	ldr	r2, [pc, #88]	@ (800d754 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 800d6fc:	6812      	ldr	r2, [r2, #0]
 800d6fe:	2114      	movs	r1, #20
 800d700:	fb01 2303 	mla	r3, r1, r3, r2
 800d704:	8a1a      	ldrh	r2, [r3, #16]
 800d706:	8919      	ldrh	r1, [r3, #8]
 800d708:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800d70c:	428a      	cmp	r2, r1
 800d70e:	db1d      	blt.n	800d74c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 800d710:	8a58      	ldrh	r0, [r3, #18]
 800d712:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800d716:	895b      	ldrh	r3, [r3, #10]
 800d718:	4298      	cmp	r0, r3
 800d71a:	bfac      	ite	ge
 800d71c:	2000      	movge	r0, #0
 800d71e:	2001      	movlt	r0, #1
 800d720:	4770      	bx	lr
 800d722:	490d      	ldr	r1, [pc, #52]	@ (800d758 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 800d724:	8809      	ldrh	r1, [r1, #0]
 800d726:	4411      	add	r1, r2
 800d728:	428b      	cmp	r3, r1
 800d72a:	da0d      	bge.n	800d748 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 800d72c:	1a9b      	subs	r3, r3, r2
 800d72e:	4a0b      	ldr	r2, [pc, #44]	@ (800d75c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 800d730:	6812      	ldr	r2, [r2, #0]
 800d732:	210e      	movs	r1, #14
 800d734:	fb01 2303 	mla	r3, r1, r3, r2
 800d738:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800d73c:	891a      	ldrh	r2, [r3, #8]
 800d73e:	4291      	cmp	r1, r2
 800d740:	db04      	blt.n	800d74c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 800d742:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 800d746:	e7e6      	b.n	800d716 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 800d748:	2000      	movs	r0, #0
 800d74a:	4770      	bx	lr
 800d74c:	2001      	movs	r0, #1
 800d74e:	4770      	bx	lr
 800d750:	20012504 	.word	0x20012504
 800d754:	2001250c 	.word	0x2001250c
 800d758:	20012508 	.word	0x20012508
 800d75c:	200124ec 	.word	0x200124ec

0800d760 <_ZNK8touchgfx6Bitmap7getDataEv>:
 800d760:	4a12      	ldr	r2, [pc, #72]	@ (800d7ac <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 800d762:	8803      	ldrh	r3, [r0, #0]
 800d764:	8811      	ldrh	r1, [r2, #0]
 800d766:	428b      	cmp	r3, r1
 800d768:	d20b      	bcs.n	800d782 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 800d76a:	4a11      	ldr	r2, [pc, #68]	@ (800d7b0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 800d76c:	6812      	ldr	r2, [r2, #0]
 800d76e:	b112      	cbz	r2, 800d776 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 800d770:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d774:	b9c0      	cbnz	r0, 800d7a8 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 800d776:	4a0f      	ldr	r2, [pc, #60]	@ (800d7b4 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 800d778:	6811      	ldr	r1, [r2, #0]
 800d77a:	2214      	movs	r2, #20
 800d77c:	4353      	muls	r3, r2
 800d77e:	58c8      	ldr	r0, [r1, r3]
 800d780:	4770      	bx	lr
 800d782:	4a0d      	ldr	r2, [pc, #52]	@ (800d7b8 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 800d784:	8812      	ldrh	r2, [r2, #0]
 800d786:	440a      	add	r2, r1
 800d788:	4293      	cmp	r3, r2
 800d78a:	da04      	bge.n	800d796 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 800d78c:	4a08      	ldr	r2, [pc, #32]	@ (800d7b0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 800d78e:	6812      	ldr	r2, [r2, #0]
 800d790:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d794:	4770      	bx	lr
 800d796:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d79a:	4293      	cmp	r3, r2
 800d79c:	d103      	bne.n	800d7a6 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 800d79e:	4b07      	ldr	r3, [pc, #28]	@ (800d7bc <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800d7a4:	4770      	bx	lr
 800d7a6:	2000      	movs	r0, #0
 800d7a8:	4770      	bx	lr
 800d7aa:	bf00      	nop
 800d7ac:	20012504 	.word	0x20012504
 800d7b0:	200124e8 	.word	0x200124e8
 800d7b4:	2001250c 	.word	0x2001250c
 800d7b8:	20012508 	.word	0x20012508
 800d7bc:	20012484 	.word	0x20012484

0800d7c0 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 800d7c0:	4b24      	ldr	r3, [pc, #144]	@ (800d854 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 800d7c2:	8802      	ldrh	r2, [r0, #0]
 800d7c4:	8818      	ldrh	r0, [r3, #0]
 800d7c6:	4282      	cmp	r2, r0
 800d7c8:	d221      	bcs.n	800d80e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 800d7ca:	4b23      	ldr	r3, [pc, #140]	@ (800d858 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 800d7cc:	6819      	ldr	r1, [r3, #0]
 800d7ce:	2314      	movs	r3, #20
 800d7d0:	fb03 1302 	mla	r3, r3, r2, r1
 800d7d4:	6858      	ldr	r0, [r3, #4]
 800d7d6:	2800      	cmp	r0, #0
 800d7d8:	d03a      	beq.n	800d850 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 800d7da:	4920      	ldr	r1, [pc, #128]	@ (800d85c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 800d7dc:	6809      	ldr	r1, [r1, #0]
 800d7de:	2900      	cmp	r1, #0
 800d7e0:	d036      	beq.n	800d850 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 800d7e2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800d7e6:	2900      	cmp	r1, #0
 800d7e8:	d032      	beq.n	800d850 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 800d7ea:	891a      	ldrh	r2, [r3, #8]
 800d7ec:	8958      	ldrh	r0, [r3, #10]
 800d7ee:	4350      	muls	r0, r2
 800d7f0:	7c5a      	ldrb	r2, [r3, #17]
 800d7f2:	7cdb      	ldrb	r3, [r3, #19]
 800d7f4:	0952      	lsrs	r2, r2, #5
 800d7f6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800d7fa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800d7fe:	2b0b      	cmp	r3, #11
 800d800:	bf18      	it	ne
 800d802:	0040      	lslne	r0, r0, #1
 800d804:	3003      	adds	r0, #3
 800d806:	f020 0003 	bic.w	r0, r0, #3
 800d80a:	4408      	add	r0, r1
 800d80c:	4770      	bx	lr
 800d80e:	4b14      	ldr	r3, [pc, #80]	@ (800d860 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 800d810:	881b      	ldrh	r3, [r3, #0]
 800d812:	4403      	add	r3, r0
 800d814:	429a      	cmp	r2, r3
 800d816:	da1a      	bge.n	800d84e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 800d818:	4b12      	ldr	r3, [pc, #72]	@ (800d864 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	1a10      	subs	r0, r2, r0
 800d81e:	210e      	movs	r1, #14
 800d820:	fb01 3000 	mla	r0, r1, r0, r3
 800d824:	7b03      	ldrb	r3, [r0, #12]
 800d826:	f003 031f 	and.w	r3, r3, #31
 800d82a:	2b0b      	cmp	r3, #11
 800d82c:	d10b      	bne.n	800d846 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 800d82e:	8903      	ldrh	r3, [r0, #8]
 800d830:	8940      	ldrh	r0, [r0, #10]
 800d832:	4358      	muls	r0, r3
 800d834:	4b09      	ldr	r3, [pc, #36]	@ (800d85c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 800d836:	6819      	ldr	r1, [r3, #0]
 800d838:	3003      	adds	r0, #3
 800d83a:	f020 0303 	bic.w	r3, r0, #3
 800d83e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 800d842:	4418      	add	r0, r3
 800d844:	4770      	bx	lr
 800d846:	2b0d      	cmp	r3, #13
 800d848:	d101      	bne.n	800d84e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 800d84a:	300d      	adds	r0, #13
 800d84c:	4770      	bx	lr
 800d84e:	2000      	movs	r0, #0
 800d850:	4770      	bx	lr
 800d852:	bf00      	nop
 800d854:	20012504 	.word	0x20012504
 800d858:	2001250c 	.word	0x2001250c
 800d85c:	200124e8 	.word	0x200124e8
 800d860:	20012508 	.word	0x20012508
 800d864:	200124ec 	.word	0x200124ec

0800d868 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 800d868:	b510      	push	{r4, lr}
 800d86a:	4b1f      	ldr	r3, [pc, #124]	@ (800d8e8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 800d86c:	8802      	ldrh	r2, [r0, #0]
 800d86e:	881b      	ldrh	r3, [r3, #0]
 800d870:	429a      	cmp	r2, r3
 800d872:	d21a      	bcs.n	800d8aa <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 800d874:	4b1d      	ldr	r3, [pc, #116]	@ (800d8ec <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	2114      	movs	r1, #20
 800d87a:	fb01 3102 	mla	r1, r1, r2, r3
 800d87e:	7c4b      	ldrb	r3, [r1, #17]
 800d880:	0958      	lsrs	r0, r3, #5
 800d882:	7ccb      	ldrb	r3, [r1, #19]
 800d884:	491a      	ldr	r1, [pc, #104]	@ (800d8f0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 800d886:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800d88a:	6809      	ldr	r1, [r1, #0]
 800d88c:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 800d890:	b2d8      	uxtb	r0, r3
 800d892:	b149      	cbz	r1, 800d8a8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 800d894:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800d898:	b132      	cbz	r2, 800d8a8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 800d89a:	2b0e      	cmp	r3, #14
 800d89c:	d021      	beq.n	800d8e2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 800d89e:	280f      	cmp	r0, #15
 800d8a0:	d01d      	beq.n	800d8de <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 800d8a2:	2810      	cmp	r0, #16
 800d8a4:	bf08      	it	eq
 800d8a6:	2002      	moveq	r0, #2
 800d8a8:	bd10      	pop	{r4, pc}
 800d8aa:	4912      	ldr	r1, [pc, #72]	@ (800d8f4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 800d8ac:	8809      	ldrh	r1, [r1, #0]
 800d8ae:	4419      	add	r1, r3
 800d8b0:	428a      	cmp	r2, r1
 800d8b2:	da09      	bge.n	800d8c8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 800d8b4:	1ad3      	subs	r3, r2, r3
 800d8b6:	4a10      	ldr	r2, [pc, #64]	@ (800d8f8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 800d8b8:	6812      	ldr	r2, [r2, #0]
 800d8ba:	210e      	movs	r1, #14
 800d8bc:	fb01 2303 	mla	r3, r1, r3, r2
 800d8c0:	7b18      	ldrb	r0, [r3, #12]
 800d8c2:	f000 001f 	and.w	r0, r0, #31
 800d8c6:	e7ef      	b.n	800d8a8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 800d8c8:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800d8cc:	429a      	cmp	r2, r3
 800d8ce:	d108      	bne.n	800d8e2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 800d8d0:	f7fb fa90 	bl	8008df4 <_ZN8touchgfx3HAL3lcdEv>
 800d8d4:	6803      	ldr	r3, [r0, #0]
 800d8d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8dc:	4718      	bx	r3
 800d8de:	2001      	movs	r0, #1
 800d8e0:	e7e2      	b.n	800d8a8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 800d8e2:	2000      	movs	r0, #0
 800d8e4:	e7e0      	b.n	800d8a8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 800d8e6:	bf00      	nop
 800d8e8:	20012504 	.word	0x20012504
 800d8ec:	2001250c 	.word	0x2001250c
 800d8f0:	200124e8 	.word	0x200124e8
 800d8f4:	20012508 	.word	0x20012508
 800d8f8:	200124ec 	.word	0x200124ec

0800d8fc <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 800d8fc:	2010      	movs	r0, #16
 800d8fe:	4770      	bx	lr

0800d900 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 800d900:	2000      	movs	r0, #0
 800d902:	4770      	bx	lr

0800d904 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 800d904:	4b02      	ldr	r3, [pc, #8]	@ (800d910 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 800d906:	8818      	ldrh	r0, [r3, #0]
 800d908:	0040      	lsls	r0, r0, #1
 800d90a:	b280      	uxth	r0, r0
 800d90c:	4770      	bx	lr
 800d90e:	bf00      	nop
 800d910:	2001247e 	.word	0x2001247e

0800d914 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 800d914:	2bff      	cmp	r3, #255	@ 0xff
 800d916:	d05e      	beq.n	800d9d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc2>
 800d918:	2a0b      	cmp	r2, #11
 800d91a:	d058      	beq.n	800d9ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 800d91c:	d80e      	bhi.n	800d93c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 800d91e:	2a03      	cmp	r2, #3
 800d920:	d04d      	beq.n	800d9be <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xaa>
 800d922:	d804      	bhi.n	800d92e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 800d924:	2a01      	cmp	r2, #1
 800d926:	d04c      	beq.n	800d9c2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xae>
 800d928:	d94d      	bls.n	800d9c6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb2>
 800d92a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800d92c:	e031      	b.n	800d992 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d92e:	2a09      	cmp	r2, #9
 800d930:	d04d      	beq.n	800d9ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 800d932:	d84a      	bhi.n	800d9ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 800d934:	2a08      	cmp	r2, #8
 800d936:	d048      	beq.n	800d9ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 800d938:	2300      	movs	r3, #0
 800d93a:	e02a      	b.n	800d992 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d93c:	2a2f      	cmp	r2, #47	@ 0x2f
 800d93e:	d02c      	beq.n	800d99a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 800d940:	d811      	bhi.n	800d966 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 800d942:	2a2d      	cmp	r2, #45	@ 0x2d
 800d944:	d018      	beq.n	800d978 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x64>
 800d946:	d831      	bhi.n	800d9ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x98>
 800d948:	2a2c      	cmp	r2, #44	@ 0x2c
 800d94a:	d1f5      	bne.n	800d938 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800d94c:	684a      	ldr	r2, [r1, #4]
 800d94e:	7813      	ldrb	r3, [r2, #0]
 800d950:	7852      	ldrb	r2, [r2, #1]
 800d952:	2a00      	cmp	r2, #0
 800d954:	d1f0      	bne.n	800d938 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800d956:	2b01      	cmp	r3, #1
 800d958:	d01d      	beq.n	800d996 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d02d      	beq.n	800d9ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 800d95e:	2b02      	cmp	r3, #2
 800d960:	d1ea      	bne.n	800d938 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800d962:	68c3      	ldr	r3, [r0, #12]
 800d964:	e015      	b.n	800d992 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d966:	2a31      	cmp	r2, #49	@ 0x31
 800d968:	d004      	beq.n	800d974 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x60>
 800d96a:	d332      	bcc.n	800d9d2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 800d96c:	2a32      	cmp	r2, #50	@ 0x32
 800d96e:	d030      	beq.n	800d9d2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 800d970:	2a33      	cmp	r2, #51	@ 0x33
 800d972:	d1e1      	bne.n	800d938 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800d974:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 800d976:	e00c      	b.n	800d992 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d978:	684a      	ldr	r2, [r1, #4]
 800d97a:	7813      	ldrb	r3, [r2, #0]
 800d97c:	7852      	ldrb	r2, [r2, #1]
 800d97e:	2a00      	cmp	r2, #0
 800d980:	d1da      	bne.n	800d938 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800d982:	2b01      	cmp	r3, #1
 800d984:	d004      	beq.n	800d990 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c>
 800d986:	d30f      	bcc.n	800d9a8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x94>
 800d988:	2b02      	cmp	r3, #2
 800d98a:	d1d5      	bne.n	800d938 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800d98c:	6943      	ldr	r3, [r0, #20]
 800d98e:	e000      	b.n	800d992 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d990:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800d992:	4618      	mov	r0, r3
 800d994:	4770      	bx	lr
 800d996:	69c3      	ldr	r3, [r0, #28]
 800d998:	e7fb      	b.n	800d992 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d99a:	684b      	ldr	r3, [r1, #4]
 800d99c:	781a      	ldrb	r2, [r3, #0]
 800d99e:	785b      	ldrb	r3, [r3, #1]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d1c9      	bne.n	800d938 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800d9a4:	2a00      	cmp	r2, #0
 800d9a6:	d1f4      	bne.n	800d992 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d9a8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d9aa:	e7f2      	b.n	800d992 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d9ac:	684b      	ldr	r3, [r1, #4]
 800d9ae:	781a      	ldrb	r2, [r3, #0]
 800d9b0:	785b      	ldrb	r3, [r3, #1]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d1c0      	bne.n	800d938 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800d9b6:	2a00      	cmp	r2, #0
 800d9b8:	d1eb      	bne.n	800d992 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d9ba:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800d9bc:	e7e9      	b.n	800d992 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d9be:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800d9c0:	e7e7      	b.n	800d992 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d9c2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800d9c4:	e7e5      	b.n	800d992 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d9c6:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800d9c8:	e7e3      	b.n	800d992 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d9ca:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800d9cc:	e7e1      	b.n	800d992 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d9ce:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 800d9d0:	e7df      	b.n	800d992 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d9d2:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800d9d4:	e7dd      	b.n	800d992 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d9d6:	2a0b      	cmp	r2, #11
 800d9d8:	d059      	beq.n	800da8e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 800d9da:	d80e      	bhi.n	800d9fa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe6>
 800d9dc:	2a03      	cmp	r2, #3
 800d9de:	d050      	beq.n	800da82 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16e>
 800d9e0:	d804      	bhi.n	800d9ec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd8>
 800d9e2:	2a01      	cmp	r2, #1
 800d9e4:	d04f      	beq.n	800da86 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x172>
 800d9e6:	d950      	bls.n	800da8a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x176>
 800d9e8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800d9ea:	e7d2      	b.n	800d992 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d9ec:	2a09      	cmp	r2, #9
 800d9ee:	d04e      	beq.n	800da8e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 800d9f0:	d801      	bhi.n	800d9f6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 800d9f2:	2a08      	cmp	r2, #8
 800d9f4:	d1a0      	bne.n	800d938 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800d9f6:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 800d9f8:	e7cb      	b.n	800d992 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800d9fa:	2a2f      	cmp	r2, #47	@ 0x2f
 800d9fc:	d02d      	beq.n	800da5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x146>
 800d9fe:	d811      	bhi.n	800da24 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 800da00:	2a2d      	cmp	r2, #45	@ 0x2d
 800da02:	d018      	beq.n	800da36 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x122>
 800da04:	d833      	bhi.n	800da6e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x15a>
 800da06:	2a2c      	cmp	r2, #44	@ 0x2c
 800da08:	d196      	bne.n	800d938 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800da0a:	684a      	ldr	r2, [r1, #4]
 800da0c:	7813      	ldrb	r3, [r2, #0]
 800da0e:	7852      	ldrb	r2, [r2, #1]
 800da10:	2a00      	cmp	r2, #0
 800da12:	d191      	bne.n	800d938 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800da14:	2b01      	cmp	r3, #1
 800da16:	d01e      	beq.n	800da56 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d030      	beq.n	800da7e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16a>
 800da1c:	2b02      	cmp	r3, #2
 800da1e:	d18b      	bne.n	800d938 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800da20:	6903      	ldr	r3, [r0, #16]
 800da22:	e7b6      	b.n	800d992 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800da24:	2a31      	cmp	r2, #49	@ 0x31
 800da26:	d004      	beq.n	800da32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11e>
 800da28:	d333      	bcc.n	800da92 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 800da2a:	2a32      	cmp	r2, #50	@ 0x32
 800da2c:	d031      	beq.n	800da92 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 800da2e:	2a33      	cmp	r2, #51	@ 0x33
 800da30:	d182      	bne.n	800d938 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800da32:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 800da34:	e7ad      	b.n	800d992 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800da36:	684a      	ldr	r2, [r1, #4]
 800da38:	7813      	ldrb	r3, [r2, #0]
 800da3a:	7852      	ldrb	r2, [r2, #1]
 800da3c:	2a00      	cmp	r2, #0
 800da3e:	f47f af7b 	bne.w	800d938 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800da42:	2b01      	cmp	r3, #1
 800da44:	d005      	beq.n	800da52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 800da46:	d310      	bcc.n	800da6a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x156>
 800da48:	2b02      	cmp	r3, #2
 800da4a:	f47f af75 	bne.w	800d938 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800da4e:	6983      	ldr	r3, [r0, #24]
 800da50:	e79f      	b.n	800d992 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800da52:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800da54:	e79d      	b.n	800d992 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800da56:	6a03      	ldr	r3, [r0, #32]
 800da58:	e79b      	b.n	800d992 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800da5a:	684b      	ldr	r3, [r1, #4]
 800da5c:	781a      	ldrb	r2, [r3, #0]
 800da5e:	785b      	ldrb	r3, [r3, #1]
 800da60:	2b00      	cmp	r3, #0
 800da62:	f47f af69 	bne.w	800d938 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800da66:	2a00      	cmp	r2, #0
 800da68:	d193      	bne.n	800d992 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800da6a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800da6c:	e791      	b.n	800d992 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800da6e:	684b      	ldr	r3, [r1, #4]
 800da70:	781a      	ldrb	r2, [r3, #0]
 800da72:	785b      	ldrb	r3, [r3, #1]
 800da74:	2b00      	cmp	r3, #0
 800da76:	f47f af5f 	bne.w	800d938 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800da7a:	2a00      	cmp	r2, #0
 800da7c:	d189      	bne.n	800d992 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800da7e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800da80:	e787      	b.n	800d992 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800da82:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800da84:	e785      	b.n	800d992 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800da86:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800da88:	e783      	b.n	800d992 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800da8a:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 800da8c:	e781      	b.n	800d992 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800da8e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800da90:	e77f      	b.n	800d992 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 800da92:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 800da94:	e77d      	b.n	800d992 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>

0800da96 <_ZN8touchgfx8LCD16bppD1Ev>:
 800da96:	4770      	bx	lr

0800da98 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D1Ev>:
 800da98:	4770      	bx	lr

0800da9a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 800da9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da9e:	b088      	sub	sp, #32
 800daa0:	ac08      	add	r4, sp, #32
 800daa2:	4606      	mov	r6, r0
 800daa4:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 800daa8:	4620      	mov	r0, r4
 800daaa:	4688      	mov	r8, r1
 800daac:	4691      	mov	r9, r2
 800daae:	f7ff fe57 	bl	800d760 <_ZNK8touchgfx6Bitmap7getDataEv>
 800dab2:	6833      	ldr	r3, [r6, #0]
 800dab4:	4605      	mov	r5, r0
 800dab6:	4620      	mov	r0, r4
 800dab8:	699f      	ldr	r7, [r3, #24]
 800daba:	f7ff fd5f 	bl	800d57c <_ZNK8touchgfx6Bitmap8getWidthEv>
 800dabe:	4682      	mov	sl, r0
 800dac0:	4620      	mov	r0, r4
 800dac2:	f7ff fd8f 	bl	800d5e4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800dac6:	9500      	str	r5, [sp, #0]
 800dac8:	e9cd a001 	strd	sl, r0, [sp, #4]
 800dacc:	464b      	mov	r3, r9
 800dace:	a806      	add	r0, sp, #24
 800dad0:	4642      	mov	r2, r8
 800dad2:	4631      	mov	r1, r6
 800dad4:	47b8      	blx	r7
 800dad6:	4628      	mov	r0, r5
 800dad8:	b008      	add	sp, #32
 800dada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800dae0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 800dae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dae4:	2300      	movs	r3, #0
 800dae6:	9300      	str	r3, [sp, #0]
 800dae8:	4b3d      	ldr	r3, [pc, #244]	@ (800dbe0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 800daea:	781b      	ldrb	r3, [r3, #0]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d137      	bne.n	800db60 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 800daf0:	4a3c      	ldr	r2, [pc, #240]	@ (800dbe4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 800daf2:	f9b2 2000 	ldrsh.w	r2, [r2]
 800daf6:	f8ad 2004 	strh.w	r2, [sp, #4]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d132      	bne.n	800db64 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 800dafe:	4b3a      	ldr	r3, [pc, #232]	@ (800dbe8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 800db00:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db04:	6808      	ldr	r0, [r1, #0]
 800db06:	6849      	ldr	r1, [r1, #4]
 800db08:	f8ad 3006 	strh.w	r3, [sp, #6]
 800db0c:	ac02      	add	r4, sp, #8
 800db0e:	ab02      	add	r3, sp, #8
 800db10:	c303      	stmia	r3!, {r0, r1}
 800db12:	4669      	mov	r1, sp
 800db14:	4620      	mov	r0, r4
 800db16:	f7fc feeb 	bl	800a8f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800db1a:	4668      	mov	r0, sp
 800db1c:	f7fc fec0 	bl	800a8a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800db20:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800db24:	f8bd 2000 	ldrh.w	r2, [sp]
 800db28:	4d30      	ldr	r5, [pc, #192]	@ (800dbec <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 800db2a:	4413      	add	r3, r2
 800db2c:	f8ad 3008 	strh.w	r3, [sp, #8]
 800db30:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800db34:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800db38:	6828      	ldr	r0, [r5, #0]
 800db3a:	4413      	add	r3, r2
 800db3c:	f8ad 300a 	strh.w	r3, [sp, #10]
 800db40:	6803      	ldr	r3, [r0, #0]
 800db42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db44:	4798      	blx	r3
 800db46:	f010 0f01 	tst.w	r0, #1
 800db4a:	462f      	mov	r7, r5
 800db4c:	d00c      	beq.n	800db68 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 800db4e:	6828      	ldr	r0, [r5, #0]
 800db50:	6803      	ldr	r3, [r0, #0]
 800db52:	e894 0006 	ldmia.w	r4, {r1, r2}
 800db56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800db58:	4798      	blx	r3
 800db5a:	b004      	add	sp, #16
 800db5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db60:	4a21      	ldr	r2, [pc, #132]	@ (800dbe8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 800db62:	e7c6      	b.n	800daf2 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 800db64:	4b1f      	ldr	r3, [pc, #124]	@ (800dbe4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 800db66:	e7cb      	b.n	800db00 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 800db68:	6838      	ldr	r0, [r7, #0]
 800db6a:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 800db6e:	6803      	ldr	r3, [r0, #0]
 800db70:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 800db74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db76:	4798      	blx	r3
 800db78:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 800db7c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800db80:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 800db84:	fb16 3602 	smlabb	r6, r6, r2, r3
 800db88:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800db8c:	6838      	ldr	r0, [r7, #0]
 800db8e:	6803      	ldr	r3, [r0, #0]
 800db90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db92:	4798      	blx	r3
 800db94:	4a13      	ldr	r2, [pc, #76]	@ (800dbe4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 800db96:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 800db9a:	8813      	ldrh	r3, [r2, #0]
 800db9c:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 800dba0:	fb03 1404 	mla	r4, r3, r4, r1
 800dba4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800dba8:	435d      	muls	r5, r3
 800dbaa:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 800dbae:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800dbb2:	4691      	mov	r9, r2
 800dbb4:	6838      	ldr	r0, [r7, #0]
 800dbb6:	42ac      	cmp	r4, r5
 800dbb8:	6803      	ldr	r3, [r0, #0]
 800dbba:	d20e      	bcs.n	800dbda <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 800dbbc:	f8d3 a034 	ldr.w	sl, [r3, #52]	@ 0x34
 800dbc0:	4632      	mov	r2, r6
 800dbc2:	4643      	mov	r3, r8
 800dbc4:	4621      	mov	r1, r4
 800dbc6:	47d0      	blx	sl
 800dbc8:	f8b9 3000 	ldrh.w	r3, [r9]
 800dbcc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800dbd0:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800dbd4:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 800dbd8:	e7ec      	b.n	800dbb4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 800dbda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbdc:	4798      	blx	r3
 800dbde:	e7bc      	b.n	800db5a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 800dbe0:	2001247c 	.word	0x2001247c
 800dbe4:	2001247e 	.word	0x2001247e
 800dbe8:	20012480 	.word	0x20012480
 800dbec:	20012484 	.word	0x20012484

0800dbf0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 800dbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbf4:	b08b      	sub	sp, #44	@ 0x2c
 800dbf6:	460f      	mov	r7, r1
 800dbf8:	f89d b050 	ldrb.w	fp, [sp, #80]	@ 0x50
 800dbfc:	f89d 4054 	ldrb.w	r4, [sp, #84]	@ 0x54
 800dc00:	4616      	mov	r6, r2
 800dc02:	f1bb 0f00 	cmp.w	fp, #0
 800dc06:	d04a      	beq.n	800dc9e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 800dc08:	6810      	ldr	r0, [r2, #0]
 800dc0a:	6851      	ldr	r1, [r2, #4]
 800dc0c:	ad06      	add	r5, sp, #24
 800dc0e:	c503      	stmia	r5!, {r0, r1}
 800dc10:	6818      	ldr	r0, [r3, #0]
 800dc12:	6859      	ldr	r1, [r3, #4]
 800dc14:	ad08      	add	r5, sp, #32
 800dc16:	c503      	stmia	r5!, {r0, r1}
 800dc18:	a806      	add	r0, sp, #24
 800dc1a:	f7fc fe41 	bl	800a8a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800dc1e:	4631      	mov	r1, r6
 800dc20:	a808      	add	r0, sp, #32
 800dc22:	f7fc fe65 	bl	800a8f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800dc26:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800dc2a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 800dc2e:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 800dc32:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 800dc36:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 800dc3a:	fb16 2103 	smlabb	r1, r6, r3, r2
 800dc3e:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 800dc42:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 800dc46:	4f5f      	ldr	r7, [pc, #380]	@ (800ddc4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 800dc48:	440a      	add	r2, r1
 800dc4a:	f8ad 2020 	strh.w	r2, [sp, #32]
 800dc4e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800dc52:	6838      	ldr	r0, [r7, #0]
 800dc54:	4413      	add	r3, r2
 800dc56:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800dc5a:	6803      	ldr	r3, [r0, #0]
 800dc5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc5e:	4798      	blx	r3
 800dc60:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 800dc64:	46b9      	mov	r9, r7
 800dc66:	d11d      	bne.n	800dca4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 800dc68:	b9fc      	cbnz	r4, 800dcaa <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 800dc6a:	f010 0f01 	tst.w	r0, #1
 800dc6e:	d01c      	beq.n	800dcaa <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 800dc70:	f8d9 0000 	ldr.w	r0, [r9]
 800dc74:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 800dc78:	6801      	ldr	r1, [r0, #0]
 800dc7a:	f8cd b00c 	str.w	fp, [sp, #12]
 800dc7e:	2700      	movs	r7, #0
 800dc80:	e9cd 4704 	strd	r4, r7, [sp, #16]
 800dc84:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 800dc88:	9402      	str	r4, [sp, #8]
 800dc8a:	b2ad      	uxth	r5, r5
 800dc8c:	fa1f f488 	uxth.w	r4, r8
 800dc90:	9501      	str	r5, [sp, #4]
 800dc92:	9400      	str	r4, [sp, #0]
 800dc94:	6c4c      	ldr	r4, [r1, #68]	@ 0x44
 800dc96:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800dc9a:	4631      	mov	r1, r6
 800dc9c:	47a0      	blx	r4
 800dc9e:	b00b      	add	sp, #44	@ 0x2c
 800dca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dca4:	f010 0f04 	tst.w	r0, #4
 800dca8:	e7e1      	b.n	800dc6e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 800dcaa:	f8d9 0000 	ldr.w	r0, [r9]
 800dcae:	6803      	ldr	r3, [r0, #0]
 800dcb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcb2:	4798      	blx	r3
 800dcb4:	4b44      	ldr	r3, [pc, #272]	@ (800ddc8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 800dcb6:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 800dcba:	881a      	ldrh	r2, [r3, #0]
 800dcbc:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 800dcc0:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 800dcc4:	fb02 1404 	mla	r4, r2, r4, r1
 800dcc8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800dccc:	469a      	mov	sl, r3
 800dcce:	fb05 f502 	mul.w	r5, r5, r2
 800dcd2:	ea4f 0748 	mov.w	r7, r8, lsl #1
 800dcd6:	d059      	beq.n	800dd8c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 800dcd8:	f1cb 09ff 	rsb	r9, fp, #255	@ 0xff
 800dcdc:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 800dce0:	fa1f f28b 	uxth.w	r2, fp
 800dce4:	fa1f f989 	uxth.w	r9, r9
 800dce8:	469e      	mov	lr, r3
 800dcea:	42ac      	cmp	r4, r5
 800dcec:	d264      	bcs.n	800ddb8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 800dcee:	eb04 0a07 	add.w	sl, r4, r7
 800dcf2:	4554      	cmp	r4, sl
 800dcf4:	d23d      	bcs.n	800dd72 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 800dcf6:	8821      	ldrh	r1, [r4, #0]
 800dcf8:	f836 3b02 	ldrh.w	r3, [r6], #2
 800dcfc:	1208      	asrs	r0, r1, #8
 800dcfe:	ea4f 2c23 	mov.w	ip, r3, asr #8
 800dd02:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 800dd06:	fb10 f009 	smulbb	r0, r0, r9
 800dd0a:	ea4f 0be1 	mov.w	fp, r1, asr #3
 800dd0e:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 800dd12:	00c9      	lsls	r1, r1, #3
 800dd14:	fb0c 0c02 	mla	ip, ip, r2, r0
 800dd18:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 800dd1c:	10d8      	asrs	r0, r3, #3
 800dd1e:	b2c9      	uxtb	r1, r1
 800dd20:	00db      	lsls	r3, r3, #3
 800dd22:	fa1f fc8c 	uxth.w	ip, ip
 800dd26:	fb1b fb09 	smulbb	fp, fp, r9
 800dd2a:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 800dd2e:	b2db      	uxtb	r3, r3
 800dd30:	fb11 f109 	smulbb	r1, r1, r9
 800dd34:	fb00 b002 	mla	r0, r0, r2, fp
 800dd38:	fb03 1302 	mla	r3, r3, r2, r1
 800dd3c:	f10c 0b01 	add.w	fp, ip, #1
 800dd40:	b29b      	uxth	r3, r3
 800dd42:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 800dd46:	b280      	uxth	r0, r0
 800dd48:	f40c 4b78 	and.w	fp, ip, #63488	@ 0xf800
 800dd4c:	f103 0c01 	add.w	ip, r3, #1
 800dd50:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 800dd54:	1c43      	adds	r3, r0, #1
 800dd56:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 800dd5a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 800dd5e:	0940      	lsrs	r0, r0, #5
 800dd60:	ea4c 0c0b 	orr.w	ip, ip, fp
 800dd64:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 800dd68:	ea4c 0c00 	orr.w	ip, ip, r0
 800dd6c:	f824 cb02 	strh.w	ip, [r4], #2
 800dd70:	e7bf      	b.n	800dcf2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 800dd72:	f8be 3000 	ldrh.w	r3, [lr]
 800dd76:	eba3 0308 	sub.w	r3, r3, r8
 800dd7a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800dd7e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800dd82:	eba3 0308 	sub.w	r3, r3, r8
 800dd86:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 800dd8a:	e7ae      	b.n	800dcea <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 800dd8c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 800dd90:	f8d9 0000 	ldr.w	r0, [r9]
 800dd94:	42ac      	cmp	r4, r5
 800dd96:	6803      	ldr	r3, [r0, #0]
 800dd98:	d20e      	bcs.n	800ddb8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 800dd9a:	f8d3 8034 	ldr.w	r8, [r3, #52]	@ 0x34
 800dd9e:	4632      	mov	r2, r6
 800dda0:	463b      	mov	r3, r7
 800dda2:	4621      	mov	r1, r4
 800dda4:	47c0      	blx	r8
 800dda6:	f8ba 3000 	ldrh.w	r3, [sl]
 800ddaa:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800ddae:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800ddb2:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 800ddb6:	e7eb      	b.n	800dd90 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 800ddb8:	4b02      	ldr	r3, [pc, #8]	@ (800ddc4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 800ddba:	6818      	ldr	r0, [r3, #0]
 800ddbc:	6803      	ldr	r3, [r0, #0]
 800ddbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddc0:	4798      	blx	r3
 800ddc2:	e76c      	b.n	800dc9e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 800ddc4:	20012484 	.word	0x20012484
 800ddc8:	2001247e 	.word	0x2001247e

0800ddcc <_ZN8touchgfx8LCD16bppD0Ev>:
 800ddcc:	b510      	push	{r4, lr}
 800ddce:	218c      	movs	r1, #140	@ 0x8c
 800ddd0:	4604      	mov	r4, r0
 800ddd2:	f002 fa51 	bl	8010278 <_ZdlPvj>
 800ddd6:	4620      	mov	r0, r4
 800ddd8:	bd10      	pop	{r4, pc}

0800ddda <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D0Ev>:
 800ddda:	b510      	push	{r4, lr}
 800dddc:	2104      	movs	r1, #4
 800ddde:	4604      	mov	r4, r0
 800dde0:	f002 fa4a 	bl	8010278 <_ZdlPvj>
 800dde4:	4620      	mov	r0, r4
 800dde6:	bd10      	pop	{r4, pc}

0800dde8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 800dde8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddec:	b091      	sub	sp, #68	@ 0x44
 800ddee:	469b      	mov	fp, r3
 800ddf0:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 800ddf4:	4616      	mov	r6, r2
 800ddf6:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	@ 0x6c
 800ddfa:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ddfe:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 800de02:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800de06:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800de0a:	4604      	mov	r4, r0
 800de0c:	460d      	mov	r5, r1
 800de0e:	4640      	mov	r0, r8
 800de10:	4659      	mov	r1, fp
 800de12:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800de16:	f8ad 902c 	strh.w	r9, [sp, #44]	@ 0x2c
 800de1a:	f8ad 702e 	strh.w	r7, [sp, #46]	@ 0x2e
 800de1e:	f7fa fd13 	bl	8008848 <_ZN8touchgfx4RectaNERKS0_>
 800de22:	4631      	mov	r1, r6
 800de24:	4640      	mov	r0, r8
 800de26:	f7fa fd0f 	bl	8008848 <_ZN8touchgfx4RectaNERKS0_>
 800de2a:	4b74      	ldr	r3, [pc, #464]	@ (800dffc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 800de2c:	8818      	ldrh	r0, [r3, #0]
 800de2e:	4b74      	ldr	r3, [pc, #464]	@ (800e000 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 800de30:	8819      	ldrh	r1, [r3, #0]
 800de32:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 800de36:	2b00      	cmp	r3, #0
 800de38:	b202      	sxth	r2, r0
 800de3a:	b20e      	sxth	r6, r1
 800de3c:	da07      	bge.n	800de4e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 800de3e:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 800de42:	4463      	add	r3, ip
 800de44:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 800de48:	2300      	movs	r3, #0
 800de4a:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 800de4e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 800de52:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 800de56:	1ad2      	subs	r2, r2, r3
 800de58:	4594      	cmp	ip, r2
 800de5a:	bfc4      	itt	gt
 800de5c:	1ac2      	subgt	r2, r0, r3
 800de5e:	f8ad 202c 	strhgt.w	r2, [sp, #44]	@ 0x2c
 800de62:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 800de66:	2a00      	cmp	r2, #0
 800de68:	da07      	bge.n	800de7a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 800de6a:	f8bd c02e 	ldrh.w	ip, [sp, #46]	@ 0x2e
 800de6e:	4462      	add	r2, ip
 800de70:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 800de74:	2200      	movs	r2, #0
 800de76:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 800de7a:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	@ 0x2a
 800de7e:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 800de82:	eba6 060a 	sub.w	r6, r6, sl
 800de86:	42b2      	cmp	r2, r6
 800de88:	bfc4      	itt	gt
 800de8a:	eba1 020a 	subgt.w	r2, r1, sl
 800de8e:	f8ad 202e 	strhgt.w	r2, [sp, #46]	@ 0x2e
 800de92:	4a5c      	ldr	r2, [pc, #368]	@ (800e004 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 800de94:	7812      	ldrb	r2, [r2, #0]
 800de96:	b9a2      	cbnz	r2, 800dec2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 800de98:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 800de9c:	4286      	cmp	r6, r0
 800de9e:	4640      	mov	r0, r8
 800dea0:	9303      	str	r3, [sp, #12]
 800dea2:	bf14      	ite	ne
 800dea4:	2600      	movne	r6, #0
 800dea6:	2601      	moveq	r6, #1
 800dea8:	f7fa fd11 	bl	80088ce <_ZNK8touchgfx4Rect7isEmptyEv>
 800deac:	9b03      	ldr	r3, [sp, #12]
 800deae:	b160      	cbz	r0, 800deca <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 800deb0:	2300      	movs	r3, #0
 800deb2:	8023      	strh	r3, [r4, #0]
 800deb4:	8063      	strh	r3, [r4, #2]
 800deb6:	80a3      	strh	r3, [r4, #4]
 800deb8:	4620      	mov	r0, r4
 800deba:	80e3      	strh	r3, [r4, #6]
 800debc:	b011      	add	sp, #68	@ 0x44
 800debe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dec2:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 800dec6:	428e      	cmp	r6, r1
 800dec8:	e7e9      	b.n	800de9e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 800deca:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 800dece:	9205      	str	r2, [sp, #20]
 800ded0:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 800ded4:	9206      	str	r2, [sp, #24]
 800ded6:	f8bb 2000 	ldrh.w	r2, [fp]
 800deda:	900e      	str	r0, [sp, #56]	@ 0x38
 800dedc:	1a9b      	subs	r3, r3, r2
 800dede:	b21b      	sxth	r3, r3
 800dee0:	9303      	str	r3, [sp, #12]
 800dee2:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 800dee6:	f8ad 903c 	strh.w	r9, [sp, #60]	@ 0x3c
 800deea:	ebaa 0a03 	sub.w	sl, sl, r3
 800deee:	fa0f f38a 	sxth.w	r3, sl
 800def2:	9304      	str	r3, [sp, #16]
 800def4:	9b03      	ldr	r3, [sp, #12]
 800def6:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 800defa:	9b04      	ldr	r3, [sp, #16]
 800defc:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800df00:	9b05      	ldr	r3, [sp, #20]
 800df02:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800df06:	a90e      	add	r1, sp, #56	@ 0x38
 800df08:	9b06      	ldr	r3, [sp, #24]
 800df0a:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800df0e:	a80c      	add	r0, sp, #48	@ 0x30
 800df10:	f8ad 703e 	strh.w	r7, [sp, #62]	@ 0x3e
 800df14:	f7fc fcec 	bl	800a8f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800df18:	4640      	mov	r0, r8
 800df1a:	f7fc fcc1 	bl	800a8a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800df1e:	a80e      	add	r0, sp, #56	@ 0x38
 800df20:	f7fc fcbe 	bl	800a8a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800df24:	4b38      	ldr	r3, [pc, #224]	@ (800e008 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 800df26:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	@ 0x3c
 800df2a:	881b      	ldrh	r3, [r3, #0]
 800df2c:	9307      	str	r3, [sp, #28]
 800df2e:	682b      	ldr	r3, [r5, #0]
 800df30:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 800e00c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 800df34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df36:	4628      	mov	r0, r5
 800df38:	4798      	blx	r3
 800df3a:	f8bd 5032 	ldrh.w	r5, [sp, #50]	@ 0x32
 800df3e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 800df42:	4681      	mov	r9, r0
 800df44:	fb1a 3305 	smlabb	r3, sl, r5, r3
 800df48:	f8db 0000 	ldr.w	r0, [fp]
 800df4c:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 800df4e:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 800df52:	6803      	ldr	r3, [r0, #0]
 800df54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df56:	4798      	blx	r3
 800df58:	4607      	mov	r7, r0
 800df5a:	f8db 0000 	ldr.w	r0, [fp]
 800df5e:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 800df62:	6803      	ldr	r3, [r0, #0]
 800df64:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 800df68:	9109      	str	r1, [sp, #36]	@ 0x24
 800df6a:	9208      	str	r2, [sp, #32]
 800df6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df6e:	4798      	blx	r3
 800df70:	f010 0f01 	tst.w	r0, #1
 800df74:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 800df78:	d012      	beq.n	800dfa0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 800df7a:	f8db 0000 	ldr.w	r0, [fp]
 800df7e:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 800df82:	6803      	ldr	r3, [r0, #0]
 800df84:	9200      	str	r2, [sp, #0]
 800df86:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 800df88:	e898 0006 	ldmia.w	r8, {r1, r2}
 800df8c:	462b      	mov	r3, r5
 800df8e:	47b0      	blx	r6
 800df90:	9b03      	ldr	r3, [sp, #12]
 800df92:	8023      	strh	r3, [r4, #0]
 800df94:	9b04      	ldr	r3, [sp, #16]
 800df96:	8063      	strh	r3, [r4, #2]
 800df98:	9b05      	ldr	r3, [sp, #20]
 800df9a:	80a3      	strh	r3, [r4, #4]
 800df9c:	9b06      	ldr	r3, [sp, #24]
 800df9e:	e78b      	b.n	800deb8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 800dfa0:	fb09 f202 	mul.w	r2, r9, r2
 800dfa4:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800dfa8:	440f      	add	r7, r1
 800dfaa:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	@ 0x36
 800dfae:	b166      	cbz	r6, 800dfca <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 800dfb0:	9a07      	ldr	r2, [sp, #28]
 800dfb2:	4592      	cmp	sl, r2
 800dfb4:	d109      	bne.n	800dfca <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 800dfb6:	f8db 0000 	ldr.w	r0, [fp]
 800dfba:	6802      	ldr	r2, [r0, #0]
 800dfbc:	fb09 f303 	mul.w	r3, r9, r3
 800dfc0:	6b56      	ldr	r6, [r2, #52]	@ 0x34
 800dfc2:	4629      	mov	r1, r5
 800dfc4:	463a      	mov	r2, r7
 800dfc6:	47b0      	blx	r6
 800dfc8:	e7e2      	b.n	800df90 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 800dfca:	fb0a f303 	mul.w	r3, sl, r3
 800dfce:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 800e00c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 800dfd2:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 800dfd6:	ea4f 064a 	mov.w	r6, sl, lsl #1
 800dfda:	4545      	cmp	r5, r8
 800dfdc:	d2d8      	bcs.n	800df90 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 800dfde:	f8db 0000 	ldr.w	r0, [fp]
 800dfe2:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 800dfe6:	6802      	ldr	r2, [r0, #0]
 800dfe8:	4629      	mov	r1, r5
 800dfea:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 800dfee:	005b      	lsls	r3, r3, #1
 800dff0:	463a      	mov	r2, r7
 800dff2:	47d0      	blx	sl
 800dff4:	444f      	add	r7, r9
 800dff6:	4435      	add	r5, r6
 800dff8:	e7ef      	b.n	800dfda <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 800dffa:	bf00      	nop
 800dffc:	20012478 	.word	0x20012478
 800e000:	2001247a 	.word	0x2001247a
 800e004:	2001247c 	.word	0x2001247c
 800e008:	2001247e 	.word	0x2001247e
 800e00c:	20012484 	.word	0x20012484

0800e010 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 800e010:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e012:	4606      	mov	r6, r0
 800e014:	b087      	sub	sp, #28
 800e016:	460c      	mov	r4, r1
 800e018:	4617      	mov	r7, r2
 800e01a:	461d      	mov	r5, r3
 800e01c:	b333      	cbz	r3, 800e06c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 800e01e:	4608      	mov	r0, r1
 800e020:	f7fa fc55 	bl	80088ce <_ZNK8touchgfx4Rect7isEmptyEv>
 800e024:	bb10      	cbnz	r0, 800e06c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 800e026:	6820      	ldr	r0, [r4, #0]
 800e028:	6861      	ldr	r1, [r4, #4]
 800e02a:	4c1c      	ldr	r4, [pc, #112]	@ (800e09c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 800e02c:	ab04      	add	r3, sp, #16
 800e02e:	c303      	stmia	r3!, {r0, r1}
 800e030:	a804      	add	r0, sp, #16
 800e032:	f7fc fc35 	bl	800a8a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800e036:	6820      	ldr	r0, [r4, #0]
 800e038:	6803      	ldr	r3, [r0, #0]
 800e03a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e03c:	4798      	blx	r3
 800e03e:	2dff      	cmp	r5, #255	@ 0xff
 800e040:	d016      	beq.n	800e070 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 800e042:	f010 0f08 	tst.w	r0, #8
 800e046:	6820      	ldr	r0, [r4, #0]
 800e048:	d015      	beq.n	800e076 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 800e04a:	2400      	movs	r4, #0
 800e04c:	6801      	ldr	r1, [r0, #0]
 800e04e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800e052:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800e056:	e9cd 5402 	strd	r5, r4, [sp, #8]
 800e05a:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 800e05e:	9401      	str	r4, [sp, #4]
 800e060:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 800e064:	9400      	str	r4, [sp, #0]
 800e066:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 800e068:	4639      	mov	r1, r7
 800e06a:	47a0      	blx	r4
 800e06c:	b007      	add	sp, #28
 800e06e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e070:	f010 0f02 	tst.w	r0, #2
 800e074:	e7e7      	b.n	800e046 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 800e076:	6803      	ldr	r3, [r0, #0]
 800e078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e07a:	4798      	blx	r3
 800e07c:	4b08      	ldr	r3, [pc, #32]	@ (800e0a0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 800e07e:	881a      	ldrh	r2, [r3, #0]
 800e080:	6833      	ldr	r3, [r6, #0]
 800e082:	e9cd 7500 	strd	r7, r5, [sp]
 800e086:	4601      	mov	r1, r0
 800e088:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 800e08a:	4630      	mov	r0, r6
 800e08c:	ab04      	add	r3, sp, #16
 800e08e:	47a8      	blx	r5
 800e090:	6820      	ldr	r0, [r4, #0]
 800e092:	6803      	ldr	r3, [r0, #0]
 800e094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e096:	4798      	blx	r3
 800e098:	e7e8      	b.n	800e06c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 800e09a:	bf00      	nop
 800e09c:	20012484 	.word	0x20012484
 800e0a0:	2001247e 	.word	0x2001247e

0800e0a4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 800e0a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0a8:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
 800e0ac:	9e08      	ldr	r6, [sp, #32]
 800e0ae:	4688      	mov	r8, r1
 800e0b0:	4614      	mov	r4, r2
 800e0b2:	461d      	mov	r5, r3
 800e0b4:	2f00      	cmp	r7, #0
 800e0b6:	f000 80a9 	beq.w	800e20c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f7fa fc07 	bl	80088ce <_ZNK8touchgfx4Rect7isEmptyEv>
 800e0c0:	2800      	cmp	r0, #0
 800e0c2:	f040 80a3 	bne.w	800e20c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 800e0c6:	f9b5 1000 	ldrsh.w	r1, [r5]
 800e0ca:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800e0ce:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 800e0d2:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 800e0d6:	fb04 1303 	mla	r3, r4, r3, r1
 800e0da:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 800e0de:	4365      	muls	r5, r4
 800e0e0:	2fff      	cmp	r7, #255	@ 0xff
 800e0e2:	eba4 0200 	sub.w	r2, r4, r0
 800e0e6:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 800e0ea:	ea4f 2816 	mov.w	r8, r6, lsr #8
 800e0ee:	d04a      	beq.n	800e186 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 800e0f0:	b2bc      	uxth	r4, r7
 800e0f2:	f1c7 0cff 	rsb	ip, r7, #255	@ 0xff
 800e0f6:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 800e0fa:	fa5f f788 	uxtb.w	r7, r8
 800e0fe:	b2f3      	uxtb	r3, r6
 800e100:	0040      	lsls	r0, r0, #1
 800e102:	fb0e fe04 	mul.w	lr, lr, r4
 800e106:	4367      	muls	r7, r4
 800e108:	4363      	muls	r3, r4
 800e10a:	ea4f 0842 	mov.w	r8, r2, lsl #1
 800e10e:	fa1f fc8c 	uxth.w	ip, ip
 800e112:	42a9      	cmp	r1, r5
 800e114:	d27a      	bcs.n	800e20c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 800e116:	eb01 0900 	add.w	r9, r1, r0
 800e11a:	4549      	cmp	r1, r9
 800e11c:	d231      	bcs.n	800e182 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xde>
 800e11e:	880a      	ldrh	r2, [r1, #0]
 800e120:	1214      	asrs	r4, r2, #8
 800e122:	10d6      	asrs	r6, r2, #3
 800e124:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 800e128:	00d2      	lsls	r2, r2, #3
 800e12a:	b2d2      	uxtb	r2, r2
 800e12c:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 800e130:	fb14 f40c 	smulbb	r4, r4, ip
 800e134:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 800e138:	4474      	add	r4, lr
 800e13a:	fb12 f20c 	smulbb	r2, r2, ip
 800e13e:	b2a4      	uxth	r4, r4
 800e140:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 800e144:	441a      	add	r2, r3
 800e146:	b292      	uxth	r2, r2
 800e148:	f104 0a01 	add.w	sl, r4, #1
 800e14c:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 800e150:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 800e154:	fb16 f60c 	smulbb	r6, r6, ip
 800e158:	f102 0a01 	add.w	sl, r2, #1
 800e15c:	443e      	add	r6, r7
 800e15e:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 800e162:	b2b6      	uxth	r6, r6
 800e164:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 800e168:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 800e16c:	4322      	orrs	r2, r4
 800e16e:	1c74      	adds	r4, r6, #1
 800e170:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 800e174:	0976      	lsrs	r6, r6, #5
 800e176:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 800e17a:	4332      	orrs	r2, r6
 800e17c:	f821 2b02 	strh.w	r2, [r1], #2
 800e180:	e7cb      	b.n	800e11a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 800e182:	4441      	add	r1, r8
 800e184:	e7c5      	b.n	800e112 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 800e186:	4f22      	ldr	r7, [pc, #136]	@ (800e210 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>)
 800e188:	0973      	lsrs	r3, r6, #5
 800e18a:	ea08 0707 	and.w	r7, r8, r7
 800e18e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800e192:	433b      	orrs	r3, r7
 800e194:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 800e198:	4333      	orrs	r3, r6
 800e19a:	07e7      	lsls	r7, r4, #31
 800e19c:	b29b      	uxth	r3, r3
 800e19e:	d50b      	bpl.n	800e1b8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 800e1a0:	0040      	lsls	r0, r0, #1
 800e1a2:	0052      	lsls	r2, r2, #1
 800e1a4:	42a9      	cmp	r1, r5
 800e1a6:	d231      	bcs.n	800e20c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 800e1a8:	180c      	adds	r4, r1, r0
 800e1aa:	42a1      	cmp	r1, r4
 800e1ac:	d202      	bcs.n	800e1b4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 800e1ae:	f821 3b02 	strh.w	r3, [r1], #2
 800e1b2:	e7fa      	b.n	800e1aa <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 800e1b4:	4411      	add	r1, r2
 800e1b6:	e7f5      	b.n	800e1a4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 800e1b8:	078e      	lsls	r6, r1, #30
 800e1ba:	d008      	beq.n	800e1ce <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 800e1bc:	0066      	lsls	r6, r4, #1
 800e1be:	460a      	mov	r2, r1
 800e1c0:	42aa      	cmp	r2, r5
 800e1c2:	d202      	bcs.n	800e1ca <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 800e1c4:	8013      	strh	r3, [r2, #0]
 800e1c6:	4432      	add	r2, r6
 800e1c8:	e7fa      	b.n	800e1c0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11c>
 800e1ca:	3102      	adds	r1, #2
 800e1cc:	3801      	subs	r0, #1
 800e1ce:	07c2      	lsls	r2, r0, #31
 800e1d0:	d50b      	bpl.n	800e1ea <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 800e1d2:	f100 4200 	add.w	r2, r0, #2147483648	@ 0x80000000
 800e1d6:	3a01      	subs	r2, #1
 800e1d8:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800e1dc:	0066      	lsls	r6, r4, #1
 800e1de:	42aa      	cmp	r2, r5
 800e1e0:	d202      	bcs.n	800e1e8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 800e1e2:	8013      	strh	r3, [r2, #0]
 800e1e4:	4432      	add	r2, r6
 800e1e6:	e7fa      	b.n	800e1de <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13a>
 800e1e8:	3801      	subs	r0, #1
 800e1ea:	b178      	cbz	r0, 800e20c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 800e1ec:	1040      	asrs	r0, r0, #1
 800e1ee:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 800e1f2:	0080      	lsls	r0, r0, #2
 800e1f4:	0064      	lsls	r4, r4, #1
 800e1f6:	42a9      	cmp	r1, r5
 800e1f8:	d208      	bcs.n	800e20c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 800e1fa:	180e      	adds	r6, r1, r0
 800e1fc:	460a      	mov	r2, r1
 800e1fe:	42b2      	cmp	r2, r6
 800e200:	d202      	bcs.n	800e208 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x164>
 800e202:	f842 3b04 	str.w	r3, [r2], #4
 800e206:	e7fa      	b.n	800e1fe <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15a>
 800e208:	4421      	add	r1, r4
 800e20a:	e7f4      	b.n	800e1f6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x152>
 800e20c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e210:	00fff800 	.word	0x00fff800

0800e214 <_ZN8touchgfx8LCD16bppC1Ev>:
 800e214:	2200      	movs	r2, #0
 800e216:	4912      	ldr	r1, [pc, #72]	@ (800e260 <_ZN8touchgfx8LCD16bppC1Ev+0x4c>)
 800e218:	6001      	str	r1, [r0, #0]
 800e21a:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800e21e:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800e222:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800e226:	e9c0 2207 	strd	r2, r2, [r0, #28]
 800e22a:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 800e22e:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 800e232:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 800e236:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 800e23a:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 800e23e:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 800e242:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 800e246:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 800e24a:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 800e24e:	e9c0 221b 	strd	r2, r2, [r0, #108]	@ 0x6c
 800e252:	e9c0 221d 	strd	r2, r2, [r0, #116]	@ 0x74
 800e256:	e9c0 221f 	strd	r2, r2, [r0, #124]	@ 0x7c
 800e25a:	e9c0 2221 	strd	r2, r2, [r0, #132]	@ 0x84
 800e25e:	4770      	bx	lr
 800e260:	080129ac 	.word	0x080129ac

0800e264 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 800e264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e268:	460d      	mov	r5, r1
 800e26a:	b08d      	sub	sp, #52	@ 0x34
 800e26c:	4604      	mov	r4, r0
 800e26e:	6808      	ldr	r0, [r1, #0]
 800e270:	6849      	ldr	r1, [r1, #4]
 800e272:	4699      	mov	r9, r3
 800e274:	ab08      	add	r3, sp, #32
 800e276:	c303      	stmia	r3!, {r0, r1}
 800e278:	6810      	ldr	r0, [r2, #0]
 800e27a:	6851      	ldr	r1, [r2, #4]
 800e27c:	ab0a      	add	r3, sp, #40	@ 0x28
 800e27e:	c303      	stmia	r3!, {r0, r1}
 800e280:	a808      	add	r0, sp, #32
 800e282:	f7fc fb0d 	bl	800a8a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800e286:	4629      	mov	r1, r5
 800e288:	a80a      	add	r0, sp, #40	@ 0x28
 800e28a:	f7fc fb31 	bl	800a8f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800e28e:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 800e292:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 800e296:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 800e29a:	4d63      	ldr	r5, [pc, #396]	@ (800e428 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 800e29c:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	@ 0x2c
 800e2a0:	6828      	ldr	r0, [r5, #0]
 800e2a2:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 800e2a6:	fb11 2103 	smlabb	r1, r1, r3, r2
 800e2aa:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800e2ae:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 800e2b2:	440a      	add	r2, r1
 800e2b4:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800e2b8:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 800e2bc:	4413      	add	r3, r2
 800e2be:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800e2c2:	6803      	ldr	r3, [r0, #0]
 800e2c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2c6:	4798      	blx	r3
 800e2c8:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 800e2cc:	d119      	bne.n	800e302 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 800e2ce:	f010 0f20 	tst.w	r0, #32
 800e2d2:	6828      	ldr	r0, [r5, #0]
 800e2d4:	d018      	beq.n	800e308 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 800e2d6:	2500      	movs	r5, #0
 800e2d8:	6801      	ldr	r1, [r0, #0]
 800e2da:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 800e2de:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 800e2e2:	e9cd 9503 	strd	r9, r5, [sp, #12]
 800e2e6:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 800e2ea:	9502      	str	r5, [sp, #8]
 800e2ec:	b2b6      	uxth	r6, r6
 800e2ee:	fa1f f588 	uxth.w	r5, r8
 800e2f2:	9601      	str	r6, [sp, #4]
 800e2f4:	9500      	str	r5, [sp, #0]
 800e2f6:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 800e2f8:	4621      	mov	r1, r4
 800e2fa:	47a8      	blx	r5
 800e2fc:	b00d      	add	sp, #52	@ 0x34
 800e2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e302:	f010 0f40 	tst.w	r0, #64	@ 0x40
 800e306:	e7e4      	b.n	800e2d2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 800e308:	6803      	ldr	r3, [r0, #0]
 800e30a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e30c:	4798      	blx	r3
 800e30e:	4947      	ldr	r1, [pc, #284]	@ (800e42c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 800e310:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 800e314:	880b      	ldrh	r3, [r1, #0]
 800e316:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	@ 0x28
 800e31a:	fb03 5202 	mla	r2, r3, r2, r5
 800e31e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 800e322:	4373      	muls	r3, r6
 800e324:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800e328:	9307      	str	r3, [sp, #28]
 800e32a:	ea4f 0348 	mov.w	r3, r8, lsl #1
 800e32e:	9306      	str	r3, [sp, #24]
 800e330:	468a      	mov	sl, r1
 800e332:	9b07      	ldr	r3, [sp, #28]
 800e334:	4298      	cmp	r0, r3
 800e336:	d270      	bcs.n	800e41a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 800e338:	9b06      	ldr	r3, [sp, #24]
 800e33a:	4621      	mov	r1, r4
 800e33c:	eb00 0b03 	add.w	fp, r0, r3
 800e340:	4558      	cmp	r0, fp
 800e342:	d25d      	bcs.n	800e400 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 800e344:	f851 4b04 	ldr.w	r4, [r1], #4
 800e348:	0e23      	lsrs	r3, r4, #24
 800e34a:	d014      	beq.n	800e376 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 800e34c:	2bff      	cmp	r3, #255	@ 0xff
 800e34e:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 800e352:	d112      	bne.n	800e37a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 800e354:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 800e358:	d10f      	bne.n	800e37a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 800e35a:	0963      	lsrs	r3, r4, #5
 800e35c:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 800e360:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800e364:	f02c 0c07 	bic.w	ip, ip, #7
 800e368:	ea43 0c0c 	orr.w	ip, r3, ip
 800e36c:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 800e370:	ea4c 0404 	orr.w	r4, ip, r4
 800e374:	8004      	strh	r4, [r0, #0]
 800e376:	3002      	adds	r0, #2
 800e378:	e7e2      	b.n	800e340 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 800e37a:	fb09 f303 	mul.w	r3, r9, r3
 800e37e:	8807      	ldrh	r7, [r0, #0]
 800e380:	1c5a      	adds	r2, r3, #1
 800e382:	eb02 2223 	add.w	r2, r2, r3, asr #8
 800e386:	1212      	asrs	r2, r2, #8
 800e388:	123e      	asrs	r6, r7, #8
 800e38a:	b293      	uxth	r3, r2
 800e38c:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 800e390:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 800e394:	43d2      	mvns	r2, r2
 800e396:	b2d2      	uxtb	r2, r2
 800e398:	10fd      	asrs	r5, r7, #3
 800e39a:	fb1e fe03 	smulbb	lr, lr, r3
 800e39e:	00ff      	lsls	r7, r7, #3
 800e3a0:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 800e3a4:	fb06 e602 	mla	r6, r6, r2, lr
 800e3a8:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 800e3ac:	b2ff      	uxtb	r7, r7
 800e3ae:	fa5f fc8c 	uxtb.w	ip, ip
 800e3b2:	b2e4      	uxtb	r4, r4
 800e3b4:	b2b6      	uxth	r6, r6
 800e3b6:	fb1c fc03 	smulbb	ip, ip, r3
 800e3ba:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 800e3be:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 800e3c2:	fb14 f403 	smulbb	r4, r4, r3
 800e3c6:	fb05 c502 	mla	r5, r5, r2, ip
 800e3ca:	f106 0e01 	add.w	lr, r6, #1
 800e3ce:	fb07 4702 	mla	r7, r7, r2, r4
 800e3d2:	b2ad      	uxth	r5, r5
 800e3d4:	b2bf      	uxth	r7, r7
 800e3d6:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 800e3da:	f406 4e78 	and.w	lr, r6, #63488	@ 0xf800
 800e3de:	f105 0c01 	add.w	ip, r5, #1
 800e3e2:	1c7e      	adds	r6, r7, #1
 800e3e4:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 800e3e8:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 800e3ec:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 800e3f0:	096d      	lsrs	r5, r5, #5
 800e3f2:	ea46 060e 	orr.w	r6, r6, lr
 800e3f6:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 800e3fa:	432e      	orrs	r6, r5
 800e3fc:	8006      	strh	r6, [r0, #0]
 800e3fe:	e7ba      	b.n	800e376 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 800e400:	f8ba 3000 	ldrh.w	r3, [sl]
 800e404:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	@ 0x24
 800e408:	eba3 0308 	sub.w	r3, r3, r8
 800e40c:	eba4 0408 	sub.w	r4, r4, r8
 800e410:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800e414:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 800e418:	e78b      	b.n	800e332 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 800e41a:	4b03      	ldr	r3, [pc, #12]	@ (800e428 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 800e41c:	6818      	ldr	r0, [r3, #0]
 800e41e:	6803      	ldr	r3, [r0, #0]
 800e420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e422:	4798      	blx	r3
 800e424:	e76a      	b.n	800e2fc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 800e426:	bf00      	nop
 800e428:	20012484 	.word	0x20012484
 800e42c:	2001247e 	.word	0x2001247e

0800e430 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 800e430:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e434:	460c      	mov	r4, r1
 800e436:	b085      	sub	sp, #20
 800e438:	6810      	ldr	r0, [r2, #0]
 800e43a:	6851      	ldr	r1, [r2, #4]
 800e43c:	466d      	mov	r5, sp
 800e43e:	c503      	stmia	r5!, {r0, r1}
 800e440:	6818      	ldr	r0, [r3, #0]
 800e442:	6859      	ldr	r1, [r3, #4]
 800e444:	4616      	mov	r6, r2
 800e446:	c503      	stmia	r5!, {r0, r1}
 800e448:	4668      	mov	r0, sp
 800e44a:	f7fc fa29 	bl	800a8a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800e44e:	4631      	mov	r1, r6
 800e450:	a802      	add	r0, sp, #8
 800e452:	f7fc fa4d 	bl	800a8f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800e456:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 800e45a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 800e45e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800e462:	4d28      	ldr	r5, [pc, #160]	@ (800e504 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 800e464:	4e28      	ldr	r6, [pc, #160]	@ (800e508 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 800e466:	6828      	ldr	r0, [r5, #0]
 800e468:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 800e46c:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 800e470:	fb11 2103 	smlabb	r1, r1, r3, r2
 800e474:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800e478:	f8bd 1000 	ldrh.w	r1, [sp]
 800e47c:	440a      	add	r2, r1
 800e47e:	f8ad 2008 	strh.w	r2, [sp, #8]
 800e482:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800e486:	4413      	add	r3, r2
 800e488:	f8ad 300a 	strh.w	r3, [sp, #10]
 800e48c:	6803      	ldr	r3, [r0, #0]
 800e48e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e490:	4798      	blx	r3
 800e492:	8833      	ldrh	r3, [r6, #0]
 800e494:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 800e498:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 800e49c:	f8df e06c 	ldr.w	lr, [pc, #108]	@ 800e50c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 800e4a0:	fb03 1202 	mla	r2, r3, r2, r1
 800e4a4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 800e4a8:	fb08 f303 	mul.w	r3, r8, r3
 800e4ac:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800e4b0:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 800e4b4:	4298      	cmp	r0, r3
 800e4b6:	d21d      	bcs.n	800e4f4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 800e4b8:	eb00 080c 	add.w	r8, r0, ip
 800e4bc:	4540      	cmp	r0, r8
 800e4be:	d20f      	bcs.n	800e4e0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 800e4c0:	f854 1b04 	ldr.w	r1, [r4], #4
 800e4c4:	ea4f 1951 	mov.w	r9, r1, lsr #5
 800e4c8:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 800e4cc:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 800e4d0:	ea42 0209 	orr.w	r2, r2, r9
 800e4d4:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 800e4d8:	430a      	orrs	r2, r1
 800e4da:	f820 2b02 	strh.w	r2, [r0], #2
 800e4de:	e7ed      	b.n	800e4bc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 800e4e0:	8832      	ldrh	r2, [r6, #0]
 800e4e2:	1bd2      	subs	r2, r2, r7
 800e4e4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 800e4e8:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 800e4ec:	1bd2      	subs	r2, r2, r7
 800e4ee:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800e4f2:	e7df      	b.n	800e4b4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 800e4f4:	6828      	ldr	r0, [r5, #0]
 800e4f6:	6803      	ldr	r3, [r0, #0]
 800e4f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4fa:	4798      	blx	r3
 800e4fc:	b005      	add	sp, #20
 800e4fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e502:	bf00      	nop
 800e504:	20012484 	.word	0x20012484
 800e508:	2001247e 	.word	0x2001247e
 800e50c:	fffff800 	.word	0xfffff800

0800e510 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 800e510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e514:	460e      	mov	r6, r1
 800e516:	b08e      	sub	sp, #56	@ 0x38
 800e518:	4604      	mov	r4, r0
 800e51a:	6808      	ldr	r0, [r1, #0]
 800e51c:	6849      	ldr	r1, [r1, #4]
 800e51e:	f8df 81d8 	ldr.w	r8, [pc, #472]	@ 800e6f8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 800e522:	f8df 91d8 	ldr.w	r9, [pc, #472]	@ 800e6fc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 800e526:	461d      	mov	r5, r3
 800e528:	ab0a      	add	r3, sp, #40	@ 0x28
 800e52a:	c303      	stmia	r3!, {r0, r1}
 800e52c:	6810      	ldr	r0, [r2, #0]
 800e52e:	6851      	ldr	r1, [r2, #4]
 800e530:	ab0c      	add	r3, sp, #48	@ 0x30
 800e532:	c303      	stmia	r3!, {r0, r1}
 800e534:	a80a      	add	r0, sp, #40	@ 0x28
 800e536:	f7fc f9b3 	bl	800a8a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800e53a:	4631      	mov	r1, r6
 800e53c:	a80c      	add	r0, sp, #48	@ 0x30
 800e53e:	f7fc f9d7 	bl	800a8f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800e542:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 800e546:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800e54a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 800e54e:	f8d8 0000 	ldr.w	r0, [r8]
 800e552:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 800e556:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 800e55a:	fb11 2103 	smlabb	r1, r1, r3, r2
 800e55e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800e562:	440c      	add	r4, r1
 800e564:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 800e568:	440a      	add	r2, r1
 800e56a:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 800e56e:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 800e572:	4413      	add	r3, r2
 800e574:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800e578:	6803      	ldr	r3, [r0, #0]
 800e57a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e57c:	4798      	blx	r3
 800e57e:	2dff      	cmp	r5, #255	@ 0xff
 800e580:	d124      	bne.n	800e5cc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 800e582:	f010 0f01 	tst.w	r0, #1
 800e586:	f8d8 0000 	ldr.w	r0, [r8]
 800e58a:	d022      	beq.n	800e5d2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 800e58c:	2100      	movs	r1, #0
 800e58e:	f8d0 c000 	ldr.w	ip, [r0]
 800e592:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 800e596:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 800e59a:	e9cd 1107 	strd	r1, r1, [sp, #28]
 800e59e:	f04f 0e01 	mov.w	lr, #1
 800e5a2:	f8cd e018 	str.w	lr, [sp, #24]
 800e5a6:	f8b9 e000 	ldrh.w	lr, [r9]
 800e5aa:	9503      	str	r5, [sp, #12]
 800e5ac:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 800e5b0:	b2b6      	uxth	r6, r6
 800e5b2:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 800e5b6:	9102      	str	r1, [sp, #8]
 800e5b8:	b2bf      	uxth	r7, r7
 800e5ba:	9601      	str	r6, [sp, #4]
 800e5bc:	9700      	str	r7, [sp, #0]
 800e5be:	f8dc 5040 	ldr.w	r5, [ip, #64]	@ 0x40
 800e5c2:	4621      	mov	r1, r4
 800e5c4:	47a8      	blx	r5
 800e5c6:	b00e      	add	sp, #56	@ 0x38
 800e5c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5cc:	f010 0f04 	tst.w	r0, #4
 800e5d0:	e7d9      	b.n	800e586 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 800e5d2:	6803      	ldr	r3, [r0, #0]
 800e5d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5d6:	4798      	blx	r3
 800e5d8:	f8b9 3000 	ldrh.w	r3, [r9]
 800e5dc:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 800e5e0:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 800e5e4:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 800e5e8:	fb03 1202 	mla	r2, r3, r2, r1
 800e5ec:	ebac 0c07 	sub.w	ip, ip, r7
 800e5f0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 800e5f4:	435e      	muls	r6, r3
 800e5f6:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 800e5fa:	2dff      	cmp	r5, #255	@ 0xff
 800e5fc:	eba3 0707 	sub.w	r7, r3, r7
 800e600:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800e604:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800e608:	ea4f 0747 	mov.w	r7, r7, lsl #1
 800e60c:	d049      	beq.n	800e6a2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 800e60e:	43eb      	mvns	r3, r5
 800e610:	fa1f f985 	uxth.w	r9, r5
 800e614:	b2db      	uxtb	r3, r3
 800e616:	42b0      	cmp	r0, r6
 800e618:	d266      	bcs.n	800e6e8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 800e61a:	eb00 0a0e 	add.w	sl, r0, lr
 800e61e:	4550      	cmp	r0, sl
 800e620:	4621      	mov	r1, r4
 800e622:	f104 0403 	add.w	r4, r4, #3
 800e626:	d25b      	bcs.n	800e6e0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 800e628:	8802      	ldrh	r2, [r0, #0]
 800e62a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 800e62e:	ea4f 2822 	mov.w	r8, r2, asr #8
 800e632:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 800e636:	fb11 f109 	smulbb	r1, r1, r9
 800e63a:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 800e63e:	10d5      	asrs	r5, r2, #3
 800e640:	fb08 1803 	mla	r8, r8, r3, r1
 800e644:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 800e648:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 800e64c:	fb11 f109 	smulbb	r1, r1, r9
 800e650:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 800e654:	fb05 1503 	mla	r5, r5, r3, r1
 800e658:	00d2      	lsls	r2, r2, #3
 800e65a:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 800e65e:	b2d2      	uxtb	r2, r2
 800e660:	fb11 f109 	smulbb	r1, r1, r9
 800e664:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 800e668:	fa1f f888 	uxth.w	r8, r8
 800e66c:	fb02 1203 	mla	r2, r2, r3, r1
 800e670:	b292      	uxth	r2, r2
 800e672:	f108 0101 	add.w	r1, r8, #1
 800e676:	b2ad      	uxth	r5, r5
 800e678:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 800e67c:	1c51      	adds	r1, r2, #1
 800e67e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 800e682:	1c69      	adds	r1, r5, #1
 800e684:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 800e688:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 800e68c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 800e690:	096d      	lsrs	r5, r5, #5
 800e692:	ea42 0208 	orr.w	r2, r2, r8
 800e696:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 800e69a:	432a      	orrs	r2, r5
 800e69c:	f820 2b02 	strh.w	r2, [r0], #2
 800e6a0:	e7bd      	b.n	800e61e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 800e6a2:	4a14      	ldr	r2, [pc, #80]	@ (800e6f4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 800e6a4:	42b0      	cmp	r0, r6
 800e6a6:	d21f      	bcs.n	800e6e8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 800e6a8:	eb00 050e 	add.w	r5, r0, lr
 800e6ac:	42a8      	cmp	r0, r5
 800e6ae:	4621      	mov	r1, r4
 800e6b0:	f104 0403 	add.w	r4, r4, #3
 800e6b4:	d210      	bcs.n	800e6d8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 800e6b6:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 800e6ba:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 800e6be:	00db      	lsls	r3, r3, #3
 800e6c0:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 800e6c4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800e6c8:	430b      	orrs	r3, r1
 800e6ca:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 800e6ce:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 800e6d2:	f820 3b02 	strh.w	r3, [r0], #2
 800e6d6:	e7e9      	b.n	800e6ac <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 800e6d8:	4438      	add	r0, r7
 800e6da:	eb01 040c 	add.w	r4, r1, ip
 800e6de:	e7e1      	b.n	800e6a4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 800e6e0:	4438      	add	r0, r7
 800e6e2:	eb01 040c 	add.w	r4, r1, ip
 800e6e6:	e796      	b.n	800e616 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 800e6e8:	4b03      	ldr	r3, [pc, #12]	@ (800e6f8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 800e6ea:	6818      	ldr	r0, [r3, #0]
 800e6ec:	6803      	ldr	r3, [r0, #0]
 800e6ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6f0:	4798      	blx	r3
 800e6f2:	e768      	b.n	800e5c6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 800e6f4:	fffff800 	.word	0xfffff800
 800e6f8:	20012484 	.word	0x20012484
 800e6fc:	2001247e 	.word	0x2001247e

0800e700 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 800e700:	b4f0      	push	{r4, r5, r6, r7}
 800e702:	4616      	mov	r6, r2
 800e704:	2e01      	cmp	r6, #1
 800e706:	461c      	mov	r4, r3
 800e708:	460d      	mov	r5, r1
 800e70a:	9a04      	ldr	r2, [sp, #16]
 800e70c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800e710:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800e714:	d012      	beq.n	800e73c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 800e716:	d303      	bcc.n	800e720 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 800e718:	2e02      	cmp	r6, #2
 800e71a:	d00a      	beq.n	800e732 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 800e71c:	bcf0      	pop	{r4, r5, r6, r7}
 800e71e:	4770      	bx	lr
 800e720:	6805      	ldr	r5, [r0, #0]
 800e722:	e9cd 3704 	strd	r3, r7, [sp, #16]
 800e726:	68ed      	ldr	r5, [r5, #12]
 800e728:	4613      	mov	r3, r2
 800e72a:	46ac      	mov	ip, r5
 800e72c:	4622      	mov	r2, r4
 800e72e:	bcf0      	pop	{r4, r5, r6, r7}
 800e730:	4760      	bx	ip
 800e732:	4621      	mov	r1, r4
 800e734:	4628      	mov	r0, r5
 800e736:	bcf0      	pop	{r4, r5, r6, r7}
 800e738:	f7ff bd94 	b.w	800e264 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 800e73c:	4621      	mov	r1, r4
 800e73e:	4628      	mov	r0, r5
 800e740:	bcf0      	pop	{r4, r5, r6, r7}
 800e742:	f7ff bee5 	b.w	800e510 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

0800e748 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 800e748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e74c:	4681      	mov	r9, r0
 800e74e:	b093      	sub	sp, #76	@ 0x4c
 800e750:	6810      	ldr	r0, [r2, #0]
 800e752:	f89d a070 	ldrb.w	sl, [sp, #112]	@ 0x70
 800e756:	4f6d      	ldr	r7, [pc, #436]	@ (800e90c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 800e758:	4688      	mov	r8, r1
 800e75a:	6851      	ldr	r1, [r2, #4]
 800e75c:	ac0e      	add	r4, sp, #56	@ 0x38
 800e75e:	c403      	stmia	r4!, {r0, r1}
 800e760:	6818      	ldr	r0, [r3, #0]
 800e762:	6859      	ldr	r1, [r3, #4]
 800e764:	ac10      	add	r4, sp, #64	@ 0x40
 800e766:	4616      	mov	r6, r2
 800e768:	c403      	stmia	r4!, {r0, r1}
 800e76a:	a80e      	add	r0, sp, #56	@ 0x38
 800e76c:	f7fc f898 	bl	800a8a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800e770:	4631      	mov	r1, r6
 800e772:	a810      	add	r0, sp, #64	@ 0x40
 800e774:	f7fc f8bc 	bl	800a8f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800e778:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 800e77c:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 800e780:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 800e784:	4e62      	ldr	r6, [pc, #392]	@ (800e910 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 800e786:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	@ 0x44
 800e78a:	6830      	ldr	r0, [r6, #0]
 800e78c:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 800e790:	fb11 2103 	smlabb	r1, r1, r3, r2
 800e794:	4489      	add	r9, r1
 800e796:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 800e79a:	440a      	add	r2, r1
 800e79c:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800e7a0:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 800e7a4:	4413      	add	r3, r2
 800e7a6:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 800e7aa:	6803      	ldr	r3, [r0, #0]
 800e7ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7ae:	4798      	blx	r3
 800e7b0:	f010 0f80 	tst.w	r0, #128	@ 0x80
 800e7b4:	6830      	ldr	r0, [r6, #0]
 800e7b6:	d01d      	beq.n	800e7f4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	6801      	ldr	r1, [r0, #0]
 800e7bc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800e7c0:	e9cd 2208 	strd	r2, r2, [sp, #32]
 800e7c4:	220b      	movs	r2, #11
 800e7c6:	9207      	str	r2, [sp, #28]
 800e7c8:	883a      	ldrh	r2, [r7, #0]
 800e7ca:	9206      	str	r2, [sp, #24]
 800e7cc:	2201      	movs	r2, #1
 800e7ce:	e9cd a204 	strd	sl, r2, [sp, #16]
 800e7d2:	f8bd 203c 	ldrh.w	r2, [sp, #60]	@ 0x3c
 800e7d6:	9203      	str	r2, [sp, #12]
 800e7d8:	b2a4      	uxth	r4, r4
 800e7da:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800e7de:	9200      	str	r2, [sp, #0]
 800e7e0:	b2ad      	uxth	r5, r5
 800e7e2:	9502      	str	r5, [sp, #8]
 800e7e4:	9401      	str	r4, [sp, #4]
 800e7e6:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 800e7e8:	4642      	mov	r2, r8
 800e7ea:	4649      	mov	r1, r9
 800e7ec:	47a0      	blx	r4
 800e7ee:	b013      	add	sp, #76	@ 0x4c
 800e7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7f4:	6803      	ldr	r3, [r0, #0]
 800e7f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7f8:	4798      	blx	r3
 800e7fa:	883b      	ldrh	r3, [r7, #0]
 800e7fc:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 800e800:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 800e804:	fb03 1202 	mla	r2, r3, r2, r1
 800e808:	435d      	muls	r5, r3
 800e80a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 800e80e:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 800e812:	920c      	str	r2, [sp, #48]	@ 0x30
 800e814:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 800e818:	1b12      	subs	r2, r2, r4
 800e81a:	920d      	str	r2, [sp, #52]	@ 0x34
 800e81c:	0062      	lsls	r2, r4, #1
 800e81e:	1b1c      	subs	r4, r3, r4
 800e820:	0063      	lsls	r3, r4, #1
 800e822:	920a      	str	r2, [sp, #40]	@ 0x28
 800e824:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e826:	f04f 0e04 	mov.w	lr, #4
 800e82a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e82c:	4298      	cmp	r0, r3
 800e82e:	d266      	bcs.n	800e8fe <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 800e830:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e832:	eb00 0b03 	add.w	fp, r0, r3
 800e836:	4558      	cmp	r0, fp
 800e838:	d25c      	bcs.n	800e8f4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 800e83a:	f819 3b01 	ldrb.w	r3, [r9], #1
 800e83e:	fb1e e303 	smlabb	r3, lr, r3, lr
 800e842:	f858 2003 	ldr.w	r2, [r8, r3]
 800e846:	0e11      	lsrs	r1, r2, #24
 800e848:	d012      	beq.n	800e870 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 800e84a:	29ff      	cmp	r1, #255	@ 0xff
 800e84c:	ea4f 2712 	mov.w	r7, r2, lsr #8
 800e850:	d110      	bne.n	800e874 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 800e852:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 800e856:	d10d      	bne.n	800e874 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 800e858:	0953      	lsrs	r3, r2, #5
 800e85a:	f427 67ff 	bic.w	r7, r7, #2040	@ 0x7f8
 800e85e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800e862:	f027 0707 	bic.w	r7, r7, #7
 800e866:	431f      	orrs	r7, r3
 800e868:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 800e86c:	433a      	orrs	r2, r7
 800e86e:	8002      	strh	r2, [r0, #0]
 800e870:	3002      	adds	r0, #2
 800e872:	e7e0      	b.n	800e836 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 800e874:	fb0a f101 	mul.w	r1, sl, r1
 800e878:	8806      	ldrh	r6, [r0, #0]
 800e87a:	1c4b      	adds	r3, r1, #1
 800e87c:	eb03 2321 	add.w	r3, r3, r1, asr #8
 800e880:	1235      	asrs	r5, r6, #8
 800e882:	10f4      	asrs	r4, r6, #3
 800e884:	121b      	asrs	r3, r3, #8
 800e886:	00f6      	lsls	r6, r6, #3
 800e888:	b299      	uxth	r1, r3
 800e88a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800e88e:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 800e892:	b2f6      	uxtb	r6, r6
 800e894:	43db      	mvns	r3, r3
 800e896:	b2d2      	uxtb	r2, r2
 800e898:	b2db      	uxtb	r3, r3
 800e89a:	fb1c fc01 	smulbb	ip, ip, r1
 800e89e:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 800e8a2:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 800e8a6:	fb12 f201 	smulbb	r2, r2, r1
 800e8aa:	fb05 c503 	mla	r5, r5, r3, ip
 800e8ae:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 800e8b2:	b2ff      	uxtb	r7, r7
 800e8b4:	fb06 2203 	mla	r2, r6, r3, r2
 800e8b8:	b2ad      	uxth	r5, r5
 800e8ba:	fb17 f701 	smulbb	r7, r7, r1
 800e8be:	b292      	uxth	r2, r2
 800e8c0:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 800e8c4:	fb04 7403 	mla	r4, r4, r3, r7
 800e8c8:	f105 0c01 	add.w	ip, r5, #1
 800e8cc:	1c57      	adds	r7, r2, #1
 800e8ce:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 800e8d2:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 800e8d6:	b2a4      	uxth	r4, r4
 800e8d8:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 800e8dc:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 800e8e0:	433d      	orrs	r5, r7
 800e8e2:	1c67      	adds	r7, r4, #1
 800e8e4:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 800e8e8:	0964      	lsrs	r4, r4, #5
 800e8ea:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 800e8ee:	4325      	orrs	r5, r4
 800e8f0:	8005      	strh	r5, [r0, #0]
 800e8f2:	e7bd      	b.n	800e870 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 800e8f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e8f6:	4418      	add	r0, r3
 800e8f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e8fa:	4499      	add	r9, r3
 800e8fc:	e795      	b.n	800e82a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 800e8fe:	4b04      	ldr	r3, [pc, #16]	@ (800e910 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 800e900:	6818      	ldr	r0, [r3, #0]
 800e902:	6803      	ldr	r3, [r0, #0]
 800e904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e906:	4798      	blx	r3
 800e908:	e771      	b.n	800e7ee <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 800e90a:	bf00      	nop
 800e90c:	2001247e 	.word	0x2001247e
 800e910:	20012484 	.word	0x20012484

0800e914 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 800e914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e918:	b087      	sub	sp, #28
 800e91a:	4680      	mov	r8, r0
 800e91c:	f89d 6040 	ldrb.w	r6, [sp, #64]	@ 0x40
 800e920:	460d      	mov	r5, r1
 800e922:	4614      	mov	r4, r2
 800e924:	2e00      	cmp	r6, #0
 800e926:	f000 80b9 	beq.w	800ea9c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 800e92a:	6810      	ldr	r0, [r2, #0]
 800e92c:	6851      	ldr	r1, [r2, #4]
 800e92e:	af02      	add	r7, sp, #8
 800e930:	c703      	stmia	r7!, {r0, r1}
 800e932:	6818      	ldr	r0, [r3, #0]
 800e934:	6859      	ldr	r1, [r3, #4]
 800e936:	af04      	add	r7, sp, #16
 800e938:	c703      	stmia	r7!, {r0, r1}
 800e93a:	a802      	add	r0, sp, #8
 800e93c:	f7fb ffb0 	bl	800a8a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800e940:	4621      	mov	r1, r4
 800e942:	a804      	add	r0, sp, #16
 800e944:	f7fb ffd4 	bl	800a8f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800e948:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800e94c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800e950:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 800e954:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 800e958:	fb14 2103 	smlabb	r1, r4, r3, r2
 800e95c:	eb08 0401 	add.w	r4, r8, r1
 800e960:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800e964:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 800e968:	440a      	add	r2, r1
 800e96a:	f8ad 2010 	strh.w	r2, [sp, #16]
 800e96e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800e972:	4413      	add	r3, r2
 800e974:	f8ad 3012 	strh.w	r3, [sp, #18]
 800e978:	4b4a      	ldr	r3, [pc, #296]	@ (800eaa4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 800e97a:	6818      	ldr	r0, [r3, #0]
 800e97c:	6803      	ldr	r3, [r0, #0]
 800e97e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e980:	4798      	blx	r3
 800e982:	4b49      	ldr	r3, [pc, #292]	@ (800eaa8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 800e984:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 800e988:	881a      	ldrh	r2, [r3, #0]
 800e98a:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 800e98e:	2eff      	cmp	r6, #255	@ 0xff
 800e990:	fb02 c101 	mla	r1, r2, r1, ip
 800e994:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800e998:	fb02 f207 	mul.w	r2, r2, r7
 800e99c:	f105 0104 	add.w	r1, r5, #4
 800e9a0:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 800e9a4:	461d      	mov	r5, r3
 800e9a6:	d05a      	beq.n	800ea5e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 800e9a8:	f1c6 0eff 	rsb	lr, r6, #255	@ 0xff
 800e9ac:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800e9b0:	b2b6      	uxth	r6, r6
 800e9b2:	fa1f fe8e 	uxth.w	lr, lr
 800e9b6:	9301      	str	r3, [sp, #4]
 800e9b8:	4282      	cmp	r2, r0
 800e9ba:	d96a      	bls.n	800ea92 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 800e9bc:	eb00 0b0a 	add.w	fp, r0, sl
 800e9c0:	4583      	cmp	fp, r0
 800e9c2:	d940      	bls.n	800ea46 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 800e9c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e9c8:	8805      	ldrh	r5, [r0, #0]
 800e9ca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e9ce:	122f      	asrs	r7, r5, #8
 800e9d0:	ea4f 2c23 	mov.w	ip, r3, asr #8
 800e9d4:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 800e9d8:	fb17 f70e 	smulbb	r7, r7, lr
 800e9dc:	ea4f 09e5 	mov.w	r9, r5, asr #3
 800e9e0:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 800e9e4:	00ed      	lsls	r5, r5, #3
 800e9e6:	fb0c 7c06 	mla	ip, ip, r6, r7
 800e9ea:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 800e9ee:	10df      	asrs	r7, r3, #3
 800e9f0:	b2ed      	uxtb	r5, r5
 800e9f2:	00db      	lsls	r3, r3, #3
 800e9f4:	fa1f fc8c 	uxth.w	ip, ip
 800e9f8:	fb19 f90e 	smulbb	r9, r9, lr
 800e9fc:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 800ea00:	b2db      	uxtb	r3, r3
 800ea02:	fb15 f50e 	smulbb	r5, r5, lr
 800ea06:	fb07 9706 	mla	r7, r7, r6, r9
 800ea0a:	fb03 5306 	mla	r3, r3, r6, r5
 800ea0e:	f10c 0901 	add.w	r9, ip, #1
 800ea12:	b29b      	uxth	r3, r3
 800ea14:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 800ea18:	f40c 4978 	and.w	r9, ip, #63488	@ 0xf800
 800ea1c:	f103 0c01 	add.w	ip, r3, #1
 800ea20:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 800ea24:	b2bf      	uxth	r7, r7
 800ea26:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 800ea2a:	ea4c 0c09 	orr.w	ip, ip, r9
 800ea2e:	f107 0901 	add.w	r9, r7, #1
 800ea32:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 800ea36:	097f      	lsrs	r7, r7, #5
 800ea38:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 800ea3c:	ea4c 0c07 	orr.w	ip, ip, r7
 800ea40:	f820 cb02 	strh.w	ip, [r0], #2
 800ea44:	e7bc      	b.n	800e9c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 800ea46:	9b01      	ldr	r3, [sp, #4]
 800ea48:	881b      	ldrh	r3, [r3, #0]
 800ea4a:	eba3 0308 	sub.w	r3, r3, r8
 800ea4e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800ea52:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800ea56:	eba3 0308 	sub.w	r3, r3, r8
 800ea5a:	441c      	add	r4, r3
 800ea5c:	e7ac      	b.n	800e9b8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 800ea5e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800ea62:	4282      	cmp	r2, r0
 800ea64:	d915      	bls.n	800ea92 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 800ea66:	eb00 060a 	add.w	r6, r0, sl
 800ea6a:	4286      	cmp	r6, r0
 800ea6c:	d906      	bls.n	800ea7c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 800ea6e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ea72:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800ea76:	f820 3b02 	strh.w	r3, [r0], #2
 800ea7a:	e7f6      	b.n	800ea6a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 800ea7c:	882b      	ldrh	r3, [r5, #0]
 800ea7e:	eba3 0308 	sub.w	r3, r3, r8
 800ea82:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800ea86:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800ea8a:	eba3 0308 	sub.w	r3, r3, r8
 800ea8e:	441c      	add	r4, r3
 800ea90:	e7e7      	b.n	800ea62 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 800ea92:	4b04      	ldr	r3, [pc, #16]	@ (800eaa4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 800ea94:	6818      	ldr	r0, [r3, #0]
 800ea96:	6803      	ldr	r3, [r0, #0]
 800ea98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea9a:	4798      	blx	r3
 800ea9c:	b007      	add	sp, #28
 800ea9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaa2:	bf00      	nop
 800eaa4:	20012484 	.word	0x20012484
 800eaa8:	2001247e 	.word	0x2001247e

0800eaac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 800eaac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eab0:	b091      	sub	sp, #68	@ 0x44
 800eab2:	4680      	mov	r8, r0
 800eab4:	f89d 5068 	ldrb.w	r5, [sp, #104]	@ 0x68
 800eab8:	460f      	mov	r7, r1
 800eaba:	4614      	mov	r4, r2
 800eabc:	2d00      	cmp	r5, #0
 800eabe:	d051      	beq.n	800eb64 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 800eac0:	6810      	ldr	r0, [r2, #0]
 800eac2:	6851      	ldr	r1, [r2, #4]
 800eac4:	f8df 9200 	ldr.w	r9, [pc, #512]	@ 800ecc8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 800eac8:	ae0c      	add	r6, sp, #48	@ 0x30
 800eaca:	c603      	stmia	r6!, {r0, r1}
 800eacc:	6818      	ldr	r0, [r3, #0]
 800eace:	6859      	ldr	r1, [r3, #4]
 800ead0:	ae0e      	add	r6, sp, #56	@ 0x38
 800ead2:	c603      	stmia	r6!, {r0, r1}
 800ead4:	a80c      	add	r0, sp, #48	@ 0x30
 800ead6:	f7fb fee3 	bl	800a8a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800eada:	4621      	mov	r1, r4
 800eadc:	a80e      	add	r0, sp, #56	@ 0x38
 800eade:	f7fb ff07 	bl	800a8f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800eae2:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 800eae6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 800eaea:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 800eaee:	f8d9 0000 	ldr.w	r0, [r9]
 800eaf2:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 800eaf6:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	@ 0x3e
 800eafa:	fb11 2103 	smlabb	r1, r1, r3, r2
 800eafe:	eb08 0401 	add.w	r4, r8, r1
 800eb02:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 800eb06:	f8df 81c4 	ldr.w	r8, [pc, #452]	@ 800eccc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 800eb0a:	440a      	add	r2, r1
 800eb0c:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 800eb10:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 800eb14:	4413      	add	r3, r2
 800eb16:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 800eb1a:	6803      	ldr	r3, [r0, #0]
 800eb1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb1e:	4798      	blx	r3
 800eb20:	f010 0f80 	tst.w	r0, #128	@ 0x80
 800eb24:	f8d9 0000 	ldr.w	r0, [r9]
 800eb28:	d01f      	beq.n	800eb6a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	6801      	ldr	r1, [r0, #0]
 800eb2e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800eb32:	e9cd 2208 	strd	r2, r2, [sp, #32]
 800eb36:	220b      	movs	r2, #11
 800eb38:	9207      	str	r2, [sp, #28]
 800eb3a:	f8b8 2000 	ldrh.w	r2, [r8]
 800eb3e:	9206      	str	r2, [sp, #24]
 800eb40:	2201      	movs	r2, #1
 800eb42:	e9cd 5204 	strd	r5, r2, [sp, #16]
 800eb46:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 800eb4a:	9203      	str	r2, [sp, #12]
 800eb4c:	fa1f f28a 	uxth.w	r2, sl
 800eb50:	9202      	str	r2, [sp, #8]
 800eb52:	b2b6      	uxth	r6, r6
 800eb54:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 800eb58:	9200      	str	r2, [sp, #0]
 800eb5a:	9601      	str	r6, [sp, #4]
 800eb5c:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 800eb5e:	463a      	mov	r2, r7
 800eb60:	4621      	mov	r1, r4
 800eb62:	47a8      	blx	r5
 800eb64:	b011      	add	sp, #68	@ 0x44
 800eb66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb6a:	6803      	ldr	r3, [r0, #0]
 800eb6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb6e:	4798      	blx	r3
 800eb70:	f8b8 2000 	ldrh.w	r2, [r8]
 800eb74:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 800eb78:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 800eb7c:	2dff      	cmp	r5, #255	@ 0xff
 800eb7e:	fb02 1303 	mla	r3, r2, r3, r1
 800eb82:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800eb86:	ea4f 0946 	mov.w	r9, r6, lsl #1
 800eb8a:	fb0a fa02 	mul.w	sl, sl, r2
 800eb8e:	d062      	beq.n	800ec56 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 800eb90:	ea6f 0c05 	mvn.w	ip, r5
 800eb94:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 800eb98:	930a      	str	r3, [sp, #40]	@ 0x28
 800eb9a:	b2ad      	uxth	r5, r5
 800eb9c:	fa5f fc8c 	uxtb.w	ip, ip
 800eba0:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 800eba4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eba6:	4298      	cmp	r0, r3
 800eba8:	f080 8085 	bcs.w	800ecb6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 800ebac:	eb00 0b09 	add.w	fp, r0, r9
 800ebb0:	4558      	cmp	r0, fp
 800ebb2:	d246      	bcs.n	800ec42 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 800ebb4:	f814 eb01 	ldrb.w	lr, [r4], #1
 800ebb8:	2303      	movs	r3, #3
 800ebba:	2204      	movs	r2, #4
 800ebbc:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 800ebc0:	eb07 0a0e 	add.w	sl, r7, lr
 800ebc4:	8803      	ldrh	r3, [r0, #0]
 800ebc6:	f89a 8002 	ldrb.w	r8, [sl, #2]
 800ebca:	f817 e00e 	ldrb.w	lr, [r7, lr]
 800ebce:	1219      	asrs	r1, r3, #8
 800ebd0:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 800ebd4:	fb18 f805 	smulbb	r8, r8, r5
 800ebd8:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 800ebdc:	10da      	asrs	r2, r3, #3
 800ebde:	fb01 810c 	mla	r1, r1, ip, r8
 800ebe2:	00db      	lsls	r3, r3, #3
 800ebe4:	f89a 8001 	ldrb.w	r8, [sl, #1]
 800ebe8:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 800ebec:	b2db      	uxtb	r3, r3
 800ebee:	fb18 f805 	smulbb	r8, r8, r5
 800ebf2:	fb1e fe05 	smulbb	lr, lr, r5
 800ebf6:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 800ebfa:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 800ebfe:	b289      	uxth	r1, r1
 800ec00:	fb02 820c 	mla	r2, r2, ip, r8
 800ec04:	fb03 e30c 	mla	r3, r3, ip, lr
 800ec08:	b292      	uxth	r2, r2
 800ec0a:	b29b      	uxth	r3, r3
 800ec0c:	f101 0801 	add.w	r8, r1, #1
 800ec10:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 800ec14:	f103 0e01 	add.w	lr, r3, #1
 800ec18:	f102 0801 	add.w	r8, r2, #1
 800ec1c:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 800ec20:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 800ec24:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 800ec28:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 800ec2c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800ec30:	ea4e 0101 	orr.w	r1, lr, r1
 800ec34:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 800ec38:	ea41 0108 	orr.w	r1, r1, r8
 800ec3c:	f820 1b02 	strh.w	r1, [r0], #2
 800ec40:	e7b6      	b.n	800ebb0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 800ec42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ec44:	881b      	ldrh	r3, [r3, #0]
 800ec46:	1b9b      	subs	r3, r3, r6
 800ec48:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800ec4c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 800ec50:	1b9b      	subs	r3, r3, r6
 800ec52:	441c      	add	r4, r3
 800ec54:	e7a6      	b.n	800eba4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 800ec56:	491b      	ldr	r1, [pc, #108]	@ (800ecc4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 800ec58:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 800ec5c:	2203      	movs	r2, #3
 800ec5e:	2504      	movs	r5, #4
 800ec60:	4550      	cmp	r0, sl
 800ec62:	d228      	bcs.n	800ecb6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 800ec64:	eb00 0c09 	add.w	ip, r0, r9
 800ec68:	4560      	cmp	r0, ip
 800ec6a:	4623      	mov	r3, r4
 800ec6c:	d219      	bcs.n	800eca2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 800ec6e:	f893 e000 	ldrb.w	lr, [r3]
 800ec72:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 800ec76:	eb07 0b0e 	add.w	fp, r7, lr
 800ec7a:	f817 e00e 	ldrb.w	lr, [r7, lr]
 800ec7e:	f89b 3002 	ldrb.w	r3, [fp, #2]
 800ec82:	f89b b001 	ldrb.w	fp, [fp, #1]
 800ec86:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800ec8a:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 800ec8e:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 800ec92:	ea43 030b 	orr.w	r3, r3, fp
 800ec96:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 800ec9a:	3401      	adds	r4, #1
 800ec9c:	f820 3b02 	strh.w	r3, [r0], #2
 800eca0:	e7e2      	b.n	800ec68 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 800eca2:	f8b8 3000 	ldrh.w	r3, [r8]
 800eca6:	1b9b      	subs	r3, r3, r6
 800eca8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800ecac:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 800ecb0:	1b9b      	subs	r3, r3, r6
 800ecb2:	441c      	add	r4, r3
 800ecb4:	e7d4      	b.n	800ec60 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 800ecb6:	4b04      	ldr	r3, [pc, #16]	@ (800ecc8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 800ecb8:	6818      	ldr	r0, [r3, #0]
 800ecba:	6803      	ldr	r3, [r0, #0]
 800ecbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecbe:	4798      	blx	r3
 800ecc0:	e750      	b.n	800eb64 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 800ecc2:	bf00      	nop
 800ecc4:	fffff800 	.word	0xfffff800
 800ecc8:	20012484 	.word	0x20012484
 800eccc:	2001247e 	.word	0x2001247e

0800ecd0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 800ecd0:	b4f0      	push	{r4, r5, r6, r7}
 800ecd2:	460c      	mov	r4, r1
 800ecd4:	4611      	mov	r1, r2
 800ecd6:	f89d 5014 	ldrb.w	r5, [sp, #20]
 800ecda:	780f      	ldrb	r7, [r1, #0]
 800ecdc:	784e      	ldrb	r6, [r1, #1]
 800ecde:	2f01      	cmp	r7, #1
 800ece0:	461a      	mov	r2, r3
 800ece2:	9b04      	ldr	r3, [sp, #16]
 800ece4:	d038      	beq.n	800ed58 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x88>
 800ece6:	d31f      	bcc.n	800ed28 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x58>
 800ece8:	2f02      	cmp	r7, #2
 800ecea:	d14d      	bne.n	800ed88 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 800ecec:	2e03      	cmp	r6, #3
 800ecee:	d84b      	bhi.n	800ed88 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 800ecf0:	e8df f006 	tbb	[pc, r6]
 800ecf4:	17140702 	.word	0x17140702
 800ecf8:	9504      	str	r5, [sp, #16]
 800ecfa:	4620      	mov	r0, r4
 800ecfc:	bcf0      	pop	{r4, r5, r6, r7}
 800ecfe:	f7ff be09 	b.w	800e914 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 800ed02:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 800ed04:	2800      	cmp	r0, #0
 800ed06:	d03f      	beq.n	800ed88 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 800ed08:	6806      	ldr	r6, [r0, #0]
 800ed0a:	e9cd 3504 	strd	r3, r5, [sp, #16]
 800ed0e:	68b5      	ldr	r5, [r6, #8]
 800ed10:	4613      	mov	r3, r2
 800ed12:	46ac      	mov	ip, r5
 800ed14:	460a      	mov	r2, r1
 800ed16:	4621      	mov	r1, r4
 800ed18:	bcf0      	pop	{r4, r5, r6, r7}
 800ed1a:	4760      	bx	ip
 800ed1c:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 800ed20:	e7f0      	b.n	800ed04 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 800ed22:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 800ed26:	e7ed      	b.n	800ed04 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 800ed28:	2e03      	cmp	r6, #3
 800ed2a:	d82d      	bhi.n	800ed88 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 800ed2c:	e8df f006 	tbb	[pc, r6]
 800ed30:	110e0702 	.word	0x110e0702
 800ed34:	9504      	str	r5, [sp, #16]
 800ed36:	4620      	mov	r0, r4
 800ed38:	bcf0      	pop	{r4, r5, r6, r7}
 800ed3a:	f7ff bd05 	b.w	800e748 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 800ed3e:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 800ed40:	b310      	cbz	r0, 800ed88 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 800ed42:	6806      	ldr	r6, [r0, #0]
 800ed44:	e9cd 3504 	strd	r3, r5, [sp, #16]
 800ed48:	68f5      	ldr	r5, [r6, #12]
 800ed4a:	e7e1      	b.n	800ed10 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 800ed4c:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 800ed50:	e7f6      	b.n	800ed40 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 800ed52:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 800ed56:	e7f3      	b.n	800ed40 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 800ed58:	2e03      	cmp	r6, #3
 800ed5a:	d815      	bhi.n	800ed88 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 800ed5c:	e8df f006 	tbb	[pc, r6]
 800ed60:	110e0702 	.word	0x110e0702
 800ed64:	9504      	str	r5, [sp, #16]
 800ed66:	4620      	mov	r0, r4
 800ed68:	bcf0      	pop	{r4, r5, r6, r7}
 800ed6a:	f7ff be9f 	b.w	800eaac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 800ed6e:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 800ed70:	b150      	cbz	r0, 800ed88 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 800ed72:	6806      	ldr	r6, [r0, #0]
 800ed74:	e9cd 3504 	strd	r3, r5, [sp, #16]
 800ed78:	6935      	ldr	r5, [r6, #16]
 800ed7a:	e7c9      	b.n	800ed10 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 800ed7c:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 800ed80:	e7f6      	b.n	800ed70 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 800ed82:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 800ed86:	e7f3      	b.n	800ed70 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 800ed88:	bcf0      	pop	{r4, r5, r6, r7}
 800ed8a:	4770      	bx	lr

0800ed8c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 800ed8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed90:	4604      	mov	r4, r0
 800ed92:	b087      	sub	sp, #28
 800ed94:	6810      	ldr	r0, [r2, #0]
 800ed96:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
 800ed9a:	f8df 9238 	ldr.w	r9, [pc, #568]	@ 800efd4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 800ed9e:	460e      	mov	r6, r1
 800eda0:	6851      	ldr	r1, [r2, #4]
 800eda2:	ad02      	add	r5, sp, #8
 800eda4:	c503      	stmia	r5!, {r0, r1}
 800eda6:	6818      	ldr	r0, [r3, #0]
 800eda8:	6859      	ldr	r1, [r3, #4]
 800edaa:	ad04      	add	r5, sp, #16
 800edac:	4617      	mov	r7, r2
 800edae:	c503      	stmia	r5!, {r0, r1}
 800edb0:	a802      	add	r0, sp, #8
 800edb2:	f7fb fd75 	bl	800a8a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800edb6:	4639      	mov	r1, r7
 800edb8:	a804      	add	r0, sp, #16
 800edba:	f7fb fd99 	bl	800a8f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800edbe:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800edc2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800edc6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800edca:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 800edce:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 800edd2:	fb11 2103 	smlabb	r1, r1, r3, r2
 800edd6:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 800edda:	440e      	add	r6, r1
 800eddc:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800ede0:	440a      	add	r2, r1
 800ede2:	f8ad 2010 	strh.w	r2, [sp, #16]
 800ede6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800edea:	4413      	add	r3, r2
 800edec:	f8ad 3012 	strh.w	r3, [sp, #18]
 800edf0:	4b77      	ldr	r3, [pc, #476]	@ (800efd0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 800edf2:	6818      	ldr	r0, [r3, #0]
 800edf4:	6803      	ldr	r3, [r0, #0]
 800edf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800edf8:	4798      	blx	r3
 800edfa:	f8b9 b000 	ldrh.w	fp, [r9]
 800edfe:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800ee02:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800ee06:	fb0b 2303 	mla	r3, fp, r3, r2
 800ee0a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800ee0e:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 800ee12:	ea4f 0348 	mov.w	r3, r8, lsl #1
 800ee16:	fb05 f50b 	mul.w	r5, r5, fp
 800ee1a:	9300      	str	r3, [sp, #0]
 800ee1c:	d069      	beq.n	800eef2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 800ee1e:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 800ee22:	4558      	cmp	r0, fp
 800ee24:	f080 80cc 	bcs.w	800efc0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 800ee28:	9b00      	ldr	r3, [sp, #0]
 800ee2a:	18c3      	adds	r3, r0, r3
 800ee2c:	9301      	str	r3, [sp, #4]
 800ee2e:	4631      	mov	r1, r6
 800ee30:	9b01      	ldr	r3, [sp, #4]
 800ee32:	4298      	cmp	r0, r3
 800ee34:	d24f      	bcs.n	800eed6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 800ee36:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ee3a:	2a00      	cmp	r2, #0
 800ee3c:	d048      	beq.n	800eed0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 800ee3e:	fb0a f202 	mul.w	r2, sl, r2
 800ee42:	1c53      	adds	r3, r2, #1
 800ee44:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 800ee48:	121b      	asrs	r3, r3, #8
 800ee4a:	d041      	beq.n	800eed0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 800ee4c:	8802      	ldrh	r2, [r0, #0]
 800ee4e:	f8b4 c000 	ldrh.w	ip, [r4]
 800ee52:	b29e      	uxth	r6, r3
 800ee54:	1215      	asrs	r5, r2, #8
 800ee56:	43db      	mvns	r3, r3
 800ee58:	b2db      	uxtb	r3, r3
 800ee5a:	ea4f 272c 	mov.w	r7, ip, asr #8
 800ee5e:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 800ee62:	fb15 f503 	smulbb	r5, r5, r3
 800ee66:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 800ee6a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 800ee6e:	00d2      	lsls	r2, r2, #3
 800ee70:	fb07 5706 	mla	r7, r7, r6, r5
 800ee74:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 800ee78:	ea4f 05ec 	mov.w	r5, ip, asr #3
 800ee7c:	b2d2      	uxtb	r2, r2
 800ee7e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800ee82:	b2bf      	uxth	r7, r7
 800ee84:	fb1e fe03 	smulbb	lr, lr, r3
 800ee88:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 800ee8c:	fa5f fc8c 	uxtb.w	ip, ip
 800ee90:	fb12 f203 	smulbb	r2, r2, r3
 800ee94:	fb05 e506 	mla	r5, r5, r6, lr
 800ee98:	fb0c 2c06 	mla	ip, ip, r6, r2
 800ee9c:	f107 0e01 	add.w	lr, r7, #1
 800eea0:	fa1f fc8c 	uxth.w	ip, ip
 800eea4:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 800eea8:	f407 4e78 	and.w	lr, r7, #63488	@ 0xf800
 800eeac:	f10c 0701 	add.w	r7, ip, #1
 800eeb0:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 800eeb4:	b2ad      	uxth	r5, r5
 800eeb6:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 800eeba:	ea47 070e 	orr.w	r7, r7, lr
 800eebe:	f105 0e01 	add.w	lr, r5, #1
 800eec2:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 800eec6:	096d      	lsrs	r5, r5, #5
 800eec8:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 800eecc:	432f      	orrs	r7, r5
 800eece:	8007      	strh	r7, [r0, #0]
 800eed0:	3002      	adds	r0, #2
 800eed2:	3402      	adds	r4, #2
 800eed4:	e7ac      	b.n	800ee30 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 800eed6:	f8b9 3000 	ldrh.w	r3, [r9]
 800eeda:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 800eede:	eba3 0308 	sub.w	r3, r3, r8
 800eee2:	eba6 0608 	sub.w	r6, r6, r8
 800eee6:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 800eeea:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800eeee:	440e      	add	r6, r1
 800eef0:	e797      	b.n	800ee22 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 800eef2:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800eef6:	42a8      	cmp	r0, r5
 800eef8:	d262      	bcs.n	800efc0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 800eefa:	9b00      	ldr	r3, [sp, #0]
 800eefc:	4631      	mov	r1, r6
 800eefe:	eb00 0b03 	add.w	fp, r0, r3
 800ef02:	4558      	cmp	r0, fp
 800ef04:	d24e      	bcs.n	800efa4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 800ef06:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef0a:	b12b      	cbz	r3, 800ef18 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 800ef0c:	2bff      	cmp	r3, #255	@ 0xff
 800ef0e:	f8b4 e000 	ldrh.w	lr, [r4]
 800ef12:	d104      	bne.n	800ef1e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 800ef14:	f8a0 e000 	strh.w	lr, [r0]
 800ef18:	3002      	adds	r0, #2
 800ef1a:	3402      	adds	r4, #2
 800ef1c:	e7f1      	b.n	800ef02 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 800ef1e:	8802      	ldrh	r2, [r0, #0]
 800ef20:	b29f      	uxth	r7, r3
 800ef22:	1216      	asrs	r6, r2, #8
 800ef24:	43db      	mvns	r3, r3
 800ef26:	b2db      	uxtb	r3, r3
 800ef28:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 800ef2c:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 800ef30:	fb16 f603 	smulbb	r6, r6, r3
 800ef34:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 800ef38:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 800ef3c:	00d2      	lsls	r2, r2, #3
 800ef3e:	fb0c 6c07 	mla	ip, ip, r7, r6
 800ef42:	b2d2      	uxtb	r2, r2
 800ef44:	ea4f 06ee 	mov.w	r6, lr, asr #3
 800ef48:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 800ef4c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 800ef50:	fb1a fa03 	smulbb	sl, sl, r3
 800ef54:	fa1f fc8c 	uxth.w	ip, ip
 800ef58:	fb12 f303 	smulbb	r3, r2, r3
 800ef5c:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 800ef60:	fa5f fe8e 	uxtb.w	lr, lr
 800ef64:	fb06 a607 	mla	r6, r6, r7, sl
 800ef68:	f10c 0201 	add.w	r2, ip, #1
 800ef6c:	fb0e 3307 	mla	r3, lr, r7, r3
 800ef70:	b2b6      	uxth	r6, r6
 800ef72:	b29b      	uxth	r3, r3
 800ef74:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 800ef78:	f40c 4278 	and.w	r2, ip, #63488	@ 0xf800
 800ef7c:	f106 0a01 	add.w	sl, r6, #1
 800ef80:	f103 0c01 	add.w	ip, r3, #1
 800ef84:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 800ef88:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 800ef8c:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 800ef90:	0976      	lsrs	r6, r6, #5
 800ef92:	ea4c 0c02 	orr.w	ip, ip, r2
 800ef96:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 800ef9a:	ea4c 0c06 	orr.w	ip, ip, r6
 800ef9e:	f8a0 c000 	strh.w	ip, [r0]
 800efa2:	e7b9      	b.n	800ef18 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 800efa4:	f8b9 3000 	ldrh.w	r3, [r9]
 800efa8:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 800efac:	eba3 0308 	sub.w	r3, r3, r8
 800efb0:	eba6 0608 	sub.w	r6, r6, r8
 800efb4:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 800efb8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800efbc:	440e      	add	r6, r1
 800efbe:	e79a      	b.n	800eef6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 800efc0:	4b03      	ldr	r3, [pc, #12]	@ (800efd0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 800efc2:	6818      	ldr	r0, [r3, #0]
 800efc4:	6803      	ldr	r3, [r0, #0]
 800efc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efc8:	4798      	blx	r3
 800efca:	b007      	add	sp, #28
 800efcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efd0:	20012484 	.word	0x20012484
 800efd4:	2001247e 	.word	0x2001247e

0800efd8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 800efd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efdc:	b089      	sub	sp, #36	@ 0x24
 800efde:	4607      	mov	r7, r0
 800efe0:	f89d 604c 	ldrb.w	r6, [sp, #76]	@ 0x4c
 800efe4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 800efe6:	4688      	mov	r8, r1
 800efe8:	4692      	mov	sl, r2
 800efea:	4699      	mov	r9, r3
 800efec:	2e00      	cmp	r6, #0
 800efee:	d048      	beq.n	800f082 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800eff0:	4608      	mov	r0, r1
 800eff2:	f7fe fac3 	bl	800d57c <_ZNK8touchgfx6Bitmap8getWidthEv>
 800eff6:	4605      	mov	r5, r0
 800eff8:	4640      	mov	r0, r8
 800effa:	f7fe faf3 	bl	800d5e4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800effe:	f8ad 000e 	strh.w	r0, [sp, #14]
 800f002:	4640      	mov	r0, r8
 800f004:	f8ad a008 	strh.w	sl, [sp, #8]
 800f008:	f8ad 500c 	strh.w	r5, [sp, #12]
 800f00c:	f8ad 900a 	strh.w	r9, [sp, #10]
 800f010:	f7fe fba6 	bl	800d760 <_ZNK8touchgfx6Bitmap7getDataEv>
 800f014:	4605      	mov	r5, r0
 800f016:	4640      	mov	r0, r8
 800f018:	f7fe fbd2 	bl	800d7c0 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 800f01c:	4682      	mov	sl, r0
 800f01e:	4640      	mov	r0, r8
 800f020:	f7fe fc22 	bl	800d868 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800f024:	2810      	cmp	r0, #16
 800f026:	d82c      	bhi.n	800f082 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800f028:	e8df f010 	tbh	[pc, r0, lsl #1]
 800f02c:	00ba00ca 	.word	0x00ba00ca
 800f030:	002b0011 	.word	0x002b0011
 800f034:	002b002b 	.word	0x002b002b
 800f038:	002b002b 	.word	0x002b002b
 800f03c:	002b002b 	.word	0x002b002b
 800f040:	00c1002b 	.word	0x00c1002b
 800f044:	002b002b 	.word	0x002b002b
 800f048:	002b0180 	.word	0x002b0180
 800f04c:	0173      	.short	0x0173
 800f04e:	4bbc      	ldr	r3, [pc, #752]	@ (800f340 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x368>)
 800f050:	6818      	ldr	r0, [r3, #0]
 800f052:	6803      	ldr	r3, [r0, #0]
 800f054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f056:	4798      	blx	r3
 800f058:	2eff      	cmp	r6, #255	@ 0xff
 800f05a:	d101      	bne.n	800f060 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 800f05c:	0683      	lsls	r3, r0, #26
 800f05e:	d506      	bpl.n	800f06e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x96>
 800f060:	4633      	mov	r3, r6
 800f062:	4622      	mov	r2, r4
 800f064:	a902      	add	r1, sp, #8
 800f066:	4628      	mov	r0, r5
 800f068:	f7ff f8fc 	bl	800e264 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 800f06c:	e009      	b.n	800f082 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800f06e:	4640      	mov	r0, r8
 800f070:	f7fe fb3e 	bl	800d6f0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 800f074:	b940      	cbnz	r0, 800f088 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb0>
 800f076:	4623      	mov	r3, r4
 800f078:	aa02      	add	r2, sp, #8
 800f07a:	4629      	mov	r1, r5
 800f07c:	4638      	mov	r0, r7
 800f07e:	f7ff f9d7 	bl	800e430 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 800f082:	b009      	add	sp, #36	@ 0x24
 800f084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f088:	f10d 0918 	add.w	r9, sp, #24
 800f08c:	4641      	mov	r1, r8
 800f08e:	4648      	mov	r0, r9
 800f090:	f7fe fadc 	bl	800d64c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800f094:	e899 0003 	ldmia.w	r9, {r0, r1}
 800f098:	f10d 0810 	add.w	r8, sp, #16
 800f09c:	e888 0003 	stmia.w	r8, {r0, r1}
 800f0a0:	4640      	mov	r0, r8
 800f0a2:	4621      	mov	r1, r4
 800f0a4:	f7f9 fbd0 	bl	8008848 <_ZN8touchgfx4RectaNERKS0_>
 800f0a8:	4640      	mov	r0, r8
 800f0aa:	f7f9 fc10 	bl	80088ce <_ZNK8touchgfx4Rect7isEmptyEv>
 800f0ae:	2800      	cmp	r0, #0
 800f0b0:	d1d6      	bne.n	800f060 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 800f0b2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800f0b6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800f0ba:	4293      	cmp	r3, r2
 800f0bc:	dd12      	ble.n	800f0e4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x10c>
 800f0be:	1a9b      	subs	r3, r3, r2
 800f0c0:	f9b4 0000 	ldrsh.w	r0, [r4]
 800f0c4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800f0c8:	f8ad 0018 	strh.w	r0, [sp, #24]
 800f0cc:	f8ad 201a 	strh.w	r2, [sp, #26]
 800f0d0:	f8ad 101c 	strh.w	r1, [sp, #28]
 800f0d4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f0d8:	464a      	mov	r2, r9
 800f0da:	4633      	mov	r3, r6
 800f0dc:	a902      	add	r1, sp, #8
 800f0de:	4628      	mov	r0, r5
 800f0e0:	f7ff f8c0 	bl	800e264 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 800f0e4:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800f0e8:	f9b4 2000 	ldrsh.w	r2, [r4]
 800f0ec:	4293      	cmp	r3, r2
 800f0ee:	dd12      	ble.n	800f116 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x13e>
 800f0f0:	1a9b      	subs	r3, r3, r2
 800f0f2:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 800f0f6:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 800f0fa:	f8ad 2018 	strh.w	r2, [sp, #24]
 800f0fe:	f8ad 001a 	strh.w	r0, [sp, #26]
 800f102:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f106:	f8ad 101e 	strh.w	r1, [sp, #30]
 800f10a:	23ff      	movs	r3, #255	@ 0xff
 800f10c:	464a      	mov	r2, r9
 800f10e:	a902      	add	r1, sp, #8
 800f110:	4628      	mov	r0, r5
 800f112:	f7ff f8a7 	bl	800e264 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 800f116:	4643      	mov	r3, r8
 800f118:	aa02      	add	r2, sp, #8
 800f11a:	4629      	mov	r1, r5
 800f11c:	4638      	mov	r0, r7
 800f11e:	f7ff f987 	bl	800e430 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 800f122:	88a2      	ldrh	r2, [r4, #4]
 800f124:	8823      	ldrh	r3, [r4, #0]
 800f126:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800f12a:	4413      	add	r3, r2
 800f12c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800f130:	440a      	add	r2, r1
 800f132:	b29b      	uxth	r3, r3
 800f134:	b292      	uxth	r2, r2
 800f136:	b211      	sxth	r1, r2
 800f138:	b218      	sxth	r0, r3
 800f13a:	4288      	cmp	r0, r1
 800f13c:	dd12      	ble.n	800f164 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x18c>
 800f13e:	1a9b      	subs	r3, r3, r2
 800f140:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 800f144:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 800f148:	f8ad 1018 	strh.w	r1, [sp, #24]
 800f14c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f150:	f8ad 001e 	strh.w	r0, [sp, #30]
 800f154:	23ff      	movs	r3, #255	@ 0xff
 800f156:	464a      	mov	r2, r9
 800f158:	a902      	add	r1, sp, #8
 800f15a:	4628      	mov	r0, r5
 800f15c:	f8ad 601a 	strh.w	r6, [sp, #26]
 800f160:	f7ff f880 	bl	800e264 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 800f164:	88e2      	ldrh	r2, [r4, #6]
 800f166:	8863      	ldrh	r3, [r4, #2]
 800f168:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800f16c:	4413      	add	r3, r2
 800f16e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800f172:	440a      	add	r2, r1
 800f174:	b29b      	uxth	r3, r3
 800f176:	b292      	uxth	r2, r2
 800f178:	b211      	sxth	r1, r2
 800f17a:	b218      	sxth	r0, r3
 800f17c:	4288      	cmp	r0, r1
 800f17e:	dd80      	ble.n	800f082 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800f180:	1a9b      	subs	r3, r3, r2
 800f182:	f9b4 6000 	ldrsh.w	r6, [r4]
 800f186:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800f18a:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f18e:	f8ad 6018 	strh.w	r6, [sp, #24]
 800f192:	f8ad 101a 	strh.w	r1, [sp, #26]
 800f196:	f8ad 001c 	strh.w	r0, [sp, #28]
 800f19a:	23ff      	movs	r3, #255	@ 0xff
 800f19c:	464a      	mov	r2, r9
 800f19e:	e761      	b.n	800f064 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 800f1a0:	4633      	mov	r3, r6
 800f1a2:	4622      	mov	r2, r4
 800f1a4:	a902      	add	r1, sp, #8
 800f1a6:	4628      	mov	r0, r5
 800f1a8:	f7ff f9b2 	bl	800e510 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 800f1ac:	e769      	b.n	800f082 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800f1ae:	e9cd 4600 	strd	r4, r6, [sp]
 800f1b2:	ab02      	add	r3, sp, #8
 800f1b4:	4652      	mov	r2, sl
 800f1b6:	4629      	mov	r1, r5
 800f1b8:	4638      	mov	r0, r7
 800f1ba:	f7ff fd89 	bl	800ecd0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 800f1be:	e760      	b.n	800f082 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800f1c0:	4640      	mov	r0, r8
 800f1c2:	f7fe fa95 	bl	800d6f0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 800f1c6:	b948      	cbnz	r0, 800f1dc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x204>
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	e9cd 6000 	strd	r6, r0, [sp]
 800f1ce:	aa02      	add	r2, sp, #8
 800f1d0:	68de      	ldr	r6, [r3, #12]
 800f1d2:	4629      	mov	r1, r5
 800f1d4:	4623      	mov	r3, r4
 800f1d6:	4638      	mov	r0, r7
 800f1d8:	47b0      	blx	r6
 800f1da:	e752      	b.n	800f082 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800f1dc:	f10d 0918 	add.w	r9, sp, #24
 800f1e0:	4641      	mov	r1, r8
 800f1e2:	4648      	mov	r0, r9
 800f1e4:	f7fe fa32 	bl	800d64c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800f1e8:	e899 0003 	ldmia.w	r9, {r0, r1}
 800f1ec:	f10d 0810 	add.w	r8, sp, #16
 800f1f0:	e888 0003 	stmia.w	r8, {r0, r1}
 800f1f4:	4640      	mov	r0, r8
 800f1f6:	4621      	mov	r1, r4
 800f1f8:	f7f9 fb26 	bl	8008848 <_ZN8touchgfx4RectaNERKS0_>
 800f1fc:	4640      	mov	r0, r8
 800f1fe:	f7f9 fb66 	bl	80088ce <_ZNK8touchgfx4Rect7isEmptyEv>
 800f202:	b138      	cbz	r0, 800f214 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x23c>
 800f204:	9600      	str	r6, [sp, #0]
 800f206:	4623      	mov	r3, r4
 800f208:	aa02      	add	r2, sp, #8
 800f20a:	4651      	mov	r1, sl
 800f20c:	4628      	mov	r0, r5
 800f20e:	f7ff fdbd 	bl	800ed8c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 800f212:	e736      	b.n	800f082 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	e9cd 6000 	strd	r6, r0, [sp]
 800f21a:	aa02      	add	r2, sp, #8
 800f21c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 800f220:	4629      	mov	r1, r5
 800f222:	4643      	mov	r3, r8
 800f224:	4638      	mov	r0, r7
 800f226:	47d8      	blx	fp
 800f228:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800f22c:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800f230:	4293      	cmp	r3, r2
 800f232:	dd13      	ble.n	800f25c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x284>
 800f234:	f9b4 0000 	ldrsh.w	r0, [r4]
 800f238:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800f23c:	f8ad 0018 	strh.w	r0, [sp, #24]
 800f240:	1a9b      	subs	r3, r3, r2
 800f242:	f8ad 201a 	strh.w	r2, [sp, #26]
 800f246:	f8ad 101c 	strh.w	r1, [sp, #28]
 800f24a:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f24e:	9600      	str	r6, [sp, #0]
 800f250:	464b      	mov	r3, r9
 800f252:	aa02      	add	r2, sp, #8
 800f254:	4651      	mov	r1, sl
 800f256:	4628      	mov	r0, r5
 800f258:	f7ff fd98 	bl	800ed8c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 800f25c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800f260:	f9b4 2000 	ldrsh.w	r2, [r4]
 800f264:	4293      	cmp	r3, r2
 800f266:	dd13      	ble.n	800f290 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2b8>
 800f268:	1a9b      	subs	r3, r3, r2
 800f26a:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 800f26e:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 800f272:	f8ad 2018 	strh.w	r2, [sp, #24]
 800f276:	f8ad 001a 	strh.w	r0, [sp, #26]
 800f27a:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f27e:	f8ad 101e 	strh.w	r1, [sp, #30]
 800f282:	9600      	str	r6, [sp, #0]
 800f284:	464b      	mov	r3, r9
 800f286:	aa02      	add	r2, sp, #8
 800f288:	4651      	mov	r1, sl
 800f28a:	4628      	mov	r0, r5
 800f28c:	f7ff fd7e 	bl	800ed8c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 800f290:	88a2      	ldrh	r2, [r4, #4]
 800f292:	8823      	ldrh	r3, [r4, #0]
 800f294:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800f298:	4413      	add	r3, r2
 800f29a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800f29e:	440a      	add	r2, r1
 800f2a0:	b29b      	uxth	r3, r3
 800f2a2:	b292      	uxth	r2, r2
 800f2a4:	b211      	sxth	r1, r2
 800f2a6:	b218      	sxth	r0, r3
 800f2a8:	4288      	cmp	r0, r1
 800f2aa:	dd13      	ble.n	800f2d4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2fc>
 800f2ac:	1a9b      	subs	r3, r3, r2
 800f2ae:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 800f2b2:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 800f2b6:	f8ad 1018 	strh.w	r1, [sp, #24]
 800f2ba:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f2be:	f8ad 001e 	strh.w	r0, [sp, #30]
 800f2c2:	9600      	str	r6, [sp, #0]
 800f2c4:	464b      	mov	r3, r9
 800f2c6:	aa02      	add	r2, sp, #8
 800f2c8:	4651      	mov	r1, sl
 800f2ca:	4628      	mov	r0, r5
 800f2cc:	f8ad 701a 	strh.w	r7, [sp, #26]
 800f2d0:	f7ff fd5c 	bl	800ed8c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 800f2d4:	88e2      	ldrh	r2, [r4, #6]
 800f2d6:	8863      	ldrh	r3, [r4, #2]
 800f2d8:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800f2dc:	4413      	add	r3, r2
 800f2de:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800f2e2:	440a      	add	r2, r1
 800f2e4:	b29b      	uxth	r3, r3
 800f2e6:	b292      	uxth	r2, r2
 800f2e8:	b211      	sxth	r1, r2
 800f2ea:	b218      	sxth	r0, r3
 800f2ec:	4288      	cmp	r0, r1
 800f2ee:	f77f aec8 	ble.w	800f082 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800f2f2:	f9b4 7000 	ldrsh.w	r7, [r4]
 800f2f6:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800f2fa:	f8ad 7018 	strh.w	r7, [sp, #24]
 800f2fe:	1a9b      	subs	r3, r3, r2
 800f300:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f304:	f8ad 101a 	strh.w	r1, [sp, #26]
 800f308:	f8ad 001c 	strh.w	r0, [sp, #28]
 800f30c:	9600      	str	r6, [sp, #0]
 800f30e:	464b      	mov	r3, r9
 800f310:	e77a      	b.n	800f208 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 800f312:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800f316:	2800      	cmp	r0, #0
 800f318:	f43f aeb3 	beq.w	800f082 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800f31c:	6803      	ldr	r3, [r0, #0]
 800f31e:	9600      	str	r6, [sp, #0]
 800f320:	68de      	ldr	r6, [r3, #12]
 800f322:	4623      	mov	r3, r4
 800f324:	aa02      	add	r2, sp, #8
 800f326:	4629      	mov	r1, r5
 800f328:	47b0      	blx	r6
 800f32a:	e6aa      	b.n	800f082 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800f32c:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800f330:	2800      	cmp	r0, #0
 800f332:	f43f aea6 	beq.w	800f082 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 800f336:	6803      	ldr	r3, [r0, #0]
 800f338:	9600      	str	r6, [sp, #0]
 800f33a:	689e      	ldr	r6, [r3, #8]
 800f33c:	e7f1      	b.n	800f322 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x34a>
 800f33e:	bf00      	nop
 800f340:	20012484 	.word	0x20012484

0800f344 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 800f344:	b180      	cbz	r0, 800f368 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 800f346:	2903      	cmp	r1, #3
 800f348:	d81c      	bhi.n	800f384 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 800f34a:	e8df f001 	tbb	[pc, r1]
 800f34e:	1d02      	.short	0x1d02
 800f350:	1f08      	.short	0x1f08
 800f352:	4b10      	ldr	r3, [pc, #64]	@ (800f394 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 800f354:	8818      	ldrh	r0, [r3, #0]
 800f356:	f3c0 000e 	ubfx	r0, r0, #0, #15
 800f35a:	4240      	negs	r0, r0
 800f35c:	4770      	bx	lr
 800f35e:	4b0d      	ldr	r3, [pc, #52]	@ (800f394 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 800f360:	8818      	ldrh	r0, [r3, #0]
 800f362:	f3c0 000e 	ubfx	r0, r0, #0, #15
 800f366:	4770      	bx	lr
 800f368:	2903      	cmp	r1, #3
 800f36a:	d80b      	bhi.n	800f384 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 800f36c:	a301      	add	r3, pc, #4	@ (adr r3, 800f374 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 800f36e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 800f372:	bf00      	nop
 800f374:	0800f389 	.word	0x0800f389
 800f378:	0800f35f 	.word	0x0800f35f
 800f37c:	0800f38d 	.word	0x0800f38d
 800f380:	0800f353 	.word	0x0800f353
 800f384:	2000      	movs	r0, #0
 800f386:	4770      	bx	lr
 800f388:	2001      	movs	r0, #1
 800f38a:	4770      	bx	lr
 800f38c:	f04f 30ff 	mov.w	r0, #4294967295
 800f390:	4770      	bx	lr
 800f392:	bf00      	nop
 800f394:	2001247e 	.word	0x2001247e

0800f398 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 800f398:	b180      	cbz	r0, 800f3bc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 800f39a:	2903      	cmp	r1, #3
 800f39c:	d81c      	bhi.n	800f3d8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 800f39e:	e8df f001 	tbb	[pc, r1]
 800f3a2:	021d      	.short	0x021d
 800f3a4:	071f      	.short	0x071f
 800f3a6:	4b10      	ldr	r3, [pc, #64]	@ (800f3e8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 800f3a8:	8818      	ldrh	r0, [r3, #0]
 800f3aa:	f3c0 000e 	ubfx	r0, r0, #0, #15
 800f3ae:	4770      	bx	lr
 800f3b0:	4b0d      	ldr	r3, [pc, #52]	@ (800f3e8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 800f3b2:	8818      	ldrh	r0, [r3, #0]
 800f3b4:	f3c0 000e 	ubfx	r0, r0, #0, #15
 800f3b8:	4240      	negs	r0, r0
 800f3ba:	4770      	bx	lr
 800f3bc:	2903      	cmp	r1, #3
 800f3be:	d80b      	bhi.n	800f3d8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 800f3c0:	a301      	add	r3, pc, #4	@ (adr r3, 800f3c8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 800f3c2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 800f3c6:	bf00      	nop
 800f3c8:	0800f3a7 	.word	0x0800f3a7
 800f3cc:	0800f3e1 	.word	0x0800f3e1
 800f3d0:	0800f3b1 	.word	0x0800f3b1
 800f3d4:	0800f3dd 	.word	0x0800f3dd
 800f3d8:	2000      	movs	r0, #0
 800f3da:	4770      	bx	lr
 800f3dc:	2001      	movs	r0, #1
 800f3de:	4770      	bx	lr
 800f3e0:	f04f 30ff 	mov.w	r0, #4294967295
 800f3e4:	4770      	bx	lr
 800f3e6:	bf00      	nop
 800f3e8:	2001247e 	.word	0x2001247e

0800f3ec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 800f3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3f0:	b099      	sub	sp, #100	@ 0x64
 800f3f2:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f3f4:	a914      	add	r1, sp, #80	@ 0x50
 800f3f6:	e881 000c 	stmia.w	r1, {r2, r3}
 800f3fa:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	@ 0x98
 800f3fe:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 800f402:	f891 900d 	ldrb.w	r9, [r1, #13]
 800f406:	9309      	str	r3, [sp, #36]	@ 0x24
 800f408:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 800f40c:	9310      	str	r3, [sp, #64]	@ 0x40
 800f40e:	ea4f 1749 	mov.w	r7, r9, lsl #5
 800f412:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
 800f416:	930c      	str	r3, [sp, #48]	@ 0x30
 800f418:	f407 7380 	and.w	r3, r7, #256	@ 0x100
 800f41c:	798f      	ldrb	r7, [r1, #6]
 800f41e:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	@ 0x88
 800f422:	f8bd 5090 	ldrh.w	r5, [sp, #144]	@ 0x90
 800f426:	f8bd 6094 	ldrh.w	r6, [sp, #148]	@ 0x94
 800f42a:	f89d 80ac 	ldrb.w	r8, [sp, #172]	@ 0xac
 800f42e:	f89d a0b4 	ldrb.w	sl, [sp, #180]	@ 0xb4
 800f432:	431f      	orrs	r7, r3
 800f434:	f000 8195 	beq.w	800f762 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 800f438:	ea4f 1909 	mov.w	r9, r9, lsl #4
 800f43c:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 800f440:	f891 9007 	ldrb.w	r9, [r1, #7]
 800f444:	ea59 0903 	orrs.w	r9, r9, r3
 800f448:	f000 818b 	beq.w	800f762 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 800f44c:	f991 3009 	ldrsb.w	r3, [r1, #9]
 800f450:	b29b      	uxth	r3, r3
 800f452:	2d00      	cmp	r5, #0
 800f454:	f000 812e 	beq.w	800f6b4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 800f458:	1aed      	subs	r5, r5, r3
 800f45a:	b2ad      	uxth	r5, r5
 800f45c:	042b      	lsls	r3, r5, #16
 800f45e:	d502      	bpl.n	800f466 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 800f460:	1b64      	subs	r4, r4, r5
 800f462:	b224      	sxth	r4, r4
 800f464:	2500      	movs	r5, #0
 800f466:	f9b2 1000 	ldrsh.w	r1, [r2]
 800f46a:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 800f46e:	428c      	cmp	r4, r1
 800f470:	b28b      	uxth	r3, r1
 800f472:	bfbf      	itttt	lt
 800f474:	18ed      	addlt	r5, r5, r3
 800f476:	1b2c      	sublt	r4, r5, r4
 800f478:	b2a5      	uxthlt	r5, r4
 800f47a:	460c      	movlt	r4, r1
 800f47c:	8891      	ldrh	r1, [r2, #4]
 800f47e:	440b      	add	r3, r1
 800f480:	b21b      	sxth	r3, r3
 800f482:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f484:	88d3      	ldrh	r3, [r2, #6]
 800f486:	8852      	ldrh	r2, [r2, #2]
 800f488:	4413      	add	r3, r2
 800f48a:	b21b      	sxth	r3, r3
 800f48c:	930d      	str	r3, [sp, #52]	@ 0x34
 800f48e:	4bbe      	ldr	r3, [pc, #760]	@ (800f788 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 800f490:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f492:	f893 b000 	ldrb.w	fp, [r3]
 800f496:	f10b 3cff 	add.w	ip, fp, #4294967295
 800f49a:	f1dc 0300 	rsbs	r3, ip, #0
 800f49e:	eb43 030c 	adc.w	r3, r3, ip
 800f4a2:	930e      	str	r3, [sp, #56]	@ 0x38
 800f4a4:	4621      	mov	r1, r4
 800f4a6:	4653      	mov	r3, sl
 800f4a8:	a814      	add	r0, sp, #80	@ 0x50
 800f4aa:	f7fb f86d 	bl	800a588 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 800f4ae:	4621      	mov	r1, r4
 800f4b0:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 800f4b4:	4653      	mov	r3, sl
 800f4b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f4b8:	a814      	add	r0, sp, #80	@ 0x50
 800f4ba:	f7fb f882 	bl	800a5c2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 800f4be:	a918      	add	r1, sp, #96	@ 0x60
 800f4c0:	f821 0d02 	strh.w	r0, [r1, #-2]!
 800f4c4:	a817      	add	r0, sp, #92	@ 0x5c
 800f4c6:	f7fb f9a9 	bl	800a81c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 800f4ca:	f1ba 0f00 	cmp.w	sl, #0
 800f4ce:	f040 80f4 	bne.w	800f6ba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 800f4d2:	f1bb 0f01 	cmp.w	fp, #1
 800f4d6:	f040 80f8 	bne.w	800f6ca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 800f4da:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	f040 8145 	bne.w	800f76c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 800f4e2:	b2ba      	uxth	r2, r7
 800f4e4:	b905      	cbnz	r5, 800f4e8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 800f4e6:	b16e      	cbz	r6, 800f504 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 800f4e8:	fb06 5302 	mla	r3, r6, r2, r5
 800f4ec:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 800f4ee:	fb08 f303 	mul.w	r3, r8, r3
 800f4f2:	4631      	mov	r1, r6
 800f4f4:	f003 0607 	and.w	r6, r3, #7
 800f4f8:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 800f4fc:	9328      	str	r3, [sp, #160]	@ 0xa0
 800f4fe:	eba9 0301 	sub.w	r3, r9, r1
 800f502:	930a      	str	r3, [sp, #40]	@ 0x28
 800f504:	4651      	mov	r1, sl
 800f506:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800f508:	f7ff ff1c 	bl	800f344 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 800f50c:	4681      	mov	r9, r0
 800f50e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800f510:	f7ff ff42 	bl	800f398 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 800f514:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f516:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f518:	eba3 0a01 	sub.w	sl, r3, r1
 800f51c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f51e:	459a      	cmp	sl, r3
 800f520:	bfa8      	it	ge
 800f522:	469a      	movge	sl, r3
 800f524:	f1ba 0f00 	cmp.w	sl, #0
 800f528:	4683      	mov	fp, r0
 800f52a:	f340 811a 	ble.w	800f762 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 800f52e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f530:	1b64      	subs	r4, r4, r5
 800f532:	1b1c      	subs	r4, r3, r4
 800f534:	42bc      	cmp	r4, r7
 800f536:	bfd4      	ite	le
 800f538:	ebc5 0504 	rsble	r5, r5, r4
 800f53c:	ebc5 0507 	rsbgt	r5, r5, r7
 800f540:	2d00      	cmp	r5, #0
 800f542:	f340 810e 	ble.w	800f762 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 800f546:	1b52      	subs	r2, r2, r5
 800f548:	fb08 f302 	mul.w	r3, r8, r2
 800f54c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f54e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f550:	2b00      	cmp	r3, #0
 800f552:	f040 8116 	bne.w	800f782 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 800f556:	4b8d      	ldr	r3, [pc, #564]	@ (800f78c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 800f558:	6818      	ldr	r0, [r3, #0]
 800f55a:	6803      	ldr	r3, [r0, #0]
 800f55c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f55e:	4798      	blx	r3
 800f560:	2301      	movs	r3, #1
 800f562:	fa03 f308 	lsl.w	r3, r3, r8
 800f566:	4a8a      	ldr	r2, [pc, #552]	@ (800f790 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 800f568:	3b01      	subs	r3, #1
 800f56a:	b2db      	uxtb	r3, r3
 800f56c:	8811      	ldrh	r1, [r2, #0]
 800f56e:	930e      	str	r3, [sp, #56]	@ 0x38
 800f570:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	@ 0x5c
 800f574:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	@ 0x5e
 800f578:	fb01 2303 	mla	r3, r1, r3, r2
 800f57c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800f580:	930a      	str	r3, [sp, #40]	@ 0x28
 800f582:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800f584:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800f588:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f58a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800f58c:	0a19      	lsrs	r1, r3, #8
 800f58e:	b2cb      	uxtb	r3, r1
 800f590:	9312      	str	r3, [sp, #72]	@ 0x48
 800f592:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800f594:	b2db      	uxtb	r3, r3
 800f596:	9311      	str	r3, [sp, #68]	@ 0x44
 800f598:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800f59a:	095a      	lsrs	r2, r3, #5
 800f59c:	4b7d      	ldr	r3, [pc, #500]	@ (800f794 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 800f59e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 800f5a2:	400b      	ands	r3, r1
 800f5a4:	4313      	orrs	r3, r2
 800f5a6:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 800f5a8:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 800f5ac:	4313      	orrs	r3, r2
 800f5ae:	b29b      	uxth	r3, r3
 800f5b0:	9310      	str	r3, [sp, #64]	@ 0x40
 800f5b2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800f5b4:	781a      	ldrb	r2, [r3, #0]
 800f5b6:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800f5ba:	4132      	asrs	r2, r6
 800f5bc:	fb05 b919 	mls	r9, r5, r9, fp
 800f5c0:	fb03 fb05 	mul.w	fp, r3, r5
 800f5c4:	b2d2      	uxtb	r2, r2
 800f5c6:	930d      	str	r3, [sp, #52]	@ 0x34
 800f5c8:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 800f5cc:	f11a 3aff 	adds.w	sl, sl, #4294967295
 800f5d0:	f0c0 80f5 	bcc.w	800f7be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 800f5d4:	f8dd c028 	ldr.w	ip, [sp, #40]	@ 0x28
 800f5d8:	46ae      	mov	lr, r5
 800f5da:	f11e 3eff 	adds.w	lr, lr, #4294967295
 800f5de:	f0c0 80dd 	bcc.w	800f79c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 800f5e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f5e4:	4013      	ands	r3, r2
 800f5e6:	d055      	beq.n	800f694 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 800f5e8:	20ff      	movs	r0, #255	@ 0xff
 800f5ea:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f5ec:	fb90 f1f1 	sdiv	r1, r0, r1
 800f5f0:	434b      	muls	r3, r1
 800f5f2:	2bfe      	cmp	r3, #254	@ 0xfe
 800f5f4:	dd03      	ble.n	800f5fe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 800f5f6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f5f8:	4281      	cmp	r1, r0
 800f5fa:	f000 80cd 	beq.w	800f798 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 800f5fe:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f600:	f8bc 4000 	ldrh.w	r4, [ip]
 800f604:	fb11 f303 	smulbb	r3, r1, r3
 800f608:	b29b      	uxth	r3, r3
 800f60a:	1c59      	adds	r1, r3, #1
 800f60c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 800f610:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800f614:	b29f      	uxth	r7, r3
 800f616:	43db      	mvns	r3, r3
 800f618:	b2db      	uxtb	r3, r3
 800f61a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f61c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f61e:	1220      	asrs	r0, r4, #8
 800f620:	fb13 f907 	smulbb	r9, r3, r7
 800f624:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 800f628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f62a:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 800f62e:	fb00 9003 	mla	r0, r0, r3, r9
 800f632:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f634:	10e1      	asrs	r1, r4, #3
 800f636:	fb13 f907 	smulbb	r9, r3, r7
 800f63a:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 800f63e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f640:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 800f644:	fb01 9103 	mla	r1, r1, r3, r9
 800f648:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f64a:	00e4      	lsls	r4, r4, #3
 800f64c:	fb13 f707 	smulbb	r7, r3, r7
 800f650:	b2e4      	uxtb	r4, r4
 800f652:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f654:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 800f658:	fb04 7403 	mla	r4, r4, r3, r7
 800f65c:	b280      	uxth	r0, r0
 800f65e:	b2a4      	uxth	r4, r4
 800f660:	1c43      	adds	r3, r0, #1
 800f662:	f104 0901 	add.w	r9, r4, #1
 800f666:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 800f66a:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 800f66e:	b289      	uxth	r1, r1
 800f670:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 800f674:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 800f678:	ea49 0000 	orr.w	r0, r9, r0
 800f67c:	f101 0901 	add.w	r9, r1, #1
 800f680:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 800f684:	ea4f 1959 	mov.w	r9, r9, lsr #5
 800f688:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 800f68c:	ea40 0009 	orr.w	r0, r0, r9
 800f690:	f8ac 0000 	strh.w	r0, [ip]
 800f694:	4446      	add	r6, r8
 800f696:	b2b6      	uxth	r6, r6
 800f698:	2e07      	cmp	r6, #7
 800f69a:	bf81      	itttt	hi
 800f69c:	9b28      	ldrhi	r3, [sp, #160]	@ 0xa0
 800f69e:	785a      	ldrbhi	r2, [r3, #1]
 800f6a0:	3301      	addhi	r3, #1
 800f6a2:	9328      	strhi	r3, [sp, #160]	@ 0xa0
 800f6a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f6a6:	bf9a      	itte	ls
 800f6a8:	fa42 f208 	asrls.w	r2, r2, r8
 800f6ac:	b2d2      	uxtbls	r2, r2
 800f6ae:	2600      	movhi	r6, #0
 800f6b0:	449c      	add	ip, r3
 800f6b2:	e792      	b.n	800f5da <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 800f6b4:	441c      	add	r4, r3
 800f6b6:	b224      	sxth	r4, r4
 800f6b8:	e6d5      	b.n	800f466 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 800f6ba:	f1ba 0f01 	cmp.w	sl, #1
 800f6be:	f47f af0c 	bne.w	800f4da <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 800f6c2:	f1bb 0f01 	cmp.w	fp, #1
 800f6c6:	f47f af08 	bne.w	800f4da <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 800f6ca:	f8df b0c0 	ldr.w	fp, [pc, #192]	@ 800f78c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 800f6ce:	f8db 0000 	ldr.w	r0, [fp]
 800f6d2:	6803      	ldr	r3, [r0, #0]
 800f6d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6d6:	4798      	blx	r3
 800f6d8:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 800f6dc:	465a      	mov	r2, fp
 800f6de:	d006      	beq.n	800f6ee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 800f6e0:	f1b8 0f04 	cmp.w	r8, #4
 800f6e4:	d140      	bne.n	800f768 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 800f6e6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f6e8:	3300      	adds	r3, #0
 800f6ea:	bf18      	it	ne
 800f6ec:	2301      	movne	r3, #1
 800f6ee:	0580      	lsls	r0, r0, #22
 800f6f0:	d56e      	bpl.n	800f7d0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 800f6f2:	f1b8 0f08 	cmp.w	r8, #8
 800f6f6:	d16b      	bne.n	800f7d0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	bf0c      	ite	eq
 800f6fc:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 800f700:	f44f 7180 	movne.w	r1, #256	@ 0x100
 800f704:	2d00      	cmp	r5, #0
 800f706:	f47f aee8 	bne.w	800f4da <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 800f70a:	2e00      	cmp	r6, #0
 800f70c:	f47f aee5 	bne.w	800f4da <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 800f710:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800f712:	19e3      	adds	r3, r4, r7
 800f714:	4283      	cmp	r3, r0
 800f716:	f73f aee0 	bgt.w	800f4da <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 800f71a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f71c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800f71e:	444b      	add	r3, r9
 800f720:	4283      	cmp	r3, r0
 800f722:	f73f aeda 	bgt.w	800f4da <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 800f726:	6810      	ldr	r0, [r2, #0]
 800f728:	f8bd 305e 	ldrh.w	r3, [sp, #94]	@ 0x5e
 800f72c:	6804      	ldr	r4, [r0, #0]
 800f72e:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 800f732:	b2bf      	uxth	r7, r7
 800f734:	f1b8 0f08 	cmp.w	r8, #8
 800f738:	f04f 0500 	mov.w	r5, #0
 800f73c:	bf18      	it	ne
 800f73e:	3701      	addne	r7, #1
 800f740:	e9cd 1505 	strd	r1, r5, [sp, #20]
 800f744:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f746:	9104      	str	r1, [sp, #16]
 800f748:	bf18      	it	ne
 800f74a:	f027 0701 	bicne.w	r7, r7, #1
 800f74e:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 800f750:	bf18      	it	ne
 800f752:	b2bf      	uxthne	r7, r7
 800f754:	e9cd 7102 	strd	r7, r1, [sp, #8]
 800f758:	e9cd 7900 	strd	r7, r9, [sp]
 800f75c:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 800f75e:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 800f760:	47a0      	blx	r4
 800f762:	b019      	add	sp, #100	@ 0x64
 800f764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f768:	2300      	movs	r3, #0
 800f76a:	e7c0      	b.n	800f6ee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 800f76c:	2208      	movs	r2, #8
 800f76e:	fb92 f3f8 	sdiv	r3, r2, r8
 800f772:	1e5a      	subs	r2, r3, #1
 800f774:	443a      	add	r2, r7
 800f776:	fb92 f2f3 	sdiv	r2, r2, r3
 800f77a:	fb12 f203 	smulbb	r2, r2, r3
 800f77e:	b292      	uxth	r2, r2
 800f780:	e6b0      	b.n	800f4e4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 800f782:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800f784:	e6ec      	b.n	800f560 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 800f786:	bf00      	nop
 800f788:	2001247c 	.word	0x2001247c
 800f78c:	20012484 	.word	0x20012484
 800f790:	2001247e 	.word	0x2001247e
 800f794:	00fff800 	.word	0x00fff800
 800f798:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800f79a:	e779      	b.n	800f690 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 800f79c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f79e:	b153      	cbz	r3, 800f7b6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 800f7a0:	441e      	add	r6, r3
 800f7a2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800f7a4:	b2b6      	uxth	r6, r6
 800f7a6:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 800f7aa:	f006 0607 	and.w	r6, r6, #7
 800f7ae:	781a      	ldrb	r2, [r3, #0]
 800f7b0:	9328      	str	r3, [sp, #160]	@ 0xa0
 800f7b2:	4132      	asrs	r2, r6
 800f7b4:	b2d2      	uxtb	r2, r2
 800f7b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f7b8:	445b      	add	r3, fp
 800f7ba:	930a      	str	r3, [sp, #40]	@ 0x28
 800f7bc:	e706      	b.n	800f5cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 800f7be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d1ce      	bne.n	800f762 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 800f7c4:	4b05      	ldr	r3, [pc, #20]	@ (800f7dc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 800f7c6:	6818      	ldr	r0, [r3, #0]
 800f7c8:	6803      	ldr	r3, [r0, #0]
 800f7ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7cc:	4798      	blx	r3
 800f7ce:	e7c8      	b.n	800f762 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	f43f ae82 	beq.w	800f4da <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 800f7d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f7da:	e793      	b.n	800f704 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 800f7dc:	20012484 	.word	0x20012484

0800f7e0 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>:
 800f7e0:	b538      	push	{r3, r4, r5, lr}
 800f7e2:	4c0b      	ldr	r4, [pc, #44]	@ (800f810 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x30>)
 800f7e4:	7823      	ldrb	r3, [r4, #0]
 800f7e6:	f3bf 8f5b 	dmb	ish
 800f7ea:	07db      	lsls	r3, r3, #31
 800f7ec:	4605      	mov	r5, r0
 800f7ee:	d40b      	bmi.n	800f808 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 800f7f0:	4620      	mov	r0, r4
 800f7f2:	f000 fd43 	bl	801027c <__cxa_guard_acquire>
 800f7f6:	b138      	cbz	r0, 800f808 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 800f7f8:	4620      	mov	r0, r4
 800f7fa:	f000 fd4b 	bl	8010294 <__cxa_guard_release>
 800f7fe:	4a05      	ldr	r2, [pc, #20]	@ (800f814 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x34>)
 800f800:	4905      	ldr	r1, [pc, #20]	@ (800f818 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 800f802:	4806      	ldr	r0, [pc, #24]	@ (800f81c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 800f804:	f000 fd33 	bl	801026e <__aeabi_atexit>
 800f808:	4b04      	ldr	r3, [pc, #16]	@ (800f81c <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 800f80a:	67eb      	str	r3, [r5, #124]	@ 0x7c
 800f80c:	bd38      	pop	{r3, r4, r5, pc}
 800f80e:	bf00      	nop
 800f810:	20012510 	.word	0x20012510
 800f814:	20000000 	.word	0x20000000
 800f818:	0800da99 	.word	0x0800da99
 800f81c:	20000090 	.word	0x20000090

0800f820 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>:
 800f820:	b570      	push	{r4, r5, r6, lr}
 800f822:	1208      	asrs	r0, r1, #8
 800f824:	b29e      	uxth	r6, r3
 800f826:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800f82a:	1213      	asrs	r3, r2, #8
 800f82c:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 800f830:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 800f834:	fb13 f305 	smulbb	r3, r3, r5
 800f838:	fb10 f006 	smulbb	r0, r0, r6
 800f83c:	4418      	add	r0, r3
 800f83e:	10cc      	asrs	r4, r1, #3
 800f840:	10d3      	asrs	r3, r2, #3
 800f842:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 800f846:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 800f84a:	fb13 f305 	smulbb	r3, r3, r5
 800f84e:	fb14 f406 	smulbb	r4, r4, r6
 800f852:	00c9      	lsls	r1, r1, #3
 800f854:	00d2      	lsls	r2, r2, #3
 800f856:	441c      	add	r4, r3
 800f858:	b2d2      	uxtb	r2, r2
 800f85a:	b2cb      	uxtb	r3, r1
 800f85c:	fb12 f205 	smulbb	r2, r2, r5
 800f860:	b280      	uxth	r0, r0
 800f862:	fb13 f306 	smulbb	r3, r3, r6
 800f866:	4413      	add	r3, r2
 800f868:	1c42      	adds	r2, r0, #1
 800f86a:	b29b      	uxth	r3, r3
 800f86c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 800f870:	f400 4278 	and.w	r2, r0, #63488	@ 0xf800
 800f874:	1c58      	adds	r0, r3, #1
 800f876:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 800f87a:	b2a4      	uxth	r4, r4
 800f87c:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 800f880:	4310      	orrs	r0, r2
 800f882:	1c62      	adds	r2, r4, #1
 800f884:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 800f888:	0964      	lsrs	r4, r4, #5
 800f88a:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 800f88e:	4320      	orrs	r0, r4
 800f890:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f894 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 800f894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f898:	b08f      	sub	sp, #60	@ 0x3c
 800f89a:	461c      	mov	r4, r3
 800f89c:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 800f8a0:	9004      	str	r0, [sp, #16]
 800f8a2:	460d      	mov	r5, r1
 800f8a4:	4616      	mov	r6, r2
 800f8a6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800f8a8:	2f00      	cmp	r7, #0
 800f8aa:	f000 80f6 	beq.w	800fa9a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x206>
 800f8ae:	6820      	ldr	r0, [r4, #0]
 800f8b0:	6861      	ldr	r1, [r4, #4]
 800f8b2:	aa0a      	add	r2, sp, #40	@ 0x28
 800f8b4:	c203      	stmia	r2!, {r0, r1}
 800f8b6:	6818      	ldr	r0, [r3, #0]
 800f8b8:	6859      	ldr	r1, [r3, #4]
 800f8ba:	aa0c      	add	r2, sp, #48	@ 0x30
 800f8bc:	c203      	stmia	r2!, {r0, r1}
 800f8be:	a80a      	add	r0, sp, #40	@ 0x28
 800f8c0:	f7fa ffee 	bl	800a8a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800f8c4:	4621      	mov	r1, r4
 800f8c6:	a80c      	add	r0, sp, #48	@ 0x30
 800f8c8:	f7fb f812 	bl	800a8f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800f8cc:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 800f8d0:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 800f8d4:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 800f8d8:	f002 0301 	and.w	r3, r2, #1
 800f8dc:	9306      	str	r3, [sp, #24]
 800f8de:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 800f8e2:	f003 0101 	and.w	r1, r3, #1
 800f8e6:	9105      	str	r1, [sp, #20]
 800f8e8:	9805      	ldr	r0, [sp, #20]
 800f8ea:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 800f8ee:	4403      	add	r3, r0
 800f8f0:	fb01 2303 	mla	r3, r1, r3, r2
 800f8f4:	f04f 0802 	mov.w	r8, #2
 800f8f8:	fb93 f3f8 	sdiv	r3, r3, r8
 800f8fc:	441d      	add	r5, r3
 800f8fe:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 800f902:	441a      	add	r2, r3
 800f904:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 800f908:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 800f90c:	4419      	add	r1, r3
 800f90e:	4b64      	ldr	r3, [pc, #400]	@ (800faa0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 800f910:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 800f914:	6818      	ldr	r0, [r3, #0]
 800f916:	6803      	ldr	r3, [r0, #0]
 800f918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f91a:	4798      	blx	r3
 800f91c:	4a61      	ldr	r2, [pc, #388]	@ (800faa4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x210>)
 800f91e:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 800f922:	8813      	ldrh	r3, [r2, #0]
 800f924:	f9bd a030 	ldrsh.w	sl, [sp, #48]	@ 0x30
 800f928:	2fff      	cmp	r7, #255	@ 0xff
 800f92a:	fb03 a404 	mla	r4, r3, r4, sl
 800f92e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800f932:	f106 0604 	add.w	r6, r6, #4
 800f936:	4611      	mov	r1, r2
 800f938:	fb03 fb0b 	mul.w	fp, r3, fp
 800f93c:	d06b      	beq.n	800fa16 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x182>
 800f93e:	f1c7 03ff 	rsb	r3, r7, #255	@ 0xff
 800f942:	9303      	str	r3, [sp, #12]
 800f944:	eb04 034b 	add.w	r3, r4, fp, lsl #1
 800f948:	e9cd 3207 	strd	r3, r2, [sp, #28]
 800f94c:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 800f950:	9b07      	ldr	r3, [sp, #28]
 800f952:	42a3      	cmp	r3, r4
 800f954:	f240 809c 	bls.w	800fa90 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 800f958:	9b06      	ldr	r3, [sp, #24]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d039      	beq.n	800f9d2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13e>
 800f95e:	782b      	ldrb	r3, [r5, #0]
 800f960:	8822      	ldrh	r2, [r4, #0]
 800f962:	9804      	ldr	r0, [sp, #16]
 800f964:	f003 030f 	and.w	r3, r3, #15
 800f968:	f105 0801 	add.w	r8, r5, #1
 800f96c:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 800f970:	9b03      	ldr	r3, [sp, #12]
 800f972:	9300      	str	r3, [sp, #0]
 800f974:	463b      	mov	r3, r7
 800f976:	f7ff ff53 	bl	800f820 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 800f97a:	f824 0b02 	strh.w	r0, [r4], #2
 800f97e:	f109 3bff 	add.w	fp, r9, #4294967295
 800f982:	f1bb 0f01 	cmp.w	fp, #1
 800f986:	46a2      	mov	sl, r4
 800f988:	f104 0404 	add.w	r4, r4, #4
 800f98c:	dd24      	ble.n	800f9d8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x144>
 800f98e:	f898 3000 	ldrb.w	r3, [r8]
 800f992:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 800f996:	9804      	ldr	r0, [sp, #16]
 800f998:	091b      	lsrs	r3, r3, #4
 800f99a:	f1ab 0b02 	sub.w	fp, fp, #2
 800f99e:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 800f9a2:	9b03      	ldr	r3, [sp, #12]
 800f9a4:	9300      	str	r3, [sp, #0]
 800f9a6:	463b      	mov	r3, r7
 800f9a8:	f7ff ff3a 	bl	800f820 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 800f9ac:	f824 0c04 	strh.w	r0, [r4, #-4]
 800f9b0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f9b4:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 800f9b8:	9804      	ldr	r0, [sp, #16]
 800f9ba:	f003 030f 	and.w	r3, r3, #15
 800f9be:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 800f9c2:	9b03      	ldr	r3, [sp, #12]
 800f9c4:	9300      	str	r3, [sp, #0]
 800f9c6:	463b      	mov	r3, r7
 800f9c8:	f7ff ff2a 	bl	800f820 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 800f9cc:	f824 0c02 	strh.w	r0, [r4, #-2]
 800f9d0:	e7d7      	b.n	800f982 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xee>
 800f9d2:	46a8      	mov	r8, r5
 800f9d4:	46cb      	mov	fp, r9
 800f9d6:	e7d4      	b.n	800f982 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xee>
 800f9d8:	d10e      	bne.n	800f9f8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x164>
 800f9da:	f898 3000 	ldrb.w	r3, [r8]
 800f9de:	f8ba 2000 	ldrh.w	r2, [sl]
 800f9e2:	9804      	ldr	r0, [sp, #16]
 800f9e4:	091b      	lsrs	r3, r3, #4
 800f9e6:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 800f9ea:	9b03      	ldr	r3, [sp, #12]
 800f9ec:	9300      	str	r3, [sp, #0]
 800f9ee:	463b      	mov	r3, r7
 800f9f0:	f7ff ff16 	bl	800f820 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 800f9f4:	f82a 0b02 	strh.w	r0, [sl], #2
 800f9f8:	9b08      	ldr	r3, [sp, #32]
 800f9fa:	9a05      	ldr	r2, [sp, #20]
 800f9fc:	881c      	ldrh	r4, [r3, #0]
 800f9fe:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 800fa02:	eba4 0409 	sub.w	r4, r4, r9
 800fa06:	4413      	add	r3, r2
 800fa08:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
 800fa0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fa0e:	fb93 f3f2 	sdiv	r3, r3, r2
 800fa12:	441d      	add	r5, r3
 800fa14:	e79c      	b.n	800f950 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xbc>
 800fa16:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
 800fa1a:	45a3      	cmp	fp, r4
 800fa1c:	d938      	bls.n	800fa90 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 800fa1e:	9b06      	ldr	r3, [sp, #24]
 800fa20:	b1f3      	cbz	r3, 800fa60 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1cc>
 800fa22:	782b      	ldrb	r3, [r5, #0]
 800fa24:	f003 030f 	and.w	r3, r3, #15
 800fa28:	1c6a      	adds	r2, r5, #1
 800fa2a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 800fa2e:	8023      	strh	r3, [r4, #0]
 800fa30:	f109 30ff 	add.w	r0, r9, #4294967295
 800fa34:	3402      	adds	r4, #2
 800fa36:	2801      	cmp	r0, #1
 800fa38:	4623      	mov	r3, r4
 800fa3a:	f104 0404 	add.w	r4, r4, #4
 800fa3e:	dd12      	ble.n	800fa66 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d2>
 800fa40:	7813      	ldrb	r3, [r2, #0]
 800fa42:	091b      	lsrs	r3, r3, #4
 800fa44:	3802      	subs	r0, #2
 800fa46:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 800fa4a:	f824 3c04 	strh.w	r3, [r4, #-4]
 800fa4e:	f812 3b01 	ldrb.w	r3, [r2], #1
 800fa52:	f003 030f 	and.w	r3, r3, #15
 800fa56:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 800fa5a:	f824 3c02 	strh.w	r3, [r4, #-2]
 800fa5e:	e7ea      	b.n	800fa36 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 800fa60:	462a      	mov	r2, r5
 800fa62:	4648      	mov	r0, r9
 800fa64:	e7e7      	b.n	800fa36 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 800fa66:	d106      	bne.n	800fa76 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e2>
 800fa68:	7812      	ldrb	r2, [r2, #0]
 800fa6a:	0912      	lsrs	r2, r2, #4
 800fa6c:	3302      	adds	r3, #2
 800fa6e:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 800fa72:	f823 2c02 	strh.w	r2, [r3, #-2]
 800fa76:	880c      	ldrh	r4, [r1, #0]
 800fa78:	9a05      	ldr	r2, [sp, #20]
 800fa7a:	eba4 0409 	sub.w	r4, r4, r9
 800fa7e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 800fa82:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 800fa86:	4413      	add	r3, r2
 800fa88:	fb93 f3f8 	sdiv	r3, r3, r8
 800fa8c:	441d      	add	r5, r3
 800fa8e:	e7c4      	b.n	800fa1a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x186>
 800fa90:	4b03      	ldr	r3, [pc, #12]	@ (800faa0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 800fa92:	6818      	ldr	r0, [r3, #0]
 800fa94:	6803      	ldr	r3, [r0, #0]
 800fa96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa98:	4798      	blx	r3
 800fa9a:	b00f      	add	sp, #60	@ 0x3c
 800fa9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faa0:	20012484 	.word	0x20012484
 800faa4:	2001247e 	.word	0x2001247e

0800faa8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>:
 800faa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800faaa:	f89d 5014 	ldrb.w	r5, [sp, #20]
 800faae:	2dff      	cmp	r5, #255	@ 0xff
 800fab0:	ea4f 2711 	mov.w	r7, r1, lsr #8
 800fab4:	d10c      	bne.n	800fad0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x28>
 800fab6:	2bff      	cmp	r3, #255	@ 0xff
 800fab8:	d10a      	bne.n	800fad0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x28>
 800faba:	4b25      	ldr	r3, [pc, #148]	@ (800fb50 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0xa8>)
 800fabc:	0948      	lsrs	r0, r1, #5
 800fabe:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 800fac2:	403b      	ands	r3, r7
 800fac4:	4318      	orrs	r0, r3
 800fac6:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 800faca:	4308      	orrs	r0, r1
 800facc:	b280      	uxth	r0, r0
 800face:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fad0:	fb15 f503 	smulbb	r5, r5, r3
 800fad4:	b2ab      	uxth	r3, r5
 800fad6:	1c5d      	adds	r5, r3, #1
 800fad8:	eb05 2513 	add.w	r5, r5, r3, lsr #8
 800fadc:	1214      	asrs	r4, r2, #8
 800fade:	f3c5 2507 	ubfx	r5, r5, #8, #8
 800fae2:	fa1f fc85 	uxth.w	ip, r5
 800fae6:	10d6      	asrs	r6, r2, #3
 800fae8:	00d0      	lsls	r0, r2, #3
 800faea:	43ed      	mvns	r5, r5
 800faec:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 800faf0:	f3c1 4207 	ubfx	r2, r1, #16, #8
 800faf4:	b2eb      	uxtb	r3, r5
 800faf6:	b2c0      	uxtb	r0, r0
 800faf8:	fb12 f20c 	smulbb	r2, r2, ip
 800fafc:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 800fb00:	fb04 2403 	mla	r4, r4, r3, r2
 800fb04:	ea40 1250 	orr.w	r2, r0, r0, lsr #5
 800fb08:	b2c8      	uxtb	r0, r1
 800fb0a:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 800fb0e:	b2fd      	uxtb	r5, r7
 800fb10:	fb10 f00c 	smulbb	r0, r0, ip
 800fb14:	b2a4      	uxth	r4, r4
 800fb16:	fb02 0003 	mla	r0, r2, r3, r0
 800fb1a:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 800fb1e:	fb15 f50c 	smulbb	r5, r5, ip
 800fb22:	fb06 5503 	mla	r5, r6, r3, r5
 800fb26:	b283      	uxth	r3, r0
 800fb28:	1c60      	adds	r0, r4, #1
 800fb2a:	b2ad      	uxth	r5, r5
 800fb2c:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 800fb30:	1c58      	adds	r0, r3, #1
 800fb32:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 800fb36:	1c6b      	adds	r3, r5, #1
 800fb38:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 800fb3c:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 800fb40:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 800fb44:	096d      	lsrs	r5, r5, #5
 800fb46:	4320      	orrs	r0, r4
 800fb48:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 800fb4c:	4328      	orrs	r0, r5
 800fb4e:	e7be      	b.n	800face <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 800fb50:	00fff800 	.word	0x00fff800

0800fb54 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 800fb54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb58:	461c      	mov	r4, r3
 800fb5a:	b08d      	sub	sp, #52	@ 0x34
 800fb5c:	460d      	mov	r5, r1
 800fb5e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fb60:	6861      	ldr	r1, [r4, #4]
 800fb62:	f89d 905c 	ldrb.w	r9, [sp, #92]	@ 0x5c
 800fb66:	4680      	mov	r8, r0
 800fb68:	6820      	ldr	r0, [r4, #0]
 800fb6a:	4616      	mov	r6, r2
 800fb6c:	aa08      	add	r2, sp, #32
 800fb6e:	c203      	stmia	r2!, {r0, r1}
 800fb70:	6818      	ldr	r0, [r3, #0]
 800fb72:	6859      	ldr	r1, [r3, #4]
 800fb74:	aa0a      	add	r2, sp, #40	@ 0x28
 800fb76:	c203      	stmia	r2!, {r0, r1}
 800fb78:	a808      	add	r0, sp, #32
 800fb7a:	f7fa fe91 	bl	800a8a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800fb7e:	4621      	mov	r1, r4
 800fb80:	a80a      	add	r0, sp, #40	@ 0x28
 800fb82:	f7fa feb5 	bl	800a8f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800fb86:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 800fb8a:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	@ 0x2e
 800fb8e:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	@ 0x2c
 800fb92:	f002 0301 	and.w	r3, r2, #1
 800fb96:	9303      	str	r3, [sp, #12]
 800fb98:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 800fb9c:	f003 0101 	and.w	r1, r3, #1
 800fba0:	9102      	str	r1, [sp, #8]
 800fba2:	9802      	ldr	r0, [sp, #8]
 800fba4:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 800fba8:	4403      	add	r3, r0
 800fbaa:	fb01 2303 	mla	r3, r1, r3, r2
 800fbae:	f04f 0a02 	mov.w	sl, #2
 800fbb2:	fb93 f3fa 	sdiv	r3, r3, sl
 800fbb6:	441d      	add	r5, r3
 800fbb8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800fbbc:	441a      	add	r2, r3
 800fbbe:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800fbc2:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 800fbc6:	4a3f      	ldr	r2, [pc, #252]	@ (800fcc4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x170>)
 800fbc8:	9205      	str	r2, [sp, #20]
 800fbca:	4419      	add	r1, r3
 800fbcc:	6810      	ldr	r0, [r2, #0]
 800fbce:	f8ad 102a 	strh.w	r1, [sp, #42]	@ 0x2a
 800fbd2:	6803      	ldr	r3, [r0, #0]
 800fbd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fbd6:	4798      	blx	r3
 800fbd8:	4b3b      	ldr	r3, [pc, #236]	@ (800fcc8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x174>)
 800fbda:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	@ 0x2a
 800fbde:	8819      	ldrh	r1, [r3, #0]
 800fbe0:	f9bd c028 	ldrsh.w	ip, [sp, #40]	@ 0x28
 800fbe4:	fb01 c404 	mla	r4, r1, r4, ip
 800fbe8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800fbec:	434f      	muls	r7, r1
 800fbee:	e9cd 3a06 	strd	r3, sl, [sp, #24]
 800fbf2:	eb04 0247 	add.w	r2, r4, r7, lsl #1
 800fbf6:	3604      	adds	r6, #4
 800fbf8:	9204      	str	r2, [sp, #16]
 800fbfa:	9b04      	ldr	r3, [sp, #16]
 800fbfc:	429c      	cmp	r4, r3
 800fbfe:	d258      	bcs.n	800fcb2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x15e>
 800fc00:	9b03      	ldr	r3, [sp, #12]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d034      	beq.n	800fc70 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 800fc06:	782b      	ldrb	r3, [r5, #0]
 800fc08:	f003 030f 	and.w	r3, r3, #15
 800fc0c:	1c6f      	adds	r7, r5, #1
 800fc0e:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800fc12:	0e0b      	lsrs	r3, r1, #24
 800fc14:	d006      	beq.n	800fc24 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd0>
 800fc16:	8822      	ldrh	r2, [r4, #0]
 800fc18:	9300      	str	r3, [sp, #0]
 800fc1a:	4640      	mov	r0, r8
 800fc1c:	464b      	mov	r3, r9
 800fc1e:	f7ff ff43 	bl	800faa8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 800fc22:	8020      	strh	r0, [r4, #0]
 800fc24:	3402      	adds	r4, #2
 800fc26:	f10b 3aff 	add.w	sl, fp, #4294967295
 800fc2a:	f1ba 0f01 	cmp.w	sl, #1
 800fc2e:	dd22      	ble.n	800fc76 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 800fc30:	783b      	ldrb	r3, [r7, #0]
 800fc32:	091b      	lsrs	r3, r3, #4
 800fc34:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800fc38:	0e0b      	lsrs	r3, r1, #24
 800fc3a:	d006      	beq.n	800fc4a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf6>
 800fc3c:	8822      	ldrh	r2, [r4, #0]
 800fc3e:	9300      	str	r3, [sp, #0]
 800fc40:	4640      	mov	r0, r8
 800fc42:	464b      	mov	r3, r9
 800fc44:	f7ff ff30 	bl	800faa8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 800fc48:	8020      	strh	r0, [r4, #0]
 800fc4a:	f817 3b01 	ldrb.w	r3, [r7], #1
 800fc4e:	f003 030f 	and.w	r3, r3, #15
 800fc52:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800fc56:	0e0b      	lsrs	r3, r1, #24
 800fc58:	d006      	beq.n	800fc68 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x114>
 800fc5a:	8862      	ldrh	r2, [r4, #2]
 800fc5c:	9300      	str	r3, [sp, #0]
 800fc5e:	4640      	mov	r0, r8
 800fc60:	464b      	mov	r3, r9
 800fc62:	f7ff ff21 	bl	800faa8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 800fc66:	8060      	strh	r0, [r4, #2]
 800fc68:	3404      	adds	r4, #4
 800fc6a:	f1aa 0a02 	sub.w	sl, sl, #2
 800fc6e:	e7dc      	b.n	800fc2a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 800fc70:	462f      	mov	r7, r5
 800fc72:	46da      	mov	sl, fp
 800fc74:	e7d9      	b.n	800fc2a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 800fc76:	d10d      	bne.n	800fc94 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x140>
 800fc78:	783b      	ldrb	r3, [r7, #0]
 800fc7a:	091b      	lsrs	r3, r3, #4
 800fc7c:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800fc80:	0e0b      	lsrs	r3, r1, #24
 800fc82:	d006      	beq.n	800fc92 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 800fc84:	8822      	ldrh	r2, [r4, #0]
 800fc86:	9300      	str	r3, [sp, #0]
 800fc88:	4640      	mov	r0, r8
 800fc8a:	464b      	mov	r3, r9
 800fc8c:	f7ff ff0c 	bl	800faa8 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 800fc90:	8020      	strh	r0, [r4, #0]
 800fc92:	3402      	adds	r4, #2
 800fc94:	9b06      	ldr	r3, [sp, #24]
 800fc96:	9a02      	ldr	r2, [sp, #8]
 800fc98:	881b      	ldrh	r3, [r3, #0]
 800fc9a:	eba3 030b 	sub.w	r3, r3, fp
 800fc9e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800fca2:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 800fca6:	4413      	add	r3, r2
 800fca8:	9a07      	ldr	r2, [sp, #28]
 800fcaa:	fb93 f3f2 	sdiv	r3, r3, r2
 800fcae:	441d      	add	r5, r3
 800fcb0:	e7a3      	b.n	800fbfa <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa6>
 800fcb2:	9b05      	ldr	r3, [sp, #20]
 800fcb4:	6818      	ldr	r0, [r3, #0]
 800fcb6:	6803      	ldr	r3, [r0, #0]
 800fcb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcba:	4798      	blx	r3
 800fcbc:	b00d      	add	sp, #52	@ 0x34
 800fcbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcc2:	bf00      	nop
 800fcc4:	20012484 	.word	0x20012484
 800fcc8:	2001247e 	.word	0x2001247e

0800fccc <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>:
 800fccc:	b570      	push	{r4, r5, r6, lr}
 800fcce:	1214      	asrs	r4, r2, #8
 800fcd0:	788d      	ldrb	r5, [r1, #2]
 800fcd2:	f89d 6010 	ldrb.w	r6, [sp, #16]
 800fcd6:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 800fcda:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 800fcde:	fb15 f503 	smulbb	r5, r5, r3
 800fce2:	fb04 5506 	mla	r5, r4, r6, r5
 800fce6:	10d0      	asrs	r0, r2, #3
 800fce8:	784c      	ldrb	r4, [r1, #1]
 800fcea:	7809      	ldrb	r1, [r1, #0]
 800fcec:	00d2      	lsls	r2, r2, #3
 800fcee:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 800fcf2:	b2d2      	uxtb	r2, r2
 800fcf4:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 800fcf8:	fb14 f403 	smulbb	r4, r4, r3
 800fcfc:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 800fd00:	fb11 f303 	smulbb	r3, r1, r3
 800fd04:	fb00 4406 	mla	r4, r0, r6, r4
 800fd08:	fb02 3306 	mla	r3, r2, r6, r3
 800fd0c:	b2ad      	uxth	r5, r5
 800fd0e:	b29b      	uxth	r3, r3
 800fd10:	b2a4      	uxth	r4, r4
 800fd12:	1c68      	adds	r0, r5, #1
 800fd14:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 800fd18:	1c62      	adds	r2, r4, #1
 800fd1a:	1c58      	adds	r0, r3, #1
 800fd1c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 800fd20:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 800fd24:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 800fd28:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 800fd2c:	0964      	lsrs	r4, r4, #5
 800fd2e:	4328      	orrs	r0, r5
 800fd30:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 800fd34:	4320      	orrs	r0, r4
 800fd36:	bd70      	pop	{r4, r5, r6, pc}

0800fd38 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 800fd38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd3c:	b08f      	sub	sp, #60	@ 0x3c
 800fd3e:	461c      	mov	r4, r3
 800fd40:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 800fd44:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800fd46:	4682      	mov	sl, r0
 800fd48:	460e      	mov	r6, r1
 800fd4a:	4615      	mov	r5, r2
 800fd4c:	2f00      	cmp	r7, #0
 800fd4e:	f000 8142 	beq.w	800ffd6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x29e>
 800fd52:	6820      	ldr	r0, [r4, #0]
 800fd54:	6861      	ldr	r1, [r4, #4]
 800fd56:	aa0a      	add	r2, sp, #40	@ 0x28
 800fd58:	c203      	stmia	r2!, {r0, r1}
 800fd5a:	6818      	ldr	r0, [r3, #0]
 800fd5c:	6859      	ldr	r1, [r3, #4]
 800fd5e:	aa0c      	add	r2, sp, #48	@ 0x30
 800fd60:	c203      	stmia	r2!, {r0, r1}
 800fd62:	a80a      	add	r0, sp, #40	@ 0x28
 800fd64:	f7fa fd9c 	bl	800a8a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800fd68:	4621      	mov	r1, r4
 800fd6a:	a80c      	add	r0, sp, #48	@ 0x30
 800fd6c:	f7fa fdc0 	bl	800a8f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800fd70:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 800fd74:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 800fd78:	f002 0301 	and.w	r3, r2, #1
 800fd7c:	9306      	str	r3, [sp, #24]
 800fd7e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 800fd82:	f003 0101 	and.w	r1, r3, #1
 800fd86:	9105      	str	r1, [sp, #20]
 800fd88:	9805      	ldr	r0, [sp, #20]
 800fd8a:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 800fd8e:	4403      	add	r3, r0
 800fd90:	fb01 2303 	mla	r3, r1, r3, r2
 800fd94:	f04f 0802 	mov.w	r8, #2
 800fd98:	fb93 f3f8 	sdiv	r3, r3, r8
 800fd9c:	441e      	add	r6, r3
 800fd9e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 800fda2:	441a      	add	r2, r3
 800fda4:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 800fda8:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 800fdac:	4419      	add	r1, r3
 800fdae:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 800fdb2:	9303      	str	r3, [sp, #12]
 800fdb4:	4b89      	ldr	r3, [pc, #548]	@ (800ffdc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 800fdb6:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 800fdba:	6818      	ldr	r0, [r3, #0]
 800fdbc:	6803      	ldr	r3, [r0, #0]
 800fdbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fdc0:	4798      	blx	r3
 800fdc2:	4a87      	ldr	r2, [pc, #540]	@ (800ffe0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>)
 800fdc4:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 800fdc8:	8813      	ldrh	r3, [r2, #0]
 800fdca:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	@ 0x30
 800fdce:	2fff      	cmp	r7, #255	@ 0xff
 800fdd0:	fb03 9404 	mla	r4, r3, r4, r9
 800fdd4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800fdd8:	f105 0504 	add.w	r5, r5, #4
 800fddc:	4694      	mov	ip, r2
 800fdde:	fb03 f30b 	mul.w	r3, r3, fp
 800fde2:	d071      	beq.n	800fec8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x190>
 800fde4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800fde8:	43f9      	mvns	r1, r7
 800fdea:	e9cd 3207 	strd	r3, r2, [sp, #28]
 800fdee:	b2c9      	uxtb	r1, r1
 800fdf0:	9104      	str	r1, [sp, #16]
 800fdf2:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 800fdf6:	9b07      	ldr	r3, [sp, #28]
 800fdf8:	42a3      	cmp	r3, r4
 800fdfa:	f240 80e7 	bls.w	800ffcc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x294>
 800fdfe:	9b06      	ldr	r3, [sp, #24]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d03d      	beq.n	800fe80 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x148>
 800fe04:	7831      	ldrb	r1, [r6, #0]
 800fe06:	9b04      	ldr	r3, [sp, #16]
 800fe08:	8822      	ldrh	r2, [r4, #0]
 800fe0a:	9300      	str	r3, [sp, #0]
 800fe0c:	f001 010f 	and.w	r1, r1, #15
 800fe10:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800fe14:	463b      	mov	r3, r7
 800fe16:	4429      	add	r1, r5
 800fe18:	4650      	mov	r0, sl
 800fe1a:	f7ff ff57 	bl	800fccc <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 800fe1e:	9b03      	ldr	r3, [sp, #12]
 800fe20:	f824 0b02 	strh.w	r0, [r4], #2
 800fe24:	f106 0801 	add.w	r8, r6, #1
 800fe28:	f103 3bff 	add.w	fp, r3, #4294967295
 800fe2c:	f1bb 0f01 	cmp.w	fp, #1
 800fe30:	46a1      	mov	r9, r4
 800fe32:	f104 0404 	add.w	r4, r4, #4
 800fe36:	dd27      	ble.n	800fe88 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x150>
 800fe38:	f898 1000 	ldrb.w	r1, [r8]
 800fe3c:	9b04      	ldr	r3, [sp, #16]
 800fe3e:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 800fe42:	9300      	str	r3, [sp, #0]
 800fe44:	0909      	lsrs	r1, r1, #4
 800fe46:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800fe4a:	463b      	mov	r3, r7
 800fe4c:	4429      	add	r1, r5
 800fe4e:	4650      	mov	r0, sl
 800fe50:	f7ff ff3c 	bl	800fccc <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 800fe54:	f824 0c04 	strh.w	r0, [r4, #-4]
 800fe58:	f818 1b01 	ldrb.w	r1, [r8], #1
 800fe5c:	9b04      	ldr	r3, [sp, #16]
 800fe5e:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 800fe62:	9300      	str	r3, [sp, #0]
 800fe64:	f001 010f 	and.w	r1, r1, #15
 800fe68:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800fe6c:	463b      	mov	r3, r7
 800fe6e:	4429      	add	r1, r5
 800fe70:	4650      	mov	r0, sl
 800fe72:	f7ff ff2b 	bl	800fccc <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 800fe76:	f1ab 0b02 	sub.w	fp, fp, #2
 800fe7a:	f824 0c02 	strh.w	r0, [r4, #-2]
 800fe7e:	e7d5      	b.n	800fe2c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 800fe80:	46b0      	mov	r8, r6
 800fe82:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800fe86:	e7d1      	b.n	800fe2c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 800fe88:	d10f      	bne.n	800feaa <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x172>
 800fe8a:	f898 1000 	ldrb.w	r1, [r8]
 800fe8e:	9b04      	ldr	r3, [sp, #16]
 800fe90:	f8b9 2000 	ldrh.w	r2, [r9]
 800fe94:	9300      	str	r3, [sp, #0]
 800fe96:	0909      	lsrs	r1, r1, #4
 800fe98:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800fe9c:	463b      	mov	r3, r7
 800fe9e:	4429      	add	r1, r5
 800fea0:	4650      	mov	r0, sl
 800fea2:	f7ff ff13 	bl	800fccc <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 800fea6:	f829 0b02 	strh.w	r0, [r9], #2
 800feaa:	9b08      	ldr	r3, [sp, #32]
 800feac:	9a05      	ldr	r2, [sp, #20]
 800feae:	881c      	ldrh	r4, [r3, #0]
 800feb0:	9b03      	ldr	r3, [sp, #12]
 800feb2:	1ae4      	subs	r4, r4, r3
 800feb4:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 800feb8:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 800febc:	4413      	add	r3, r2
 800febe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fec0:	fb93 f3f2 	sdiv	r3, r3, r2
 800fec4:	441e      	add	r6, r3
 800fec6:	e796      	b.n	800fdf6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xbe>
 800fec8:	4f46      	ldr	r7, [pc, #280]	@ (800ffe4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>)
 800feca:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800fece:	42a3      	cmp	r3, r4
 800fed0:	d97c      	bls.n	800ffcc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x294>
 800fed2:	9a06      	ldr	r2, [sp, #24]
 800fed4:	2a00      	cmp	r2, #0
 800fed6:	d054      	beq.n	800ff82 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x24a>
 800fed8:	7830      	ldrb	r0, [r6, #0]
 800feda:	f000 000f 	and.w	r0, r0, #15
 800fede:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800fee2:	eb05 0e00 	add.w	lr, r5, r0
 800fee6:	5c28      	ldrb	r0, [r5, r0]
 800fee8:	f89e 2002 	ldrb.w	r2, [lr, #2]
 800feec:	f89e e001 	ldrb.w	lr, [lr, #1]
 800fef0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 800fef4:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 800fef8:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 800fefc:	ea42 020e 	orr.w	r2, r2, lr
 800ff00:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 800ff04:	f824 2b02 	strh.w	r2, [r4], #2
 800ff08:	9a03      	ldr	r2, [sp, #12]
 800ff0a:	1c71      	adds	r1, r6, #1
 800ff0c:	f102 3eff 	add.w	lr, r2, #4294967295
 800ff10:	f1be 0f01 	cmp.w	lr, #1
 800ff14:	4620      	mov	r0, r4
 800ff16:	f104 0404 	add.w	r4, r4, #4
 800ff1a:	dd36      	ble.n	800ff8a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x252>
 800ff1c:	7808      	ldrb	r0, [r1, #0]
 800ff1e:	0900      	lsrs	r0, r0, #4
 800ff20:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800ff24:	eb05 0a00 	add.w	sl, r5, r0
 800ff28:	f1ae 0e02 	sub.w	lr, lr, #2
 800ff2c:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800ff30:	f89a 9002 	ldrb.w	r9, [sl, #2]
 800ff34:	00d2      	lsls	r2, r2, #3
 800ff36:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 800ff3a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 800ff3e:	ea49 0202 	orr.w	r2, r9, r2
 800ff42:	f815 9000 	ldrb.w	r9, [r5, r0]
 800ff46:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 800ff4a:	f824 2c04 	strh.w	r2, [r4, #-4]
 800ff4e:	f811 0b01 	ldrb.w	r0, [r1], #1
 800ff52:	f000 000f 	and.w	r0, r0, #15
 800ff56:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800ff5a:	eb05 0a00 	add.w	sl, r5, r0
 800ff5e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800ff62:	f89a 9002 	ldrb.w	r9, [sl, #2]
 800ff66:	00d2      	lsls	r2, r2, #3
 800ff68:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 800ff6c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 800ff70:	ea49 0202 	orr.w	r2, r9, r2
 800ff74:	f815 9000 	ldrb.w	r9, [r5, r0]
 800ff78:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 800ff7c:	f824 2c02 	strh.w	r2, [r4, #-2]
 800ff80:	e7c6      	b.n	800ff10 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d8>
 800ff82:	4631      	mov	r1, r6
 800ff84:	f8dd e00c 	ldr.w	lr, [sp, #12]
 800ff88:	e7c2      	b.n	800ff10 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d8>
 800ff8a:	d111      	bne.n	800ffb0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 800ff8c:	7809      	ldrb	r1, [r1, #0]
 800ff8e:	0909      	lsrs	r1, r1, #4
 800ff90:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800ff94:	186c      	adds	r4, r5, r1
 800ff96:	5c69      	ldrb	r1, [r5, r1]
 800ff98:	78a2      	ldrb	r2, [r4, #2]
 800ff9a:	7864      	ldrb	r4, [r4, #1]
 800ff9c:	00e4      	lsls	r4, r4, #3
 800ff9e:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 800ffa2:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 800ffa6:	4322      	orrs	r2, r4
 800ffa8:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 800ffac:	f820 2b02 	strh.w	r2, [r0], #2
 800ffb0:	9a03      	ldr	r2, [sp, #12]
 800ffb2:	f8bc 4000 	ldrh.w	r4, [ip]
 800ffb6:	9905      	ldr	r1, [sp, #20]
 800ffb8:	1aa4      	subs	r4, r4, r2
 800ffba:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 800ffbe:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800ffc2:	440a      	add	r2, r1
 800ffc4:	fb92 f2f8 	sdiv	r2, r2, r8
 800ffc8:	4416      	add	r6, r2
 800ffca:	e780      	b.n	800fece <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x196>
 800ffcc:	4b03      	ldr	r3, [pc, #12]	@ (800ffdc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 800ffce:	6818      	ldr	r0, [r3, #0]
 800ffd0:	6803      	ldr	r3, [r0, #0]
 800ffd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffd4:	4798      	blx	r3
 800ffd6:	b00f      	add	sp, #60	@ 0x3c
 800ffd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffdc:	20012484 	.word	0x20012484
 800ffe0:	2001247e 	.word	0x2001247e
 800ffe4:	fffff800 	.word	0xfffff800

0800ffe8 <CRC_Lock>:
 800ffe8:	b530      	push	{r4, r5, lr}
 800ffea:	4a2d      	ldr	r2, [pc, #180]	@ (80100a0 <CRC_Lock+0xb8>)
 800ffec:	6813      	ldr	r3, [r2, #0]
 800ffee:	f023 0301 	bic.w	r3, r3, #1
 800fff2:	6013      	str	r3, [r2, #0]
 800fff4:	4b2b      	ldr	r3, [pc, #172]	@ (80100a4 <CRC_Lock+0xbc>)
 800fff6:	681c      	ldr	r4, [r3, #0]
 800fff8:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 800fffc:	4014      	ands	r4, r2
 800fffe:	f24c 2540 	movw	r5, #49728	@ 0xc240
 8010002:	42ac      	cmp	r4, r5
 8010004:	d005      	beq.n	8010012 <CRC_Lock+0x2a>
 8010006:	681c      	ldr	r4, [r3, #0]
 8010008:	f24c 2570 	movw	r5, #49776	@ 0xc270
 801000c:	4014      	ands	r4, r2
 801000e:	42ac      	cmp	r4, r5
 8010010:	d125      	bne.n	801005e <CRC_Lock+0x76>
 8010012:	4b25      	ldr	r3, [pc, #148]	@ (80100a8 <CRC_Lock+0xc0>)
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d139      	bne.n	801008e <CRC_Lock+0xa6>
 801001a:	4b24      	ldr	r3, [pc, #144]	@ (80100ac <CRC_Lock+0xc4>)
 801001c:	681a      	ldr	r2, [r3, #0]
 801001e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8010022:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 8010026:	d00d      	beq.n	8010044 <CRC_Lock+0x5c>
 8010028:	681a      	ldr	r2, [r3, #0]
 801002a:	f240 4483 	movw	r4, #1155	@ 0x483
 801002e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8010032:	42a2      	cmp	r2, r4
 8010034:	d006      	beq.n	8010044 <CRC_Lock+0x5c>
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	f240 4285 	movw	r2, #1157	@ 0x485
 801003c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010040:	4293      	cmp	r3, r2
 8010042:	d124      	bne.n	801008e <CRC_Lock+0xa6>
 8010044:	4b1a      	ldr	r3, [pc, #104]	@ (80100b0 <CRC_Lock+0xc8>)
 8010046:	2201      	movs	r2, #1
 8010048:	601a      	str	r2, [r3, #0]
 801004a:	681a      	ldr	r2, [r3, #0]
 801004c:	2a00      	cmp	r2, #0
 801004e:	d1fc      	bne.n	801004a <CRC_Lock+0x62>
 8010050:	4b18      	ldr	r3, [pc, #96]	@ (80100b4 <CRC_Lock+0xcc>)
 8010052:	6018      	str	r0, [r3, #0]
 8010054:	6818      	ldr	r0, [r3, #0]
 8010056:	1a43      	subs	r3, r0, r1
 8010058:	4258      	negs	r0, r3
 801005a:	4158      	adcs	r0, r3
 801005c:	e00e      	b.n	801007c <CRC_Lock+0x94>
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	4013      	ands	r3, r2
 8010062:	f24d 2220 	movw	r2, #53792	@ 0xd220
 8010066:	4293      	cmp	r3, r2
 8010068:	d111      	bne.n	801008e <CRC_Lock+0xa6>
 801006a:	4b13      	ldr	r3, [pc, #76]	@ (80100b8 <CRC_Lock+0xd0>)
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	f240 4286 	movw	r2, #1158	@ 0x486
 8010072:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010076:	4293      	cmp	r3, r2
 8010078:	d001      	beq.n	801007e <CRC_Lock+0x96>
 801007a:	2000      	movs	r0, #0
 801007c:	bd30      	pop	{r4, r5, pc}
 801007e:	4b0f      	ldr	r3, [pc, #60]	@ (80100bc <CRC_Lock+0xd4>)
 8010080:	2201      	movs	r2, #1
 8010082:	601a      	str	r2, [r3, #0]
 8010084:	681a      	ldr	r2, [r3, #0]
 8010086:	2a00      	cmp	r2, #0
 8010088:	d1fc      	bne.n	8010084 <CRC_Lock+0x9c>
 801008a:	4b0d      	ldr	r3, [pc, #52]	@ (80100c0 <CRC_Lock+0xd8>)
 801008c:	e7e1      	b.n	8010052 <CRC_Lock+0x6a>
 801008e:	4b0d      	ldr	r3, [pc, #52]	@ (80100c4 <CRC_Lock+0xdc>)
 8010090:	2201      	movs	r2, #1
 8010092:	601a      	str	r2, [r3, #0]
 8010094:	681a      	ldr	r2, [r3, #0]
 8010096:	2a00      	cmp	r2, #0
 8010098:	d1fc      	bne.n	8010094 <CRC_Lock+0xac>
 801009a:	4b0b      	ldr	r3, [pc, #44]	@ (80100c8 <CRC_Lock+0xe0>)
 801009c:	e7d9      	b.n	8010052 <CRC_Lock+0x6a>
 801009e:	bf00      	nop
 80100a0:	e0002000 	.word	0xe0002000
 80100a4:	e000ed00 	.word	0xe000ed00
 80100a8:	e0042000 	.word	0xe0042000
 80100ac:	5c001000 	.word	0x5c001000
 80100b0:	58024c08 	.word	0x58024c08
 80100b4:	58024c00 	.word	0x58024c00
 80100b8:	46008ff0 	.word	0x46008ff0
 80100bc:	46024c08 	.word	0x46024c08
 80100c0:	46024c00 	.word	0x46024c00
 80100c4:	40023008 	.word	0x40023008
 80100c8:	40023000 	.word	0x40023000

080100cc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80100cc:	6101      	str	r1, [r0, #16]
 80100ce:	4770      	bx	lr

080100d0 <_ZN8touchgfx8Gestures4tickEv>:
 80100d0:	7b83      	ldrb	r3, [r0, #14]
 80100d2:	b14b      	cbz	r3, 80100e8 <_ZN8touchgfx8Gestures4tickEv+0x18>
 80100d4:	8903      	ldrh	r3, [r0, #8]
 80100d6:	3301      	adds	r3, #1
 80100d8:	b29b      	uxth	r3, r3
 80100da:	2b07      	cmp	r3, #7
 80100dc:	8103      	strh	r3, [r0, #8]
 80100de:	bf81      	itttt	hi
 80100e0:	2300      	movhi	r3, #0
 80100e2:	8143      	strhhi	r3, [r0, #10]
 80100e4:	8183      	strhhi	r3, [r0, #12]
 80100e6:	7383      	strbhi	r3, [r0, #14]
 80100e8:	4770      	bx	lr
	...

080100ec <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80100ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80100f0:	4698      	mov	r8, r3
 80100f2:	8883      	ldrh	r3, [r0, #4]
 80100f4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80100f8:	eba8 0303 	sub.w	r3, r8, r3
 80100fc:	b21b      	sxth	r3, r3
 80100fe:	4604      	mov	r4, r0
 8010100:	2b00      	cmp	r3, #0
 8010102:	4617      	mov	r7, r2
 8010104:	4a18      	ldr	r2, [pc, #96]	@ (8010168 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8010106:	9200      	str	r2, [sp, #0]
 8010108:	bfb8      	it	lt
 801010a:	425b      	neglt	r3, r3
 801010c:	8aa2      	ldrh	r2, [r4, #20]
 801010e:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 8010112:	f8ad 800a 	strh.w	r8, [sp, #10]
 8010116:	b21b      	sxth	r3, r3
 8010118:	460e      	mov	r6, r1
 801011a:	4293      	cmp	r3, r2
 801011c:	88c1      	ldrh	r1, [r0, #6]
 801011e:	f8ad 1008 	strh.w	r1, [sp, #8]
 8010122:	f04f 0000 	mov.w	r0, #0
 8010126:	f88d 0004 	strb.w	r0, [sp, #4]
 801012a:	f8ad 500c 	strh.w	r5, [sp, #12]
 801012e:	dc07      	bgt.n	8010140 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x54>
 8010130:	1a69      	subs	r1, r5, r1
 8010132:	b209      	sxth	r1, r1
 8010134:	2900      	cmp	r1, #0
 8010136:	bfb8      	it	lt
 8010138:	4249      	neglt	r1, r1
 801013a:	b209      	sxth	r1, r1
 801013c:	428a      	cmp	r2, r1
 801013e:	da10      	bge.n	8010162 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x76>
 8010140:	6920      	ldr	r0, [r4, #16]
 8010142:	6803      	ldr	r3, [r0, #0]
 8010144:	4669      	mov	r1, sp
 8010146:	685b      	ldr	r3, [r3, #4]
 8010148:	4798      	blx	r3
 801014a:	eba8 0606 	sub.w	r6, r8, r6
 801014e:	2300      	movs	r3, #0
 8010150:	1bef      	subs	r7, r5, r7
 8010152:	2001      	movs	r0, #1
 8010154:	8123      	strh	r3, [r4, #8]
 8010156:	8166      	strh	r6, [r4, #10]
 8010158:	81a7      	strh	r7, [r4, #12]
 801015a:	f8a4 8004 	strh.w	r8, [r4, #4]
 801015e:	80e5      	strh	r5, [r4, #6]
 8010160:	73a0      	strb	r0, [r4, #14]
 8010162:	b004      	add	sp, #16
 8010164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010168:	08012934 	.word	0x08012934

0801016c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801016c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801016e:	461e      	mov	r6, r3
 8010170:	1e4b      	subs	r3, r1, #1
 8010172:	2b01      	cmp	r3, #1
 8010174:	b085      	sub	sp, #20
 8010176:	4604      	mov	r4, r0
 8010178:	460d      	mov	r5, r1
 801017a:	4617      	mov	r7, r2
 801017c:	d84b      	bhi.n	8010216 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801017e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8010182:	1cd3      	adds	r3, r2, #3
 8010184:	b29b      	uxth	r3, r3
 8010186:	2b06      	cmp	r3, #6
 8010188:	d916      	bls.n	80101b8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801018a:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 801022c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801018e:	f8cd c004 	str.w	ip, [sp, #4]
 8010192:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8010196:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801019a:	6900      	ldr	r0, [r0, #16]
 801019c:	f8ad 100c 	strh.w	r1, [sp, #12]
 80101a0:	f04f 0c00 	mov.w	ip, #0
 80101a4:	f88d c008 	strb.w	ip, [sp, #8]
 80101a8:	f8ad 200a 	strh.w	r2, [sp, #10]
 80101ac:	f8ad 300e 	strh.w	r3, [sp, #14]
 80101b0:	6803      	ldr	r3, [r0, #0]
 80101b2:	a901      	add	r1, sp, #4
 80101b4:	689b      	ldr	r3, [r3, #8]
 80101b6:	4798      	blx	r3
 80101b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80101bc:	1cd3      	adds	r3, r2, #3
 80101be:	b29b      	uxth	r3, r3
 80101c0:	2b06      	cmp	r3, #6
 80101c2:	d916      	bls.n	80101f2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80101c4:	f8df c064 	ldr.w	ip, [pc, #100]	@ 801022c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80101c8:	f8cd c004 	str.w	ip, [sp, #4]
 80101cc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80101d0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80101d4:	6920      	ldr	r0, [r4, #16]
 80101d6:	f8ad 100c 	strh.w	r1, [sp, #12]
 80101da:	f04f 0c01 	mov.w	ip, #1
 80101de:	f88d c008 	strb.w	ip, [sp, #8]
 80101e2:	f8ad 200a 	strh.w	r2, [sp, #10]
 80101e6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80101ea:	6803      	ldr	r3, [r0, #0]
 80101ec:	a901      	add	r1, sp, #4
 80101ee:	689b      	ldr	r3, [r3, #8]
 80101f0:	4798      	blx	r3
 80101f2:	4b0d      	ldr	r3, [pc, #52]	@ (8010228 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 80101f4:	9301      	str	r3, [sp, #4]
 80101f6:	6920      	ldr	r0, [r4, #16]
 80101f8:	f88d 5008 	strb.w	r5, [sp, #8]
 80101fc:	2300      	movs	r3, #0
 80101fe:	f8ad 700a 	strh.w	r7, [sp, #10]
 8010202:	f8ad 600c 	strh.w	r6, [sp, #12]
 8010206:	f8ad 300e 	strh.w	r3, [sp, #14]
 801020a:	6803      	ldr	r3, [r0, #0]
 801020c:	a901      	add	r1, sp, #4
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	4798      	blx	r3
 8010212:	b005      	add	sp, #20
 8010214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010216:	2900      	cmp	r1, #0
 8010218:	d1eb      	bne.n	80101f2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801021a:	80a2      	strh	r2, [r4, #4]
 801021c:	80c6      	strh	r6, [r0, #6]
 801021e:	60a1      	str	r1, [r4, #8]
 8010220:	81a1      	strh	r1, [r4, #12]
 8010222:	73a1      	strb	r1, [r4, #14]
 8010224:	e7e5      	b.n	80101f2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8010226:	bf00      	nop
 8010228:	08012920 	.word	0x08012920
 801022c:	08012948 	.word	0x08012948

08010230 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8010230:	b570      	push	{r4, r5, r6, lr}
 8010232:	790b      	ldrb	r3, [r1, #4]
 8010234:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8010238:	2b00      	cmp	r3, #0
 801023a:	bf0c      	ite	eq
 801023c:	2301      	moveq	r3, #1
 801023e:	2300      	movne	r3, #0
 8010240:	4604      	mov	r4, r0
 8010242:	460e      	mov	r6, r1
 8010244:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 8010248:	d109      	bne.n	801025e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 801024a:	b14d      	cbz	r5, 8010260 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 801024c:	7933      	ldrb	r3, [r6, #4]
 801024e:	2b01      	cmp	r3, #1
 8010250:	d10c      	bne.n	801026c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8010252:	6823      	ldr	r3, [r4, #0]
 8010254:	4620      	mov	r0, r4
 8010256:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010258:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801025c:	4718      	bx	r3
 801025e:	b12d      	cbz	r5, 801026c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8010260:	6823      	ldr	r3, [r4, #0]
 8010262:	4620      	mov	r0, r4
 8010264:	695b      	ldr	r3, [r3, #20]
 8010266:	4798      	blx	r3
 8010268:	2d00      	cmp	r5, #0
 801026a:	d1ef      	bne.n	801024c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 801026c:	bd70      	pop	{r4, r5, r6, pc}

0801026e <__aeabi_atexit>:
 801026e:	460b      	mov	r3, r1
 8010270:	4601      	mov	r1, r0
 8010272:	4618      	mov	r0, r3
 8010274:	f000 b910 	b.w	8010498 <__cxa_atexit>

08010278 <_ZdlPvj>:
 8010278:	f000 b812 	b.w	80102a0 <_ZdlPv>

0801027c <__cxa_guard_acquire>:
 801027c:	6802      	ldr	r2, [r0, #0]
 801027e:	07d2      	lsls	r2, r2, #31
 8010280:	4603      	mov	r3, r0
 8010282:	d405      	bmi.n	8010290 <__cxa_guard_acquire+0x14>
 8010284:	7842      	ldrb	r2, [r0, #1]
 8010286:	b102      	cbz	r2, 801028a <__cxa_guard_acquire+0xe>
 8010288:	deff      	udf	#255	@ 0xff
 801028a:	2001      	movs	r0, #1
 801028c:	7058      	strb	r0, [r3, #1]
 801028e:	4770      	bx	lr
 8010290:	2000      	movs	r0, #0
 8010292:	4770      	bx	lr

08010294 <__cxa_guard_release>:
 8010294:	2301      	movs	r3, #1
 8010296:	6003      	str	r3, [r0, #0]
 8010298:	4770      	bx	lr

0801029a <__cxa_pure_virtual>:
 801029a:	b508      	push	{r3, lr}
 801029c:	f000 f80e 	bl	80102bc <_ZSt9terminatev>

080102a0 <_ZdlPv>:
 80102a0:	f000 b844 	b.w	801032c <free>

080102a4 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80102a4:	b508      	push	{r3, lr}
 80102a6:	4780      	blx	r0
 80102a8:	f000 f80d 	bl	80102c6 <abort>

080102ac <_ZSt13get_terminatev>:
 80102ac:	4b02      	ldr	r3, [pc, #8]	@ (80102b8 <_ZSt13get_terminatev+0xc>)
 80102ae:	6818      	ldr	r0, [r3, #0]
 80102b0:	f3bf 8f5b 	dmb	ish
 80102b4:	4770      	bx	lr
 80102b6:	bf00      	nop
 80102b8:	20000094 	.word	0x20000094

080102bc <_ZSt9terminatev>:
 80102bc:	b508      	push	{r3, lr}
 80102be:	f7ff fff5 	bl	80102ac <_ZSt13get_terminatev>
 80102c2:	f7ff ffef 	bl	80102a4 <_ZN10__cxxabiv111__terminateEPFvvE>

080102c6 <abort>:
 80102c6:	b508      	push	{r3, lr}
 80102c8:	2006      	movs	r0, #6
 80102ca:	f000 fa3b 	bl	8010744 <raise>
 80102ce:	2001      	movs	r0, #1
 80102d0:	f7f1 fe08 	bl	8001ee4 <_exit>

080102d4 <__assert_func>:
 80102d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80102d6:	4614      	mov	r4, r2
 80102d8:	461a      	mov	r2, r3
 80102da:	4b09      	ldr	r3, [pc, #36]	@ (8010300 <__assert_func+0x2c>)
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	4605      	mov	r5, r0
 80102e0:	68d8      	ldr	r0, [r3, #12]
 80102e2:	b14c      	cbz	r4, 80102f8 <__assert_func+0x24>
 80102e4:	4b07      	ldr	r3, [pc, #28]	@ (8010304 <__assert_func+0x30>)
 80102e6:	9100      	str	r1, [sp, #0]
 80102e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80102ec:	4906      	ldr	r1, [pc, #24]	@ (8010308 <__assert_func+0x34>)
 80102ee:	462b      	mov	r3, r5
 80102f0:	f000 f984 	bl	80105fc <fiprintf>
 80102f4:	f7ff ffe7 	bl	80102c6 <abort>
 80102f8:	4b04      	ldr	r3, [pc, #16]	@ (801030c <__assert_func+0x38>)
 80102fa:	461c      	mov	r4, r3
 80102fc:	e7f3      	b.n	80102e6 <__assert_func+0x12>
 80102fe:	bf00      	nop
 8010300:	200000a4 	.word	0x200000a4
 8010304:	08011e33 	.word	0x08011e33
 8010308:	08011e40 	.word	0x08011e40
 801030c:	08011e6e 	.word	0x08011e6e

08010310 <atexit>:
 8010310:	2300      	movs	r3, #0
 8010312:	4601      	mov	r1, r0
 8010314:	461a      	mov	r2, r3
 8010316:	4618      	mov	r0, r3
 8010318:	f000 bac2 	b.w	80108a0 <__register_exitproc>

0801031c <malloc>:
 801031c:	4b02      	ldr	r3, [pc, #8]	@ (8010328 <malloc+0xc>)
 801031e:	4601      	mov	r1, r0
 8010320:	6818      	ldr	r0, [r3, #0]
 8010322:	f000 b82d 	b.w	8010380 <_malloc_r>
 8010326:	bf00      	nop
 8010328:	200000a4 	.word	0x200000a4

0801032c <free>:
 801032c:	4b02      	ldr	r3, [pc, #8]	@ (8010338 <free+0xc>)
 801032e:	4601      	mov	r1, r0
 8010330:	6818      	ldr	r0, [r3, #0]
 8010332:	f000 bb11 	b.w	8010958 <_free_r>
 8010336:	bf00      	nop
 8010338:	200000a4 	.word	0x200000a4

0801033c <sbrk_aligned>:
 801033c:	b570      	push	{r4, r5, r6, lr}
 801033e:	4e0f      	ldr	r6, [pc, #60]	@ (801037c <sbrk_aligned+0x40>)
 8010340:	460c      	mov	r4, r1
 8010342:	6831      	ldr	r1, [r6, #0]
 8010344:	4605      	mov	r5, r0
 8010346:	b911      	cbnz	r1, 801034e <sbrk_aligned+0x12>
 8010348:	f000 fa4c 	bl	80107e4 <_sbrk_r>
 801034c:	6030      	str	r0, [r6, #0]
 801034e:	4621      	mov	r1, r4
 8010350:	4628      	mov	r0, r5
 8010352:	f000 fa47 	bl	80107e4 <_sbrk_r>
 8010356:	1c43      	adds	r3, r0, #1
 8010358:	d103      	bne.n	8010362 <sbrk_aligned+0x26>
 801035a:	f04f 34ff 	mov.w	r4, #4294967295
 801035e:	4620      	mov	r0, r4
 8010360:	bd70      	pop	{r4, r5, r6, pc}
 8010362:	1cc4      	adds	r4, r0, #3
 8010364:	f024 0403 	bic.w	r4, r4, #3
 8010368:	42a0      	cmp	r0, r4
 801036a:	d0f8      	beq.n	801035e <sbrk_aligned+0x22>
 801036c:	1a21      	subs	r1, r4, r0
 801036e:	4628      	mov	r0, r5
 8010370:	f000 fa38 	bl	80107e4 <_sbrk_r>
 8010374:	3001      	adds	r0, #1
 8010376:	d1f2      	bne.n	801035e <sbrk_aligned+0x22>
 8010378:	e7ef      	b.n	801035a <sbrk_aligned+0x1e>
 801037a:	bf00      	nop
 801037c:	20012514 	.word	0x20012514

08010380 <_malloc_r>:
 8010380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010384:	1ccd      	adds	r5, r1, #3
 8010386:	f025 0503 	bic.w	r5, r5, #3
 801038a:	3508      	adds	r5, #8
 801038c:	2d0c      	cmp	r5, #12
 801038e:	bf38      	it	cc
 8010390:	250c      	movcc	r5, #12
 8010392:	2d00      	cmp	r5, #0
 8010394:	4606      	mov	r6, r0
 8010396:	db01      	blt.n	801039c <_malloc_r+0x1c>
 8010398:	42a9      	cmp	r1, r5
 801039a:	d904      	bls.n	80103a6 <_malloc_r+0x26>
 801039c:	230c      	movs	r3, #12
 801039e:	6033      	str	r3, [r6, #0]
 80103a0:	2000      	movs	r0, #0
 80103a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801047c <_malloc_r+0xfc>
 80103aa:	f000 f869 	bl	8010480 <__malloc_lock>
 80103ae:	f8d8 3000 	ldr.w	r3, [r8]
 80103b2:	461c      	mov	r4, r3
 80103b4:	bb44      	cbnz	r4, 8010408 <_malloc_r+0x88>
 80103b6:	4629      	mov	r1, r5
 80103b8:	4630      	mov	r0, r6
 80103ba:	f7ff ffbf 	bl	801033c <sbrk_aligned>
 80103be:	1c43      	adds	r3, r0, #1
 80103c0:	4604      	mov	r4, r0
 80103c2:	d158      	bne.n	8010476 <_malloc_r+0xf6>
 80103c4:	f8d8 4000 	ldr.w	r4, [r8]
 80103c8:	4627      	mov	r7, r4
 80103ca:	2f00      	cmp	r7, #0
 80103cc:	d143      	bne.n	8010456 <_malloc_r+0xd6>
 80103ce:	2c00      	cmp	r4, #0
 80103d0:	d04b      	beq.n	801046a <_malloc_r+0xea>
 80103d2:	6823      	ldr	r3, [r4, #0]
 80103d4:	4639      	mov	r1, r7
 80103d6:	4630      	mov	r0, r6
 80103d8:	eb04 0903 	add.w	r9, r4, r3
 80103dc:	f000 fa02 	bl	80107e4 <_sbrk_r>
 80103e0:	4581      	cmp	r9, r0
 80103e2:	d142      	bne.n	801046a <_malloc_r+0xea>
 80103e4:	6821      	ldr	r1, [r4, #0]
 80103e6:	1a6d      	subs	r5, r5, r1
 80103e8:	4629      	mov	r1, r5
 80103ea:	4630      	mov	r0, r6
 80103ec:	f7ff ffa6 	bl	801033c <sbrk_aligned>
 80103f0:	3001      	adds	r0, #1
 80103f2:	d03a      	beq.n	801046a <_malloc_r+0xea>
 80103f4:	6823      	ldr	r3, [r4, #0]
 80103f6:	442b      	add	r3, r5
 80103f8:	6023      	str	r3, [r4, #0]
 80103fa:	f8d8 3000 	ldr.w	r3, [r8]
 80103fe:	685a      	ldr	r2, [r3, #4]
 8010400:	bb62      	cbnz	r2, 801045c <_malloc_r+0xdc>
 8010402:	f8c8 7000 	str.w	r7, [r8]
 8010406:	e00f      	b.n	8010428 <_malloc_r+0xa8>
 8010408:	6822      	ldr	r2, [r4, #0]
 801040a:	1b52      	subs	r2, r2, r5
 801040c:	d420      	bmi.n	8010450 <_malloc_r+0xd0>
 801040e:	2a0b      	cmp	r2, #11
 8010410:	d917      	bls.n	8010442 <_malloc_r+0xc2>
 8010412:	1961      	adds	r1, r4, r5
 8010414:	42a3      	cmp	r3, r4
 8010416:	6025      	str	r5, [r4, #0]
 8010418:	bf18      	it	ne
 801041a:	6059      	strne	r1, [r3, #4]
 801041c:	6863      	ldr	r3, [r4, #4]
 801041e:	bf08      	it	eq
 8010420:	f8c8 1000 	streq.w	r1, [r8]
 8010424:	5162      	str	r2, [r4, r5]
 8010426:	604b      	str	r3, [r1, #4]
 8010428:	4630      	mov	r0, r6
 801042a:	f000 f82f 	bl	801048c <__malloc_unlock>
 801042e:	f104 000b 	add.w	r0, r4, #11
 8010432:	1d23      	adds	r3, r4, #4
 8010434:	f020 0007 	bic.w	r0, r0, #7
 8010438:	1ac2      	subs	r2, r0, r3
 801043a:	bf1c      	itt	ne
 801043c:	1a1b      	subne	r3, r3, r0
 801043e:	50a3      	strne	r3, [r4, r2]
 8010440:	e7af      	b.n	80103a2 <_malloc_r+0x22>
 8010442:	6862      	ldr	r2, [r4, #4]
 8010444:	42a3      	cmp	r3, r4
 8010446:	bf0c      	ite	eq
 8010448:	f8c8 2000 	streq.w	r2, [r8]
 801044c:	605a      	strne	r2, [r3, #4]
 801044e:	e7eb      	b.n	8010428 <_malloc_r+0xa8>
 8010450:	4623      	mov	r3, r4
 8010452:	6864      	ldr	r4, [r4, #4]
 8010454:	e7ae      	b.n	80103b4 <_malloc_r+0x34>
 8010456:	463c      	mov	r4, r7
 8010458:	687f      	ldr	r7, [r7, #4]
 801045a:	e7b6      	b.n	80103ca <_malloc_r+0x4a>
 801045c:	461a      	mov	r2, r3
 801045e:	685b      	ldr	r3, [r3, #4]
 8010460:	42a3      	cmp	r3, r4
 8010462:	d1fb      	bne.n	801045c <_malloc_r+0xdc>
 8010464:	2300      	movs	r3, #0
 8010466:	6053      	str	r3, [r2, #4]
 8010468:	e7de      	b.n	8010428 <_malloc_r+0xa8>
 801046a:	230c      	movs	r3, #12
 801046c:	6033      	str	r3, [r6, #0]
 801046e:	4630      	mov	r0, r6
 8010470:	f000 f80c 	bl	801048c <__malloc_unlock>
 8010474:	e794      	b.n	80103a0 <_malloc_r+0x20>
 8010476:	6005      	str	r5, [r0, #0]
 8010478:	e7d6      	b.n	8010428 <_malloc_r+0xa8>
 801047a:	bf00      	nop
 801047c:	20012518 	.word	0x20012518

08010480 <__malloc_lock>:
 8010480:	4801      	ldr	r0, [pc, #4]	@ (8010488 <__malloc_lock+0x8>)
 8010482:	f000 b9fc 	b.w	801087e <__retarget_lock_acquire_recursive>
 8010486:	bf00      	nop
 8010488:	2001265c 	.word	0x2001265c

0801048c <__malloc_unlock>:
 801048c:	4801      	ldr	r0, [pc, #4]	@ (8010494 <__malloc_unlock+0x8>)
 801048e:	f000 b9f7 	b.w	8010880 <__retarget_lock_release_recursive>
 8010492:	bf00      	nop
 8010494:	2001265c 	.word	0x2001265c

08010498 <__cxa_atexit>:
 8010498:	b510      	push	{r4, lr}
 801049a:	4604      	mov	r4, r0
 801049c:	4804      	ldr	r0, [pc, #16]	@ (80104b0 <__cxa_atexit+0x18>)
 801049e:	4613      	mov	r3, r2
 80104a0:	b120      	cbz	r0, 80104ac <__cxa_atexit+0x14>
 80104a2:	460a      	mov	r2, r1
 80104a4:	2002      	movs	r0, #2
 80104a6:	4621      	mov	r1, r4
 80104a8:	f000 f9fa 	bl	80108a0 <__register_exitproc>
 80104ac:	bd10      	pop	{r4, pc}
 80104ae:	bf00      	nop
 80104b0:	080108a1 	.word	0x080108a1

080104b4 <std>:
 80104b4:	2300      	movs	r3, #0
 80104b6:	b510      	push	{r4, lr}
 80104b8:	4604      	mov	r4, r0
 80104ba:	e9c0 3300 	strd	r3, r3, [r0]
 80104be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80104c2:	6083      	str	r3, [r0, #8]
 80104c4:	8181      	strh	r1, [r0, #12]
 80104c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80104c8:	81c2      	strh	r2, [r0, #14]
 80104ca:	6183      	str	r3, [r0, #24]
 80104cc:	4619      	mov	r1, r3
 80104ce:	2208      	movs	r2, #8
 80104d0:	305c      	adds	r0, #92	@ 0x5c
 80104d2:	f000 f906 	bl	80106e2 <memset>
 80104d6:	4b0d      	ldr	r3, [pc, #52]	@ (801050c <std+0x58>)
 80104d8:	6263      	str	r3, [r4, #36]	@ 0x24
 80104da:	4b0d      	ldr	r3, [pc, #52]	@ (8010510 <std+0x5c>)
 80104dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80104de:	4b0d      	ldr	r3, [pc, #52]	@ (8010514 <std+0x60>)
 80104e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80104e2:	4b0d      	ldr	r3, [pc, #52]	@ (8010518 <std+0x64>)
 80104e4:	6323      	str	r3, [r4, #48]	@ 0x30
 80104e6:	4b0d      	ldr	r3, [pc, #52]	@ (801051c <std+0x68>)
 80104e8:	6224      	str	r4, [r4, #32]
 80104ea:	429c      	cmp	r4, r3
 80104ec:	d006      	beq.n	80104fc <std+0x48>
 80104ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80104f2:	4294      	cmp	r4, r2
 80104f4:	d002      	beq.n	80104fc <std+0x48>
 80104f6:	33d0      	adds	r3, #208	@ 0xd0
 80104f8:	429c      	cmp	r4, r3
 80104fa:	d105      	bne.n	8010508 <std+0x54>
 80104fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010504:	f000 b9ba 	b.w	801087c <__retarget_lock_init_recursive>
 8010508:	bd10      	pop	{r4, pc}
 801050a:	bf00      	nop
 801050c:	0801065d 	.word	0x0801065d
 8010510:	0801067f 	.word	0x0801067f
 8010514:	080106b7 	.word	0x080106b7
 8010518:	080106db 	.word	0x080106db
 801051c:	2001251c 	.word	0x2001251c

08010520 <stdio_exit_handler>:
 8010520:	4a02      	ldr	r2, [pc, #8]	@ (801052c <stdio_exit_handler+0xc>)
 8010522:	4903      	ldr	r1, [pc, #12]	@ (8010530 <stdio_exit_handler+0x10>)
 8010524:	4803      	ldr	r0, [pc, #12]	@ (8010534 <stdio_exit_handler+0x14>)
 8010526:	f000 b87b 	b.w	8010620 <_fwalk_sglue>
 801052a:	bf00      	nop
 801052c:	20000098 	.word	0x20000098
 8010530:	08011091 	.word	0x08011091
 8010534:	200000a8 	.word	0x200000a8

08010538 <cleanup_stdio>:
 8010538:	6841      	ldr	r1, [r0, #4]
 801053a:	4b0c      	ldr	r3, [pc, #48]	@ (801056c <cleanup_stdio+0x34>)
 801053c:	4299      	cmp	r1, r3
 801053e:	b510      	push	{r4, lr}
 8010540:	4604      	mov	r4, r0
 8010542:	d001      	beq.n	8010548 <cleanup_stdio+0x10>
 8010544:	f000 fda4 	bl	8011090 <_fflush_r>
 8010548:	68a1      	ldr	r1, [r4, #8]
 801054a:	4b09      	ldr	r3, [pc, #36]	@ (8010570 <cleanup_stdio+0x38>)
 801054c:	4299      	cmp	r1, r3
 801054e:	d002      	beq.n	8010556 <cleanup_stdio+0x1e>
 8010550:	4620      	mov	r0, r4
 8010552:	f000 fd9d 	bl	8011090 <_fflush_r>
 8010556:	68e1      	ldr	r1, [r4, #12]
 8010558:	4b06      	ldr	r3, [pc, #24]	@ (8010574 <cleanup_stdio+0x3c>)
 801055a:	4299      	cmp	r1, r3
 801055c:	d004      	beq.n	8010568 <cleanup_stdio+0x30>
 801055e:	4620      	mov	r0, r4
 8010560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010564:	f000 bd94 	b.w	8011090 <_fflush_r>
 8010568:	bd10      	pop	{r4, pc}
 801056a:	bf00      	nop
 801056c:	2001251c 	.word	0x2001251c
 8010570:	20012584 	.word	0x20012584
 8010574:	200125ec 	.word	0x200125ec

08010578 <global_stdio_init.part.0>:
 8010578:	b510      	push	{r4, lr}
 801057a:	4b0b      	ldr	r3, [pc, #44]	@ (80105a8 <global_stdio_init.part.0+0x30>)
 801057c:	4c0b      	ldr	r4, [pc, #44]	@ (80105ac <global_stdio_init.part.0+0x34>)
 801057e:	4a0c      	ldr	r2, [pc, #48]	@ (80105b0 <global_stdio_init.part.0+0x38>)
 8010580:	601a      	str	r2, [r3, #0]
 8010582:	4620      	mov	r0, r4
 8010584:	2200      	movs	r2, #0
 8010586:	2104      	movs	r1, #4
 8010588:	f7ff ff94 	bl	80104b4 <std>
 801058c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010590:	2201      	movs	r2, #1
 8010592:	2109      	movs	r1, #9
 8010594:	f7ff ff8e 	bl	80104b4 <std>
 8010598:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801059c:	2202      	movs	r2, #2
 801059e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105a2:	2112      	movs	r1, #18
 80105a4:	f7ff bf86 	b.w	80104b4 <std>
 80105a8:	20012654 	.word	0x20012654
 80105ac:	2001251c 	.word	0x2001251c
 80105b0:	08010521 	.word	0x08010521

080105b4 <__sfp_lock_acquire>:
 80105b4:	4801      	ldr	r0, [pc, #4]	@ (80105bc <__sfp_lock_acquire+0x8>)
 80105b6:	f000 b962 	b.w	801087e <__retarget_lock_acquire_recursive>
 80105ba:	bf00      	nop
 80105bc:	2001265e 	.word	0x2001265e

080105c0 <__sfp_lock_release>:
 80105c0:	4801      	ldr	r0, [pc, #4]	@ (80105c8 <__sfp_lock_release+0x8>)
 80105c2:	f000 b95d 	b.w	8010880 <__retarget_lock_release_recursive>
 80105c6:	bf00      	nop
 80105c8:	2001265e 	.word	0x2001265e

080105cc <__sinit>:
 80105cc:	b510      	push	{r4, lr}
 80105ce:	4604      	mov	r4, r0
 80105d0:	f7ff fff0 	bl	80105b4 <__sfp_lock_acquire>
 80105d4:	6a23      	ldr	r3, [r4, #32]
 80105d6:	b11b      	cbz	r3, 80105e0 <__sinit+0x14>
 80105d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105dc:	f7ff bff0 	b.w	80105c0 <__sfp_lock_release>
 80105e0:	4b04      	ldr	r3, [pc, #16]	@ (80105f4 <__sinit+0x28>)
 80105e2:	6223      	str	r3, [r4, #32]
 80105e4:	4b04      	ldr	r3, [pc, #16]	@ (80105f8 <__sinit+0x2c>)
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d1f5      	bne.n	80105d8 <__sinit+0xc>
 80105ec:	f7ff ffc4 	bl	8010578 <global_stdio_init.part.0>
 80105f0:	e7f2      	b.n	80105d8 <__sinit+0xc>
 80105f2:	bf00      	nop
 80105f4:	08010539 	.word	0x08010539
 80105f8:	20012654 	.word	0x20012654

080105fc <fiprintf>:
 80105fc:	b40e      	push	{r1, r2, r3}
 80105fe:	b503      	push	{r0, r1, lr}
 8010600:	4601      	mov	r1, r0
 8010602:	ab03      	add	r3, sp, #12
 8010604:	4805      	ldr	r0, [pc, #20]	@ (801061c <fiprintf+0x20>)
 8010606:	f853 2b04 	ldr.w	r2, [r3], #4
 801060a:	6800      	ldr	r0, [r0, #0]
 801060c:	9301      	str	r3, [sp, #4]
 801060e:	f000 fa17 	bl	8010a40 <_vfiprintf_r>
 8010612:	b002      	add	sp, #8
 8010614:	f85d eb04 	ldr.w	lr, [sp], #4
 8010618:	b003      	add	sp, #12
 801061a:	4770      	bx	lr
 801061c:	200000a4 	.word	0x200000a4

08010620 <_fwalk_sglue>:
 8010620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010624:	4607      	mov	r7, r0
 8010626:	4688      	mov	r8, r1
 8010628:	4614      	mov	r4, r2
 801062a:	2600      	movs	r6, #0
 801062c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010630:	f1b9 0901 	subs.w	r9, r9, #1
 8010634:	d505      	bpl.n	8010642 <_fwalk_sglue+0x22>
 8010636:	6824      	ldr	r4, [r4, #0]
 8010638:	2c00      	cmp	r4, #0
 801063a:	d1f7      	bne.n	801062c <_fwalk_sglue+0xc>
 801063c:	4630      	mov	r0, r6
 801063e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010642:	89ab      	ldrh	r3, [r5, #12]
 8010644:	2b01      	cmp	r3, #1
 8010646:	d907      	bls.n	8010658 <_fwalk_sglue+0x38>
 8010648:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801064c:	3301      	adds	r3, #1
 801064e:	d003      	beq.n	8010658 <_fwalk_sglue+0x38>
 8010650:	4629      	mov	r1, r5
 8010652:	4638      	mov	r0, r7
 8010654:	47c0      	blx	r8
 8010656:	4306      	orrs	r6, r0
 8010658:	3568      	adds	r5, #104	@ 0x68
 801065a:	e7e9      	b.n	8010630 <_fwalk_sglue+0x10>

0801065c <__sread>:
 801065c:	b510      	push	{r4, lr}
 801065e:	460c      	mov	r4, r1
 8010660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010664:	f000 f898 	bl	8010798 <_read_r>
 8010668:	2800      	cmp	r0, #0
 801066a:	bfab      	itete	ge
 801066c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801066e:	89a3      	ldrhlt	r3, [r4, #12]
 8010670:	181b      	addge	r3, r3, r0
 8010672:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010676:	bfac      	ite	ge
 8010678:	6563      	strge	r3, [r4, #84]	@ 0x54
 801067a:	81a3      	strhlt	r3, [r4, #12]
 801067c:	bd10      	pop	{r4, pc}

0801067e <__swrite>:
 801067e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010682:	461f      	mov	r7, r3
 8010684:	898b      	ldrh	r3, [r1, #12]
 8010686:	05db      	lsls	r3, r3, #23
 8010688:	4605      	mov	r5, r0
 801068a:	460c      	mov	r4, r1
 801068c:	4616      	mov	r6, r2
 801068e:	d505      	bpl.n	801069c <__swrite+0x1e>
 8010690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010694:	2302      	movs	r3, #2
 8010696:	2200      	movs	r2, #0
 8010698:	f000 f86c 	bl	8010774 <_lseek_r>
 801069c:	89a3      	ldrh	r3, [r4, #12]
 801069e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80106a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80106a6:	81a3      	strh	r3, [r4, #12]
 80106a8:	4632      	mov	r2, r6
 80106aa:	463b      	mov	r3, r7
 80106ac:	4628      	mov	r0, r5
 80106ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80106b2:	f000 b8a7 	b.w	8010804 <_write_r>

080106b6 <__sseek>:
 80106b6:	b510      	push	{r4, lr}
 80106b8:	460c      	mov	r4, r1
 80106ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106be:	f000 f859 	bl	8010774 <_lseek_r>
 80106c2:	1c43      	adds	r3, r0, #1
 80106c4:	89a3      	ldrh	r3, [r4, #12]
 80106c6:	bf15      	itete	ne
 80106c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80106ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80106ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80106d2:	81a3      	strheq	r3, [r4, #12]
 80106d4:	bf18      	it	ne
 80106d6:	81a3      	strhne	r3, [r4, #12]
 80106d8:	bd10      	pop	{r4, pc}

080106da <__sclose>:
 80106da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106de:	f000 b839 	b.w	8010754 <_close_r>

080106e2 <memset>:
 80106e2:	4402      	add	r2, r0
 80106e4:	4603      	mov	r3, r0
 80106e6:	4293      	cmp	r3, r2
 80106e8:	d100      	bne.n	80106ec <memset+0xa>
 80106ea:	4770      	bx	lr
 80106ec:	f803 1b01 	strb.w	r1, [r3], #1
 80106f0:	e7f9      	b.n	80106e6 <memset+0x4>

080106f2 <_raise_r>:
 80106f2:	291f      	cmp	r1, #31
 80106f4:	b538      	push	{r3, r4, r5, lr}
 80106f6:	4605      	mov	r5, r0
 80106f8:	460c      	mov	r4, r1
 80106fa:	d904      	bls.n	8010706 <_raise_r+0x14>
 80106fc:	2316      	movs	r3, #22
 80106fe:	6003      	str	r3, [r0, #0]
 8010700:	f04f 30ff 	mov.w	r0, #4294967295
 8010704:	bd38      	pop	{r3, r4, r5, pc}
 8010706:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010708:	b112      	cbz	r2, 8010710 <_raise_r+0x1e>
 801070a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801070e:	b94b      	cbnz	r3, 8010724 <_raise_r+0x32>
 8010710:	4628      	mov	r0, r5
 8010712:	f000 f865 	bl	80107e0 <_getpid_r>
 8010716:	4622      	mov	r2, r4
 8010718:	4601      	mov	r1, r0
 801071a:	4628      	mov	r0, r5
 801071c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010720:	f000 b84c 	b.w	80107bc <_kill_r>
 8010724:	2b01      	cmp	r3, #1
 8010726:	d00a      	beq.n	801073e <_raise_r+0x4c>
 8010728:	1c59      	adds	r1, r3, #1
 801072a:	d103      	bne.n	8010734 <_raise_r+0x42>
 801072c:	2316      	movs	r3, #22
 801072e:	6003      	str	r3, [r0, #0]
 8010730:	2001      	movs	r0, #1
 8010732:	e7e7      	b.n	8010704 <_raise_r+0x12>
 8010734:	2100      	movs	r1, #0
 8010736:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801073a:	4620      	mov	r0, r4
 801073c:	4798      	blx	r3
 801073e:	2000      	movs	r0, #0
 8010740:	e7e0      	b.n	8010704 <_raise_r+0x12>
	...

08010744 <raise>:
 8010744:	4b02      	ldr	r3, [pc, #8]	@ (8010750 <raise+0xc>)
 8010746:	4601      	mov	r1, r0
 8010748:	6818      	ldr	r0, [r3, #0]
 801074a:	f7ff bfd2 	b.w	80106f2 <_raise_r>
 801074e:	bf00      	nop
 8010750:	200000a4 	.word	0x200000a4

08010754 <_close_r>:
 8010754:	b538      	push	{r3, r4, r5, lr}
 8010756:	4d06      	ldr	r5, [pc, #24]	@ (8010770 <_close_r+0x1c>)
 8010758:	2300      	movs	r3, #0
 801075a:	4604      	mov	r4, r0
 801075c:	4608      	mov	r0, r1
 801075e:	602b      	str	r3, [r5, #0]
 8010760:	f7f1 fbe2 	bl	8001f28 <_close>
 8010764:	1c43      	adds	r3, r0, #1
 8010766:	d102      	bne.n	801076e <_close_r+0x1a>
 8010768:	682b      	ldr	r3, [r5, #0]
 801076a:	b103      	cbz	r3, 801076e <_close_r+0x1a>
 801076c:	6023      	str	r3, [r4, #0]
 801076e:	bd38      	pop	{r3, r4, r5, pc}
 8010770:	20012658 	.word	0x20012658

08010774 <_lseek_r>:
 8010774:	b538      	push	{r3, r4, r5, lr}
 8010776:	4d07      	ldr	r5, [pc, #28]	@ (8010794 <_lseek_r+0x20>)
 8010778:	4604      	mov	r4, r0
 801077a:	4608      	mov	r0, r1
 801077c:	4611      	mov	r1, r2
 801077e:	2200      	movs	r2, #0
 8010780:	602a      	str	r2, [r5, #0]
 8010782:	461a      	mov	r2, r3
 8010784:	f7f1 fbda 	bl	8001f3c <_lseek>
 8010788:	1c43      	adds	r3, r0, #1
 801078a:	d102      	bne.n	8010792 <_lseek_r+0x1e>
 801078c:	682b      	ldr	r3, [r5, #0]
 801078e:	b103      	cbz	r3, 8010792 <_lseek_r+0x1e>
 8010790:	6023      	str	r3, [r4, #0]
 8010792:	bd38      	pop	{r3, r4, r5, pc}
 8010794:	20012658 	.word	0x20012658

08010798 <_read_r>:
 8010798:	b538      	push	{r3, r4, r5, lr}
 801079a:	4d07      	ldr	r5, [pc, #28]	@ (80107b8 <_read_r+0x20>)
 801079c:	4604      	mov	r4, r0
 801079e:	4608      	mov	r0, r1
 80107a0:	4611      	mov	r1, r2
 80107a2:	2200      	movs	r2, #0
 80107a4:	602a      	str	r2, [r5, #0]
 80107a6:	461a      	mov	r2, r3
 80107a8:	f7f1 fba2 	bl	8001ef0 <_read>
 80107ac:	1c43      	adds	r3, r0, #1
 80107ae:	d102      	bne.n	80107b6 <_read_r+0x1e>
 80107b0:	682b      	ldr	r3, [r5, #0]
 80107b2:	b103      	cbz	r3, 80107b6 <_read_r+0x1e>
 80107b4:	6023      	str	r3, [r4, #0]
 80107b6:	bd38      	pop	{r3, r4, r5, pc}
 80107b8:	20012658 	.word	0x20012658

080107bc <_kill_r>:
 80107bc:	b538      	push	{r3, r4, r5, lr}
 80107be:	4d07      	ldr	r5, [pc, #28]	@ (80107dc <_kill_r+0x20>)
 80107c0:	2300      	movs	r3, #0
 80107c2:	4604      	mov	r4, r0
 80107c4:	4608      	mov	r0, r1
 80107c6:	4611      	mov	r1, r2
 80107c8:	602b      	str	r3, [r5, #0]
 80107ca:	f7f1 fb83 	bl	8001ed4 <_kill>
 80107ce:	1c43      	adds	r3, r0, #1
 80107d0:	d102      	bne.n	80107d8 <_kill_r+0x1c>
 80107d2:	682b      	ldr	r3, [r5, #0]
 80107d4:	b103      	cbz	r3, 80107d8 <_kill_r+0x1c>
 80107d6:	6023      	str	r3, [r4, #0]
 80107d8:	bd38      	pop	{r3, r4, r5, pc}
 80107da:	bf00      	nop
 80107dc:	20012658 	.word	0x20012658

080107e0 <_getpid_r>:
 80107e0:	f7f1 bb76 	b.w	8001ed0 <_getpid>

080107e4 <_sbrk_r>:
 80107e4:	b538      	push	{r3, r4, r5, lr}
 80107e6:	4d06      	ldr	r5, [pc, #24]	@ (8010800 <_sbrk_r+0x1c>)
 80107e8:	2300      	movs	r3, #0
 80107ea:	4604      	mov	r4, r0
 80107ec:	4608      	mov	r0, r1
 80107ee:	602b      	str	r3, [r5, #0]
 80107f0:	f7f1 fba6 	bl	8001f40 <_sbrk>
 80107f4:	1c43      	adds	r3, r0, #1
 80107f6:	d102      	bne.n	80107fe <_sbrk_r+0x1a>
 80107f8:	682b      	ldr	r3, [r5, #0]
 80107fa:	b103      	cbz	r3, 80107fe <_sbrk_r+0x1a>
 80107fc:	6023      	str	r3, [r4, #0]
 80107fe:	bd38      	pop	{r3, r4, r5, pc}
 8010800:	20012658 	.word	0x20012658

08010804 <_write_r>:
 8010804:	b538      	push	{r3, r4, r5, lr}
 8010806:	4d07      	ldr	r5, [pc, #28]	@ (8010824 <_write_r+0x20>)
 8010808:	4604      	mov	r4, r0
 801080a:	4608      	mov	r0, r1
 801080c:	4611      	mov	r1, r2
 801080e:	2200      	movs	r2, #0
 8010810:	602a      	str	r2, [r5, #0]
 8010812:	461a      	mov	r2, r3
 8010814:	f7f1 fb7a 	bl	8001f0c <_write>
 8010818:	1c43      	adds	r3, r0, #1
 801081a:	d102      	bne.n	8010822 <_write_r+0x1e>
 801081c:	682b      	ldr	r3, [r5, #0]
 801081e:	b103      	cbz	r3, 8010822 <_write_r+0x1e>
 8010820:	6023      	str	r3, [r4, #0]
 8010822:	bd38      	pop	{r3, r4, r5, pc}
 8010824:	20012658 	.word	0x20012658

08010828 <__errno>:
 8010828:	4b01      	ldr	r3, [pc, #4]	@ (8010830 <__errno+0x8>)
 801082a:	6818      	ldr	r0, [r3, #0]
 801082c:	4770      	bx	lr
 801082e:	bf00      	nop
 8010830:	200000a4 	.word	0x200000a4

08010834 <__libc_init_array>:
 8010834:	b570      	push	{r4, r5, r6, lr}
 8010836:	4d0d      	ldr	r5, [pc, #52]	@ (801086c <__libc_init_array+0x38>)
 8010838:	4c0d      	ldr	r4, [pc, #52]	@ (8010870 <__libc_init_array+0x3c>)
 801083a:	1b64      	subs	r4, r4, r5
 801083c:	10a4      	asrs	r4, r4, #2
 801083e:	2600      	movs	r6, #0
 8010840:	42a6      	cmp	r6, r4
 8010842:	d109      	bne.n	8010858 <__libc_init_array+0x24>
 8010844:	4d0b      	ldr	r5, [pc, #44]	@ (8010874 <__libc_init_array+0x40>)
 8010846:	4c0c      	ldr	r4, [pc, #48]	@ (8010878 <__libc_init_array+0x44>)
 8010848:	f000 fd62 	bl	8011310 <_init>
 801084c:	1b64      	subs	r4, r4, r5
 801084e:	10a4      	asrs	r4, r4, #2
 8010850:	2600      	movs	r6, #0
 8010852:	42a6      	cmp	r6, r4
 8010854:	d105      	bne.n	8010862 <__libc_init_array+0x2e>
 8010856:	bd70      	pop	{r4, r5, r6, pc}
 8010858:	f855 3b04 	ldr.w	r3, [r5], #4
 801085c:	4798      	blx	r3
 801085e:	3601      	adds	r6, #1
 8010860:	e7ee      	b.n	8010840 <__libc_init_array+0xc>
 8010862:	f855 3b04 	ldr.w	r3, [r5], #4
 8010866:	4798      	blx	r3
 8010868:	3601      	adds	r6, #1
 801086a:	e7f2      	b.n	8010852 <__libc_init_array+0x1e>
 801086c:	080e4738 	.word	0x080e4738
 8010870:	080e4738 	.word	0x080e4738
 8010874:	080e4738 	.word	0x080e4738
 8010878:	080e474c 	.word	0x080e474c

0801087c <__retarget_lock_init_recursive>:
 801087c:	4770      	bx	lr

0801087e <__retarget_lock_acquire_recursive>:
 801087e:	4770      	bx	lr

08010880 <__retarget_lock_release_recursive>:
 8010880:	4770      	bx	lr

08010882 <memcpy>:
 8010882:	440a      	add	r2, r1
 8010884:	4291      	cmp	r1, r2
 8010886:	f100 33ff 	add.w	r3, r0, #4294967295
 801088a:	d100      	bne.n	801088e <memcpy+0xc>
 801088c:	4770      	bx	lr
 801088e:	b510      	push	{r4, lr}
 8010890:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010894:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010898:	4291      	cmp	r1, r2
 801089a:	d1f9      	bne.n	8010890 <memcpy+0xe>
 801089c:	bd10      	pop	{r4, pc}
	...

080108a0 <__register_exitproc>:
 80108a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108a4:	4d27      	ldr	r5, [pc, #156]	@ (8010944 <__register_exitproc+0xa4>)
 80108a6:	4607      	mov	r7, r0
 80108a8:	6828      	ldr	r0, [r5, #0]
 80108aa:	4691      	mov	r9, r2
 80108ac:	460e      	mov	r6, r1
 80108ae:	4698      	mov	r8, r3
 80108b0:	f7ff ffe5 	bl	801087e <__retarget_lock_acquire_recursive>
 80108b4:	4a24      	ldr	r2, [pc, #144]	@ (8010948 <__register_exitproc+0xa8>)
 80108b6:	6814      	ldr	r4, [r2, #0]
 80108b8:	b93c      	cbnz	r4, 80108ca <__register_exitproc+0x2a>
 80108ba:	4b24      	ldr	r3, [pc, #144]	@ (801094c <__register_exitproc+0xac>)
 80108bc:	6013      	str	r3, [r2, #0]
 80108be:	4a24      	ldr	r2, [pc, #144]	@ (8010950 <__register_exitproc+0xb0>)
 80108c0:	b112      	cbz	r2, 80108c8 <__register_exitproc+0x28>
 80108c2:	6812      	ldr	r2, [r2, #0]
 80108c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80108c8:	4c20      	ldr	r4, [pc, #128]	@ (801094c <__register_exitproc+0xac>)
 80108ca:	6863      	ldr	r3, [r4, #4]
 80108cc:	2b1f      	cmp	r3, #31
 80108ce:	dd06      	ble.n	80108de <__register_exitproc+0x3e>
 80108d0:	6828      	ldr	r0, [r5, #0]
 80108d2:	f7ff ffd5 	bl	8010880 <__retarget_lock_release_recursive>
 80108d6:	f04f 30ff 	mov.w	r0, #4294967295
 80108da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80108de:	b32f      	cbz	r7, 801092c <__register_exitproc+0x8c>
 80108e0:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 80108e4:	b968      	cbnz	r0, 8010902 <__register_exitproc+0x62>
 80108e6:	4b1b      	ldr	r3, [pc, #108]	@ (8010954 <__register_exitproc+0xb4>)
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d0f1      	beq.n	80108d0 <__register_exitproc+0x30>
 80108ec:	f44f 7084 	mov.w	r0, #264	@ 0x108
 80108f0:	f7ff fd14 	bl	801031c <malloc>
 80108f4:	2800      	cmp	r0, #0
 80108f6:	d0eb      	beq.n	80108d0 <__register_exitproc+0x30>
 80108f8:	2300      	movs	r3, #0
 80108fa:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 80108fe:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 8010902:	6863      	ldr	r3, [r4, #4]
 8010904:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8010908:	2201      	movs	r2, #1
 801090a:	409a      	lsls	r2, r3
 801090c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8010910:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8010914:	4313      	orrs	r3, r2
 8010916:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 801091a:	2f02      	cmp	r7, #2
 801091c:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 8010920:	bf02      	ittt	eq
 8010922:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 8010926:	4313      	orreq	r3, r2
 8010928:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 801092c:	6863      	ldr	r3, [r4, #4]
 801092e:	6828      	ldr	r0, [r5, #0]
 8010930:	1c5a      	adds	r2, r3, #1
 8010932:	3302      	adds	r3, #2
 8010934:	6062      	str	r2, [r4, #4]
 8010936:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 801093a:	f7ff ffa1 	bl	8010880 <__retarget_lock_release_recursive>
 801093e:	2000      	movs	r0, #0
 8010940:	e7cb      	b.n	80108da <__register_exitproc+0x3a>
 8010942:	bf00      	nop
 8010944:	200000f4 	.word	0x200000f4
 8010948:	200126ec 	.word	0x200126ec
 801094c:	20012660 	.word	0x20012660
 8010950:	080129fc 	.word	0x080129fc
 8010954:	0801031d 	.word	0x0801031d

08010958 <_free_r>:
 8010958:	b538      	push	{r3, r4, r5, lr}
 801095a:	4605      	mov	r5, r0
 801095c:	2900      	cmp	r1, #0
 801095e:	d041      	beq.n	80109e4 <_free_r+0x8c>
 8010960:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010964:	1f0c      	subs	r4, r1, #4
 8010966:	2b00      	cmp	r3, #0
 8010968:	bfb8      	it	lt
 801096a:	18e4      	addlt	r4, r4, r3
 801096c:	f7ff fd88 	bl	8010480 <__malloc_lock>
 8010970:	4a1d      	ldr	r2, [pc, #116]	@ (80109e8 <_free_r+0x90>)
 8010972:	6813      	ldr	r3, [r2, #0]
 8010974:	b933      	cbnz	r3, 8010984 <_free_r+0x2c>
 8010976:	6063      	str	r3, [r4, #4]
 8010978:	6014      	str	r4, [r2, #0]
 801097a:	4628      	mov	r0, r5
 801097c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010980:	f7ff bd84 	b.w	801048c <__malloc_unlock>
 8010984:	42a3      	cmp	r3, r4
 8010986:	d908      	bls.n	801099a <_free_r+0x42>
 8010988:	6820      	ldr	r0, [r4, #0]
 801098a:	1821      	adds	r1, r4, r0
 801098c:	428b      	cmp	r3, r1
 801098e:	bf01      	itttt	eq
 8010990:	6819      	ldreq	r1, [r3, #0]
 8010992:	685b      	ldreq	r3, [r3, #4]
 8010994:	1809      	addeq	r1, r1, r0
 8010996:	6021      	streq	r1, [r4, #0]
 8010998:	e7ed      	b.n	8010976 <_free_r+0x1e>
 801099a:	461a      	mov	r2, r3
 801099c:	685b      	ldr	r3, [r3, #4]
 801099e:	b10b      	cbz	r3, 80109a4 <_free_r+0x4c>
 80109a0:	42a3      	cmp	r3, r4
 80109a2:	d9fa      	bls.n	801099a <_free_r+0x42>
 80109a4:	6811      	ldr	r1, [r2, #0]
 80109a6:	1850      	adds	r0, r2, r1
 80109a8:	42a0      	cmp	r0, r4
 80109aa:	d10b      	bne.n	80109c4 <_free_r+0x6c>
 80109ac:	6820      	ldr	r0, [r4, #0]
 80109ae:	4401      	add	r1, r0
 80109b0:	1850      	adds	r0, r2, r1
 80109b2:	4283      	cmp	r3, r0
 80109b4:	6011      	str	r1, [r2, #0]
 80109b6:	d1e0      	bne.n	801097a <_free_r+0x22>
 80109b8:	6818      	ldr	r0, [r3, #0]
 80109ba:	685b      	ldr	r3, [r3, #4]
 80109bc:	6053      	str	r3, [r2, #4]
 80109be:	4408      	add	r0, r1
 80109c0:	6010      	str	r0, [r2, #0]
 80109c2:	e7da      	b.n	801097a <_free_r+0x22>
 80109c4:	d902      	bls.n	80109cc <_free_r+0x74>
 80109c6:	230c      	movs	r3, #12
 80109c8:	602b      	str	r3, [r5, #0]
 80109ca:	e7d6      	b.n	801097a <_free_r+0x22>
 80109cc:	6820      	ldr	r0, [r4, #0]
 80109ce:	1821      	adds	r1, r4, r0
 80109d0:	428b      	cmp	r3, r1
 80109d2:	bf04      	itt	eq
 80109d4:	6819      	ldreq	r1, [r3, #0]
 80109d6:	685b      	ldreq	r3, [r3, #4]
 80109d8:	6063      	str	r3, [r4, #4]
 80109da:	bf04      	itt	eq
 80109dc:	1809      	addeq	r1, r1, r0
 80109de:	6021      	streq	r1, [r4, #0]
 80109e0:	6054      	str	r4, [r2, #4]
 80109e2:	e7ca      	b.n	801097a <_free_r+0x22>
 80109e4:	bd38      	pop	{r3, r4, r5, pc}
 80109e6:	bf00      	nop
 80109e8:	20012518 	.word	0x20012518

080109ec <__sfputc_r>:
 80109ec:	6893      	ldr	r3, [r2, #8]
 80109ee:	3b01      	subs	r3, #1
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	b410      	push	{r4}
 80109f4:	6093      	str	r3, [r2, #8]
 80109f6:	da08      	bge.n	8010a0a <__sfputc_r+0x1e>
 80109f8:	6994      	ldr	r4, [r2, #24]
 80109fa:	42a3      	cmp	r3, r4
 80109fc:	db01      	blt.n	8010a02 <__sfputc_r+0x16>
 80109fe:	290a      	cmp	r1, #10
 8010a00:	d103      	bne.n	8010a0a <__sfputc_r+0x1e>
 8010a02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a06:	f000 bb6b 	b.w	80110e0 <__swbuf_r>
 8010a0a:	6813      	ldr	r3, [r2, #0]
 8010a0c:	1c58      	adds	r0, r3, #1
 8010a0e:	6010      	str	r0, [r2, #0]
 8010a10:	7019      	strb	r1, [r3, #0]
 8010a12:	4608      	mov	r0, r1
 8010a14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a18:	4770      	bx	lr

08010a1a <__sfputs_r>:
 8010a1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a1c:	4606      	mov	r6, r0
 8010a1e:	460f      	mov	r7, r1
 8010a20:	4614      	mov	r4, r2
 8010a22:	18d5      	adds	r5, r2, r3
 8010a24:	42ac      	cmp	r4, r5
 8010a26:	d101      	bne.n	8010a2c <__sfputs_r+0x12>
 8010a28:	2000      	movs	r0, #0
 8010a2a:	e007      	b.n	8010a3c <__sfputs_r+0x22>
 8010a2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a30:	463a      	mov	r2, r7
 8010a32:	4630      	mov	r0, r6
 8010a34:	f7ff ffda 	bl	80109ec <__sfputc_r>
 8010a38:	1c43      	adds	r3, r0, #1
 8010a3a:	d1f3      	bne.n	8010a24 <__sfputs_r+0xa>
 8010a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010a40 <_vfiprintf_r>:
 8010a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a44:	460d      	mov	r5, r1
 8010a46:	b09d      	sub	sp, #116	@ 0x74
 8010a48:	4614      	mov	r4, r2
 8010a4a:	4698      	mov	r8, r3
 8010a4c:	4606      	mov	r6, r0
 8010a4e:	b118      	cbz	r0, 8010a58 <_vfiprintf_r+0x18>
 8010a50:	6a03      	ldr	r3, [r0, #32]
 8010a52:	b90b      	cbnz	r3, 8010a58 <_vfiprintf_r+0x18>
 8010a54:	f7ff fdba 	bl	80105cc <__sinit>
 8010a58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010a5a:	07d9      	lsls	r1, r3, #31
 8010a5c:	d405      	bmi.n	8010a6a <_vfiprintf_r+0x2a>
 8010a5e:	89ab      	ldrh	r3, [r5, #12]
 8010a60:	059a      	lsls	r2, r3, #22
 8010a62:	d402      	bmi.n	8010a6a <_vfiprintf_r+0x2a>
 8010a64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010a66:	f7ff ff0a 	bl	801087e <__retarget_lock_acquire_recursive>
 8010a6a:	89ab      	ldrh	r3, [r5, #12]
 8010a6c:	071b      	lsls	r3, r3, #28
 8010a6e:	d501      	bpl.n	8010a74 <_vfiprintf_r+0x34>
 8010a70:	692b      	ldr	r3, [r5, #16]
 8010a72:	b99b      	cbnz	r3, 8010a9c <_vfiprintf_r+0x5c>
 8010a74:	4629      	mov	r1, r5
 8010a76:	4630      	mov	r0, r6
 8010a78:	f000 fb70 	bl	801115c <__swsetup_r>
 8010a7c:	b170      	cbz	r0, 8010a9c <_vfiprintf_r+0x5c>
 8010a7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010a80:	07dc      	lsls	r4, r3, #31
 8010a82:	d504      	bpl.n	8010a8e <_vfiprintf_r+0x4e>
 8010a84:	f04f 30ff 	mov.w	r0, #4294967295
 8010a88:	b01d      	add	sp, #116	@ 0x74
 8010a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a8e:	89ab      	ldrh	r3, [r5, #12]
 8010a90:	0598      	lsls	r0, r3, #22
 8010a92:	d4f7      	bmi.n	8010a84 <_vfiprintf_r+0x44>
 8010a94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010a96:	f7ff fef3 	bl	8010880 <__retarget_lock_release_recursive>
 8010a9a:	e7f3      	b.n	8010a84 <_vfiprintf_r+0x44>
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010aa0:	2320      	movs	r3, #32
 8010aa2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010aa6:	f8cd 800c 	str.w	r8, [sp, #12]
 8010aaa:	2330      	movs	r3, #48	@ 0x30
 8010aac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010c5c <_vfiprintf_r+0x21c>
 8010ab0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010ab4:	f04f 0901 	mov.w	r9, #1
 8010ab8:	4623      	mov	r3, r4
 8010aba:	469a      	mov	sl, r3
 8010abc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ac0:	b10a      	cbz	r2, 8010ac6 <_vfiprintf_r+0x86>
 8010ac2:	2a25      	cmp	r2, #37	@ 0x25
 8010ac4:	d1f9      	bne.n	8010aba <_vfiprintf_r+0x7a>
 8010ac6:	ebba 0b04 	subs.w	fp, sl, r4
 8010aca:	d00b      	beq.n	8010ae4 <_vfiprintf_r+0xa4>
 8010acc:	465b      	mov	r3, fp
 8010ace:	4622      	mov	r2, r4
 8010ad0:	4629      	mov	r1, r5
 8010ad2:	4630      	mov	r0, r6
 8010ad4:	f7ff ffa1 	bl	8010a1a <__sfputs_r>
 8010ad8:	3001      	adds	r0, #1
 8010ada:	f000 80a7 	beq.w	8010c2c <_vfiprintf_r+0x1ec>
 8010ade:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010ae0:	445a      	add	r2, fp
 8010ae2:	9209      	str	r2, [sp, #36]	@ 0x24
 8010ae4:	f89a 3000 	ldrb.w	r3, [sl]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	f000 809f 	beq.w	8010c2c <_vfiprintf_r+0x1ec>
 8010aee:	2300      	movs	r3, #0
 8010af0:	f04f 32ff 	mov.w	r2, #4294967295
 8010af4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010af8:	f10a 0a01 	add.w	sl, sl, #1
 8010afc:	9304      	str	r3, [sp, #16]
 8010afe:	9307      	str	r3, [sp, #28]
 8010b00:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010b04:	931a      	str	r3, [sp, #104]	@ 0x68
 8010b06:	4654      	mov	r4, sl
 8010b08:	2205      	movs	r2, #5
 8010b0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b0e:	4853      	ldr	r0, [pc, #332]	@ (8010c5c <_vfiprintf_r+0x21c>)
 8010b10:	f7ef fb6e 	bl	80001f0 <memchr>
 8010b14:	9a04      	ldr	r2, [sp, #16]
 8010b16:	b9d8      	cbnz	r0, 8010b50 <_vfiprintf_r+0x110>
 8010b18:	06d1      	lsls	r1, r2, #27
 8010b1a:	bf44      	itt	mi
 8010b1c:	2320      	movmi	r3, #32
 8010b1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010b22:	0713      	lsls	r3, r2, #28
 8010b24:	bf44      	itt	mi
 8010b26:	232b      	movmi	r3, #43	@ 0x2b
 8010b28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010b2c:	f89a 3000 	ldrb.w	r3, [sl]
 8010b30:	2b2a      	cmp	r3, #42	@ 0x2a
 8010b32:	d015      	beq.n	8010b60 <_vfiprintf_r+0x120>
 8010b34:	9a07      	ldr	r2, [sp, #28]
 8010b36:	4654      	mov	r4, sl
 8010b38:	2000      	movs	r0, #0
 8010b3a:	f04f 0c0a 	mov.w	ip, #10
 8010b3e:	4621      	mov	r1, r4
 8010b40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010b44:	3b30      	subs	r3, #48	@ 0x30
 8010b46:	2b09      	cmp	r3, #9
 8010b48:	d94b      	bls.n	8010be2 <_vfiprintf_r+0x1a2>
 8010b4a:	b1b0      	cbz	r0, 8010b7a <_vfiprintf_r+0x13a>
 8010b4c:	9207      	str	r2, [sp, #28]
 8010b4e:	e014      	b.n	8010b7a <_vfiprintf_r+0x13a>
 8010b50:	eba0 0308 	sub.w	r3, r0, r8
 8010b54:	fa09 f303 	lsl.w	r3, r9, r3
 8010b58:	4313      	orrs	r3, r2
 8010b5a:	9304      	str	r3, [sp, #16]
 8010b5c:	46a2      	mov	sl, r4
 8010b5e:	e7d2      	b.n	8010b06 <_vfiprintf_r+0xc6>
 8010b60:	9b03      	ldr	r3, [sp, #12]
 8010b62:	1d19      	adds	r1, r3, #4
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	9103      	str	r1, [sp, #12]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	bfbb      	ittet	lt
 8010b6c:	425b      	neglt	r3, r3
 8010b6e:	f042 0202 	orrlt.w	r2, r2, #2
 8010b72:	9307      	strge	r3, [sp, #28]
 8010b74:	9307      	strlt	r3, [sp, #28]
 8010b76:	bfb8      	it	lt
 8010b78:	9204      	strlt	r2, [sp, #16]
 8010b7a:	7823      	ldrb	r3, [r4, #0]
 8010b7c:	2b2e      	cmp	r3, #46	@ 0x2e
 8010b7e:	d10a      	bne.n	8010b96 <_vfiprintf_r+0x156>
 8010b80:	7863      	ldrb	r3, [r4, #1]
 8010b82:	2b2a      	cmp	r3, #42	@ 0x2a
 8010b84:	d132      	bne.n	8010bec <_vfiprintf_r+0x1ac>
 8010b86:	9b03      	ldr	r3, [sp, #12]
 8010b88:	1d1a      	adds	r2, r3, #4
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	9203      	str	r2, [sp, #12]
 8010b8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010b92:	3402      	adds	r4, #2
 8010b94:	9305      	str	r3, [sp, #20]
 8010b96:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010c6c <_vfiprintf_r+0x22c>
 8010b9a:	7821      	ldrb	r1, [r4, #0]
 8010b9c:	2203      	movs	r2, #3
 8010b9e:	4650      	mov	r0, sl
 8010ba0:	f7ef fb26 	bl	80001f0 <memchr>
 8010ba4:	b138      	cbz	r0, 8010bb6 <_vfiprintf_r+0x176>
 8010ba6:	9b04      	ldr	r3, [sp, #16]
 8010ba8:	eba0 000a 	sub.w	r0, r0, sl
 8010bac:	2240      	movs	r2, #64	@ 0x40
 8010bae:	4082      	lsls	r2, r0
 8010bb0:	4313      	orrs	r3, r2
 8010bb2:	3401      	adds	r4, #1
 8010bb4:	9304      	str	r3, [sp, #16]
 8010bb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010bba:	4829      	ldr	r0, [pc, #164]	@ (8010c60 <_vfiprintf_r+0x220>)
 8010bbc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010bc0:	2206      	movs	r2, #6
 8010bc2:	f7ef fb15 	bl	80001f0 <memchr>
 8010bc6:	2800      	cmp	r0, #0
 8010bc8:	d03f      	beq.n	8010c4a <_vfiprintf_r+0x20a>
 8010bca:	4b26      	ldr	r3, [pc, #152]	@ (8010c64 <_vfiprintf_r+0x224>)
 8010bcc:	bb1b      	cbnz	r3, 8010c16 <_vfiprintf_r+0x1d6>
 8010bce:	9b03      	ldr	r3, [sp, #12]
 8010bd0:	3307      	adds	r3, #7
 8010bd2:	f023 0307 	bic.w	r3, r3, #7
 8010bd6:	3308      	adds	r3, #8
 8010bd8:	9303      	str	r3, [sp, #12]
 8010bda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010bdc:	443b      	add	r3, r7
 8010bde:	9309      	str	r3, [sp, #36]	@ 0x24
 8010be0:	e76a      	b.n	8010ab8 <_vfiprintf_r+0x78>
 8010be2:	fb0c 3202 	mla	r2, ip, r2, r3
 8010be6:	460c      	mov	r4, r1
 8010be8:	2001      	movs	r0, #1
 8010bea:	e7a8      	b.n	8010b3e <_vfiprintf_r+0xfe>
 8010bec:	2300      	movs	r3, #0
 8010bee:	3401      	adds	r4, #1
 8010bf0:	9305      	str	r3, [sp, #20]
 8010bf2:	4619      	mov	r1, r3
 8010bf4:	f04f 0c0a 	mov.w	ip, #10
 8010bf8:	4620      	mov	r0, r4
 8010bfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010bfe:	3a30      	subs	r2, #48	@ 0x30
 8010c00:	2a09      	cmp	r2, #9
 8010c02:	d903      	bls.n	8010c0c <_vfiprintf_r+0x1cc>
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d0c6      	beq.n	8010b96 <_vfiprintf_r+0x156>
 8010c08:	9105      	str	r1, [sp, #20]
 8010c0a:	e7c4      	b.n	8010b96 <_vfiprintf_r+0x156>
 8010c0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010c10:	4604      	mov	r4, r0
 8010c12:	2301      	movs	r3, #1
 8010c14:	e7f0      	b.n	8010bf8 <_vfiprintf_r+0x1b8>
 8010c16:	ab03      	add	r3, sp, #12
 8010c18:	9300      	str	r3, [sp, #0]
 8010c1a:	462a      	mov	r2, r5
 8010c1c:	4b12      	ldr	r3, [pc, #72]	@ (8010c68 <_vfiprintf_r+0x228>)
 8010c1e:	a904      	add	r1, sp, #16
 8010c20:	4630      	mov	r0, r6
 8010c22:	f3af 8000 	nop.w
 8010c26:	4607      	mov	r7, r0
 8010c28:	1c78      	adds	r0, r7, #1
 8010c2a:	d1d6      	bne.n	8010bda <_vfiprintf_r+0x19a>
 8010c2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010c2e:	07d9      	lsls	r1, r3, #31
 8010c30:	d405      	bmi.n	8010c3e <_vfiprintf_r+0x1fe>
 8010c32:	89ab      	ldrh	r3, [r5, #12]
 8010c34:	059a      	lsls	r2, r3, #22
 8010c36:	d402      	bmi.n	8010c3e <_vfiprintf_r+0x1fe>
 8010c38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010c3a:	f7ff fe21 	bl	8010880 <__retarget_lock_release_recursive>
 8010c3e:	89ab      	ldrh	r3, [r5, #12]
 8010c40:	065b      	lsls	r3, r3, #25
 8010c42:	f53f af1f 	bmi.w	8010a84 <_vfiprintf_r+0x44>
 8010c46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010c48:	e71e      	b.n	8010a88 <_vfiprintf_r+0x48>
 8010c4a:	ab03      	add	r3, sp, #12
 8010c4c:	9300      	str	r3, [sp, #0]
 8010c4e:	462a      	mov	r2, r5
 8010c50:	4b05      	ldr	r3, [pc, #20]	@ (8010c68 <_vfiprintf_r+0x228>)
 8010c52:	a904      	add	r1, sp, #16
 8010c54:	4630      	mov	r0, r6
 8010c56:	f000 f879 	bl	8010d4c <_printf_i>
 8010c5a:	e7e4      	b.n	8010c26 <_vfiprintf_r+0x1e6>
 8010c5c:	08011e6f 	.word	0x08011e6f
 8010c60:	08011e79 	.word	0x08011e79
 8010c64:	00000000 	.word	0x00000000
 8010c68:	08010a1b 	.word	0x08010a1b
 8010c6c:	08011e75 	.word	0x08011e75

08010c70 <_printf_common>:
 8010c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c74:	4616      	mov	r6, r2
 8010c76:	4698      	mov	r8, r3
 8010c78:	688a      	ldr	r2, [r1, #8]
 8010c7a:	690b      	ldr	r3, [r1, #16]
 8010c7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010c80:	4293      	cmp	r3, r2
 8010c82:	bfb8      	it	lt
 8010c84:	4613      	movlt	r3, r2
 8010c86:	6033      	str	r3, [r6, #0]
 8010c88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010c8c:	4607      	mov	r7, r0
 8010c8e:	460c      	mov	r4, r1
 8010c90:	b10a      	cbz	r2, 8010c96 <_printf_common+0x26>
 8010c92:	3301      	adds	r3, #1
 8010c94:	6033      	str	r3, [r6, #0]
 8010c96:	6823      	ldr	r3, [r4, #0]
 8010c98:	0699      	lsls	r1, r3, #26
 8010c9a:	bf42      	ittt	mi
 8010c9c:	6833      	ldrmi	r3, [r6, #0]
 8010c9e:	3302      	addmi	r3, #2
 8010ca0:	6033      	strmi	r3, [r6, #0]
 8010ca2:	6825      	ldr	r5, [r4, #0]
 8010ca4:	f015 0506 	ands.w	r5, r5, #6
 8010ca8:	d106      	bne.n	8010cb8 <_printf_common+0x48>
 8010caa:	f104 0a19 	add.w	sl, r4, #25
 8010cae:	68e3      	ldr	r3, [r4, #12]
 8010cb0:	6832      	ldr	r2, [r6, #0]
 8010cb2:	1a9b      	subs	r3, r3, r2
 8010cb4:	42ab      	cmp	r3, r5
 8010cb6:	dc26      	bgt.n	8010d06 <_printf_common+0x96>
 8010cb8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010cbc:	6822      	ldr	r2, [r4, #0]
 8010cbe:	3b00      	subs	r3, #0
 8010cc0:	bf18      	it	ne
 8010cc2:	2301      	movne	r3, #1
 8010cc4:	0692      	lsls	r2, r2, #26
 8010cc6:	d42b      	bmi.n	8010d20 <_printf_common+0xb0>
 8010cc8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010ccc:	4641      	mov	r1, r8
 8010cce:	4638      	mov	r0, r7
 8010cd0:	47c8      	blx	r9
 8010cd2:	3001      	adds	r0, #1
 8010cd4:	d01e      	beq.n	8010d14 <_printf_common+0xa4>
 8010cd6:	6823      	ldr	r3, [r4, #0]
 8010cd8:	6922      	ldr	r2, [r4, #16]
 8010cda:	f003 0306 	and.w	r3, r3, #6
 8010cde:	2b04      	cmp	r3, #4
 8010ce0:	bf02      	ittt	eq
 8010ce2:	68e5      	ldreq	r5, [r4, #12]
 8010ce4:	6833      	ldreq	r3, [r6, #0]
 8010ce6:	1aed      	subeq	r5, r5, r3
 8010ce8:	68a3      	ldr	r3, [r4, #8]
 8010cea:	bf0c      	ite	eq
 8010cec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010cf0:	2500      	movne	r5, #0
 8010cf2:	4293      	cmp	r3, r2
 8010cf4:	bfc4      	itt	gt
 8010cf6:	1a9b      	subgt	r3, r3, r2
 8010cf8:	18ed      	addgt	r5, r5, r3
 8010cfa:	2600      	movs	r6, #0
 8010cfc:	341a      	adds	r4, #26
 8010cfe:	42b5      	cmp	r5, r6
 8010d00:	d11a      	bne.n	8010d38 <_printf_common+0xc8>
 8010d02:	2000      	movs	r0, #0
 8010d04:	e008      	b.n	8010d18 <_printf_common+0xa8>
 8010d06:	2301      	movs	r3, #1
 8010d08:	4652      	mov	r2, sl
 8010d0a:	4641      	mov	r1, r8
 8010d0c:	4638      	mov	r0, r7
 8010d0e:	47c8      	blx	r9
 8010d10:	3001      	adds	r0, #1
 8010d12:	d103      	bne.n	8010d1c <_printf_common+0xac>
 8010d14:	f04f 30ff 	mov.w	r0, #4294967295
 8010d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d1c:	3501      	adds	r5, #1
 8010d1e:	e7c6      	b.n	8010cae <_printf_common+0x3e>
 8010d20:	18e1      	adds	r1, r4, r3
 8010d22:	1c5a      	adds	r2, r3, #1
 8010d24:	2030      	movs	r0, #48	@ 0x30
 8010d26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010d2a:	4422      	add	r2, r4
 8010d2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010d30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010d34:	3302      	adds	r3, #2
 8010d36:	e7c7      	b.n	8010cc8 <_printf_common+0x58>
 8010d38:	2301      	movs	r3, #1
 8010d3a:	4622      	mov	r2, r4
 8010d3c:	4641      	mov	r1, r8
 8010d3e:	4638      	mov	r0, r7
 8010d40:	47c8      	blx	r9
 8010d42:	3001      	adds	r0, #1
 8010d44:	d0e6      	beq.n	8010d14 <_printf_common+0xa4>
 8010d46:	3601      	adds	r6, #1
 8010d48:	e7d9      	b.n	8010cfe <_printf_common+0x8e>
	...

08010d4c <_printf_i>:
 8010d4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010d50:	7e0f      	ldrb	r7, [r1, #24]
 8010d52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010d54:	2f78      	cmp	r7, #120	@ 0x78
 8010d56:	4691      	mov	r9, r2
 8010d58:	4680      	mov	r8, r0
 8010d5a:	460c      	mov	r4, r1
 8010d5c:	469a      	mov	sl, r3
 8010d5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010d62:	d807      	bhi.n	8010d74 <_printf_i+0x28>
 8010d64:	2f62      	cmp	r7, #98	@ 0x62
 8010d66:	d80a      	bhi.n	8010d7e <_printf_i+0x32>
 8010d68:	2f00      	cmp	r7, #0
 8010d6a:	f000 80d1 	beq.w	8010f10 <_printf_i+0x1c4>
 8010d6e:	2f58      	cmp	r7, #88	@ 0x58
 8010d70:	f000 80b8 	beq.w	8010ee4 <_printf_i+0x198>
 8010d74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010d78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010d7c:	e03a      	b.n	8010df4 <_printf_i+0xa8>
 8010d7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010d82:	2b15      	cmp	r3, #21
 8010d84:	d8f6      	bhi.n	8010d74 <_printf_i+0x28>
 8010d86:	a101      	add	r1, pc, #4	@ (adr r1, 8010d8c <_printf_i+0x40>)
 8010d88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010d8c:	08010de5 	.word	0x08010de5
 8010d90:	08010df9 	.word	0x08010df9
 8010d94:	08010d75 	.word	0x08010d75
 8010d98:	08010d75 	.word	0x08010d75
 8010d9c:	08010d75 	.word	0x08010d75
 8010da0:	08010d75 	.word	0x08010d75
 8010da4:	08010df9 	.word	0x08010df9
 8010da8:	08010d75 	.word	0x08010d75
 8010dac:	08010d75 	.word	0x08010d75
 8010db0:	08010d75 	.word	0x08010d75
 8010db4:	08010d75 	.word	0x08010d75
 8010db8:	08010ef7 	.word	0x08010ef7
 8010dbc:	08010e23 	.word	0x08010e23
 8010dc0:	08010eb1 	.word	0x08010eb1
 8010dc4:	08010d75 	.word	0x08010d75
 8010dc8:	08010d75 	.word	0x08010d75
 8010dcc:	08010f19 	.word	0x08010f19
 8010dd0:	08010d75 	.word	0x08010d75
 8010dd4:	08010e23 	.word	0x08010e23
 8010dd8:	08010d75 	.word	0x08010d75
 8010ddc:	08010d75 	.word	0x08010d75
 8010de0:	08010eb9 	.word	0x08010eb9
 8010de4:	6833      	ldr	r3, [r6, #0]
 8010de6:	1d1a      	adds	r2, r3, #4
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	6032      	str	r2, [r6, #0]
 8010dec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010df0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010df4:	2301      	movs	r3, #1
 8010df6:	e09c      	b.n	8010f32 <_printf_i+0x1e6>
 8010df8:	6833      	ldr	r3, [r6, #0]
 8010dfa:	6820      	ldr	r0, [r4, #0]
 8010dfc:	1d19      	adds	r1, r3, #4
 8010dfe:	6031      	str	r1, [r6, #0]
 8010e00:	0606      	lsls	r6, r0, #24
 8010e02:	d501      	bpl.n	8010e08 <_printf_i+0xbc>
 8010e04:	681d      	ldr	r5, [r3, #0]
 8010e06:	e003      	b.n	8010e10 <_printf_i+0xc4>
 8010e08:	0645      	lsls	r5, r0, #25
 8010e0a:	d5fb      	bpl.n	8010e04 <_printf_i+0xb8>
 8010e0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010e10:	2d00      	cmp	r5, #0
 8010e12:	da03      	bge.n	8010e1c <_printf_i+0xd0>
 8010e14:	232d      	movs	r3, #45	@ 0x2d
 8010e16:	426d      	negs	r5, r5
 8010e18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010e1c:	4858      	ldr	r0, [pc, #352]	@ (8010f80 <_printf_i+0x234>)
 8010e1e:	230a      	movs	r3, #10
 8010e20:	e011      	b.n	8010e46 <_printf_i+0xfa>
 8010e22:	6821      	ldr	r1, [r4, #0]
 8010e24:	6833      	ldr	r3, [r6, #0]
 8010e26:	0608      	lsls	r0, r1, #24
 8010e28:	f853 5b04 	ldr.w	r5, [r3], #4
 8010e2c:	d402      	bmi.n	8010e34 <_printf_i+0xe8>
 8010e2e:	0649      	lsls	r1, r1, #25
 8010e30:	bf48      	it	mi
 8010e32:	b2ad      	uxthmi	r5, r5
 8010e34:	2f6f      	cmp	r7, #111	@ 0x6f
 8010e36:	4852      	ldr	r0, [pc, #328]	@ (8010f80 <_printf_i+0x234>)
 8010e38:	6033      	str	r3, [r6, #0]
 8010e3a:	bf14      	ite	ne
 8010e3c:	230a      	movne	r3, #10
 8010e3e:	2308      	moveq	r3, #8
 8010e40:	2100      	movs	r1, #0
 8010e42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010e46:	6866      	ldr	r6, [r4, #4]
 8010e48:	60a6      	str	r6, [r4, #8]
 8010e4a:	2e00      	cmp	r6, #0
 8010e4c:	db05      	blt.n	8010e5a <_printf_i+0x10e>
 8010e4e:	6821      	ldr	r1, [r4, #0]
 8010e50:	432e      	orrs	r6, r5
 8010e52:	f021 0104 	bic.w	r1, r1, #4
 8010e56:	6021      	str	r1, [r4, #0]
 8010e58:	d04b      	beq.n	8010ef2 <_printf_i+0x1a6>
 8010e5a:	4616      	mov	r6, r2
 8010e5c:	fbb5 f1f3 	udiv	r1, r5, r3
 8010e60:	fb03 5711 	mls	r7, r3, r1, r5
 8010e64:	5dc7      	ldrb	r7, [r0, r7]
 8010e66:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010e6a:	462f      	mov	r7, r5
 8010e6c:	42bb      	cmp	r3, r7
 8010e6e:	460d      	mov	r5, r1
 8010e70:	d9f4      	bls.n	8010e5c <_printf_i+0x110>
 8010e72:	2b08      	cmp	r3, #8
 8010e74:	d10b      	bne.n	8010e8e <_printf_i+0x142>
 8010e76:	6823      	ldr	r3, [r4, #0]
 8010e78:	07df      	lsls	r7, r3, #31
 8010e7a:	d508      	bpl.n	8010e8e <_printf_i+0x142>
 8010e7c:	6923      	ldr	r3, [r4, #16]
 8010e7e:	6861      	ldr	r1, [r4, #4]
 8010e80:	4299      	cmp	r1, r3
 8010e82:	bfde      	ittt	le
 8010e84:	2330      	movle	r3, #48	@ 0x30
 8010e86:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010e8a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010e8e:	1b92      	subs	r2, r2, r6
 8010e90:	6122      	str	r2, [r4, #16]
 8010e92:	f8cd a000 	str.w	sl, [sp]
 8010e96:	464b      	mov	r3, r9
 8010e98:	aa03      	add	r2, sp, #12
 8010e9a:	4621      	mov	r1, r4
 8010e9c:	4640      	mov	r0, r8
 8010e9e:	f7ff fee7 	bl	8010c70 <_printf_common>
 8010ea2:	3001      	adds	r0, #1
 8010ea4:	d14a      	bne.n	8010f3c <_printf_i+0x1f0>
 8010ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8010eaa:	b004      	add	sp, #16
 8010eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010eb0:	6823      	ldr	r3, [r4, #0]
 8010eb2:	f043 0320 	orr.w	r3, r3, #32
 8010eb6:	6023      	str	r3, [r4, #0]
 8010eb8:	4832      	ldr	r0, [pc, #200]	@ (8010f84 <_printf_i+0x238>)
 8010eba:	2778      	movs	r7, #120	@ 0x78
 8010ebc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010ec0:	6823      	ldr	r3, [r4, #0]
 8010ec2:	6831      	ldr	r1, [r6, #0]
 8010ec4:	061f      	lsls	r7, r3, #24
 8010ec6:	f851 5b04 	ldr.w	r5, [r1], #4
 8010eca:	d402      	bmi.n	8010ed2 <_printf_i+0x186>
 8010ecc:	065f      	lsls	r7, r3, #25
 8010ece:	bf48      	it	mi
 8010ed0:	b2ad      	uxthmi	r5, r5
 8010ed2:	6031      	str	r1, [r6, #0]
 8010ed4:	07d9      	lsls	r1, r3, #31
 8010ed6:	bf44      	itt	mi
 8010ed8:	f043 0320 	orrmi.w	r3, r3, #32
 8010edc:	6023      	strmi	r3, [r4, #0]
 8010ede:	b11d      	cbz	r5, 8010ee8 <_printf_i+0x19c>
 8010ee0:	2310      	movs	r3, #16
 8010ee2:	e7ad      	b.n	8010e40 <_printf_i+0xf4>
 8010ee4:	4826      	ldr	r0, [pc, #152]	@ (8010f80 <_printf_i+0x234>)
 8010ee6:	e7e9      	b.n	8010ebc <_printf_i+0x170>
 8010ee8:	6823      	ldr	r3, [r4, #0]
 8010eea:	f023 0320 	bic.w	r3, r3, #32
 8010eee:	6023      	str	r3, [r4, #0]
 8010ef0:	e7f6      	b.n	8010ee0 <_printf_i+0x194>
 8010ef2:	4616      	mov	r6, r2
 8010ef4:	e7bd      	b.n	8010e72 <_printf_i+0x126>
 8010ef6:	6833      	ldr	r3, [r6, #0]
 8010ef8:	6825      	ldr	r5, [r4, #0]
 8010efa:	6961      	ldr	r1, [r4, #20]
 8010efc:	1d18      	adds	r0, r3, #4
 8010efe:	6030      	str	r0, [r6, #0]
 8010f00:	062e      	lsls	r6, r5, #24
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	d501      	bpl.n	8010f0a <_printf_i+0x1be>
 8010f06:	6019      	str	r1, [r3, #0]
 8010f08:	e002      	b.n	8010f10 <_printf_i+0x1c4>
 8010f0a:	0668      	lsls	r0, r5, #25
 8010f0c:	d5fb      	bpl.n	8010f06 <_printf_i+0x1ba>
 8010f0e:	8019      	strh	r1, [r3, #0]
 8010f10:	2300      	movs	r3, #0
 8010f12:	6123      	str	r3, [r4, #16]
 8010f14:	4616      	mov	r6, r2
 8010f16:	e7bc      	b.n	8010e92 <_printf_i+0x146>
 8010f18:	6833      	ldr	r3, [r6, #0]
 8010f1a:	1d1a      	adds	r2, r3, #4
 8010f1c:	6032      	str	r2, [r6, #0]
 8010f1e:	681e      	ldr	r6, [r3, #0]
 8010f20:	6862      	ldr	r2, [r4, #4]
 8010f22:	2100      	movs	r1, #0
 8010f24:	4630      	mov	r0, r6
 8010f26:	f7ef f963 	bl	80001f0 <memchr>
 8010f2a:	b108      	cbz	r0, 8010f30 <_printf_i+0x1e4>
 8010f2c:	1b80      	subs	r0, r0, r6
 8010f2e:	6060      	str	r0, [r4, #4]
 8010f30:	6863      	ldr	r3, [r4, #4]
 8010f32:	6123      	str	r3, [r4, #16]
 8010f34:	2300      	movs	r3, #0
 8010f36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010f3a:	e7aa      	b.n	8010e92 <_printf_i+0x146>
 8010f3c:	6923      	ldr	r3, [r4, #16]
 8010f3e:	4632      	mov	r2, r6
 8010f40:	4649      	mov	r1, r9
 8010f42:	4640      	mov	r0, r8
 8010f44:	47d0      	blx	sl
 8010f46:	3001      	adds	r0, #1
 8010f48:	d0ad      	beq.n	8010ea6 <_printf_i+0x15a>
 8010f4a:	6823      	ldr	r3, [r4, #0]
 8010f4c:	079b      	lsls	r3, r3, #30
 8010f4e:	d413      	bmi.n	8010f78 <_printf_i+0x22c>
 8010f50:	68e0      	ldr	r0, [r4, #12]
 8010f52:	9b03      	ldr	r3, [sp, #12]
 8010f54:	4298      	cmp	r0, r3
 8010f56:	bfb8      	it	lt
 8010f58:	4618      	movlt	r0, r3
 8010f5a:	e7a6      	b.n	8010eaa <_printf_i+0x15e>
 8010f5c:	2301      	movs	r3, #1
 8010f5e:	4632      	mov	r2, r6
 8010f60:	4649      	mov	r1, r9
 8010f62:	4640      	mov	r0, r8
 8010f64:	47d0      	blx	sl
 8010f66:	3001      	adds	r0, #1
 8010f68:	d09d      	beq.n	8010ea6 <_printf_i+0x15a>
 8010f6a:	3501      	adds	r5, #1
 8010f6c:	68e3      	ldr	r3, [r4, #12]
 8010f6e:	9903      	ldr	r1, [sp, #12]
 8010f70:	1a5b      	subs	r3, r3, r1
 8010f72:	42ab      	cmp	r3, r5
 8010f74:	dcf2      	bgt.n	8010f5c <_printf_i+0x210>
 8010f76:	e7eb      	b.n	8010f50 <_printf_i+0x204>
 8010f78:	2500      	movs	r5, #0
 8010f7a:	f104 0619 	add.w	r6, r4, #25
 8010f7e:	e7f5      	b.n	8010f6c <_printf_i+0x220>
 8010f80:	08011e80 	.word	0x08011e80
 8010f84:	08011e91 	.word	0x08011e91

08010f88 <__sflush_r>:
 8010f88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f90:	0716      	lsls	r6, r2, #28
 8010f92:	4605      	mov	r5, r0
 8010f94:	460c      	mov	r4, r1
 8010f96:	d454      	bmi.n	8011042 <__sflush_r+0xba>
 8010f98:	684b      	ldr	r3, [r1, #4]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	dc02      	bgt.n	8010fa4 <__sflush_r+0x1c>
 8010f9e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	dd48      	ble.n	8011036 <__sflush_r+0xae>
 8010fa4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010fa6:	2e00      	cmp	r6, #0
 8010fa8:	d045      	beq.n	8011036 <__sflush_r+0xae>
 8010faa:	2300      	movs	r3, #0
 8010fac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010fb0:	682f      	ldr	r7, [r5, #0]
 8010fb2:	6a21      	ldr	r1, [r4, #32]
 8010fb4:	602b      	str	r3, [r5, #0]
 8010fb6:	d030      	beq.n	801101a <__sflush_r+0x92>
 8010fb8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010fba:	89a3      	ldrh	r3, [r4, #12]
 8010fbc:	0759      	lsls	r1, r3, #29
 8010fbe:	d505      	bpl.n	8010fcc <__sflush_r+0x44>
 8010fc0:	6863      	ldr	r3, [r4, #4]
 8010fc2:	1ad2      	subs	r2, r2, r3
 8010fc4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010fc6:	b10b      	cbz	r3, 8010fcc <__sflush_r+0x44>
 8010fc8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010fca:	1ad2      	subs	r2, r2, r3
 8010fcc:	2300      	movs	r3, #0
 8010fce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010fd0:	6a21      	ldr	r1, [r4, #32]
 8010fd2:	4628      	mov	r0, r5
 8010fd4:	47b0      	blx	r6
 8010fd6:	1c43      	adds	r3, r0, #1
 8010fd8:	89a3      	ldrh	r3, [r4, #12]
 8010fda:	d106      	bne.n	8010fea <__sflush_r+0x62>
 8010fdc:	6829      	ldr	r1, [r5, #0]
 8010fde:	291d      	cmp	r1, #29
 8010fe0:	d82b      	bhi.n	801103a <__sflush_r+0xb2>
 8010fe2:	4a2a      	ldr	r2, [pc, #168]	@ (801108c <__sflush_r+0x104>)
 8010fe4:	40ca      	lsrs	r2, r1
 8010fe6:	07d6      	lsls	r6, r2, #31
 8010fe8:	d527      	bpl.n	801103a <__sflush_r+0xb2>
 8010fea:	2200      	movs	r2, #0
 8010fec:	6062      	str	r2, [r4, #4]
 8010fee:	04d9      	lsls	r1, r3, #19
 8010ff0:	6922      	ldr	r2, [r4, #16]
 8010ff2:	6022      	str	r2, [r4, #0]
 8010ff4:	d504      	bpl.n	8011000 <__sflush_r+0x78>
 8010ff6:	1c42      	adds	r2, r0, #1
 8010ff8:	d101      	bne.n	8010ffe <__sflush_r+0x76>
 8010ffa:	682b      	ldr	r3, [r5, #0]
 8010ffc:	b903      	cbnz	r3, 8011000 <__sflush_r+0x78>
 8010ffe:	6560      	str	r0, [r4, #84]	@ 0x54
 8011000:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011002:	602f      	str	r7, [r5, #0]
 8011004:	b1b9      	cbz	r1, 8011036 <__sflush_r+0xae>
 8011006:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801100a:	4299      	cmp	r1, r3
 801100c:	d002      	beq.n	8011014 <__sflush_r+0x8c>
 801100e:	4628      	mov	r0, r5
 8011010:	f7ff fca2 	bl	8010958 <_free_r>
 8011014:	2300      	movs	r3, #0
 8011016:	6363      	str	r3, [r4, #52]	@ 0x34
 8011018:	e00d      	b.n	8011036 <__sflush_r+0xae>
 801101a:	2301      	movs	r3, #1
 801101c:	4628      	mov	r0, r5
 801101e:	47b0      	blx	r6
 8011020:	4602      	mov	r2, r0
 8011022:	1c50      	adds	r0, r2, #1
 8011024:	d1c9      	bne.n	8010fba <__sflush_r+0x32>
 8011026:	682b      	ldr	r3, [r5, #0]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d0c6      	beq.n	8010fba <__sflush_r+0x32>
 801102c:	2b1d      	cmp	r3, #29
 801102e:	d001      	beq.n	8011034 <__sflush_r+0xac>
 8011030:	2b16      	cmp	r3, #22
 8011032:	d11e      	bne.n	8011072 <__sflush_r+0xea>
 8011034:	602f      	str	r7, [r5, #0]
 8011036:	2000      	movs	r0, #0
 8011038:	e022      	b.n	8011080 <__sflush_r+0xf8>
 801103a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801103e:	b21b      	sxth	r3, r3
 8011040:	e01b      	b.n	801107a <__sflush_r+0xf2>
 8011042:	690f      	ldr	r7, [r1, #16]
 8011044:	2f00      	cmp	r7, #0
 8011046:	d0f6      	beq.n	8011036 <__sflush_r+0xae>
 8011048:	0793      	lsls	r3, r2, #30
 801104a:	680e      	ldr	r6, [r1, #0]
 801104c:	bf08      	it	eq
 801104e:	694b      	ldreq	r3, [r1, #20]
 8011050:	600f      	str	r7, [r1, #0]
 8011052:	bf18      	it	ne
 8011054:	2300      	movne	r3, #0
 8011056:	eba6 0807 	sub.w	r8, r6, r7
 801105a:	608b      	str	r3, [r1, #8]
 801105c:	f1b8 0f00 	cmp.w	r8, #0
 8011060:	dde9      	ble.n	8011036 <__sflush_r+0xae>
 8011062:	6a21      	ldr	r1, [r4, #32]
 8011064:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011066:	4643      	mov	r3, r8
 8011068:	463a      	mov	r2, r7
 801106a:	4628      	mov	r0, r5
 801106c:	47b0      	blx	r6
 801106e:	2800      	cmp	r0, #0
 8011070:	dc08      	bgt.n	8011084 <__sflush_r+0xfc>
 8011072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011076:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801107a:	81a3      	strh	r3, [r4, #12]
 801107c:	f04f 30ff 	mov.w	r0, #4294967295
 8011080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011084:	4407      	add	r7, r0
 8011086:	eba8 0800 	sub.w	r8, r8, r0
 801108a:	e7e7      	b.n	801105c <__sflush_r+0xd4>
 801108c:	20400001 	.word	0x20400001

08011090 <_fflush_r>:
 8011090:	b538      	push	{r3, r4, r5, lr}
 8011092:	690b      	ldr	r3, [r1, #16]
 8011094:	4605      	mov	r5, r0
 8011096:	460c      	mov	r4, r1
 8011098:	b913      	cbnz	r3, 80110a0 <_fflush_r+0x10>
 801109a:	2500      	movs	r5, #0
 801109c:	4628      	mov	r0, r5
 801109e:	bd38      	pop	{r3, r4, r5, pc}
 80110a0:	b118      	cbz	r0, 80110aa <_fflush_r+0x1a>
 80110a2:	6a03      	ldr	r3, [r0, #32]
 80110a4:	b90b      	cbnz	r3, 80110aa <_fflush_r+0x1a>
 80110a6:	f7ff fa91 	bl	80105cc <__sinit>
 80110aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d0f3      	beq.n	801109a <_fflush_r+0xa>
 80110b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80110b4:	07d0      	lsls	r0, r2, #31
 80110b6:	d404      	bmi.n	80110c2 <_fflush_r+0x32>
 80110b8:	0599      	lsls	r1, r3, #22
 80110ba:	d402      	bmi.n	80110c2 <_fflush_r+0x32>
 80110bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80110be:	f7ff fbde 	bl	801087e <__retarget_lock_acquire_recursive>
 80110c2:	4628      	mov	r0, r5
 80110c4:	4621      	mov	r1, r4
 80110c6:	f7ff ff5f 	bl	8010f88 <__sflush_r>
 80110ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80110cc:	07da      	lsls	r2, r3, #31
 80110ce:	4605      	mov	r5, r0
 80110d0:	d4e4      	bmi.n	801109c <_fflush_r+0xc>
 80110d2:	89a3      	ldrh	r3, [r4, #12]
 80110d4:	059b      	lsls	r3, r3, #22
 80110d6:	d4e1      	bmi.n	801109c <_fflush_r+0xc>
 80110d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80110da:	f7ff fbd1 	bl	8010880 <__retarget_lock_release_recursive>
 80110de:	e7dd      	b.n	801109c <_fflush_r+0xc>

080110e0 <__swbuf_r>:
 80110e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110e2:	460e      	mov	r6, r1
 80110e4:	4614      	mov	r4, r2
 80110e6:	4605      	mov	r5, r0
 80110e8:	b118      	cbz	r0, 80110f2 <__swbuf_r+0x12>
 80110ea:	6a03      	ldr	r3, [r0, #32]
 80110ec:	b90b      	cbnz	r3, 80110f2 <__swbuf_r+0x12>
 80110ee:	f7ff fa6d 	bl	80105cc <__sinit>
 80110f2:	69a3      	ldr	r3, [r4, #24]
 80110f4:	60a3      	str	r3, [r4, #8]
 80110f6:	89a3      	ldrh	r3, [r4, #12]
 80110f8:	071a      	lsls	r2, r3, #28
 80110fa:	d501      	bpl.n	8011100 <__swbuf_r+0x20>
 80110fc:	6923      	ldr	r3, [r4, #16]
 80110fe:	b943      	cbnz	r3, 8011112 <__swbuf_r+0x32>
 8011100:	4621      	mov	r1, r4
 8011102:	4628      	mov	r0, r5
 8011104:	f000 f82a 	bl	801115c <__swsetup_r>
 8011108:	b118      	cbz	r0, 8011112 <__swbuf_r+0x32>
 801110a:	f04f 37ff 	mov.w	r7, #4294967295
 801110e:	4638      	mov	r0, r7
 8011110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011112:	6823      	ldr	r3, [r4, #0]
 8011114:	6922      	ldr	r2, [r4, #16]
 8011116:	1a98      	subs	r0, r3, r2
 8011118:	6963      	ldr	r3, [r4, #20]
 801111a:	b2f6      	uxtb	r6, r6
 801111c:	4283      	cmp	r3, r0
 801111e:	4637      	mov	r7, r6
 8011120:	dc05      	bgt.n	801112e <__swbuf_r+0x4e>
 8011122:	4621      	mov	r1, r4
 8011124:	4628      	mov	r0, r5
 8011126:	f7ff ffb3 	bl	8011090 <_fflush_r>
 801112a:	2800      	cmp	r0, #0
 801112c:	d1ed      	bne.n	801110a <__swbuf_r+0x2a>
 801112e:	68a3      	ldr	r3, [r4, #8]
 8011130:	3b01      	subs	r3, #1
 8011132:	60a3      	str	r3, [r4, #8]
 8011134:	6823      	ldr	r3, [r4, #0]
 8011136:	1c5a      	adds	r2, r3, #1
 8011138:	6022      	str	r2, [r4, #0]
 801113a:	701e      	strb	r6, [r3, #0]
 801113c:	6962      	ldr	r2, [r4, #20]
 801113e:	1c43      	adds	r3, r0, #1
 8011140:	429a      	cmp	r2, r3
 8011142:	d004      	beq.n	801114e <__swbuf_r+0x6e>
 8011144:	89a3      	ldrh	r3, [r4, #12]
 8011146:	07db      	lsls	r3, r3, #31
 8011148:	d5e1      	bpl.n	801110e <__swbuf_r+0x2e>
 801114a:	2e0a      	cmp	r6, #10
 801114c:	d1df      	bne.n	801110e <__swbuf_r+0x2e>
 801114e:	4621      	mov	r1, r4
 8011150:	4628      	mov	r0, r5
 8011152:	f7ff ff9d 	bl	8011090 <_fflush_r>
 8011156:	2800      	cmp	r0, #0
 8011158:	d0d9      	beq.n	801110e <__swbuf_r+0x2e>
 801115a:	e7d6      	b.n	801110a <__swbuf_r+0x2a>

0801115c <__swsetup_r>:
 801115c:	b538      	push	{r3, r4, r5, lr}
 801115e:	4b29      	ldr	r3, [pc, #164]	@ (8011204 <__swsetup_r+0xa8>)
 8011160:	4605      	mov	r5, r0
 8011162:	6818      	ldr	r0, [r3, #0]
 8011164:	460c      	mov	r4, r1
 8011166:	b118      	cbz	r0, 8011170 <__swsetup_r+0x14>
 8011168:	6a03      	ldr	r3, [r0, #32]
 801116a:	b90b      	cbnz	r3, 8011170 <__swsetup_r+0x14>
 801116c:	f7ff fa2e 	bl	80105cc <__sinit>
 8011170:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011174:	0719      	lsls	r1, r3, #28
 8011176:	d422      	bmi.n	80111be <__swsetup_r+0x62>
 8011178:	06da      	lsls	r2, r3, #27
 801117a:	d407      	bmi.n	801118c <__swsetup_r+0x30>
 801117c:	2209      	movs	r2, #9
 801117e:	602a      	str	r2, [r5, #0]
 8011180:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011184:	81a3      	strh	r3, [r4, #12]
 8011186:	f04f 30ff 	mov.w	r0, #4294967295
 801118a:	e033      	b.n	80111f4 <__swsetup_r+0x98>
 801118c:	0758      	lsls	r0, r3, #29
 801118e:	d512      	bpl.n	80111b6 <__swsetup_r+0x5a>
 8011190:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011192:	b141      	cbz	r1, 80111a6 <__swsetup_r+0x4a>
 8011194:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011198:	4299      	cmp	r1, r3
 801119a:	d002      	beq.n	80111a2 <__swsetup_r+0x46>
 801119c:	4628      	mov	r0, r5
 801119e:	f7ff fbdb 	bl	8010958 <_free_r>
 80111a2:	2300      	movs	r3, #0
 80111a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80111a6:	89a3      	ldrh	r3, [r4, #12]
 80111a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80111ac:	81a3      	strh	r3, [r4, #12]
 80111ae:	2300      	movs	r3, #0
 80111b0:	6063      	str	r3, [r4, #4]
 80111b2:	6923      	ldr	r3, [r4, #16]
 80111b4:	6023      	str	r3, [r4, #0]
 80111b6:	89a3      	ldrh	r3, [r4, #12]
 80111b8:	f043 0308 	orr.w	r3, r3, #8
 80111bc:	81a3      	strh	r3, [r4, #12]
 80111be:	6923      	ldr	r3, [r4, #16]
 80111c0:	b94b      	cbnz	r3, 80111d6 <__swsetup_r+0x7a>
 80111c2:	89a3      	ldrh	r3, [r4, #12]
 80111c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80111c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80111cc:	d003      	beq.n	80111d6 <__swsetup_r+0x7a>
 80111ce:	4621      	mov	r1, r4
 80111d0:	4628      	mov	r0, r5
 80111d2:	f000 f83f 	bl	8011254 <__smakebuf_r>
 80111d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111da:	f013 0201 	ands.w	r2, r3, #1
 80111de:	d00a      	beq.n	80111f6 <__swsetup_r+0x9a>
 80111e0:	2200      	movs	r2, #0
 80111e2:	60a2      	str	r2, [r4, #8]
 80111e4:	6962      	ldr	r2, [r4, #20]
 80111e6:	4252      	negs	r2, r2
 80111e8:	61a2      	str	r2, [r4, #24]
 80111ea:	6922      	ldr	r2, [r4, #16]
 80111ec:	b942      	cbnz	r2, 8011200 <__swsetup_r+0xa4>
 80111ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80111f2:	d1c5      	bne.n	8011180 <__swsetup_r+0x24>
 80111f4:	bd38      	pop	{r3, r4, r5, pc}
 80111f6:	0799      	lsls	r1, r3, #30
 80111f8:	bf58      	it	pl
 80111fa:	6962      	ldrpl	r2, [r4, #20]
 80111fc:	60a2      	str	r2, [r4, #8]
 80111fe:	e7f4      	b.n	80111ea <__swsetup_r+0x8e>
 8011200:	2000      	movs	r0, #0
 8011202:	e7f7      	b.n	80111f4 <__swsetup_r+0x98>
 8011204:	200000a4 	.word	0x200000a4

08011208 <__swhatbuf_r>:
 8011208:	b570      	push	{r4, r5, r6, lr}
 801120a:	460c      	mov	r4, r1
 801120c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011210:	2900      	cmp	r1, #0
 8011212:	b096      	sub	sp, #88	@ 0x58
 8011214:	4615      	mov	r5, r2
 8011216:	461e      	mov	r6, r3
 8011218:	da0d      	bge.n	8011236 <__swhatbuf_r+0x2e>
 801121a:	89a3      	ldrh	r3, [r4, #12]
 801121c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011220:	f04f 0100 	mov.w	r1, #0
 8011224:	bf14      	ite	ne
 8011226:	2340      	movne	r3, #64	@ 0x40
 8011228:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801122c:	2000      	movs	r0, #0
 801122e:	6031      	str	r1, [r6, #0]
 8011230:	602b      	str	r3, [r5, #0]
 8011232:	b016      	add	sp, #88	@ 0x58
 8011234:	bd70      	pop	{r4, r5, r6, pc}
 8011236:	466a      	mov	r2, sp
 8011238:	f000 f848 	bl	80112cc <_fstat_r>
 801123c:	2800      	cmp	r0, #0
 801123e:	dbec      	blt.n	801121a <__swhatbuf_r+0x12>
 8011240:	9901      	ldr	r1, [sp, #4]
 8011242:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011246:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801124a:	4259      	negs	r1, r3
 801124c:	4159      	adcs	r1, r3
 801124e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011252:	e7eb      	b.n	801122c <__swhatbuf_r+0x24>

08011254 <__smakebuf_r>:
 8011254:	898b      	ldrh	r3, [r1, #12]
 8011256:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011258:	079d      	lsls	r5, r3, #30
 801125a:	4606      	mov	r6, r0
 801125c:	460c      	mov	r4, r1
 801125e:	d507      	bpl.n	8011270 <__smakebuf_r+0x1c>
 8011260:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011264:	6023      	str	r3, [r4, #0]
 8011266:	6123      	str	r3, [r4, #16]
 8011268:	2301      	movs	r3, #1
 801126a:	6163      	str	r3, [r4, #20]
 801126c:	b003      	add	sp, #12
 801126e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011270:	ab01      	add	r3, sp, #4
 8011272:	466a      	mov	r2, sp
 8011274:	f7ff ffc8 	bl	8011208 <__swhatbuf_r>
 8011278:	9f00      	ldr	r7, [sp, #0]
 801127a:	4605      	mov	r5, r0
 801127c:	4639      	mov	r1, r7
 801127e:	4630      	mov	r0, r6
 8011280:	f7ff f87e 	bl	8010380 <_malloc_r>
 8011284:	b948      	cbnz	r0, 801129a <__smakebuf_r+0x46>
 8011286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801128a:	059a      	lsls	r2, r3, #22
 801128c:	d4ee      	bmi.n	801126c <__smakebuf_r+0x18>
 801128e:	f023 0303 	bic.w	r3, r3, #3
 8011292:	f043 0302 	orr.w	r3, r3, #2
 8011296:	81a3      	strh	r3, [r4, #12]
 8011298:	e7e2      	b.n	8011260 <__smakebuf_r+0xc>
 801129a:	89a3      	ldrh	r3, [r4, #12]
 801129c:	6020      	str	r0, [r4, #0]
 801129e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80112a2:	81a3      	strh	r3, [r4, #12]
 80112a4:	9b01      	ldr	r3, [sp, #4]
 80112a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80112aa:	b15b      	cbz	r3, 80112c4 <__smakebuf_r+0x70>
 80112ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80112b0:	4630      	mov	r0, r6
 80112b2:	f000 f81d 	bl	80112f0 <_isatty_r>
 80112b6:	b128      	cbz	r0, 80112c4 <__smakebuf_r+0x70>
 80112b8:	89a3      	ldrh	r3, [r4, #12]
 80112ba:	f023 0303 	bic.w	r3, r3, #3
 80112be:	f043 0301 	orr.w	r3, r3, #1
 80112c2:	81a3      	strh	r3, [r4, #12]
 80112c4:	89a3      	ldrh	r3, [r4, #12]
 80112c6:	431d      	orrs	r5, r3
 80112c8:	81a5      	strh	r5, [r4, #12]
 80112ca:	e7cf      	b.n	801126c <__smakebuf_r+0x18>

080112cc <_fstat_r>:
 80112cc:	b538      	push	{r3, r4, r5, lr}
 80112ce:	4d07      	ldr	r5, [pc, #28]	@ (80112ec <_fstat_r+0x20>)
 80112d0:	2300      	movs	r3, #0
 80112d2:	4604      	mov	r4, r0
 80112d4:	4608      	mov	r0, r1
 80112d6:	4611      	mov	r1, r2
 80112d8:	602b      	str	r3, [r5, #0]
 80112da:	f7f0 fe28 	bl	8001f2e <_fstat>
 80112de:	1c43      	adds	r3, r0, #1
 80112e0:	d102      	bne.n	80112e8 <_fstat_r+0x1c>
 80112e2:	682b      	ldr	r3, [r5, #0]
 80112e4:	b103      	cbz	r3, 80112e8 <_fstat_r+0x1c>
 80112e6:	6023      	str	r3, [r4, #0]
 80112e8:	bd38      	pop	{r3, r4, r5, pc}
 80112ea:	bf00      	nop
 80112ec:	20012658 	.word	0x20012658

080112f0 <_isatty_r>:
 80112f0:	b538      	push	{r3, r4, r5, lr}
 80112f2:	4d06      	ldr	r5, [pc, #24]	@ (801130c <_isatty_r+0x1c>)
 80112f4:	2300      	movs	r3, #0
 80112f6:	4604      	mov	r4, r0
 80112f8:	4608      	mov	r0, r1
 80112fa:	602b      	str	r3, [r5, #0]
 80112fc:	f7f0 fe1c 	bl	8001f38 <_isatty>
 8011300:	1c43      	adds	r3, r0, #1
 8011302:	d102      	bne.n	801130a <_isatty_r+0x1a>
 8011304:	682b      	ldr	r3, [r5, #0]
 8011306:	b103      	cbz	r3, 801130a <_isatty_r+0x1a>
 8011308:	6023      	str	r3, [r4, #0]
 801130a:	bd38      	pop	{r3, r4, r5, pc}
 801130c:	20012658 	.word	0x20012658

08011310 <_init>:
 8011310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011312:	bf00      	nop
 8011314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011316:	bc08      	pop	{r3}
 8011318:	469e      	mov	lr, r3
 801131a:	4770      	bx	lr

0801131c <_fini>:
 801131c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801131e:	bf00      	nop
 8011320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011322:	bc08      	pop	{r3}
 8011324:	469e      	mov	lr, r3
 8011326:	4770      	bx	lr
